var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../backend/node_modules/bcryptjs/dist/bcrypt.js
var require_bcrypt = __commonJS({
  "../backend/node_modules/bcryptjs/dist/bcrypt.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define["amd"])
        define([], factory);
      else if (typeof require === "function" && typeof module2 === "object" && module2 && module2["exports"])
        module2["exports"] = factory();
      else
        (global2["dcodeIO"] = global2["dcodeIO"] || {})["bcrypt"] = factory();
    })(exports2, function() {
      "use strict";
      var bcrypt2 = {};
      var randomFallback = null;
      function random(len) {
        if (typeof module2 !== "undefined" && module2 && module2["exports"])
          try {
            return require("crypto")["randomBytes"](len);
          } catch (e2) {
          }
        try {
          var a;
          (self["crypto"] || self["msCrypto"])["getRandomValues"](a = new Uint32Array(len));
          return Array.prototype.slice.call(a);
        } catch (e2) {
        }
        if (!randomFallback)
          throw Error("Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative");
        return randomFallback(len);
      }
      var randomAvailable = false;
      try {
        random(1);
        randomAvailable = true;
      } catch (e2) {
      }
      randomFallback = null;
      bcrypt2.setRandomFallback = function(random2) {
        randomFallback = random2;
      };
      bcrypt2.genSaltSync = function(rounds, seed_length) {
        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;
        if (typeof rounds !== "number")
          throw Error("Illegal arguments: " + typeof rounds + ", " + typeof seed_length);
        if (rounds < 4)
          rounds = 4;
        else if (rounds > 31)
          rounds = 31;
        var salt = [];
        salt.push("$2a$");
        if (rounds < 10)
          salt.push("0");
        salt.push(rounds.toString());
        salt.push("$");
        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN));
        return salt.join("");
      };
      bcrypt2.genSalt = function(rounds, seed_length, callback) {
        if (typeof seed_length === "function")
          callback = seed_length, seed_length = void 0;
        if (typeof rounds === "function")
          callback = rounds, rounds = void 0;
        if (typeof rounds === "undefined")
          rounds = GENSALT_DEFAULT_LOG2_ROUNDS;
        else if (typeof rounds !== "number")
          throw Error("illegal arguments: " + typeof rounds);
        function _async(callback2) {
          nextTick(function() {
            try {
              callback2(null, bcrypt2.genSaltSync(rounds));
            } catch (err) {
              callback2(err);
            }
          });
        }
        if (callback) {
          if (typeof callback !== "function")
            throw Error("Illegal callback: " + typeof callback);
          _async(callback);
        } else
          return new Promise(function(resolve, reject) {
            _async(function(err, res) {
              if (err) {
                reject(err);
                return;
              }
              resolve(res);
            });
          });
      };
      bcrypt2.hashSync = function(s2, salt) {
        if (typeof salt === "undefined")
          salt = GENSALT_DEFAULT_LOG2_ROUNDS;
        if (typeof salt === "number")
          salt = bcrypt2.genSaltSync(salt);
        if (typeof s2 !== "string" || typeof salt !== "string")
          throw Error("Illegal arguments: " + typeof s2 + ", " + typeof salt);
        return _hash(s2, salt);
      };
      bcrypt2.hash = function(s2, salt, callback, progressCallback) {
        function _async(callback2) {
          if (typeof s2 === "string" && typeof salt === "number")
            bcrypt2.genSalt(salt, function(err, salt2) {
              _hash(s2, salt2, callback2, progressCallback);
            });
          else if (typeof s2 === "string" && typeof salt === "string")
            _hash(s2, salt, callback2, progressCallback);
          else
            nextTick(callback2.bind(this, Error("Illegal arguments: " + typeof s2 + ", " + typeof salt)));
        }
        if (callback) {
          if (typeof callback !== "function")
            throw Error("Illegal callback: " + typeof callback);
          _async(callback);
        } else
          return new Promise(function(resolve, reject) {
            _async(function(err, res) {
              if (err) {
                reject(err);
                return;
              }
              resolve(res);
            });
          });
      };
      function safeStringCompare(known, unknown) {
        var right = 0, wrong = 0;
        for (var i2 = 0, k = known.length; i2 < k; ++i2) {
          if (known.charCodeAt(i2) === unknown.charCodeAt(i2))
            ++right;
          else
            ++wrong;
        }
        if (right < 0)
          return false;
        return wrong === 0;
      }
      bcrypt2.compareSync = function(s2, hash) {
        if (typeof s2 !== "string" || typeof hash !== "string")
          throw Error("Illegal arguments: " + typeof s2 + ", " + typeof hash);
        if (hash.length !== 60)
          return false;
        return safeStringCompare(bcrypt2.hashSync(s2, hash.substr(0, hash.length - 31)), hash);
      };
      bcrypt2.compare = function(s2, hash, callback, progressCallback) {
        function _async(callback2) {
          if (typeof s2 !== "string" || typeof hash !== "string") {
            nextTick(callback2.bind(this, Error("Illegal arguments: " + typeof s2 + ", " + typeof hash)));
            return;
          }
          if (hash.length !== 60) {
            nextTick(callback2.bind(this, null, false));
            return;
          }
          bcrypt2.hash(s2, hash.substr(0, 29), function(err, comp) {
            if (err)
              callback2(err);
            else
              callback2(null, safeStringCompare(comp, hash));
          }, progressCallback);
        }
        if (callback) {
          if (typeof callback !== "function")
            throw Error("Illegal callback: " + typeof callback);
          _async(callback);
        } else
          return new Promise(function(resolve, reject) {
            _async(function(err, res) {
              if (err) {
                reject(err);
                return;
              }
              resolve(res);
            });
          });
      };
      bcrypt2.getRounds = function(hash) {
        if (typeof hash !== "string")
          throw Error("Illegal arguments: " + typeof hash);
        return parseInt(hash.split("$")[2], 10);
      };
      bcrypt2.getSalt = function(hash) {
        if (typeof hash !== "string")
          throw Error("Illegal arguments: " + typeof hash);
        if (hash.length !== 60)
          throw Error("Illegal hash length: " + hash.length + " != 60");
        return hash.substring(0, 29);
      };
      var nextTick = typeof process !== "undefined" && process && typeof process.nextTick === "function" ? typeof setImmediate === "function" ? setImmediate : process.nextTick : setTimeout;
      function stringToBytes(str) {
        var out = [], i2 = 0;
        utfx.encodeUTF16toUTF8(function() {
          if (i2 >= str.length) return null;
          return str.charCodeAt(i2++);
        }, function(b) {
          out.push(b);
        });
        return out;
      }
      var BASE64_CODE = "./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split("");
      var BASE64_INDEX = [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        0,
        1,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        -1,
        -1,
        -1,
        -1,
        -1
      ];
      var stringFromCharCode = String.fromCharCode;
      function base64_encode(b, len) {
        var off = 0, rs = [], c1, c2;
        if (len <= 0 || len > b.length)
          throw Error("Illegal len: " + len);
        while (off < len) {
          c1 = b[off++] & 255;
          rs.push(BASE64_CODE[c1 >> 2 & 63]);
          c1 = (c1 & 3) << 4;
          if (off >= len) {
            rs.push(BASE64_CODE[c1 & 63]);
            break;
          }
          c2 = b[off++] & 255;
          c1 |= c2 >> 4 & 15;
          rs.push(BASE64_CODE[c1 & 63]);
          c1 = (c2 & 15) << 2;
          if (off >= len) {
            rs.push(BASE64_CODE[c1 & 63]);
            break;
          }
          c2 = b[off++] & 255;
          c1 |= c2 >> 6 & 3;
          rs.push(BASE64_CODE[c1 & 63]);
          rs.push(BASE64_CODE[c2 & 63]);
        }
        return rs.join("");
      }
      function base64_decode(s2, len) {
        var off = 0, slen = s2.length, olen = 0, rs = [], c1, c2, c3, c4, o, code;
        if (len <= 0)
          throw Error("Illegal len: " + len);
        while (off < slen - 1 && olen < len) {
          code = s2.charCodeAt(off++);
          c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          code = s2.charCodeAt(off++);
          c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          if (c1 == -1 || c2 == -1)
            break;
          o = c1 << 2 >>> 0;
          o |= (c2 & 48) >> 4;
          rs.push(stringFromCharCode(o));
          if (++olen >= len || off >= slen)
            break;
          code = s2.charCodeAt(off++);
          c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          if (c3 == -1)
            break;
          o = (c2 & 15) << 4 >>> 0;
          o |= (c3 & 60) >> 2;
          rs.push(stringFromCharCode(o));
          if (++olen >= len || off >= slen)
            break;
          code = s2.charCodeAt(off++);
          c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          o = (c3 & 3) << 6 >>> 0;
          o |= c4;
          rs.push(stringFromCharCode(o));
          ++olen;
        }
        var res = [];
        for (off = 0; off < olen; off++)
          res.push(rs[off].charCodeAt(0));
        return res;
      }
      var utfx = (function() {
        "use strict";
        var utfx2 = {};
        utfx2.MAX_CODEPOINT = 1114111;
        utfx2.encodeUTF8 = function(src, dst) {
          var cp = null;
          if (typeof src === "number")
            cp = src, src = function() {
              return null;
            };
          while (cp !== null || (cp = src()) !== null) {
            if (cp < 128)
              dst(cp & 127);
            else if (cp < 2048)
              dst(cp >> 6 & 31 | 192), dst(cp & 63 | 128);
            else if (cp < 65536)
              dst(cp >> 12 & 15 | 224), dst(cp >> 6 & 63 | 128), dst(cp & 63 | 128);
            else
              dst(cp >> 18 & 7 | 240), dst(cp >> 12 & 63 | 128), dst(cp >> 6 & 63 | 128), dst(cp & 63 | 128);
            cp = null;
          }
        };
        utfx2.decodeUTF8 = function(src, dst) {
          var a, b, c, d, fail = function(b2) {
            b2 = b2.slice(0, b2.indexOf(null));
            var err = Error(b2.toString());
            err.name = "TruncatedError";
            err["bytes"] = b2;
            throw err;
          };
          while ((a = src()) !== null) {
            if ((a & 128) === 0)
              dst(a);
            else if ((a & 224) === 192)
              (b = src()) === null && fail([a, b]), dst((a & 31) << 6 | b & 63);
            else if ((a & 240) === 224)
              ((b = src()) === null || (c = src()) === null) && fail([a, b, c]), dst((a & 15) << 12 | (b & 63) << 6 | c & 63);
            else if ((a & 248) === 240)
              ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([a, b, c, d]), dst((a & 7) << 18 | (b & 63) << 12 | (c & 63) << 6 | d & 63);
            else throw RangeError("Illegal starting byte: " + a);
          }
        };
        utfx2.UTF16toUTF8 = function(src, dst) {
          var c1, c2 = null;
          while (true) {
            if ((c1 = c2 !== null ? c2 : src()) === null)
              break;
            if (c1 >= 55296 && c1 <= 57343) {
              if ((c2 = src()) !== null) {
                if (c2 >= 56320 && c2 <= 57343) {
                  dst((c1 - 55296) * 1024 + c2 - 56320 + 65536);
                  c2 = null;
                  continue;
                }
              }
            }
            dst(c1);
          }
          if (c2 !== null) dst(c2);
        };
        utfx2.UTF8toUTF16 = function(src, dst) {
          var cp = null;
          if (typeof src === "number")
            cp = src, src = function() {
              return null;
            };
          while (cp !== null || (cp = src()) !== null) {
            if (cp <= 65535)
              dst(cp);
            else
              cp -= 65536, dst((cp >> 10) + 55296), dst(cp % 1024 + 56320);
            cp = null;
          }
        };
        utfx2.encodeUTF16toUTF8 = function(src, dst) {
          utfx2.UTF16toUTF8(src, function(cp) {
            utfx2.encodeUTF8(cp, dst);
          });
        };
        utfx2.decodeUTF8toUTF16 = function(src, dst) {
          utfx2.decodeUTF8(src, function(cp) {
            utfx2.UTF8toUTF16(cp, dst);
          });
        };
        utfx2.calculateCodePoint = function(cp) {
          return cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
        };
        utfx2.calculateUTF8 = function(src) {
          var cp, l = 0;
          while ((cp = src()) !== null)
            l += utfx2.calculateCodePoint(cp);
          return l;
        };
        utfx2.calculateUTF16asUTF8 = function(src) {
          var n = 0, l = 0;
          utfx2.UTF16toUTF8(src, function(cp) {
            ++n;
            l += utfx2.calculateCodePoint(cp);
          });
          return [n, l];
        };
        return utfx2;
      })();
      Date.now = Date.now || function() {
        return +/* @__PURE__ */ new Date();
      };
      var BCRYPT_SALT_LEN = 16;
      var GENSALT_DEFAULT_LOG2_ROUNDS = 10;
      var BLOWFISH_NUM_ROUNDS = 16;
      var MAX_EXECUTION_TIME = 100;
      var P_ORIG = [
        608135816,
        2242054355,
        320440878,
        57701188,
        2752067618,
        698298832,
        137296536,
        3964562569,
        1160258022,
        953160567,
        3193202383,
        887688300,
        3232508343,
        3380367581,
        1065670069,
        3041331479,
        2450970073,
        2306472731
      ];
      var S_ORIG = [
        3509652390,
        2564797868,
        805139163,
        3491422135,
        3101798381,
        1780907670,
        3128725573,
        4046225305,
        614570311,
        3012652279,
        134345442,
        2240740374,
        1667834072,
        1901547113,
        2757295779,
        4103290238,
        227898511,
        1921955416,
        1904987480,
        2182433518,
        2069144605,
        3260701109,
        2620446009,
        720527379,
        3318853667,
        677414384,
        3393288472,
        3101374703,
        2390351024,
        1614419982,
        1822297739,
        2954791486,
        3608508353,
        3174124327,
        2024746970,
        1432378464,
        3864339955,
        2857741204,
        1464375394,
        1676153920,
        1439316330,
        715854006,
        3033291828,
        289532110,
        2706671279,
        2087905683,
        3018724369,
        1668267050,
        732546397,
        1947742710,
        3462151702,
        2609353502,
        2950085171,
        1814351708,
        2050118529,
        680887927,
        999245976,
        1800124847,
        3300911131,
        1713906067,
        1641548236,
        4213287313,
        1216130144,
        1575780402,
        4018429277,
        3917837745,
        3693486850,
        3949271944,
        596196993,
        3549867205,
        258830323,
        2213823033,
        772490370,
        2760122372,
        1774776394,
        2652871518,
        566650946,
        4142492826,
        1728879713,
        2882767088,
        1783734482,
        3629395816,
        2517608232,
        2874225571,
        1861159788,
        326777828,
        3124490320,
        2130389656,
        2716951837,
        967770486,
        1724537150,
        2185432712,
        2364442137,
        1164943284,
        2105845187,
        998989502,
        3765401048,
        2244026483,
        1075463327,
        1455516326,
        1322494562,
        910128902,
        469688178,
        1117454909,
        936433444,
        3490320968,
        3675253459,
        1240580251,
        122909385,
        2157517691,
        634681816,
        4142456567,
        3825094682,
        3061402683,
        2540495037,
        79693498,
        3249098678,
        1084186820,
        1583128258,
        426386531,
        1761308591,
        1047286709,
        322548459,
        995290223,
        1845252383,
        2603652396,
        3431023940,
        2942221577,
        3202600964,
        3727903485,
        1712269319,
        422464435,
        3234572375,
        1170764815,
        3523960633,
        3117677531,
        1434042557,
        442511882,
        3600875718,
        1076654713,
        1738483198,
        4213154764,
        2393238008,
        3677496056,
        1014306527,
        4251020053,
        793779912,
        2902807211,
        842905082,
        4246964064,
        1395751752,
        1040244610,
        2656851899,
        3396308128,
        445077038,
        3742853595,
        3577915638,
        679411651,
        2892444358,
        2354009459,
        1767581616,
        3150600392,
        3791627101,
        3102740896,
        284835224,
        4246832056,
        1258075500,
        768725851,
        2589189241,
        3069724005,
        3532540348,
        1274779536,
        3789419226,
        2764799539,
        1660621633,
        3471099624,
        4011903706,
        913787905,
        3497959166,
        737222580,
        2514213453,
        2928710040,
        3937242737,
        1804850592,
        3499020752,
        2949064160,
        2386320175,
        2390070455,
        2415321851,
        4061277028,
        2290661394,
        2416832540,
        1336762016,
        1754252060,
        3520065937,
        3014181293,
        791618072,
        3188594551,
        3933548030,
        2332172193,
        3852520463,
        3043980520,
        413987798,
        3465142937,
        3030929376,
        4245938359,
        2093235073,
        3534596313,
        375366246,
        2157278981,
        2479649556,
        555357303,
        3870105701,
        2008414854,
        3344188149,
        4221384143,
        3956125452,
        2067696032,
        3594591187,
        2921233993,
        2428461,
        544322398,
        577241275,
        1471733935,
        610547355,
        4027169054,
        1432588573,
        1507829418,
        2025931657,
        3646575487,
        545086370,
        48609733,
        2200306550,
        1653985193,
        298326376,
        1316178497,
        3007786442,
        2064951626,
        458293330,
        2589141269,
        3591329599,
        3164325604,
        727753846,
        2179363840,
        146436021,
        1461446943,
        4069977195,
        705550613,
        3059967265,
        3887724982,
        4281599278,
        3313849956,
        1404054877,
        2845806497,
        146425753,
        1854211946,
        1266315497,
        3048417604,
        3681880366,
        3289982499,
        290971e4,
        1235738493,
        2632868024,
        2414719590,
        3970600049,
        1771706367,
        1449415276,
        3266420449,
        422970021,
        1963543593,
        2690192192,
        3826793022,
        1062508698,
        1531092325,
        1804592342,
        2583117782,
        2714934279,
        4024971509,
        1294809318,
        4028980673,
        1289560198,
        2221992742,
        1669523910,
        35572830,
        157838143,
        1052438473,
        1016535060,
        1802137761,
        1753167236,
        1386275462,
        3080475397,
        2857371447,
        1040679964,
        2145300060,
        2390574316,
        1461121720,
        2956646967,
        4031777805,
        4028374788,
        33600511,
        2920084762,
        1018524850,
        629373528,
        3691585981,
        3515945977,
        2091462646,
        2486323059,
        586499841,
        988145025,
        935516892,
        3367335476,
        2599673255,
        2839830854,
        265290510,
        3972581182,
        2759138881,
        3795373465,
        1005194799,
        847297441,
        406762289,
        1314163512,
        1332590856,
        1866599683,
        4127851711,
        750260880,
        613907577,
        1450815602,
        3165620655,
        3734664991,
        3650291728,
        3012275730,
        3704569646,
        1427272223,
        778793252,
        1343938022,
        2676280711,
        2052605720,
        1946737175,
        3164576444,
        3914038668,
        3967478842,
        3682934266,
        1661551462,
        3294938066,
        4011595847,
        840292616,
        3712170807,
        616741398,
        312560963,
        711312465,
        1351876610,
        322626781,
        1910503582,
        271666773,
        2175563734,
        1594956187,
        70604529,
        3617834859,
        1007753275,
        1495573769,
        4069517037,
        2549218298,
        2663038764,
        504708206,
        2263041392,
        3941167025,
        2249088522,
        1514023603,
        1998579484,
        1312622330,
        694541497,
        2582060303,
        2151582166,
        1382467621,
        776784248,
        2618340202,
        3323268794,
        2497899128,
        2784771155,
        503983604,
        4076293799,
        907881277,
        423175695,
        432175456,
        1378068232,
        4145222326,
        3954048622,
        3938656102,
        3820766613,
        2793130115,
        2977904593,
        26017576,
        3274890735,
        3194772133,
        1700274565,
        1756076034,
        4006520079,
        3677328699,
        720338349,
        1533947780,
        354530856,
        688349552,
        3973924725,
        1637815568,
        332179504,
        3949051286,
        53804574,
        2852348879,
        3044236432,
        1282449977,
        3583942155,
        3416972820,
        4006381244,
        1617046695,
        2628476075,
        3002303598,
        1686838959,
        431878346,
        2686675385,
        1700445008,
        1080580658,
        1009431731,
        832498133,
        3223435511,
        2605976345,
        2271191193,
        2516031870,
        1648197032,
        4164389018,
        2548247927,
        300782431,
        375919233,
        238389289,
        3353747414,
        2531188641,
        2019080857,
        1475708069,
        455242339,
        2609103871,
        448939670,
        3451063019,
        1395535956,
        2413381860,
        1841049896,
        1491858159,
        885456874,
        4264095073,
        4001119347,
        1565136089,
        3898914787,
        1108368660,
        540939232,
        1173283510,
        2745871338,
        3681308437,
        4207628240,
        3343053890,
        4016749493,
        1699691293,
        1103962373,
        3625875870,
        2256883143,
        3830138730,
        1031889488,
        3479347698,
        1535977030,
        4236805024,
        3251091107,
        2132092099,
        1774941330,
        1199868427,
        1452454533,
        157007616,
        2904115357,
        342012276,
        595725824,
        1480756522,
        206960106,
        497939518,
        591360097,
        863170706,
        2375253569,
        3596610801,
        1814182875,
        2094937945,
        3421402208,
        1082520231,
        3463918190,
        2785509508,
        435703966,
        3908032597,
        1641649973,
        2842273706,
        3305899714,
        1510255612,
        2148256476,
        2655287854,
        3276092548,
        4258621189,
        236887753,
        3681803219,
        274041037,
        1734335097,
        3815195456,
        3317970021,
        1899903192,
        1026095262,
        4050517792,
        356393447,
        2410691914,
        3873677099,
        3682840055,
        3913112168,
        2491498743,
        4132185628,
        2489919796,
        1091903735,
        1979897079,
        3170134830,
        3567386728,
        3557303409,
        857797738,
        1136121015,
        1342202287,
        507115054,
        2535736646,
        337727348,
        3213592640,
        1301675037,
        2528481711,
        1895095763,
        1721773893,
        3216771564,
        62756741,
        2142006736,
        835421444,
        2531993523,
        1442658625,
        3659876326,
        2882144922,
        676362277,
        1392781812,
        170690266,
        3921047035,
        1759253602,
        3611846912,
        1745797284,
        664899054,
        1329594018,
        3901205900,
        3045908486,
        2062866102,
        2865634940,
        3543621612,
        3464012697,
        1080764994,
        553557557,
        3656615353,
        3996768171,
        991055499,
        499776247,
        1265440854,
        648242737,
        3940784050,
        980351604,
        3713745714,
        1749149687,
        3396870395,
        4211799374,
        3640570775,
        1161844396,
        3125318951,
        1431517754,
        545492359,
        4268468663,
        3499529547,
        1437099964,
        2702547544,
        3433638243,
        2581715763,
        2787789398,
        1060185593,
        1593081372,
        2418618748,
        4260947970,
        69676912,
        2159744348,
        86519011,
        2512459080,
        3838209314,
        1220612927,
        3339683548,
        133810670,
        1090789135,
        1078426020,
        1569222167,
        845107691,
        3583754449,
        4072456591,
        1091646820,
        628848692,
        1613405280,
        3757631651,
        526609435,
        236106946,
        48312990,
        2942717905,
        3402727701,
        1797494240,
        859738849,
        992217954,
        4005476642,
        2243076622,
        3870952857,
        3732016268,
        765654824,
        3490871365,
        2511836413,
        1685915746,
        3888969200,
        1414112111,
        2273134842,
        3281911079,
        4080962846,
        172450625,
        2569994100,
        980381355,
        4109958455,
        2819808352,
        2716589560,
        2568741196,
        3681446669,
        3329971472,
        1835478071,
        660984891,
        3704678404,
        4045999559,
        3422617507,
        3040415634,
        1762651403,
        1719377915,
        3470491036,
        2693910283,
        3642056355,
        3138596744,
        1364962596,
        2073328063,
        1983633131,
        926494387,
        3423689081,
        2150032023,
        4096667949,
        1749200295,
        3328846651,
        309677260,
        2016342300,
        1779581495,
        3079819751,
        111262694,
        1274766160,
        443224088,
        298511866,
        1025883608,
        3806446537,
        1145181785,
        168956806,
        3641502830,
        3584813610,
        1689216846,
        3666258015,
        3200248200,
        1692713982,
        2646376535,
        4042768518,
        1618508792,
        1610833997,
        3523052358,
        4130873264,
        2001055236,
        3610705100,
        2202168115,
        4028541809,
        2961195399,
        1006657119,
        2006996926,
        3186142756,
        1430667929,
        3210227297,
        1314452623,
        4074634658,
        4101304120,
        2273951170,
        1399257539,
        3367210612,
        3027628629,
        1190975929,
        2062231137,
        2333990788,
        2221543033,
        2438960610,
        1181637006,
        548689776,
        2362791313,
        3372408396,
        3104550113,
        3145860560,
        296247880,
        1970579870,
        3078560182,
        3769228297,
        1714227617,
        3291629107,
        3898220290,
        166772364,
        1251581989,
        493813264,
        448347421,
        195405023,
        2709975567,
        677966185,
        3703036547,
        1463355134,
        2715995803,
        1338867538,
        1343315457,
        2802222074,
        2684532164,
        233230375,
        2599980071,
        2000651841,
        3277868038,
        1638401717,
        4028070440,
        3237316320,
        6314154,
        819756386,
        300326615,
        590932579,
        1405279636,
        3267499572,
        3150704214,
        2428286686,
        3959192993,
        3461946742,
        1862657033,
        1266418056,
        963775037,
        2089974820,
        2263052895,
        1917689273,
        448879540,
        3550394620,
        3981727096,
        150775221,
        3627908307,
        1303187396,
        508620638,
        2975983352,
        2726630617,
        1817252668,
        1876281319,
        1457606340,
        908771278,
        3720792119,
        3617206836,
        2455994898,
        1729034894,
        1080033504,
        976866871,
        3556439503,
        2881648439,
        1522871579,
        1555064734,
        1336096578,
        3548522304,
        2579274686,
        3574697629,
        3205460757,
        3593280638,
        3338716283,
        3079412587,
        564236357,
        2993598910,
        1781952180,
        1464380207,
        3163844217,
        3332601554,
        1699332808,
        1393555694,
        1183702653,
        3581086237,
        1288719814,
        691649499,
        2847557200,
        2895455976,
        3193889540,
        2717570544,
        1781354906,
        1676643554,
        2592534050,
        3230253752,
        1126444790,
        2770207658,
        2633158820,
        2210423226,
        2615765581,
        2414155088,
        3127139286,
        673620729,
        2805611233,
        1269405062,
        4015350505,
        3341807571,
        4149409754,
        1057255273,
        2012875353,
        2162469141,
        2276492801,
        2601117357,
        993977747,
        3918593370,
        2654263191,
        753973209,
        36408145,
        2530585658,
        25011837,
        3520020182,
        2088578344,
        530523599,
        2918365339,
        1524020338,
        1518925132,
        3760827505,
        3759777254,
        1202760957,
        3985898139,
        3906192525,
        674977740,
        4174734889,
        2031300136,
        2019492241,
        3983892565,
        4153806404,
        3822280332,
        352677332,
        2297720250,
        60907813,
        90501309,
        3286998549,
        1016092578,
        2535922412,
        2839152426,
        457141659,
        509813237,
        4120667899,
        652014361,
        1966332200,
        2975202805,
        55981186,
        2327461051,
        676427537,
        3255491064,
        2882294119,
        3433927263,
        1307055953,
        942726286,
        933058658,
        2468411793,
        3933900994,
        4215176142,
        1361170020,
        2001714738,
        2830558078,
        3274259782,
        1222529897,
        1679025792,
        2729314320,
        3714953764,
        1770335741,
        151462246,
        3013232138,
        1682292957,
        1483529935,
        471910574,
        1539241949,
        458788160,
        3436315007,
        1807016891,
        3718408830,
        978976581,
        1043663428,
        3165965781,
        1927990952,
        4200891579,
        2372276910,
        3208408903,
        3533431907,
        1412390302,
        2931980059,
        4132332400,
        1947078029,
        3881505623,
        4168226417,
        2941484381,
        1077988104,
        1320477388,
        886195818,
        18198404,
        3786409e3,
        2509781533,
        112762804,
        3463356488,
        1866414978,
        891333506,
        18488651,
        661792760,
        1628790961,
        3885187036,
        3141171499,
        876946877,
        2693282273,
        1372485963,
        791857591,
        2686433993,
        3759982718,
        3167212022,
        3472953795,
        2716379847,
        445679433,
        3561995674,
        3504004811,
        3574258232,
        54117162,
        3331405415,
        2381918588,
        3769707343,
        4154350007,
        1140177722,
        4074052095,
        668550556,
        3214352940,
        367459370,
        261225585,
        2610173221,
        4209349473,
        3468074219,
        3265815641,
        314222801,
        3066103646,
        3808782860,
        282218597,
        3406013506,
        3773591054,
        379116347,
        1285071038,
        846784868,
        2669647154,
        3771962079,
        3550491691,
        2305946142,
        453669953,
        1268987020,
        3317592352,
        3279303384,
        3744833421,
        2610507566,
        3859509063,
        266596637,
        3847019092,
        517658769,
        3462560207,
        3443424879,
        370717030,
        4247526661,
        2224018117,
        4143653529,
        4112773975,
        2788324899,
        2477274417,
        1456262402,
        2901442914,
        1517677493,
        1846949527,
        2295493580,
        3734397586,
        2176403920,
        1280348187,
        1908823572,
        3871786941,
        846861322,
        1172426758,
        3287448474,
        3383383037,
        1655181056,
        3139813346,
        901632758,
        1897031941,
        2986607138,
        3066810236,
        3447102507,
        1393639104,
        373351379,
        950779232,
        625454576,
        3124240540,
        4148612726,
        2007998917,
        544563296,
        2244738638,
        2330496472,
        2058025392,
        1291430526,
        424198748,
        50039436,
        29584100,
        3605783033,
        2429876329,
        2791104160,
        1057563949,
        3255363231,
        3075367218,
        3463963227,
        1469046755,
        985887462
      ];
      var C_ORIG = [
        1332899944,
        1700884034,
        1701343084,
        1684370003,
        1668446532,
        1869963892
      ];
      function _encipher(lr, off, P, S2) {
        var n, l = lr[off], r2 = lr[off + 1];
        l ^= P[0];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[1];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[2];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[3];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[4];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[5];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[6];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[7];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[8];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[9];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[10];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[11];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[12];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[13];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[14];
        n = S2[l >>> 24];
        n += S2[256 | l >> 16 & 255];
        n ^= S2[512 | l >> 8 & 255];
        n += S2[768 | l & 255];
        r2 ^= n ^ P[15];
        n = S2[r2 >>> 24];
        n += S2[256 | r2 >> 16 & 255];
        n ^= S2[512 | r2 >> 8 & 255];
        n += S2[768 | r2 & 255];
        l ^= n ^ P[16];
        lr[off] = r2 ^ P[BLOWFISH_NUM_ROUNDS + 1];
        lr[off + 1] = l;
        return lr;
      }
      function _streamtoword(data, offp) {
        for (var i2 = 0, word = 0; i2 < 4; ++i2)
          word = word << 8 | data[offp] & 255, offp = (offp + 1) % data.length;
        return { key: word, offp };
      }
      function _key(key, P, S2) {
        var offset = 0, lr = [0, 0], plen = P.length, slen = S2.length, sw;
        for (var i2 = 0; i2 < plen; i2++)
          sw = _streamtoword(key, offset), offset = sw.offp, P[i2] = P[i2] ^ sw.key;
        for (i2 = 0; i2 < plen; i2 += 2)
          lr = _encipher(lr, 0, P, S2), P[i2] = lr[0], P[i2 + 1] = lr[1];
        for (i2 = 0; i2 < slen; i2 += 2)
          lr = _encipher(lr, 0, P, S2), S2[i2] = lr[0], S2[i2 + 1] = lr[1];
      }
      function _ekskey(data, key, P, S2) {
        var offp = 0, lr = [0, 0], plen = P.length, slen = S2.length, sw;
        for (var i2 = 0; i2 < plen; i2++)
          sw = _streamtoword(key, offp), offp = sw.offp, P[i2] = P[i2] ^ sw.key;
        offp = 0;
        for (i2 = 0; i2 < plen; i2 += 2)
          sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S2), P[i2] = lr[0], P[i2 + 1] = lr[1];
        for (i2 = 0; i2 < slen; i2 += 2)
          sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S2), S2[i2] = lr[0], S2[i2 + 1] = lr[1];
      }
      function _crypt(b, salt, rounds, callback, progressCallback) {
        var cdata = C_ORIG.slice(), clen = cdata.length, err;
        if (rounds < 4 || rounds > 31) {
          err = Error("Illegal number of rounds (4-31): " + rounds);
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        if (salt.length !== BCRYPT_SALT_LEN) {
          err = Error("Illegal salt length: " + salt.length + " != " + BCRYPT_SALT_LEN);
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        rounds = 1 << rounds >>> 0;
        var P, S2, i2 = 0, j;
        if (Int32Array) {
          P = new Int32Array(P_ORIG);
          S2 = new Int32Array(S_ORIG);
        } else {
          P = P_ORIG.slice();
          S2 = S_ORIG.slice();
        }
        _ekskey(salt, b, P, S2);
        function next() {
          if (progressCallback)
            progressCallback(i2 / rounds);
          if (i2 < rounds) {
            var start = Date.now();
            for (; i2 < rounds; ) {
              i2 = i2 + 1;
              _key(b, P, S2);
              _key(salt, P, S2);
              if (Date.now() - start > MAX_EXECUTION_TIME)
                break;
            }
          } else {
            for (i2 = 0; i2 < 64; i2++)
              for (j = 0; j < clen >> 1; j++)
                _encipher(cdata, j << 1, P, S2);
            var ret = [];
            for (i2 = 0; i2 < clen; i2++)
              ret.push((cdata[i2] >> 24 & 255) >>> 0), ret.push((cdata[i2] >> 16 & 255) >>> 0), ret.push((cdata[i2] >> 8 & 255) >>> 0), ret.push((cdata[i2] & 255) >>> 0);
            if (callback) {
              callback(null, ret);
              return;
            } else
              return ret;
          }
          if (callback)
            nextTick(next);
        }
        if (typeof callback !== "undefined") {
          next();
        } else {
          var res;
          while (true)
            if (typeof (res = next()) !== "undefined")
              return res || [];
        }
      }
      function _hash(s2, salt, callback, progressCallback) {
        var err;
        if (typeof s2 !== "string" || typeof salt !== "string") {
          err = Error("Invalid string / salt: Not a string");
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        var minor, offset;
        if (salt.charAt(0) !== "$" || salt.charAt(1) !== "2") {
          err = Error("Invalid salt version: " + salt.substring(0, 2));
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        if (salt.charAt(2) === "$")
          minor = String.fromCharCode(0), offset = 3;
        else {
          minor = salt.charAt(2);
          if (minor !== "a" && minor !== "b" && minor !== "y" || salt.charAt(3) !== "$") {
            err = Error("Invalid salt revision: " + salt.substring(2, 4));
            if (callback) {
              nextTick(callback.bind(this, err));
              return;
            } else
              throw err;
          }
          offset = 4;
        }
        if (salt.charAt(offset + 2) > "$") {
          err = Error("Missing salt rounds");
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10, r2 = parseInt(salt.substring(offset + 1, offset + 2), 10), rounds = r1 + r2, real_salt = salt.substring(offset + 3, offset + 25);
        s2 += minor >= "a" ? "\0" : "";
        var passwordb = stringToBytes(s2), saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);
        function finish(bytes) {
          var res = [];
          res.push("$2");
          if (minor >= "a")
            res.push(minor);
          res.push("$");
          if (rounds < 10)
            res.push("0");
          res.push(rounds.toString());
          res.push("$");
          res.push(base64_encode(saltb, saltb.length));
          res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));
          return res.join("");
        }
        if (typeof callback == "undefined")
          return finish(_crypt(passwordb, saltb, rounds));
        else {
          _crypt(passwordb, saltb, rounds, function(err2, bytes) {
            if (err2)
              callback(err2, null);
            else
              callback(null, finish(bytes));
          }, progressCallback);
        }
      }
      bcrypt2.encodeBase64 = base64_encode;
      bcrypt2.decodeBase64 = base64_decode;
      return bcrypt2;
    });
  }
});

// ../backend/node_modules/bcryptjs/index.js
var require_bcryptjs = __commonJS({
  "../backend/node_modules/bcryptjs/index.js"(exports2, module2) {
    module2.exports = require_bcrypt();
  }
});

// ../backend/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "../backend/node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require("buffer");
    var Buffer4 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer4.from && Buffer4.alloc && Buffer4.allocUnsafe && Buffer4.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer4(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer4.prototype);
    copyProps(Buffer4, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer4(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer4(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer4(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// ../backend/node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  "../backend/node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var Stream3 = require("stream");
    var util = require("util");
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer4.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer4.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream3);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer4.concat([this.buffer, Buffer4.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// ../backend/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({
  "../backend/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports2, module2) {
    "use strict";
    function getParamSize(keySize) {
      var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
      return result;
    }
    var paramBytesForAlg = {
      ES256: getParamSize(256),
      ES384: getParamSize(384),
      ES512: getParamSize(521)
    };
    function getParamBytesForAlg(alg) {
      var paramBytes = paramBytesForAlg[alg];
      if (paramBytes) {
        return paramBytes;
      }
      throw new Error('Unknown algorithm "' + alg + '"');
    }
    module2.exports = getParamBytesForAlg;
  }
});

// ../backend/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({
  "../backend/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports2, module2) {
    "use strict";
    var Buffer4 = require_safe_buffer().Buffer;
    var getParamBytesForAlg = require_param_bytes_for_alg();
    var MAX_OCTET = 128;
    var CLASS_UNIVERSAL = 0;
    var PRIMITIVE_BIT = 32;
    var TAG_SEQ = 16;
    var TAG_INT = 2;
    var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
    var ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
    function base64Url(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function signatureAsBuffer(signature) {
      if (Buffer4.isBuffer(signature)) {
        return signature;
      } else if ("string" === typeof signature) {
        return Buffer4.from(signature, "base64");
      }
      throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
    }
    function derToJose(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var maxEncodedParamLength = paramBytes + 1;
      var inputLength = signature.length;
      var offset = 0;
      if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
      }
      var seqLength = signature[offset++];
      if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
      }
      if (inputLength - offset < seqLength) {
        throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
      }
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
      }
      var rLength = signature[offset++];
      if (inputLength - offset - 2 < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
      }
      if (maxEncodedParamLength < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var rOffset = offset;
      offset += rLength;
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
      }
      var sLength = signature[offset++];
      if (inputLength - offset !== sLength) {
        throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
      }
      if (maxEncodedParamLength < sLength) {
        throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var sOffset = offset;
      offset += sLength;
      if (offset !== inputLength) {
        throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
      }
      var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
      var dst = Buffer4.allocUnsafe(rPadding + rLength + sPadding + sLength);
      for (offset = 0; offset < rPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
      offset = paramBytes;
      for (var o = offset; offset < o + sPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
      dst = dst.toString("base64");
      dst = base64Url(dst);
      return dst;
    }
    function countPadding(buf, start, stop) {
      var padding = 0;
      while (start + padding < stop && buf[start + padding] === 0) {
        ++padding;
      }
      var needsSign = buf[start + padding] >= MAX_OCTET;
      if (needsSign) {
        --padding;
      }
      return padding;
    }
    function joseToDer(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var signatureBytes = signature.length;
      if (signatureBytes !== paramBytes * 2) {
        throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
      }
      var rPadding = countPadding(signature, 0, paramBytes);
      var sPadding = countPadding(signature, paramBytes, signature.length);
      var rLength = paramBytes - rPadding;
      var sLength = paramBytes - sPadding;
      var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
      var shortLength = rsBytes < MAX_OCTET;
      var dst = Buffer4.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
      var offset = 0;
      dst[offset++] = ENCODED_TAG_SEQ;
      if (shortLength) {
        dst[offset++] = rsBytes;
      } else {
        dst[offset++] = MAX_OCTET | 1;
        dst[offset++] = rsBytes & 255;
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = rLength;
      if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
      } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = sLength;
      if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
      } else {
        signature.copy(dst, offset, paramBytes + sPadding);
      }
      return dst;
    }
    module2.exports = {
      derToJose,
      joseToDer
    };
  }
});

// ../backend/node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({
  "../backend/node_modules/buffer-equal-constant-time/index.js"(exports2, module2) {
    "use strict";
    var Buffer4 = require("buffer").Buffer;
    var SlowBuffer = require("buffer").SlowBuffer;
    module2.exports = bufferEq;
    function bufferEq(a, b) {
      if (!Buffer4.isBuffer(a) || !Buffer4.isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      var c = 0;
      for (var i2 = 0; i2 < a.length; i2++) {
        c |= a[i2] ^ b[i2];
      }
      return c === 0;
    }
    bufferEq.install = function() {
      Buffer4.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
      };
    };
    var origBufEqual = Buffer4.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function() {
      Buffer4.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };
  }
});

// ../backend/node_modules/jwa/index.js
var require_jwa = __commonJS({
  "../backend/node_modules/jwa/index.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var crypto2 = require("crypto");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require("util");
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i2 = 0; i2 < padding; ++i2) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer4.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    var bufferEqual;
    var timingSafeEqual = "timingSafeEqual" in crypto2 ? function timingSafeEqual2(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return crypto2.timingSafeEqual(a, b);
    } : function timingSafeEqual2(a, b) {
      if (!bufferEqual) {
        bufferEqual = require_buffer_equal_constant_time();
      }
      return bufferEqual(a, b);
    };
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return timingSafeEqual(Buffer4.from(signature), Buffer4.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// ../backend/node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  "../backend/node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer4 = require("buffer").Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer4.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// ../backend/node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  "../backend/node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream3 = require("stream");
    var toString = require_tostring();
    var util = require("util");
    function base64url(string, encoding) {
      return Buffer4.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream3);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e2) {
        this.readable = false;
        this.emit("error", e2);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// ../backend/node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  "../backend/node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream3 = require("stream");
    var toString = require_tostring();
    var util = require("util");
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e2) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer4.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer4.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream3);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e2) {
        this.readable = false;
        this.emit("error", e2);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// ../backend/node_modules/jws/index.js
var require_jws = __commonJS({
  "../backend/node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// ../backend/node_modules/jsonwebtoken/decode.js
var require_decode = __commonJS({
  "../backend/node_modules/jsonwebtoken/decode.js"(exports2, module2) {
    var jws = require_jws();
    module2.exports = function(jwt2, options) {
      options = options || {};
      var decoded = jws.decode(jwt2, options);
      if (!decoded) {
        return null;
      }
      var payload = decoded.payload;
      if (typeof payload === "string") {
        try {
          var obj = JSON.parse(payload);
          if (obj !== null && typeof obj === "object") {
            payload = obj;
          }
        } catch (e2) {
        }
      }
      if (options.complete === true) {
        return {
          header: decoded.header,
          payload,
          signature: decoded.signature
        };
      }
      return payload;
    };
  }
});

// ../backend/node_modules/jsonwebtoken/lib/JsonWebTokenError.js
var require_JsonWebTokenError = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/JsonWebTokenError.js"(exports2, module2) {
    var JsonWebTokenError = function(message, error) {
      Error.call(this, message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = "JsonWebTokenError";
      this.message = message;
      if (error) this.inner = error;
    };
    JsonWebTokenError.prototype = Object.create(Error.prototype);
    JsonWebTokenError.prototype.constructor = JsonWebTokenError;
    module2.exports = JsonWebTokenError;
  }
});

// ../backend/node_modules/jsonwebtoken/lib/NotBeforeError.js
var require_NotBeforeError = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/NotBeforeError.js"(exports2, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = function(message, date) {
      JsonWebTokenError.call(this, message);
      this.name = "NotBeforeError";
      this.date = date;
    };
    NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);
    NotBeforeError.prototype.constructor = NotBeforeError;
    module2.exports = NotBeforeError;
  }
});

// ../backend/node_modules/jsonwebtoken/lib/TokenExpiredError.js
var require_TokenExpiredError = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/TokenExpiredError.js"(exports2, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var TokenExpiredError = function(message, expiredAt) {
      JsonWebTokenError.call(this, message);
      this.name = "TokenExpiredError";
      this.expiredAt = expiredAt;
    };
    TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
    TokenExpiredError.prototype.constructor = TokenExpiredError;
    module2.exports = TokenExpiredError;
  }
});

// ../backend/node_modules/jsonwebtoken/node_modules/ms/index.js
var require_ms = __commonJS({
  "../backend/node_modules/jsonwebtoken/node_modules/ms/index.js"(exports2, module2) {
    var s2 = 1e3;
    var m2 = s2 * 60;
    var h2 = m2 * 60;
    var d = h2 * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms / m2) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms, msAbs, m2, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../backend/node_modules/jsonwebtoken/lib/timespan.js
var require_timespan = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/timespan.js"(exports2, module2) {
    var ms = require_ms();
    module2.exports = function(time, iat) {
      var timestamp = iat || Math.floor(Date.now() / 1e3);
      if (typeof time === "string") {
        var milliseconds = ms(time);
        if (typeof milliseconds === "undefined") {
          return;
        }
        return Math.floor(timestamp + milliseconds / 1e3);
      } else if (typeof time === "number") {
        return timestamp + time;
      } else {
        return;
      }
    };
  }
});

// ../backend/node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "../backend/node_modules/semver/internal/constants.js"(exports2, module2) {
    "use strict";
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// ../backend/node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "../backend/node_modules/semver/internal/debug.js"(exports2, module2) {
    "use strict";
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// ../backend/node_modules/semver/internal/re.js
var require_re = __commonJS({
  "../backend/node_modules/semver/internal/re.js"(exports2, module2) {
    "use strict";
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports2 = module2.exports = {};
    var re = exports2.re = [];
    var safeRe = exports2.safeRe = [];
    var src = exports2.src = [];
    var safeSrc = exports2.safeSrc = [];
    var t2 = exports2.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t2[name] = index;
      src[index] = value;
      safeSrc[index] = safe;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NONNUMERICIDENTIFIER]}|${src[t2.NUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NONNUMERICIDENTIFIER]}|${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// ../backend/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "../backend/node_modules/semver/internal/parse-options.js"(exports2, module2) {
    "use strict";
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// ../backend/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "../backend/node_modules/semver/internal/identifiers.js"(exports2, module2) {
    "use strict";
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// ../backend/node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "../backend/node_modules/semver/classes/semver.js"(exports2, module2) {
    "use strict";
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re, t: t2 } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version, options) {
        options = parseOptions(options);
        if (version instanceof _SemVer) {
          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
            return version;
          } else {
            version = version.version;
          }
        } else if (typeof version !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        }
        if (version.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m2 = version.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);
        if (!m2) {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        this.major = +m2[1];
        this.minor = +m2[2];
        this.patch = +m2[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m2[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m2[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m2[5] ? m2[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i2 = 0;
        do {
          const a = this.prerelease[i2];
          const b = other.prerelease[i2];
          debug("prerelease compare", i2, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i2);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i2 = 0;
        do {
          const a = this.build[i2];
          const b = other.build[i2];
          debug("build compare", i2, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i2);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        if (release.startsWith("pre")) {
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (identifier) {
            const match = `-${identifier}`.match(this.options.loose ? re[t2.PRERELEASELOOSE] : re[t2.PRERELEASE]);
            if (!match || match[1] !== identifier) {
              throw new Error(`invalid identifier: ${identifier}`);
            }
          }
        }
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "release":
            if (this.prerelease.length === 0) {
              throw new Error(`version ${this.raw} is not a prerelease`);
            }
            this.prerelease.length = 0;
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i2 = this.prerelease.length;
              while (--i2 >= 0) {
                if (typeof this.prerelease[i2] === "number") {
                  this.prerelease[i2]++;
                  i2 = -2;
                }
              }
              if (i2 === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// ../backend/node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "../backend/node_modules/semver/functions/parse.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var parse = (version, options, throwErrors = false) => {
      if (version instanceof SemVer) {
        return version;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse;
  }
});

// ../backend/node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "../backend/node_modules/semver/functions/valid.js"(exports2, module2) {
    "use strict";
    var parse = require_parse();
    var valid = (version, options) => {
      const v = parse(version, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// ../backend/node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "../backend/node_modules/semver/functions/clean.js"(exports2, module2) {
    "use strict";
    var parse = require_parse();
    var clean = (version, options) => {
      const s2 = parse(version.trim().replace(/^[=v]+/, ""), options);
      return s2 ? s2.version : null;
    };
    module2.exports = clean;
  }
});

// ../backend/node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "../backend/node_modules/semver/functions/inc.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var inc = (version, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version instanceof SemVer ? version.version : version,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// ../backend/node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "../backend/node_modules/semver/functions/diff.js"(exports2, module2) {
    "use strict";
    var parse = require_parse();
    var diff = (version1, version2) => {
      const v1 = parse(version1, null, true);
      const v2 = parse(version2, null, true);
      const comparison = v1.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v2;
      const lowVersion = v1Higher ? v2 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (lowVersion.compareMain(highVersion) === 0) {
          if (lowVersion.minor && !lowVersion.patch) {
            return "minor";
          }
          return "patch";
        }
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v2.major) {
        return prefix + "major";
      }
      if (v1.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// ../backend/node_modules/semver/functions/major.js
var require_major = __commonJS({
  "../backend/node_modules/semver/functions/major.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// ../backend/node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "../backend/node_modules/semver/functions/minor.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// ../backend/node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "../backend/node_modules/semver/functions/patch.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// ../backend/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "../backend/node_modules/semver/functions/prerelease.js"(exports2, module2) {
    "use strict";
    var parse = require_parse();
    var prerelease = (version, options) => {
      const parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// ../backend/node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "../backend/node_modules/semver/functions/compare.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// ../backend/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "../backend/node_modules/semver/functions/rcompare.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// ../backend/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "../backend/node_modules/semver/functions/compare-loose.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// ../backend/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "../backend/node_modules/semver/functions/compare-build.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// ../backend/node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "../backend/node_modules/semver/functions/sort.js"(exports2, module2) {
    "use strict";
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// ../backend/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "../backend/node_modules/semver/functions/rsort.js"(exports2, module2) {
    "use strict";
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// ../backend/node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "../backend/node_modules/semver/functions/gt.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// ../backend/node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "../backend/node_modules/semver/functions/lt.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// ../backend/node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "../backend/node_modules/semver/functions/eq.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// ../backend/node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "../backend/node_modules/semver/functions/neq.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// ../backend/node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "../backend/node_modules/semver/functions/gte.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// ../backend/node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "../backend/node_modules/semver/functions/lte.js"(exports2, module2) {
    "use strict";
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// ../backend/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "../backend/node_modules/semver/functions/cmp.js"(exports2, module2) {
    "use strict";
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// ../backend/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "../backend/node_modules/semver/functions/coerce.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var parse = require_parse();
    var { safeRe: re, t: t2 } = require_re();
    var coerce = (version, options) => {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version.match(options.includePrerelease ? re[t2.COERCEFULL] : re[t2.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re[t2.COERCERTLFULL] : re[t2.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    };
    module2.exports = coerce;
  }
});

// ../backend/node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "../backend/node_modules/semver/internal/lrucache.js"(exports2, module2) {
    "use strict";
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module2.exports = LRUCache;
  }
});

// ../backend/node_modules/semver/classes/range.js
var require_range = __commonJS({
  "../backend/node_modules/semver/classes/range.js"(exports2, module2) {
    "use strict";
    var SPACE_CHARACTERS = /\s+/g;
    var Range = class _Range {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof _Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i2 = 0; i2 < this.set.length; i2++) {
            if (i2 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i2];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t2.HYPHENRANGELOOSE] : re[t2.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t2.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t2.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t2.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i2 = 0; i2 < this.set.length; i2++) {
          if (testSet(this.set[i2], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r2 = options.loose ? re[t2.TILDELOOSE] : re[t2.TILDE];
      return comp.replace(r2, (_, M, m2, p, pr) => {
        debug("tilde", comp, _, M, m2, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m2)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m2}.0 <${M}.${+m2 + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m2}.${p}-${pr} <${M}.${+m2 + 1}.0-0`;
        } else {
          ret = `>=${M}.${m2}.${p} <${M}.${+m2 + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r2 = options.loose ? re[t2.CARETLOOSE] : re[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_, M, m2, p, pr) => {
        debug("caret", comp, _, M, m2, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m2)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m2}.0${z} <${M}.${+m2 + 1}.0-0`;
          } else {
            ret = `>=${M}.${m2}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m2 === "0") {
              ret = `>=${M}.${m2}.${p}-${pr} <${M}.${m2}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m2}.${p}-${pr} <${M}.${+m2 + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m2}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m2 === "0") {
              ret = `>=${M}.${m2}.${p}${z} <${M}.${m2}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m2}.${p}${z} <${M}.${+m2 + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m2}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re[t2.XRANGELOOSE] : re[t2.XRANGE];
      return comp.replace(r2, (ret, gtlt, M, m2, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m2, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m2);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m2 = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m2 = 0;
              p = 0;
            } else {
              m2 = +m2 + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m2 = +m2 + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m2}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m2}.0${pr} <${M}.${+m2 + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t2.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version, options) => {
      for (let i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (let i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === Comparator.ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            const allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// ../backend/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "../backend/node_modules/semver/classes/comparator.js"(exports2, module2) {
    "use strict";
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
        const m2 = comp.match(r2);
        if (!m2) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m2[1] !== void 0 ? m2[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m2[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m2[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t: t2 } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// ../backend/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "../backend/node_modules/semver/functions/satisfies.js"(exports2, module2) {
    "use strict";
    var Range = require_range();
    var satisfies = (version, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    };
    module2.exports = satisfies;
  }
});

// ../backend/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "../backend/node_modules/semver/ranges/to-comparators.js"(exports2, module2) {
    "use strict";
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// ../backend/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "../backend/node_modules/semver/ranges/max-satisfying.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// ../backend/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "../backend/node_modules/semver/ranges/min-satisfying.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// ../backend/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "../backend/node_modules/semver/ranges/min-version.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i2 = 0; i2 < range.set.length; ++i2) {
        const comparators = range.set[i2];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// ../backend/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "../backend/node_modules/semver/ranges/valid.js"(exports2, module2) {
    "use strict";
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// ../backend/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "../backend/node_modules/semver/ranges/outside.js"(exports2, module2) {
    "use strict";
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version, range, hilo, options) => {
      version = new SemVer(version, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (let i2 = 0; i2 < range.set.length; ++i2) {
        const comparators = range.set[i2];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// ../backend/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "../backend/node_modules/semver/ranges/gtr.js"(exports2, module2) {
    "use strict";
    var outside = require_outside();
    var gtr = (version, range, options) => outside(version, range, ">", options);
    module2.exports = gtr;
  }
});

// ../backend/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "../backend/node_modules/semver/ranges/ltr.js"(exports2, module2) {
    "use strict";
    var outside = require_outside();
    var ltr = (version, range, options) => outside(version, range, "<", options);
    module2.exports = ltr;
  }
});

// ../backend/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "../backend/node_modules/semver/ranges/intersects.js"(exports2, module2) {
    "use strict";
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  }
});

// ../backend/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "../backend/node_modules/semver/ranges/simplify.js"(exports2, module2) {
    "use strict";
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version of v) {
        const included = satisfies(version, range, options);
        if (included) {
          prev = version;
          if (!first) {
            first = version;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// ../backend/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "../backend/node_modules/semver/ranges/subset.js"(exports2, module2) {
    "use strict";
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower2;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower2 = lowerLT(lt, c, options);
            if (lower2 === c && lower2 !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// ../backend/node_modules/semver/index.js
var require_semver2 = __commonJS({
  "../backend/node_modules/semver/index.js"(exports2, module2) {
    "use strict";
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// ../backend/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js
var require_asymmetricKeyDetailsSupported = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js"(exports2, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, ">=15.7.0");
  }
});

// ../backend/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js
var require_rsaPssKeyDetailsSupported = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js"(exports2, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, ">=16.9.0");
  }
});

// ../backend/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js
var require_validateAsymmetricKey = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"(exports2, module2) {
    var ASYMMETRIC_KEY_DETAILS_SUPPORTED = require_asymmetricKeyDetailsSupported();
    var RSA_PSS_KEY_DETAILS_SUPPORTED = require_rsaPssKeyDetailsSupported();
    var allowedAlgorithmsForKeys = {
      "ec": ["ES256", "ES384", "ES512"],
      "rsa": ["RS256", "PS256", "RS384", "PS384", "RS512", "PS512"],
      "rsa-pss": ["PS256", "PS384", "PS512"]
    };
    var allowedCurves = {
      ES256: "prime256v1",
      ES384: "secp384r1",
      ES512: "secp521r1"
    };
    module2.exports = function(algorithm, key) {
      if (!algorithm || !key) return;
      const keyType = key.asymmetricKeyType;
      if (!keyType) return;
      const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];
      if (!allowedAlgorithms) {
        throw new Error(`Unknown key type "${keyType}".`);
      }
      if (!allowedAlgorithms.includes(algorithm)) {
        throw new Error(`"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(", ")}.`);
      }
      if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {
        switch (keyType) {
          case "ec":
            const keyCurve = key.asymmetricKeyDetails.namedCurve;
            const allowedCurve = allowedCurves[algorithm];
            if (keyCurve !== allowedCurve) {
              throw new Error(`"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`);
            }
            break;
          case "rsa-pss":
            if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
              const length = parseInt(algorithm.slice(-3), 10);
              const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;
              if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {
                throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`);
              }
              if (saltLength !== void 0 && saltLength > length >> 3) {
                throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`);
              }
            }
            break;
        }
      }
    };
  }
});

// ../backend/node_modules/jsonwebtoken/lib/psSupported.js
var require_psSupported = __commonJS({
  "../backend/node_modules/jsonwebtoken/lib/psSupported.js"(exports2, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, "^6.12.0 || >=8.0.0");
  }
});

// ../backend/node_modules/jsonwebtoken/verify.js
var require_verify = __commonJS({
  "../backend/node_modules/jsonwebtoken/verify.js"(exports2, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = require_NotBeforeError();
    var TokenExpiredError = require_TokenExpiredError();
    var decode = require_decode();
    var timespan = require_timespan();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var PS_SUPPORTED = require_psSupported();
    var jws = require_jws();
    var { KeyObject, createSecretKey, createPublicKey } = require("crypto");
    var PUB_KEY_ALGS = ["RS256", "RS384", "RS512"];
    var EC_KEY_ALGS = ["ES256", "ES384", "ES512"];
    var RSA_KEY_ALGS = ["RS256", "RS384", "RS512"];
    var HS_ALGS = ["HS256", "HS384", "HS512"];
    if (PS_SUPPORTED) {
      PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
      RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
    }
    module2.exports = function(jwtString, secretOrPublicKey, options, callback) {
      if (typeof options === "function" && !callback) {
        callback = options;
        options = {};
      }
      if (!options) {
        options = {};
      }
      options = Object.assign({}, options);
      let done;
      if (callback) {
        done = callback;
      } else {
        done = function(err, data) {
          if (err) throw err;
          return data;
        };
      }
      if (options.clockTimestamp && typeof options.clockTimestamp !== "number") {
        return done(new JsonWebTokenError("clockTimestamp must be a number"));
      }
      if (options.nonce !== void 0 && (typeof options.nonce !== "string" || options.nonce.trim() === "")) {
        return done(new JsonWebTokenError("nonce must be a non-empty string"));
      }
      if (options.allowInvalidAsymmetricKeyTypes !== void 0 && typeof options.allowInvalidAsymmetricKeyTypes !== "boolean") {
        return done(new JsonWebTokenError("allowInvalidAsymmetricKeyTypes must be a boolean"));
      }
      const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1e3);
      if (!jwtString) {
        return done(new JsonWebTokenError("jwt must be provided"));
      }
      if (typeof jwtString !== "string") {
        return done(new JsonWebTokenError("jwt must be a string"));
      }
      const parts = jwtString.split(".");
      if (parts.length !== 3) {
        return done(new JsonWebTokenError("jwt malformed"));
      }
      let decodedToken;
      try {
        decodedToken = decode(jwtString, { complete: true });
      } catch (err) {
        return done(err);
      }
      if (!decodedToken) {
        return done(new JsonWebTokenError("invalid token"));
      }
      const header = decodedToken.header;
      let getSecret;
      if (typeof secretOrPublicKey === "function") {
        if (!callback) {
          return done(new JsonWebTokenError("verify must be called asynchronous if secret or public key is provided as a callback"));
        }
        getSecret = secretOrPublicKey;
      } else {
        getSecret = function(header2, secretCallback) {
          return secretCallback(null, secretOrPublicKey);
        };
      }
      return getSecret(header, function(err, secretOrPublicKey2) {
        if (err) {
          return done(new JsonWebTokenError("error in secret or public key callback: " + err.message));
        }
        const hasSignature = parts[2].trim() !== "";
        if (!hasSignature && secretOrPublicKey2) {
          return done(new JsonWebTokenError("jwt signature is required"));
        }
        if (hasSignature && !secretOrPublicKey2) {
          return done(new JsonWebTokenError("secret or public key must be provided"));
        }
        if (!hasSignature && !options.algorithms) {
          return done(new JsonWebTokenError('please specify "none" in "algorithms" to verify unsigned tokens'));
        }
        if (secretOrPublicKey2 != null && !(secretOrPublicKey2 instanceof KeyObject)) {
          try {
            secretOrPublicKey2 = createPublicKey(secretOrPublicKey2);
          } catch (_) {
            try {
              secretOrPublicKey2 = createSecretKey(typeof secretOrPublicKey2 === "string" ? Buffer.from(secretOrPublicKey2) : secretOrPublicKey2);
            } catch (_2) {
              return done(new JsonWebTokenError("secretOrPublicKey is not valid key material"));
            }
          }
        }
        if (!options.algorithms) {
          if (secretOrPublicKey2.type === "secret") {
            options.algorithms = HS_ALGS;
          } else if (["rsa", "rsa-pss"].includes(secretOrPublicKey2.asymmetricKeyType)) {
            options.algorithms = RSA_KEY_ALGS;
          } else if (secretOrPublicKey2.asymmetricKeyType === "ec") {
            options.algorithms = EC_KEY_ALGS;
          } else {
            options.algorithms = PUB_KEY_ALGS;
          }
        }
        if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {
          return done(new JsonWebTokenError("invalid algorithm"));
        }
        if (header.alg.startsWith("HS") && secretOrPublicKey2.type !== "secret") {
          return done(new JsonWebTokenError(`secretOrPublicKey must be a symmetric key when using ${header.alg}`));
        } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey2.type !== "public") {
          return done(new JsonWebTokenError(`secretOrPublicKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options.allowInvalidAsymmetricKeyTypes) {
          try {
            validateAsymmetricKey(header.alg, secretOrPublicKey2);
          } catch (e2) {
            return done(e2);
          }
        }
        let valid;
        try {
          valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey2);
        } catch (e2) {
          return done(e2);
        }
        if (!valid) {
          return done(new JsonWebTokenError("invalid signature"));
        }
        const payload = decodedToken.payload;
        if (typeof payload.nbf !== "undefined" && !options.ignoreNotBefore) {
          if (typeof payload.nbf !== "number") {
            return done(new JsonWebTokenError("invalid nbf value"));
          }
          if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
            return done(new NotBeforeError("jwt not active", new Date(payload.nbf * 1e3)));
          }
        }
        if (typeof payload.exp !== "undefined" && !options.ignoreExpiration) {
          if (typeof payload.exp !== "number") {
            return done(new JsonWebTokenError("invalid exp value"));
          }
          if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
            return done(new TokenExpiredError("jwt expired", new Date(payload.exp * 1e3)));
          }
        }
        if (options.audience) {
          const audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
          const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
          const match = target.some(function(targetAudience) {
            return audiences.some(function(audience) {
              return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
            });
          });
          if (!match) {
            return done(new JsonWebTokenError("jwt audience invalid. expected: " + audiences.join(" or ")));
          }
        }
        if (options.issuer) {
          const invalid_issuer = typeof options.issuer === "string" && payload.iss !== options.issuer || Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1;
          if (invalid_issuer) {
            return done(new JsonWebTokenError("jwt issuer invalid. expected: " + options.issuer));
          }
        }
        if (options.subject) {
          if (payload.sub !== options.subject) {
            return done(new JsonWebTokenError("jwt subject invalid. expected: " + options.subject));
          }
        }
        if (options.jwtid) {
          if (payload.jti !== options.jwtid) {
            return done(new JsonWebTokenError("jwt jwtid invalid. expected: " + options.jwtid));
          }
        }
        if (options.nonce) {
          if (payload.nonce !== options.nonce) {
            return done(new JsonWebTokenError("jwt nonce invalid. expected: " + options.nonce));
          }
        }
        if (options.maxAge) {
          if (typeof payload.iat !== "number") {
            return done(new JsonWebTokenError("iat required when maxAge is specified"));
          }
          const maxAgeTimestamp = timespan(options.maxAge, payload.iat);
          if (typeof maxAgeTimestamp === "undefined") {
            return done(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
          }
          if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {
            return done(new TokenExpiredError("maxAge exceeded", new Date(maxAgeTimestamp * 1e3)));
          }
        }
        if (options.complete === true) {
          const signature = decodedToken.signature;
          return done(null, {
            header,
            payload,
            signature
          });
        }
        return done(null, payload);
      });
    };
  }
});

// ../backend/node_modules/lodash.includes/index.js
var require_lodash = __commonJS({
  "../backend/node_modules/lodash.includes/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeParseInt = parseInt;
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }
    module2.exports = includes;
  }
});

// ../backend/node_modules/lodash.isboolean/index.js
var require_lodash2 = __commonJS({
  "../backend/node_modules/lodash.isboolean/index.js"(exports2, module2) {
    var boolTag = "[object Boolean]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module2.exports = isBoolean;
  }
});

// ../backend/node_modules/lodash.isinteger/index.js
var require_lodash3 = __commonJS({
  "../backend/node_modules/lodash.isinteger/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isInteger(value) {
      return typeof value == "number" && value == toInteger(value);
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = isInteger;
  }
});

// ../backend/node_modules/lodash.isnumber/index.js
var require_lodash4 = __commonJS({
  "../backend/node_modules/lodash.isnumber/index.js"(exports2, module2) {
    var numberTag = "[object Number]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isNumber(value) {
      return typeof value == "number" || isObjectLike(value) && objectToString.call(value) == numberTag;
    }
    module2.exports = isNumber;
  }
});

// ../backend/node_modules/lodash.isplainobject/index.js
var require_lodash5 = __commonJS({
  "../backend/node_modules/lodash.isplainobject/index.js"(exports2, module2) {
    var objectTag = "[object Object]";
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e2) {
        }
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    var objectToString = objectProto.toString;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module2.exports = isPlainObject;
  }
});

// ../backend/node_modules/lodash.isstring/index.js
var require_lodash6 = __commonJS({
  "../backend/node_modules/lodash.isstring/index.js"(exports2, module2) {
    var stringTag = "[object String]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var isArray = Array.isArray;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }
    module2.exports = isString;
  }
});

// ../backend/node_modules/lodash.once/index.js
var require_lodash7 = __commonJS({
  "../backend/node_modules/lodash.once/index.js"(exports2, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function before(n, func) {
      var result;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = void 0;
        }
        return result;
      };
    }
    function once(func) {
      return before(2, func);
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = once;
  }
});

// ../backend/node_modules/jsonwebtoken/sign.js
var require_sign = __commonJS({
  "../backend/node_modules/jsonwebtoken/sign.js"(exports2, module2) {
    var timespan = require_timespan();
    var PS_SUPPORTED = require_psSupported();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var jws = require_jws();
    var includes = require_lodash();
    var isBoolean = require_lodash2();
    var isInteger = require_lodash3();
    var isNumber = require_lodash4();
    var isPlainObject = require_lodash5();
    var isString = require_lodash6();
    var once = require_lodash7();
    var { KeyObject, createSecretKey, createPrivateKey } = require("crypto");
    var SUPPORTED_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "HS256", "HS384", "HS512", "none"];
    if (PS_SUPPORTED) {
      SUPPORTED_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
    }
    var sign_options_schema = {
      expiresIn: { isValid: function(value) {
        return isInteger(value) || isString(value) && value;
      }, message: '"expiresIn" should be a number of seconds or string representing a timespan' },
      notBefore: { isValid: function(value) {
        return isInteger(value) || isString(value) && value;
      }, message: '"notBefore" should be a number of seconds or string representing a timespan' },
      audience: { isValid: function(value) {
        return isString(value) || Array.isArray(value);
      }, message: '"audience" must be a string or array' },
      algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' },
      header: { isValid: isPlainObject, message: '"header" must be an object' },
      encoding: { isValid: isString, message: '"encoding" must be a string' },
      issuer: { isValid: isString, message: '"issuer" must be a string' },
      subject: { isValid: isString, message: '"subject" must be a string' },
      jwtid: { isValid: isString, message: '"jwtid" must be a string' },
      noTimestamp: { isValid: isBoolean, message: '"noTimestamp" must be a boolean' },
      keyid: { isValid: isString, message: '"keyid" must be a string' },
      mutatePayload: { isValid: isBoolean, message: '"mutatePayload" must be a boolean' },
      allowInsecureKeySizes: { isValid: isBoolean, message: '"allowInsecureKeySizes" must be a boolean' },
      allowInvalidAsymmetricKeyTypes: { isValid: isBoolean, message: '"allowInvalidAsymmetricKeyTypes" must be a boolean' }
    };
    var registered_claims_schema = {
      iat: { isValid: isNumber, message: '"iat" should be a number of seconds' },
      exp: { isValid: isNumber, message: '"exp" should be a number of seconds' },
      nbf: { isValid: isNumber, message: '"nbf" should be a number of seconds' }
    };
    function validate(schema, allowUnknown, object, parameterName) {
      if (!isPlainObject(object)) {
        throw new Error('Expected "' + parameterName + '" to be a plain object.');
      }
      Object.keys(object).forEach(function(key) {
        const validator = schema[key];
        if (!validator) {
          if (!allowUnknown) {
            throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
          }
          return;
        }
        if (!validator.isValid(object[key])) {
          throw new Error(validator.message);
        }
      });
    }
    function validateOptions(options) {
      return validate(sign_options_schema, false, options, "options");
    }
    function validatePayload(payload) {
      return validate(registered_claims_schema, true, payload, "payload");
    }
    var options_to_payload = {
      "audience": "aud",
      "issuer": "iss",
      "subject": "sub",
      "jwtid": "jti"
    };
    var options_for_objects = [
      "expiresIn",
      "notBefore",
      "noTimestamp",
      "audience",
      "issuer",
      "subject",
      "jwtid"
    ];
    module2.exports = function(payload, secretOrPrivateKey, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else {
        options = options || {};
      }
      const isObjectPayload = typeof payload === "object" && !Buffer.isBuffer(payload);
      const header = Object.assign({
        alg: options.algorithm || "HS256",
        typ: isObjectPayload ? "JWT" : void 0,
        kid: options.keyid
      }, options.header);
      function failure(err) {
        if (callback) {
          return callback(err);
        }
        throw err;
      }
      if (!secretOrPrivateKey && options.algorithm !== "none") {
        return failure(new Error("secretOrPrivateKey must have a value"));
      }
      if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {
        try {
          secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
        } catch (_) {
          try {
            secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === "string" ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);
          } catch (_2) {
            return failure(new Error("secretOrPrivateKey is not valid key material"));
          }
        }
      }
      if (header.alg.startsWith("HS") && secretOrPrivateKey.type !== "secret") {
        return failure(new Error(`secretOrPrivateKey must be a symmetric key when using ${header.alg}`));
      } else if (/^(?:RS|PS|ES)/.test(header.alg)) {
        if (secretOrPrivateKey.type !== "private") {
          return failure(new Error(`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options.allowInsecureKeySizes && !header.alg.startsWith("ES") && secretOrPrivateKey.asymmetricKeyDetails !== void 0 && //KeyObject.asymmetricKeyDetails is supported in Node 15+
        secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {
          return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
        }
      }
      if (typeof payload === "undefined") {
        return failure(new Error("payload is required"));
      } else if (isObjectPayload) {
        try {
          validatePayload(payload);
        } catch (error) {
          return failure(error);
        }
        if (!options.mutatePayload) {
          payload = Object.assign({}, payload);
        }
      } else {
        const invalid_options = options_for_objects.filter(function(opt) {
          return typeof options[opt] !== "undefined";
        });
        if (invalid_options.length > 0) {
          return failure(new Error("invalid " + invalid_options.join(",") + " option for " + typeof payload + " payload"));
        }
      }
      if (typeof payload.exp !== "undefined" && typeof options.expiresIn !== "undefined") {
        return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
      }
      if (typeof payload.nbf !== "undefined" && typeof options.notBefore !== "undefined") {
        return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
      }
      try {
        validateOptions(options);
      } catch (error) {
        return failure(error);
      }
      if (!options.allowInvalidAsymmetricKeyTypes) {
        try {
          validateAsymmetricKey(header.alg, secretOrPrivateKey);
        } catch (error) {
          return failure(error);
        }
      }
      const timestamp = payload.iat || Math.floor(Date.now() / 1e3);
      if (options.noTimestamp) {
        delete payload.iat;
      } else if (isObjectPayload) {
        payload.iat = timestamp;
      }
      if (typeof options.notBefore !== "undefined") {
        try {
          payload.nbf = timespan(options.notBefore, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.nbf === "undefined") {
          return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }
      if (typeof options.expiresIn !== "undefined" && typeof payload === "object") {
        try {
          payload.exp = timespan(options.expiresIn, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.exp === "undefined") {
          return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }
      Object.keys(options_to_payload).forEach(function(key) {
        const claim = options_to_payload[key];
        if (typeof options[key] !== "undefined") {
          if (typeof payload[claim] !== "undefined") {
            return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
          }
          payload[claim] = options[key];
        }
      });
      const encoding = options.encoding || "utf8";
      if (typeof callback === "function") {
        callback = callback && once(callback);
        jws.createSign({
          header,
          privateKey: secretOrPrivateKey,
          payload,
          encoding
        }).once("error", callback).once("done", function(signature) {
          if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
            return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
          }
          callback(null, signature);
        });
      } else {
        let signature = jws.sign({ header, payload, secret: secretOrPrivateKey, encoding });
        if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
          throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`);
        }
        return signature;
      }
    };
  }
});

// ../backend/node_modules/jsonwebtoken/index.js
var require_jsonwebtoken = __commonJS({
  "../backend/node_modules/jsonwebtoken/index.js"(exports2, module2) {
    module2.exports = {
      decode: require_decode(),
      verify: require_verify(),
      sign: require_sign(),
      JsonWebTokenError: require_JsonWebTokenError(),
      NotBeforeError: require_NotBeforeError(),
      TokenExpiredError: require_TokenExpiredError()
    };
  }
});

// ../backend/node_modules/extend/index.js
var require_extend = __commonJS({
  "../backend/node_modules/extend/index.js"(exports2, module2) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject = function isPlainObject2(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module2.exports = function extend() {
      var options, name, src, copy, copyIsArray, clone2;
      var target = arguments[0];
      var i2 = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i2 = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i2 < length; ++i2) {
        options = arguments[i2];
        if (options != null) {
          for (name in options) {
            src = getProperty(target, name);
            copy = getProperty(options, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone2 = src && isArray(src) ? src : [];
                } else {
                  clone2 = src && isPlainObject(src) ? src : {};
                }
                setProperty(target, { name, newValue: extend(deep, clone2, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// ../backend/node_modules/gaxios/package.json
var require_package = __commonJS({
  "../backend/node_modules/gaxios/package.json"(exports2, module2) {
    module2.exports = {
      name: "gaxios",
      version: "7.1.1",
      description: "A simple common HTTP client specifically for Google APIs and services.",
      main: "build/cjs/src/index.js",
      types: "build/cjs/src/index.d.ts",
      files: [
        "build/"
      ],
      exports: {
        ".": {
          import: {
            types: "./build/esm/src/index.d.ts",
            default: "./build/esm/src/index.js"
          },
          require: {
            types: "./build/cjs/src/index.d.ts",
            default: "./build/cjs/src/index.js"
          }
        }
      },
      scripts: {
        lint: "gts check --no-inline-config",
        test: "c8 mocha build/esm/test",
        "presystem-test": "npm run compile",
        "system-test": "mocha build/esm/system-test --timeout 80000",
        compile: "tsc -b ./tsconfig.json ./tsconfig.cjs.json && node utils/enable-esm.mjs",
        fix: "gts fix",
        prepare: "npm run compile",
        pretest: "npm run compile",
        webpack: "webpack",
        "prebrowser-test": "npm run compile",
        "browser-test": "node build/browser-test/browser-test-runner.js",
        docs: "jsdoc -c .jsdoc.js",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        prelint: "cd samples; npm link ../; npm install",
        clean: "gts clean"
      },
      repository: "googleapis/gaxios",
      keywords: [
        "google"
      ],
      engines: {
        node: ">=18"
      },
      author: "Google, LLC",
      license: "Apache-2.0",
      devDependencies: {
        "@babel/plugin-proposal-private-methods": "^7.18.6",
        "@types/cors": "^2.8.6",
        "@types/express": "^5.0.0",
        "@types/extend": "^3.0.1",
        "@types/mocha": "^10.0.10",
        "@types/multiparty": "4.2.1",
        "@types/mv": "^2.1.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^22.0.0",
        "@types/sinon": "^17.0.0",
        "@types/tmp": "0.2.6",
        assert: "^2.0.0",
        browserify: "^17.0.0",
        c8: "^10.0.0",
        cors: "^2.8.5",
        express: "^5.0.0",
        gts: "^6.0.0",
        "is-docker": "^3.0.0",
        jsdoc: "^4.0.0",
        "jsdoc-fresh": "^4.0.0",
        "jsdoc-region-tag": "^3.0.0",
        karma: "^6.0.0",
        "karma-chrome-launcher": "^3.0.0",
        "karma-coverage": "^2.0.0",
        "karma-firefox-launcher": "^2.0.0",
        "karma-mocha": "^2.0.0",
        "karma-remap-coverage": "^0.1.5",
        "karma-sourcemap-loader": "^0.4.0",
        "karma-webpack": "^5.0.1",
        linkinator: "^6.1.2",
        mocha: "^11.1.0",
        multiparty: "^4.2.1",
        mv: "^2.1.1",
        ncp: "^2.0.0",
        nock: "^14.0.0-beta.13",
        "null-loader": "^4.0.0",
        "pack-n-play": "^3.0.0",
        puppeteer: "^24.0.0",
        sinon: "^20.0.0",
        "stream-browserify": "^3.0.0",
        tmp: "0.2.3",
        "ts-loader": "^9.5.2",
        typescript: "^5.8.3",
        webpack: "^5.35.0",
        "webpack-cli": "^6.0.1"
      },
      dependencies: {
        extend: "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "node-fetch": "^3.3.2"
      }
    };
  }
});

// ../backend/node_modules/gaxios/build/cjs/src/util.cjs
var require_util = __commonJS({
  "../backend/node_modules/gaxios/build/cjs/src/util.cjs"(exports2, module2) {
    "use strict";
    var pkg = require_package();
    module2.exports = { pkg };
  }
});

// ../backend/node_modules/gaxios/build/cjs/src/common.js
var require_common = __commonJS({
  "../backend/node_modules/gaxios/build/cjs/src/common.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GaxiosError = exports2.GAXIOS_ERROR_SYMBOL = void 0;
    exports2.defaultErrorRedactor = defaultErrorRedactor;
    var extend_1 = __importDefault2(require_extend());
    var util_cjs_1 = __importDefault2(require_util());
    var pkg = util_cjs_1.default.pkg;
    exports2.GAXIOS_ERROR_SYMBOL = Symbol.for(`${pkg.name}-gaxios-error`);
    var GaxiosError = class _GaxiosError extends Error {
      config;
      response;
      /**
       * An error code.
       * Can be a system error code, DOMException error name, or any error's 'code' property where it is a `string`.
       *
       * It is only a `number` when the cause is sourced from an API-level error (AIP-193).
       *
       * @see {@link https://nodejs.org/api/errors.html#errorcode error.code}
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/DOMException#error_names DOMException#error_names}
       * @see {@link https://google.aip.dev/193#http11json-representation AIP-193}
       *
       * @example
       * 'ECONNRESET'
       *
       * @example
       * 'TimeoutError'
       *
       * @example
       * 500
       */
      code;
      /**
       * An HTTP Status code.
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Response/status Response#status}
       *
       * @example
       * 500
       */
      status;
      /**
       * @deprecated use {@link GaxiosError.cause} instead.
       *
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause Error#cause}
       *
       * @privateRemarks
       *
       * We will want to remove this property later as the modern `cause` property is better suited
       * for displaying and relaying nested errors. Keeping this here makes the resulting
       * error log larger than it needs to be.
       *
       */
      error;
      /**
       * Support `instanceof` operator for `GaxiosError` across builds/duplicated files.
       *
       * @see {@link GAXIOS_ERROR_SYMBOL}
       * @see {@link GaxiosError[Symbol.hasInstance]}
       * @see {@link https://github.com/microsoft/TypeScript/issues/13965#issuecomment-278570200}
       * @see {@link https://stackoverflow.com/questions/46618852/require-and-instanceof}
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance#reverting_to_default_instanceof_behavior}
       */
      [exports2.GAXIOS_ERROR_SYMBOL] = pkg.version;
      /**
       * Support `instanceof` operator for `GaxiosError` across builds/duplicated files.
       *
       * @see {@link GAXIOS_ERROR_SYMBOL}
       * @see {@link GaxiosError[GAXIOS_ERROR_SYMBOL]}
       */
      static [Symbol.hasInstance](instance) {
        if (instance && typeof instance === "object" && exports2.GAXIOS_ERROR_SYMBOL in instance && instance[exports2.GAXIOS_ERROR_SYMBOL] === pkg.version) {
          return true;
        }
        return Function.prototype[Symbol.hasInstance].call(_GaxiosError, instance);
      }
      constructor(message, config, response, cause) {
        super(message, { cause });
        this.config = config;
        this.response = response;
        this.error = cause instanceof Error ? cause : void 0;
        this.config = (0, extend_1.default)(true, {}, config);
        if (this.response) {
          this.response.config = (0, extend_1.default)(true, {}, this.response.config);
        }
        if (this.response) {
          try {
            this.response.data = translateData(
              this.config.responseType,
              // workaround for `node-fetch`'s `.data` deprecation...
              this.response?.bodyUsed ? this.response?.data : void 0
            );
          } catch {
          }
          this.status = this.response.status;
        }
        if (cause instanceof DOMException) {
          this.code = cause.name;
        } else if (cause && typeof cause === "object" && "code" in cause && (typeof cause.code === "string" || typeof cause.code === "number")) {
          this.code = cause.code;
        }
      }
      /**
       * An AIP-193 conforming error extractor.
       *
       * @see {@link https://google.aip.dev/193#http11json-representation AIP-193}
       *
       * @internal
       * @expiremental
       *
       * @param res the response object
       * @returns the extracted error information
       */
      static extractAPIErrorFromResponse(res, defaultErrorMessage = "The request failed") {
        let message = defaultErrorMessage;
        if (typeof res.data === "string") {
          message = res.data;
        }
        if (res.data && typeof res.data === "object" && "error" in res.data && res.data.error && !res.ok) {
          if (typeof res.data.error === "string") {
            return {
              message: res.data.error,
              code: res.status,
              status: res.statusText
            };
          }
          if (typeof res.data.error === "object") {
            message = "message" in res.data.error && typeof res.data.error.message === "string" ? res.data.error.message : message;
            const status = "status" in res.data.error && typeof res.data.error.status === "string" ? res.data.error.status : res.statusText;
            const code = "code" in res.data.error && typeof res.data.error.code === "number" ? res.data.error.code : res.status;
            if ("errors" in res.data.error && Array.isArray(res.data.error.errors)) {
              const errorMessages = [];
              for (const e2 of res.data.error.errors) {
                if (typeof e2 === "object" && "message" in e2 && typeof e2.message === "string") {
                  errorMessages.push(e2.message);
                }
              }
              return Object.assign({
                message: errorMessages.join("\n") || message,
                code,
                status
              }, res.data.error);
            }
            return Object.assign({
              message,
              code,
              status
            }, res.data.error);
          }
        }
        return {
          message,
          code: res.status,
          status: res.statusText
        };
      }
    };
    exports2.GaxiosError = GaxiosError;
    function translateData(responseType, data) {
      switch (responseType) {
        case "stream":
          return data;
        case "json":
          return JSON.parse(JSON.stringify(data));
        case "arraybuffer":
          return JSON.parse(Buffer.from(data).toString("utf8"));
        case "blob":
          return JSON.parse(data.text());
        default:
          return data;
      }
    }
    function defaultErrorRedactor(data) {
      const REDACT = "<<REDACTED> - See `errorRedactor` option in `gaxios` for configuration>.";
      function redactHeaders(headers) {
        if (!headers)
          return;
        headers.forEach((_, key) => {
          if (/^authentication$/i.test(key) || /^authorization$/i.test(key) || /secret/i.test(key))
            headers.set(key, REDACT);
        });
      }
      function redactString(obj, key) {
        if (typeof obj === "object" && obj !== null && typeof obj[key] === "string") {
          const text = obj[key];
          if (/grant_type=/i.test(text) || /assertion=/i.test(text) || /secret/i.test(text)) {
            obj[key] = REDACT;
          }
        }
      }
      function redactObject(obj) {
        if (!obj || typeof obj !== "object") {
          return;
        } else if (obj instanceof FormData || obj instanceof URLSearchParams || // support `node-fetch` FormData/URLSearchParams
        "forEach" in obj && "set" in obj) {
          obj.forEach((_, key) => {
            if (["grant_type", "assertion"].includes(key) || /secret/.test(key)) {
              obj.set(key, REDACT);
            }
          });
        } else {
          if ("grant_type" in obj) {
            obj["grant_type"] = REDACT;
          }
          if ("assertion" in obj) {
            obj["assertion"] = REDACT;
          }
          if ("client_secret" in obj) {
            obj["client_secret"] = REDACT;
          }
        }
      }
      if (data.config) {
        redactHeaders(data.config.headers);
        redactString(data.config, "data");
        redactObject(data.config.data);
        redactString(data.config, "body");
        redactObject(data.config.body);
        if (data.config.url.searchParams.has("token")) {
          data.config.url.searchParams.set("token", REDACT);
        }
        if (data.config.url.searchParams.has("client_secret")) {
          data.config.url.searchParams.set("client_secret", REDACT);
        }
      }
      if (data.response) {
        defaultErrorRedactor({ config: data.response.config });
        redactHeaders(data.response.headers);
        if (data.response.bodyUsed) {
          redactString(data.response, "data");
          redactObject(data.response.data);
        }
      }
      return data;
    }
  }
});

// ../backend/node_modules/gaxios/build/cjs/src/retry.js
var require_retry = __commonJS({
  "../backend/node_modules/gaxios/build/cjs/src/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryConfig = getRetryConfig;
    async function getRetryConfig(err) {
      let config = getConfig(err);
      if (!err || !err.config || !config && !err.config.retry) {
        return { shouldRetry: false };
      }
      config = config || {};
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      config.retry = config.retry === void 0 || config.retry === null ? 3 : config.retry;
      config.httpMethodsToRetry = config.httpMethodsToRetry || [
        "GET",
        "HEAD",
        "PUT",
        "OPTIONS",
        "DELETE"
      ];
      config.noResponseRetries = config.noResponseRetries === void 0 || config.noResponseRetries === null ? 2 : config.noResponseRetries;
      config.retryDelayMultiplier = config.retryDelayMultiplier ? config.retryDelayMultiplier : 2;
      config.timeOfFirstRequest = config.timeOfFirstRequest ? config.timeOfFirstRequest : Date.now();
      config.totalTimeout = config.totalTimeout ? config.totalTimeout : Number.MAX_SAFE_INTEGER;
      config.maxRetryDelay = config.maxRetryDelay ? config.maxRetryDelay : Number.MAX_SAFE_INTEGER;
      const retryRanges = [
        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
        // 1xx - Retry (Informational, request still processing)
        // 2xx - Do not retry (Success)
        // 3xx - Do not retry (Redirect)
        // 4xx - Do not retry (Client errors)
        // 408 - Retry ("Request Timeout")
        // 429 - Retry ("Too Many Requests")
        // 5xx - Retry (Server errors)
        [100, 199],
        [408, 408],
        [429, 429],
        [500, 599]
      ];
      config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;
      err.config.retryConfig = config;
      const shouldRetryFn = config.shouldRetry || shouldRetryRequest;
      if (!await shouldRetryFn(err)) {
        return { shouldRetry: false, config: err.config };
      }
      const delay = getNextRetryDelay(config);
      err.config.retryConfig.currentRetryAttempt += 1;
      const backoff = config.retryBackoff ? config.retryBackoff(err, delay) : new Promise((resolve) => {
        setTimeout(resolve, delay);
      });
      if (config.onRetryAttempt) {
        await config.onRetryAttempt(err);
      }
      await backoff;
      return { shouldRetry: true, config: err.config };
    }
    function shouldRetryRequest(err) {
      const config = getConfig(err);
      if (err.config.signal?.aborted && err.code !== "TimeoutError" || err.code === "AbortError") {
        return false;
      }
      if (!config || config.retry === 0) {
        return false;
      }
      if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {
        return false;
      }
      if (!config.httpMethodsToRetry || !config.httpMethodsToRetry.includes(err.config.method?.toUpperCase() || "GET")) {
        return false;
      }
      if (err.response && err.response.status) {
        let isInRange = false;
        for (const [min, max] of config.statusCodesToRetry) {
          const status = err.response.status;
          if (status >= min && status <= max) {
            isInRange = true;
            break;
          }
        }
        if (!isInRange) {
          return false;
        }
      }
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      if (config.currentRetryAttempt >= config.retry) {
        return false;
      }
      return true;
    }
    function getConfig(err) {
      if (err && err.config && err.config.retryConfig) {
        return err.config.retryConfig;
      }
      return;
    }
    function getNextRetryDelay(config) {
      const retryDelay = config.currentRetryAttempt ? 0 : config.retryDelay ?? 100;
      const calculatedDelay = retryDelay + (Math.pow(config.retryDelayMultiplier, config.currentRetryAttempt) - 1) / 2 * 1e3;
      const maxAllowableDelay = config.totalTimeout - (Date.now() - config.timeOfFirstRequest);
      return Math.min(calculatedDelay, maxAllowableDelay, config.maxRetryDelay);
    }
  }
});

// ../backend/node_modules/gaxios/build/cjs/src/interceptor.js
var require_interceptor = __commonJS({
  "../backend/node_modules/gaxios/build/cjs/src/interceptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GaxiosInterceptorManager = void 0;
    var GaxiosInterceptorManager = class extends Set {
    };
    exports2.GaxiosInterceptorManager = GaxiosInterceptorManager;
  }
});

// ../backend/node_modules/https-proxy-agent/node_modules/ms/index.js
var require_ms2 = __commonJS({
  "../backend/node_modules/https-proxy-agent/node_modules/ms/index.js"(exports2, module2) {
    var s2 = 1e3;
    var m2 = s2 * 60;
    var h2 = m2 * 60;
    var d = h2 * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms / m2) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms, msAbs, m2, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../backend/node_modules/https-proxy-agent/node_modules/debug/src/common.js
var require_common2 = __commonJS({
  "../backend/node_modules/https-proxy-agent/node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms2();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i2 = 0; i2 < namespace.length; i2++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i2);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug.skips.push(ns.slice(1));
          } else {
            createDebug.names.push(ns);
          }
        }
      }
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name, skip)) {
            return false;
          }
        }
        for (const ns of createDebug.names) {
          if (matchesTemplate(name, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// ../backend/node_modules/https-proxy-agent/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../backend/node_modules/https-proxy-agent/node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m2;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports2.storage.getItem("debug") || exports2.storage.getItem("DEBUG");
      } catch (error) {
      }
      if (!r2 && typeof process !== "undefined" && "env" in process) {
        r2 = process.env.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common2()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../backend/node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "../backend/node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv) => {
      argv = argv || process.argv;
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const pos = argv.indexOf(prefix + flag);
      const terminatorPos = argv.indexOf("--");
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// ../backend/node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "../backend/node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var hasFlag = require_has_flag();
    var env = process.env;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      const min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      if (env.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// ../backend/node_modules/https-proxy-agent/node_modules/debug/src/node.js
var require_node = __commonJS({
  "../backend/node_modules/https-proxy-agent/node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.formatWithOptions(exports2.inspectOpts, ...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i2 = 0; i2 < keys.length; i2++) {
        debug.inspectOpts[keys[i2]] = exports2.inspectOpts[keys[i2]];
      }
    }
    module2.exports = require_common2()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// ../backend/node_modules/https-proxy-agent/node_modules/debug/src/index.js
var require_src = __commonJS({
  "../backend/node_modules/https-proxy-agent/node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// ../backend/node_modules/agent-base/dist/helpers.js
var require_helpers = __commonJS({
  "../backend/node_modules/agent-base/dist/helpers.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.req = exports2.json = exports2.toBuffer = void 0;
    var http3 = __importStar2(require("http"));
    var https2 = __importStar2(require("https"));
    async function toBuffer(stream) {
      let length = 0;
      const chunks = [];
      for await (const chunk of stream) {
        length += chunk.length;
        chunks.push(chunk);
      }
      return Buffer.concat(chunks, length);
    }
    exports2.toBuffer = toBuffer;
    async function json(stream) {
      const buf = await toBuffer(stream);
      const str = buf.toString("utf8");
      try {
        return JSON.parse(str);
      } catch (_err) {
        const err = _err;
        err.message += ` (input: ${str})`;
        throw err;
      }
    }
    exports2.json = json;
    function req(url, opts = {}) {
      const href = typeof url === "string" ? url : url.href;
      const req2 = (href.startsWith("https:") ? https2 : http3).request(url, opts);
      const promise = new Promise((resolve, reject) => {
        req2.once("response", resolve).once("error", reject).end();
      });
      req2.then = promise.then.bind(promise);
      return req2;
    }
    exports2.req = req;
  }
});

// ../backend/node_modules/agent-base/dist/index.js
var require_dist = __commonJS({
  "../backend/node_modules/agent-base/dist/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Agent = void 0;
    var net = __importStar2(require("net"));
    var http3 = __importStar2(require("http"));
    var https_1 = require("https");
    __exportStar2(require_helpers(), exports2);
    var INTERNAL = Symbol("AgentBaseInternalState");
    var Agent = class extends http3.Agent {
      constructor(opts) {
        super(opts);
        this[INTERNAL] = {};
      }
      /**
       * Determine whether this is an `http` or `https` request.
       */
      isSecureEndpoint(options) {
        if (options) {
          if (typeof options.secureEndpoint === "boolean") {
            return options.secureEndpoint;
          }
          if (typeof options.protocol === "string") {
            return options.protocol === "https:";
          }
        }
        const { stack } = new Error();
        if (typeof stack !== "string")
          return false;
        return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
      }
      // In order to support async signatures in `connect()` and Node's native
      // connection pooling in `http.Agent`, the array of sockets for each origin
      // has to be updated synchronously. This is so the length of the array is
      // accurate when `addRequest()` is next called. We achieve this by creating a
      // fake socket and adding it to `sockets[origin]` and incrementing
      // `totalSocketCount`.
      incrementSockets(name) {
        if (this.maxSockets === Infinity && this.maxTotalSockets === Infinity) {
          return null;
        }
        if (!this.sockets[name]) {
          this.sockets[name] = [];
        }
        const fakeSocket = new net.Socket({ writable: false });
        this.sockets[name].push(fakeSocket);
        this.totalSocketCount++;
        return fakeSocket;
      }
      decrementSockets(name, socket) {
        if (!this.sockets[name] || socket === null) {
          return;
        }
        const sockets = this.sockets[name];
        const index = sockets.indexOf(socket);
        if (index !== -1) {
          sockets.splice(index, 1);
          this.totalSocketCount--;
          if (sockets.length === 0) {
            delete this.sockets[name];
          }
        }
      }
      // In order to properly update the socket pool, we need to call `getName()` on
      // the core `https.Agent` if it is a secureEndpoint.
      getName(options) {
        const secureEndpoint = this.isSecureEndpoint(options);
        if (secureEndpoint) {
          return https_1.Agent.prototype.getName.call(this, options);
        }
        return super.getName(options);
      }
      createSocket(req, options, cb) {
        const connectOpts = {
          ...options,
          secureEndpoint: this.isSecureEndpoint(options)
        };
        const name = this.getName(connectOpts);
        const fakeSocket = this.incrementSockets(name);
        Promise.resolve().then(() => this.connect(req, connectOpts)).then((socket) => {
          this.decrementSockets(name, fakeSocket);
          if (socket instanceof http3.Agent) {
            try {
              return socket.addRequest(req, connectOpts);
            } catch (err) {
              return cb(err);
            }
          }
          this[INTERNAL].currentSocket = socket;
          super.createSocket(req, options, cb);
        }, (err) => {
          this.decrementSockets(name, fakeSocket);
          cb(err);
        });
      }
      createConnection() {
        const socket = this[INTERNAL].currentSocket;
        this[INTERNAL].currentSocket = void 0;
        if (!socket) {
          throw new Error("No socket was returned in the `connect()` function");
        }
        return socket;
      }
      get defaultPort() {
        return this[INTERNAL].defaultPort ?? (this.protocol === "https:" ? 443 : 80);
      }
      set defaultPort(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].defaultPort = v;
        }
      }
      get protocol() {
        return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? "https:" : "http:");
      }
      set protocol(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].protocol = v;
        }
      }
    };
    exports2.Agent = Agent;
  }
});

// ../backend/node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response = __commonJS({
  "../backend/node_modules/https-proxy-agent/dist/parse-proxy-response.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseProxyResponse = void 0;
    var debug_1 = __importDefault2(require_src());
    var debug = (0, debug_1.default)("https-proxy-agent:parse-proxy-response");
    function parseProxyResponse(socket) {
      return new Promise((resolve, reject) => {
        let buffersLength = 0;
        const buffers = [];
        function read() {
          const b = socket.read();
          if (b)
            ondata(b);
          else
            socket.once("readable", read);
        }
        function cleanup() {
          socket.removeListener("end", onend);
          socket.removeListener("error", onerror);
          socket.removeListener("readable", read);
        }
        function onend() {
          cleanup();
          debug("onend");
          reject(new Error("Proxy connection ended before receiving CONNECT response"));
        }
        function onerror(err) {
          cleanup();
          debug("onerror %o", err);
          reject(err);
        }
        function ondata(b) {
          buffers.push(b);
          buffersLength += b.length;
          const buffered = Buffer.concat(buffers, buffersLength);
          const endOfHeaders = buffered.indexOf("\r\n\r\n");
          if (endOfHeaders === -1) {
            debug("have not received end of HTTP headers yet...");
            read();
            return;
          }
          const headerParts = buffered.slice(0, endOfHeaders).toString("ascii").split("\r\n");
          const firstLine = headerParts.shift();
          if (!firstLine) {
            socket.destroy();
            return reject(new Error("No header received from proxy CONNECT response"));
          }
          const firstLineParts = firstLine.split(" ");
          const statusCode = +firstLineParts[1];
          const statusText = firstLineParts.slice(2).join(" ");
          const headers = {};
          for (const header of headerParts) {
            if (!header)
              continue;
            const firstColon = header.indexOf(":");
            if (firstColon === -1) {
              socket.destroy();
              return reject(new Error(`Invalid header from proxy CONNECT response: "${header}"`));
            }
            const key = header.slice(0, firstColon).toLowerCase();
            const value = header.slice(firstColon + 1).trimStart();
            const current = headers[key];
            if (typeof current === "string") {
              headers[key] = [current, value];
            } else if (Array.isArray(current)) {
              current.push(value);
            } else {
              headers[key] = value;
            }
          }
          debug("got proxy server response: %o %o", firstLine, headers);
          cleanup();
          resolve({
            connect: {
              statusCode,
              statusText,
              headers
            },
            buffered
          });
        }
        socket.on("error", onerror);
        socket.on("end", onend);
        read();
      });
    }
    exports2.parseProxyResponse = parseProxyResponse;
  }
});

// ../backend/node_modules/https-proxy-agent/dist/index.js
var require_dist2 = __commonJS({
  "../backend/node_modules/https-proxy-agent/dist/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpsProxyAgent = void 0;
    var net = __importStar2(require("net"));
    var tls = __importStar2(require("tls"));
    var assert_1 = __importDefault2(require("assert"));
    var debug_1 = __importDefault2(require_src());
    var agent_base_1 = require_dist();
    var url_1 = require("url");
    var parse_proxy_response_1 = require_parse_proxy_response();
    var debug = (0, debug_1.default)("https-proxy-agent");
    var setServernameFromNonIpHost = (options) => {
      if (options.servername === void 0 && options.host && !net.isIP(options.host)) {
        return {
          ...options,
          servername: options.host
        };
      }
      return options;
    };
    var HttpsProxyAgent = class extends agent_base_1.Agent {
      constructor(proxy, opts) {
        super(opts);
        this.options = { path: void 0 };
        this.proxy = typeof proxy === "string" ? new url_1.URL(proxy) : proxy;
        this.proxyHeaders = opts?.headers ?? {};
        debug("Creating new HttpsProxyAgent instance: %o", this.proxy.href);
        const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, "");
        const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === "https:" ? 443 : 80;
        this.connectOpts = {
          // Attempt to negotiate http/1.1 for proxy servers that support http/2
          ALPNProtocols: ["http/1.1"],
          ...opts ? omit(opts, "headers") : null,
          host,
          port
        };
      }
      /**
       * Called when the node-core HTTP client library is creating a
       * new HTTP request.
       */
      async connect(req, opts) {
        const { proxy } = this;
        if (!opts.host) {
          throw new TypeError('No "host" provided');
        }
        let socket;
        if (proxy.protocol === "https:") {
          debug("Creating `tls.Socket`: %o", this.connectOpts);
          socket = tls.connect(setServernameFromNonIpHost(this.connectOpts));
        } else {
          debug("Creating `net.Socket`: %o", this.connectOpts);
          socket = net.connect(this.connectOpts);
        }
        const headers = typeof this.proxyHeaders === "function" ? this.proxyHeaders() : { ...this.proxyHeaders };
        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;
        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\r
`;
        if (proxy.username || proxy.password) {
          const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
          headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
        }
        headers.Host = `${host}:${opts.port}`;
        if (!headers["Proxy-Connection"]) {
          headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close";
        }
        for (const name of Object.keys(headers)) {
          payload += `${name}: ${headers[name]}\r
`;
        }
        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);
        socket.write(`${payload}\r
`);
        const { connect, buffered } = await proxyResponsePromise;
        req.emit("proxyConnect", connect);
        this.emit("proxyConnect", connect, req);
        if (connect.statusCode === 200) {
          req.once("socket", resume);
          if (opts.secureEndpoint) {
            debug("Upgrading socket connection to TLS");
            return tls.connect({
              ...omit(setServernameFromNonIpHost(opts), "host", "path", "port"),
              socket
            });
          }
          return socket;
        }
        socket.destroy();
        const fakeSocket = new net.Socket({ writable: false });
        fakeSocket.readable = true;
        req.once("socket", (s2) => {
          debug("Replaying proxy buffer for failed request");
          (0, assert_1.default)(s2.listenerCount("data") > 0);
          s2.push(buffered);
          s2.push(null);
        });
        return fakeSocket;
      }
    };
    HttpsProxyAgent.protocols = ["http", "https"];
    exports2.HttpsProxyAgent = HttpsProxyAgent;
    function resume(socket) {
      socket.resume();
    }
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
  }
});

// ../backend/node_modules/data-uri-to-buffer/dist/index.js
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i2 = 1; i2 < meta.length; i2++) {
    if (meta[i2] === "base64") {
      base64 = true;
    } else if (meta[i2]) {
      typeFull += `;${meta[i2]}`;
      if (meta[i2].indexOf("charset=") === 0) {
        charset = meta[i2].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
var dist_default;
var init_dist = __esm({
  "../backend/node_modules/data-uri-to-buffer/dist/index.js"() {
    dist_default = dataUriToBuffer;
  }
});

// ../backend/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js
var require_ponyfill_es2018 = __commonJS({
  "../backend/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.WebStreamsPolyfill = {}));
    })(exports2, (function(exports3) {
      "use strict";
      function noop2() {
        return void 0;
      }
      function typeIsObject(x2) {
        return typeof x2 === "object" && x2 !== null || typeof x2 === "function";
      }
      const rethrowAssertionErrorRejection = noop2;
      function setFunctionName(fn, name) {
        try {
          Object.defineProperty(fn, "name", {
            value: name,
            configurable: true
          });
        } catch (_a2) {
        }
      }
      const originalPromise = Promise;
      const originalPromiseThen = Promise.prototype.then;
      const originalPromiseReject = Promise.reject.bind(originalPromise);
      function newPromise(executor) {
        return new originalPromise(executor);
      }
      function promiseResolvedWith(value) {
        return newPromise((resolve) => resolve(value));
      }
      function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
      }
      function PerformPromiseThen(promise, onFulfilled, onRejected) {
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
      }
      function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
      }
      function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
      }
      function uponRejection(promise, onRejected) {
        uponPromise(promise, void 0, onRejected);
      }
      function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
      }
      function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
      }
      let _queueMicrotask = (callback) => {
        if (typeof queueMicrotask === "function") {
          _queueMicrotask = queueMicrotask;
        } else {
          const resolvedPromise = promiseResolvedWith(void 0);
          _queueMicrotask = (cb) => PerformPromiseThen(resolvedPromise, cb);
        }
        return _queueMicrotask(callback);
      };
      function reflectCall(F2, V, args) {
        if (typeof F2 !== "function") {
          throw new TypeError("Argument is not a function");
        }
        return Function.prototype.apply.call(F2, V, args);
      }
      function promiseCall(F2, V, args) {
        try {
          return promiseResolvedWith(reflectCall(F2, V, args));
        } catch (value) {
          return promiseRejectedWith(value);
        }
      }
      const QUEUE_MAX_ARRAY_SIZE = 16384;
      class SimpleQueue {
        constructor() {
          this._cursor = 0;
          this._size = 0;
          this._front = {
            _elements: [],
            _next: void 0
          };
          this._back = this._front;
          this._cursor = 0;
          this._size = 0;
        }
        get length() {
          return this._size;
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(element) {
          const oldBack = this._back;
          let newBack = oldBack;
          if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
            newBack = {
              _elements: [],
              _next: void 0
            };
          }
          oldBack._elements.push(element);
          if (newBack !== oldBack) {
            this._back = newBack;
            oldBack._next = newBack;
          }
          ++this._size;
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() {
          const oldFront = this._front;
          let newFront = oldFront;
          const oldCursor = this._cursor;
          let newCursor = oldCursor + 1;
          const elements = oldFront._elements;
          const element = elements[oldCursor];
          if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
            newFront = oldFront._next;
            newCursor = 0;
          }
          --this._size;
          this._cursor = newCursor;
          if (oldFront !== newFront) {
            this._front = newFront;
          }
          elements[oldCursor] = void 0;
          return element;
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(callback) {
          let i2 = this._cursor;
          let node = this._front;
          let elements = node._elements;
          while (i2 !== elements.length || node._next !== void 0) {
            if (i2 === elements.length) {
              node = node._next;
              elements = node._elements;
              i2 = 0;
              if (elements.length === 0) {
                break;
              }
            }
            callback(elements[i2]);
            ++i2;
          }
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() {
          const front = this._front;
          const cursor = this._cursor;
          return front._elements[cursor];
        }
      }
      const AbortSteps = Symbol("[[AbortSteps]]");
      const ErrorSteps = Symbol("[[ErrorSteps]]");
      const CancelSteps = Symbol("[[CancelSteps]]");
      const PullSteps = Symbol("[[PullSteps]]");
      const ReleaseSteps = Symbol("[[ReleaseSteps]]");
      function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream;
        stream._reader = reader;
        if (stream._state === "readable") {
          defaultReaderClosedPromiseInitialize(reader);
        } else if (stream._state === "closed") {
          defaultReaderClosedPromiseInitializeAsResolved(reader);
        } else {
          defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
        }
      }
      function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
      }
      function ReadableStreamReaderGenericRelease(reader) {
        const stream = reader._ownerReadableStream;
        if (stream._state === "readable") {
          defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        } else {
          defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        stream._readableStreamController[ReleaseSteps]();
        stream._reader = void 0;
        reader._ownerReadableStream = void 0;
      }
      function readerLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released reader");
      }
      function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve, reject) => {
          reader._closedPromise_resolve = resolve;
          reader._closedPromise_reject = reject;
        });
      }
      function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseReject(reader, reason);
      }
      function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseResolve(reader);
      }
      function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(reader._closedPromise);
        reader._closedPromise_reject(reason);
        reader._closedPromise_resolve = void 0;
        reader._closedPromise_reject = void 0;
      }
      function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
      }
      function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === void 0) {
          return;
        }
        reader._closedPromise_resolve(void 0);
        reader._closedPromise_resolve = void 0;
        reader._closedPromise_reject = void 0;
      }
      const NumberIsFinite = Number.isFinite || function(x2) {
        return typeof x2 === "number" && isFinite(x2);
      };
      const MathTrunc = Math.trunc || function(v) {
        return v < 0 ? Math.ceil(v) : Math.floor(v);
      };
      function isDictionary(x2) {
        return typeof x2 === "object" || typeof x2 === "function";
      }
      function assertDictionary(obj, context) {
        if (obj !== void 0 && !isDictionary(obj)) {
          throw new TypeError(`${context} is not an object.`);
        }
      }
      function assertFunction(x2, context) {
        if (typeof x2 !== "function") {
          throw new TypeError(`${context} is not a function.`);
        }
      }
      function isObject(x2) {
        return typeof x2 === "object" && x2 !== null || typeof x2 === "function";
      }
      function assertObject(x2, context) {
        if (!isObject(x2)) {
          throw new TypeError(`${context} is not an object.`);
        }
      }
      function assertRequiredArgument(x2, position, context) {
        if (x2 === void 0) {
          throw new TypeError(`Parameter ${position} is required in '${context}'.`);
        }
      }
      function assertRequiredField(x2, field, context) {
        if (x2 === void 0) {
          throw new TypeError(`${field} is required in '${context}'.`);
        }
      }
      function convertUnrestrictedDouble(value) {
        return Number(value);
      }
      function censorNegativeZero(x2) {
        return x2 === 0 ? 0 : x2;
      }
      function integerPart(x2) {
        return censorNegativeZero(MathTrunc(x2));
      }
      function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0;
        const upperBound = Number.MAX_SAFE_INTEGER;
        let x2 = Number(value);
        x2 = censorNegativeZero(x2);
        if (!NumberIsFinite(x2)) {
          throw new TypeError(`${context} is not a finite number`);
        }
        x2 = integerPart(x2);
        if (x2 < lowerBound || x2 > upperBound) {
          throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
        }
        if (!NumberIsFinite(x2) || x2 === 0) {
          return 0;
        }
        return x2;
      }
      function assertReadableStream(x2, context) {
        if (!IsReadableStream(x2)) {
          throw new TypeError(`${context} is not a ReadableStream.`);
        }
      }
      function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream);
      }
      function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
      }
      function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readRequest = reader._readRequests.shift();
        if (done) {
          readRequest._closeSteps();
        } else {
          readRequest._chunkSteps(chunk);
        }
      }
      function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
      }
      function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader;
        if (reader === void 0) {
          return false;
        }
        if (!IsReadableStreamDefaultReader(reader)) {
          return false;
        }
        return true;
      }
      class ReadableStreamDefaultReader {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
          assertReadableStream(stream, "First parameter");
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          }
          ReadableStreamReaderGenericInitialize(this, stream);
          this._readRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = void 0) {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("cancel"));
          }
          return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("read"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("read from"));
          }
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
          });
          const readRequest = {
            _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
            _closeSteps: () => resolvePromise({ value: void 0, done: true }),
            _errorSteps: (e2) => rejectPromise(e2)
          };
          ReadableStreamDefaultReaderRead(this, readRequest);
          return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!IsReadableStreamDefaultReader(this)) {
            throw defaultReaderBrandCheckException("releaseLock");
          }
          if (this._ownerReadableStream === void 0) {
            return;
          }
          ReadableStreamDefaultReaderRelease(this);
        }
      }
      Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      });
      setFunctionName(ReadableStreamDefaultReader.prototype.cancel, "cancel");
      setFunctionName(ReadableStreamDefaultReader.prototype.read, "read");
      setFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, "releaseLock");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {
          value: "ReadableStreamDefaultReader",
          configurable: true
        });
      }
      function IsReadableStreamDefaultReader(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_readRequests")) {
          return false;
        }
        return x2 instanceof ReadableStreamDefaultReader;
      }
      function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === "closed") {
          readRequest._closeSteps();
        } else if (stream._state === "errored") {
          readRequest._errorSteps(stream._storedError);
        } else {
          stream._readableStreamController[PullSteps](readRequest);
        }
      }
      function ReadableStreamDefaultReaderRelease(reader) {
        ReadableStreamReaderGenericRelease(reader);
        const e2 = new TypeError("Reader was released");
        ReadableStreamDefaultReaderErrorReadRequests(reader, e2);
      }
      function ReadableStreamDefaultReaderErrorReadRequests(reader, e2) {
        const readRequests = reader._readRequests;
        reader._readRequests = new SimpleQueue();
        readRequests.forEach((readRequest) => {
          readRequest._errorSteps(e2);
        });
      }
      function defaultReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
      }
      const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
      }).prototype);
      class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
          this._ongoingPromise = void 0;
          this._isFinished = false;
          this._reader = reader;
          this._preventCancel = preventCancel;
        }
        next() {
          const nextSteps = () => this._nextSteps();
          this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
          return this._ongoingPromise;
        }
        return(value) {
          const returnSteps = () => this._returnSteps(value);
          return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
        }
        _nextSteps() {
          if (this._isFinished) {
            return Promise.resolve({ value: void 0, done: true });
          }
          const reader = this._reader;
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
          });
          const readRequest = {
            _chunkSteps: (chunk) => {
              this._ongoingPromise = void 0;
              _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
            },
            _closeSteps: () => {
              this._ongoingPromise = void 0;
              this._isFinished = true;
              ReadableStreamReaderGenericRelease(reader);
              resolvePromise({ value: void 0, done: true });
            },
            _errorSteps: (reason) => {
              this._ongoingPromise = void 0;
              this._isFinished = true;
              ReadableStreamReaderGenericRelease(reader);
              rejectPromise(reason);
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
          return promise;
        }
        _returnSteps(value) {
          if (this._isFinished) {
            return Promise.resolve({ value, done: true });
          }
          this._isFinished = true;
          const reader = this._reader;
          if (!this._preventCancel) {
            const result = ReadableStreamReaderGenericCancel(reader, value);
            ReadableStreamReaderGenericRelease(reader);
            return transformPromiseWith(result, () => ({ value, done: true }));
          }
          ReadableStreamReaderGenericRelease(reader);
          return promiseResolvedWith({ value, done: true });
        }
      }
      const ReadableStreamAsyncIteratorPrototype = {
        next() {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
          }
          return this._asyncIteratorImpl.next();
        },
        return(value) {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
          }
          return this._asyncIteratorImpl.return(value);
        }
      };
      Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
      function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        iterator._asyncIteratorImpl = impl;
        return iterator;
      }
      function IsReadableStreamAsyncIterator(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_asyncIteratorImpl")) {
          return false;
        }
        try {
          return x2._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
        } catch (_a2) {
          return false;
        }
      }
      function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
      }
      const NumberIsNaN = Number.isNaN || function(x2) {
        return x2 !== x2;
      };
      var _a, _b, _c;
      function CreateArrayFromList(elements) {
        return elements.slice();
      }
      function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
      }
      let TransferArrayBuffer = (O) => {
        if (typeof O.transfer === "function") {
          TransferArrayBuffer = (buffer) => buffer.transfer();
        } else if (typeof structuredClone === "function") {
          TransferArrayBuffer = (buffer) => structuredClone(buffer, { transfer: [buffer] });
        } else {
          TransferArrayBuffer = (buffer) => buffer;
        }
        return TransferArrayBuffer(O);
      };
      let IsDetachedBuffer = (O) => {
        if (typeof O.detached === "boolean") {
          IsDetachedBuffer = (buffer) => buffer.detached;
        } else {
          IsDetachedBuffer = (buffer) => buffer.byteLength === 0;
        }
        return IsDetachedBuffer(O);
      };
      function ArrayBufferSlice(buffer, begin, end) {
        if (buffer.slice) {
          return buffer.slice(begin, end);
        }
        const length = end - begin;
        const slice = new ArrayBuffer(length);
        CopyDataBlockBytes(slice, 0, buffer, begin, length);
        return slice;
      }
      function GetMethod(receiver, prop) {
        const func = receiver[prop];
        if (func === void 0 || func === null) {
          return void 0;
        }
        if (typeof func !== "function") {
          throw new TypeError(`${String(prop)} is not a function`);
        }
        return func;
      }
      function CreateAsyncFromSyncIterator(syncIteratorRecord) {
        const syncIterable = {
          [Symbol.iterator]: () => syncIteratorRecord.iterator
        };
        const asyncIterator = (async function* () {
          return yield* syncIterable;
        })();
        const nextMethod = asyncIterator.next;
        return { iterator: asyncIterator, nextMethod, done: false };
      }
      const SymbolAsyncIterator = (_c = (_a = Symbol.asyncIterator) !== null && _a !== void 0 ? _a : (_b = Symbol.for) === null || _b === void 0 ? void 0 : _b.call(Symbol, "Symbol.asyncIterator")) !== null && _c !== void 0 ? _c : "@@asyncIterator";
      function GetIterator(obj, hint = "sync", method) {
        if (method === void 0) {
          if (hint === "async") {
            method = GetMethod(obj, SymbolAsyncIterator);
            if (method === void 0) {
              const syncMethod = GetMethod(obj, Symbol.iterator);
              const syncIteratorRecord = GetIterator(obj, "sync", syncMethod);
              return CreateAsyncFromSyncIterator(syncIteratorRecord);
            }
          } else {
            method = GetMethod(obj, Symbol.iterator);
          }
        }
        if (method === void 0) {
          throw new TypeError("The object is not iterable");
        }
        const iterator = reflectCall(method, obj, []);
        if (!typeIsObject(iterator)) {
          throw new TypeError("The iterator method must return an object");
        }
        const nextMethod = iterator.next;
        return { iterator, nextMethod, done: false };
      }
      function IteratorNext(iteratorRecord) {
        const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);
        if (!typeIsObject(result)) {
          throw new TypeError("The iterator.next() method must return an object");
        }
        return result;
      }
      function IteratorComplete(iterResult) {
        return Boolean(iterResult.done);
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IsNonNegativeNumber(v) {
        if (typeof v !== "number") {
          return false;
        }
        if (NumberIsNaN(v)) {
          return false;
        }
        if (v < 0) {
          return false;
        }
        return true;
      }
      function CloneAsUint8Array(O) {
        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
        return new Uint8Array(buffer);
      }
      function DequeueValue(container) {
        const pair = container._queue.shift();
        container._queueTotalSize -= pair.size;
        if (container._queueTotalSize < 0) {
          container._queueTotalSize = 0;
        }
        return pair.value;
      }
      function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
          throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
        }
        container._queue.push({ value, size });
        container._queueTotalSize += size;
      }
      function PeekQueueValue(container) {
        const pair = container._queue.peek();
        return pair.value;
      }
      function ResetQueue(container) {
        container._queue = new SimpleQueue();
        container._queueTotalSize = 0;
      }
      function isDataViewConstructor(ctor) {
        return ctor === DataView;
      }
      function isDataView(view) {
        return isDataViewConstructor(view.constructor);
      }
      function arrayBufferViewElementSize(ctor) {
        if (isDataViewConstructor(ctor)) {
          return 1;
        }
        return ctor.BYTES_PER_ELEMENT;
      }
      class ReadableStreamBYOBRequest {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("view");
          }
          return this._view;
        }
        respond(bytesWritten) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("respond");
          }
          assertRequiredArgument(bytesWritten, 1, "respond");
          bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
          if (this._associatedReadableByteStreamController === void 0) {
            throw new TypeError("This BYOB request has been invalidated");
          }
          if (IsDetachedBuffer(this._view.buffer)) {
            throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);
          }
          ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
        }
        respondWithNewView(view) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("respondWithNewView");
          }
          assertRequiredArgument(view, 1, "respondWithNewView");
          if (!ArrayBuffer.isView(view)) {
            throw new TypeError("You can only respond with array buffer views");
          }
          if (this._associatedReadableByteStreamController === void 0) {
            throw new TypeError("This BYOB request has been invalidated");
          }
          if (IsDetachedBuffer(view.buffer)) {
            throw new TypeError("The given view's buffer has been detached and so cannot be used as a response");
          }
          ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
        }
      }
      Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
      });
      setFunctionName(ReadableStreamBYOBRequest.prototype.respond, "respond");
      setFunctionName(ReadableStreamBYOBRequest.prototype.respondWithNewView, "respondWithNewView");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {
          value: "ReadableStreamBYOBRequest",
          configurable: true
        });
      }
      class ReadableByteStreamController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("byobRequest");
          }
          return ReadableByteStreamControllerGetBYOBRequest(this);
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("desiredSize");
          }
          return ReadableByteStreamControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("close");
          }
          if (this._closeRequested) {
            throw new TypeError("The stream has already been closed; do not close it again!");
          }
          const state = this._controlledReadableByteStream._state;
          if (state !== "readable") {
            throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
          }
          ReadableByteStreamControllerClose(this);
        }
        enqueue(chunk) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("enqueue");
          }
          assertRequiredArgument(chunk, 1, "enqueue");
          if (!ArrayBuffer.isView(chunk)) {
            throw new TypeError("chunk must be an array buffer view");
          }
          if (chunk.byteLength === 0) {
            throw new TypeError("chunk must have non-zero byteLength");
          }
          if (chunk.buffer.byteLength === 0) {
            throw new TypeError(`chunk's buffer must have non-zero byteLength`);
          }
          if (this._closeRequested) {
            throw new TypeError("stream is closed or draining");
          }
          const state = this._controlledReadableByteStream._state;
          if (state !== "readable") {
            throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
          }
          ReadableByteStreamControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e2 = void 0) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("error");
          }
          ReadableByteStreamControllerError(this, e2);
        }
        /** @internal */
        [CancelSteps](reason) {
          ReadableByteStreamControllerClearPendingPullIntos(this);
          ResetQueue(this);
          const result = this._cancelAlgorithm(reason);
          ReadableByteStreamControllerClearAlgorithms(this);
          return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
          const stream = this._controlledReadableByteStream;
          if (this._queueTotalSize > 0) {
            ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);
            return;
          }
          const autoAllocateChunkSize = this._autoAllocateChunkSize;
          if (autoAllocateChunkSize !== void 0) {
            let buffer;
            try {
              buffer = new ArrayBuffer(autoAllocateChunkSize);
            } catch (bufferE) {
              readRequest._errorSteps(bufferE);
              return;
            }
            const pullIntoDescriptor = {
              buffer,
              bufferByteLength: autoAllocateChunkSize,
              byteOffset: 0,
              byteLength: autoAllocateChunkSize,
              bytesFilled: 0,
              minimumFill: 1,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: "default"
            };
            this._pendingPullIntos.push(pullIntoDescriptor);
          }
          ReadableStreamAddReadRequest(stream, readRequest);
          ReadableByteStreamControllerCallPullIfNeeded(this);
        }
        /** @internal */
        [ReleaseSteps]() {
          if (this._pendingPullIntos.length > 0) {
            const firstPullInto = this._pendingPullIntos.peek();
            firstPullInto.readerType = "none";
            this._pendingPullIntos = new SimpleQueue();
            this._pendingPullIntos.push(firstPullInto);
          }
        }
      }
      Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(ReadableByteStreamController.prototype.close, "close");
      setFunctionName(ReadableByteStreamController.prototype.enqueue, "enqueue");
      setFunctionName(ReadableByteStreamController.prototype.error, "error");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {
          value: "ReadableByteStreamController",
          configurable: true
        });
      }
      function IsReadableByteStreamController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledReadableByteStream")) {
          return false;
        }
        return x2 instanceof ReadableByteStreamController;
      }
      function IsReadableStreamBYOBRequest(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_associatedReadableByteStreamController")) {
          return false;
        }
        return x2 instanceof ReadableStreamBYOBRequest;
      }
      function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (!shouldPull) {
          return;
        }
        if (controller._pulling) {
          controller._pullAgain = true;
          return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
          controller._pulling = false;
          if (controller._pullAgain) {
            controller._pullAgain = false;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
          }
          return null;
        }, (e2) => {
          ReadableByteStreamControllerError(controller, e2);
          return null;
        });
      }
      function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        controller._pendingPullIntos = new SimpleQueue();
      }
      function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        let done = false;
        if (stream._state === "closed") {
          done = true;
        }
        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === "default") {
          ReadableStreamFulfillReadRequest(stream, filledView, done);
        } else {
          ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
        }
      }
      function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        const bytesFilled = pullIntoDescriptor.bytesFilled;
        const elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
      }
      function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength });
        controller._queueTotalSize += byteLength;
      }
      function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength) {
        let clonedChunk;
        try {
          clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);
        } catch (cloneE) {
          ReadableByteStreamControllerError(controller, cloneE);
          throw cloneE;
        }
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);
      }
      function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor) {
        if (firstDescriptor.bytesFilled > 0) {
          ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, firstDescriptor.buffer, firstDescriptor.byteOffset, firstDescriptor.bytesFilled);
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
      }
      function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
        let totalBytesToCopyRemaining = maxBytesToCopy;
        let ready = false;
        const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;
        const maxAlignedBytes = maxBytesFilled - remainderBytes;
        if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {
          totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
          ready = true;
        }
        const queue = controller._queue;
        while (totalBytesToCopyRemaining > 0) {
          const headOfQueue = queue.peek();
          const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
          const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
          if (headOfQueue.byteLength === bytesToCopy) {
            queue.shift();
          } else {
            headOfQueue.byteOffset += bytesToCopy;
            headOfQueue.byteLength -= bytesToCopy;
          }
          controller._queueTotalSize -= bytesToCopy;
          ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
          totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
      }
      function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size;
      }
      function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
          ReadableByteStreamControllerClearAlgorithms(controller);
          ReadableStreamClose(controller._controlledReadableByteStream);
        } else {
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
      }
      function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
          return;
        }
        controller._byobRequest._associatedReadableByteStreamController = void 0;
        controller._byobRequest._view = null;
        controller._byobRequest = null;
      }
      function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        while (controller._pendingPullIntos.length > 0) {
          if (controller._queueTotalSize === 0) {
            return;
          }
          const pullIntoDescriptor = controller._pendingPullIntos.peek();
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
          }
        }
      }
      function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {
        const reader = controller._controlledReadableByteStream._reader;
        while (reader._readRequests.length > 0) {
          if (controller._queueTotalSize === 0) {
            return;
          }
          const readRequest = reader._readRequests.shift();
          ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);
        }
      }
      function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {
        const stream = controller._controlledReadableByteStream;
        const ctor = view.constructor;
        const elementSize = arrayBufferViewElementSize(ctor);
        const { byteOffset, byteLength } = view;
        const minimumFill = min * elementSize;
        let buffer;
        try {
          buffer = TransferArrayBuffer(view.buffer);
        } catch (e2) {
          readIntoRequest._errorSteps(e2);
          return;
        }
        const pullIntoDescriptor = {
          buffer,
          bufferByteLength: buffer.byteLength,
          byteOffset,
          byteLength,
          bytesFilled: 0,
          minimumFill,
          elementSize,
          viewConstructor: ctor,
          readerType: "byob"
        };
        if (controller._pendingPullIntos.length > 0) {
          controller._pendingPullIntos.push(pullIntoDescriptor);
          ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
          return;
        }
        if (stream._state === "closed") {
          const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
          readIntoRequest._closeSteps(emptyView);
          return;
        }
        if (controller._queueTotalSize > 0) {
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
            ReadableByteStreamControllerHandleQueueDrain(controller);
            readIntoRequest._chunkSteps(filledView);
            return;
          }
          if (controller._closeRequested) {
            const e2 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e2);
            readIntoRequest._errorSteps(e2);
            return;
          }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        if (firstDescriptor.readerType === "none") {
          ReadableByteStreamControllerShiftPendingPullInto(controller);
        }
        const stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream)) {
          while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
          }
        }
      }
      function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === "none") {
          ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
          return;
        }
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {
          return;
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
        if (remainderSize > 0) {
          const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, pullIntoDescriptor.buffer, end - remainderSize, remainderSize);
        }
        pullIntoDescriptor.bytesFilled -= remainderSize;
        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
      }
      function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);
        } else {
          ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift();
        return descriptor;
      }
      function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable") {
          return false;
        }
        if (controller._closeRequested) {
          return false;
        }
        if (!controller._started) {
          return false;
        }
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          return true;
        }
        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
          return true;
        }
        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
          return true;
        }
        return false;
      }
      function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
      }
      function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== "readable") {
          return;
        }
        if (controller._queueTotalSize > 0) {
          controller._closeRequested = true;
          return;
        }
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek();
          if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {
            const e2 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e2);
            throw e2;
          }
        }
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
      }
      function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== "readable") {
          return;
        }
        const { buffer, byteOffset, byteLength } = chunk;
        if (IsDetachedBuffer(buffer)) {
          throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
        }
        const transferredBuffer = TransferArrayBuffer(buffer);
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek();
          if (IsDetachedBuffer(firstPendingPullInto.buffer)) {
            throw new TypeError("The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk");
          }
          ReadableByteStreamControllerInvalidateBYOBRequest(controller);
          firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
          if (firstPendingPullInto.readerType === "none") {
            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);
          }
        }
        if (ReadableStreamHasDefaultReader(stream)) {
          ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);
          if (ReadableStreamGetNumReadRequests(stream) === 0) {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          } else {
            if (controller._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerShiftPendingPullInto(controller);
            }
            const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
            ReadableStreamFulfillReadRequest(stream, transferredView, false);
          }
        } else if (ReadableStreamHasBYOBReader(stream)) {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        } else {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerError(controller, e2) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable") {
          return;
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller);
        ResetQueue(controller);
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e2);
      }
      function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {
        const entry = controller._queue.shift();
        controller._queueTotalSize -= entry.byteLength;
        ReadableByteStreamControllerHandleQueueDrain(controller);
        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
        readRequest._chunkSteps(view);
      }
      function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
          const firstDescriptor = controller._pendingPullIntos.peek();
          const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
          const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
          SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
          controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
      }
      function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state;
        if (state === "errored") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (bytesWritten !== 0) {
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
          }
        } else {
          if (bytesWritten === 0) {
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          }
          if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
            throw new RangeError("bytesWritten out of range");
          }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
      }
      function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (view.byteLength !== 0) {
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
          }
        } else {
          if (view.byteLength === 0) {
            throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
          }
        }
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
          throw new RangeError("The region specified by view does not match byobRequest");
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        }
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
          throw new RangeError("The region specified by view is larger than byobRequest");
        }
        const viewByteLength = view.byteLength;
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
      }
      function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._byobRequest = null;
        controller._queue = controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._closeRequested = false;
        controller._started = false;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._autoAllocateChunkSize = autoAllocateChunkSize;
        controller._pendingPullIntos = new SimpleQueue();
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
          controller._started = true;
          ReadableByteStreamControllerCallPullIfNeeded(controller);
          return null;
        }, (r2) => {
          ReadableByteStreamControllerError(controller, r2);
          return null;
        });
      }
      function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        const controller = Object.create(ReadableByteStreamController.prototype);
        let startAlgorithm;
        let pullAlgorithm;
        let cancelAlgorithm;
        if (underlyingByteSource.start !== void 0) {
          startAlgorithm = () => underlyingByteSource.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingByteSource.pull !== void 0) {
          pullAlgorithm = () => underlyingByteSource.pull(controller);
        } else {
          pullAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingByteSource.cancel !== void 0) {
          cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0) {
          throw new TypeError("autoAllocateChunkSize must be greater than 0");
        }
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
      }
      function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller;
        request._view = view;
      }
      function byobRequestBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
      }
      function byteStreamControllerBrandCheckException(name) {
        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
      }
      function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        const mode = options === null || options === void 0 ? void 0 : options.mode;
        return {
          mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
        };
      }
      function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`;
        if (mode !== "byob") {
          throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
        }
        return mode;
      }
      function convertByobReadOptions(options, context) {
        var _a2;
        assertDictionary(options, context);
        const min = (_a2 = options === null || options === void 0 ? void 0 : options.min) !== null && _a2 !== void 0 ? _a2 : 1;
        return {
          min: convertUnsignedLongLongWithEnforceRange(min, `${context} has member 'min' that`)
        };
      }
      function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream);
      }
      function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
      }
      function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readIntoRequest = reader._readIntoRequests.shift();
        if (done) {
          readIntoRequest._closeSteps(chunk);
        } else {
          readIntoRequest._chunkSteps(chunk);
        }
      }
      function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
      }
      function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader;
        if (reader === void 0) {
          return false;
        }
        if (!IsReadableStreamBYOBReader(reader)) {
          return false;
        }
        return true;
      }
      class ReadableStreamBYOBReader {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
          assertReadableStream(stream, "First parameter");
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          }
          if (!IsReadableByteStreamController(stream._readableStreamController)) {
            throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
          }
          ReadableStreamReaderGenericInitialize(this, stream);
          this._readIntoRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = void 0) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("cancel"));
          }
          return ReadableStreamReaderGenericCancel(this, reason);
        }
        read(view, rawOptions = {}) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("read"));
          }
          if (!ArrayBuffer.isView(view)) {
            return promiseRejectedWith(new TypeError("view must be an array buffer view"));
          }
          if (view.byteLength === 0) {
            return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
          }
          if (view.buffer.byteLength === 0) {
            return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
          }
          if (IsDetachedBuffer(view.buffer)) {
            return promiseRejectedWith(new TypeError("view's buffer has been detached"));
          }
          let options;
          try {
            options = convertByobReadOptions(rawOptions, "options");
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          const min = options.min;
          if (min === 0) {
            return promiseRejectedWith(new TypeError("options.min must be greater than 0"));
          }
          if (!isDataView(view)) {
            if (min > view.length) {
              return promiseRejectedWith(new RangeError("options.min must be less than or equal to view's length"));
            }
          } else if (min > view.byteLength) {
            return promiseRejectedWith(new RangeError("options.min must be less than or equal to view's byteLength"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("read from"));
          }
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
          });
          const readIntoRequest = {
            _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
            _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
            _errorSteps: (e2) => rejectPromise(e2)
          };
          ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);
          return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!IsReadableStreamBYOBReader(this)) {
            throw byobReaderBrandCheckException("releaseLock");
          }
          if (this._ownerReadableStream === void 0) {
            return;
          }
          ReadableStreamBYOBReaderRelease(this);
        }
      }
      Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      });
      setFunctionName(ReadableStreamBYOBReader.prototype.cancel, "cancel");
      setFunctionName(ReadableStreamBYOBReader.prototype.read, "read");
      setFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, "releaseLock");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {
          value: "ReadableStreamBYOBReader",
          configurable: true
        });
      }
      function IsReadableStreamBYOBReader(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_readIntoRequests")) {
          return false;
        }
        return x2 instanceof ReadableStreamBYOBReader;
      }
      function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === "errored") {
          readIntoRequest._errorSteps(stream._storedError);
        } else {
          ReadableByteStreamControllerPullInto(stream._readableStreamController, view, min, readIntoRequest);
        }
      }
      function ReadableStreamBYOBReaderRelease(reader) {
        ReadableStreamReaderGenericRelease(reader);
        const e2 = new TypeError("Reader was released");
        ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2);
      }
      function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2) {
        const readIntoRequests = reader._readIntoRequests;
        reader._readIntoRequests = new SimpleQueue();
        readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._errorSteps(e2);
        });
      }
      function byobReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
      }
      function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy;
        if (highWaterMark === void 0) {
          return defaultHWM;
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
          throw new RangeError("Invalid highWaterMark");
        }
        return highWaterMark;
      }
      function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy;
        if (!size) {
          return () => 1;
        }
        return size;
      }
      function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        const size = init === null || init === void 0 ? void 0 : init.size;
        return {
          highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
          size: size === void 0 ? void 0 : convertQueuingStrategySize(size, `${context} has member 'size' that`)
        };
      }
      function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context);
        return (chunk) => convertUnrestrictedDouble(fn(chunk));
      }
      function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        const abort = original === null || original === void 0 ? void 0 : original.abort;
        const close = original === null || original === void 0 ? void 0 : original.close;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        const write = original === null || original === void 0 ? void 0 : original.write;
        return {
          abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
          close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
          start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
          write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
          type
        };
      }
      function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context);
        return () => promiseCall(fn, original, []);
      }
      function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
      }
      function assertWritableStream(x2, context) {
        if (!IsWritableStream(x2)) {
          throw new TypeError(`${context} is not a WritableStream.`);
        }
      }
      function isAbortSignal2(value) {
        if (typeof value !== "object" || value === null) {
          return false;
        }
        try {
          return typeof value.aborted === "boolean";
        } catch (_a2) {
          return false;
        }
      }
      const supportsAbortController = typeof AbortController === "function";
      function createAbortController() {
        if (supportsAbortController) {
          return new AbortController();
        }
        return void 0;
      }
      class WritableStream {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
          if (rawUnderlyingSink === void 0) {
            rawUnderlyingSink = null;
          } else {
            assertObject(rawUnderlyingSink, "First parameter");
          }
          const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
          const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
          InitializeWritableStream(this);
          const type = underlyingSink.type;
          if (type !== void 0) {
            throw new RangeError("Invalid type is specified");
          }
          const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
          const highWaterMark = ExtractHighWaterMark(strategy, 1);
          SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2("locked");
          }
          return IsWritableStreamLocked(this);
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(reason = void 0) {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2("abort"));
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
          }
          return WritableStreamAbort(this, reason);
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2("close"));
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
          }
          if (WritableStreamCloseQueuedOrInFlight(this)) {
            return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
          }
          return WritableStreamClose(this);
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2("getWriter");
          }
          return AcquireWritableStreamDefaultWriter(this);
        }
      }
      Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
      });
      setFunctionName(WritableStream.prototype.abort, "abort");
      setFunctionName(WritableStream.prototype.close, "close");
      setFunctionName(WritableStream.prototype.getWriter, "getWriter");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {
          value: "WritableStream",
          configurable: true
        });
      }
      function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream);
      }
      function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(WritableStream.prototype);
        InitializeWritableStream(stream);
        const controller = Object.create(WritableStreamDefaultController.prototype);
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
      }
      function InitializeWritableStream(stream) {
        stream._state = "writable";
        stream._storedError = void 0;
        stream._writer = void 0;
        stream._writableStreamController = void 0;
        stream._writeRequests = new SimpleQueue();
        stream._inFlightWriteRequest = void 0;
        stream._closeRequest = void 0;
        stream._inFlightCloseRequest = void 0;
        stream._pendingAbortRequest = void 0;
        stream._backpressure = false;
      }
      function IsWritableStream(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_writableStreamController")) {
          return false;
        }
        return x2 instanceof WritableStream;
      }
      function IsWritableStreamLocked(stream) {
        if (stream._writer === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamAbort(stream, reason) {
        var _a2;
        if (stream._state === "closed" || stream._state === "errored") {
          return promiseResolvedWith(void 0);
        }
        stream._writableStreamController._abortReason = reason;
        (_a2 = stream._writableStreamController._abortController) === null || _a2 === void 0 ? void 0 : _a2.abort(reason);
        const state = stream._state;
        if (state === "closed" || state === "errored") {
          return promiseResolvedWith(void 0);
        }
        if (stream._pendingAbortRequest !== void 0) {
          return stream._pendingAbortRequest._promise;
        }
        let wasAlreadyErroring = false;
        if (state === "erroring") {
          wasAlreadyErroring = true;
          reason = void 0;
        }
        const promise = newPromise((resolve, reject) => {
          stream._pendingAbortRequest = {
            _promise: void 0,
            _resolve: resolve,
            _reject: reject,
            _reason: reason,
            _wasAlreadyErroring: wasAlreadyErroring
          };
        });
        stream._pendingAbortRequest._promise = promise;
        if (!wasAlreadyErroring) {
          WritableStreamStartErroring(stream, reason);
        }
        return promise;
      }
      function WritableStreamClose(stream) {
        const state = stream._state;
        if (state === "closed" || state === "errored") {
          return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
        }
        const promise = newPromise((resolve, reject) => {
          const closeRequest = {
            _resolve: resolve,
            _reject: reject
          };
          stream._closeRequest = closeRequest;
        });
        const writer = stream._writer;
        if (writer !== void 0 && stream._backpressure && state === "writable") {
          defaultWriterReadyPromiseResolve(writer);
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController);
        return promise;
      }
      function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve, reject) => {
          const writeRequest = {
            _resolve: resolve,
            _reject: reject
          };
          stream._writeRequests.push(writeRequest);
        });
        return promise;
      }
      function WritableStreamDealWithRejection(stream, error) {
        const state = stream._state;
        if (state === "writable") {
          WritableStreamStartErroring(stream, error);
          return;
        }
        WritableStreamFinishErroring(stream);
      }
      function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController;
        stream._state = "erroring";
        stream._storedError = reason;
        const writer = stream._writer;
        if (writer !== void 0) {
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
        }
        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
          WritableStreamFinishErroring(stream);
        }
      }
      function WritableStreamFinishErroring(stream) {
        stream._state = "errored";
        stream._writableStreamController[ErrorSteps]();
        const storedError = stream._storedError;
        stream._writeRequests.forEach((writeRequest) => {
          writeRequest._reject(storedError);
        });
        stream._writeRequests = new SimpleQueue();
        if (stream._pendingAbortRequest === void 0) {
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        const abortRequest = stream._pendingAbortRequest;
        stream._pendingAbortRequest = void 0;
        if (abortRequest._wasAlreadyErroring) {
          abortRequest._reject(storedError);
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, () => {
          abortRequest._resolve();
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return null;
        }, (reason) => {
          abortRequest._reject(reason);
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return null;
        });
      }
      function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(void 0);
        stream._inFlightWriteRequest = void 0;
      }
      function WritableStreamFinishInFlightWriteWithError(stream, error) {
        stream._inFlightWriteRequest._reject(error);
        stream._inFlightWriteRequest = void 0;
        WritableStreamDealWithRejection(stream, error);
      }
      function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(void 0);
        stream._inFlightCloseRequest = void 0;
        const state = stream._state;
        if (state === "erroring") {
          stream._storedError = void 0;
          if (stream._pendingAbortRequest !== void 0) {
            stream._pendingAbortRequest._resolve();
            stream._pendingAbortRequest = void 0;
          }
        }
        stream._state = "closed";
        const writer = stream._writer;
        if (writer !== void 0) {
          defaultWriterClosedPromiseResolve(writer);
        }
      }
      function WritableStreamFinishInFlightCloseWithError(stream, error) {
        stream._inFlightCloseRequest._reject(error);
        stream._inFlightCloseRequest = void 0;
        if (stream._pendingAbortRequest !== void 0) {
          stream._pendingAbortRequest._reject(error);
          stream._pendingAbortRequest = void 0;
        }
        WritableStreamDealWithRejection(stream, error);
      }
      function WritableStreamCloseQueuedOrInFlight(stream) {
        if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamHasOperationMarkedInFlight(stream) {
        if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest;
        stream._closeRequest = void 0;
      }
      function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
      }
      function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== void 0) {
          stream._closeRequest._reject(stream._storedError);
          stream._closeRequest = void 0;
        }
        const writer = stream._writer;
        if (writer !== void 0) {
          defaultWriterClosedPromiseReject(writer, stream._storedError);
        }
      }
      function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer;
        if (writer !== void 0 && backpressure !== stream._backpressure) {
          if (backpressure) {
            defaultWriterReadyPromiseReset(writer);
          } else {
            defaultWriterReadyPromiseResolve(writer);
          }
        }
        stream._backpressure = backpressure;
      }
      class WritableStreamDefaultWriter {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
          assertWritableStream(stream, "First parameter");
          if (IsWritableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive writing by another writer");
          }
          this._ownerWritableStream = stream;
          stream._writer = this;
          const state = stream._state;
          if (state === "writable") {
            if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
              defaultWriterReadyPromiseInitialize(this);
            } else {
              defaultWriterReadyPromiseInitializeAsResolved(this);
            }
            defaultWriterClosedPromiseInitialize(this);
          } else if (state === "erroring") {
            defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
            defaultWriterClosedPromiseInitialize(this);
          } else if (state === "closed") {
            defaultWriterReadyPromiseInitializeAsResolved(this);
            defaultWriterClosedPromiseInitializeAsResolved(this);
          } else {
            const storedError = stream._storedError;
            defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
            defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
          }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException("desiredSize");
          }
          if (this._ownerWritableStream === void 0) {
            throw defaultWriterLockException("desiredSize");
          }
          return WritableStreamDefaultWriterGetDesiredSize(this);
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
          }
          return this._readyPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(reason = void 0) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
          }
          if (this._ownerWritableStream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("abort"));
          }
          return WritableStreamDefaultWriterAbort(this, reason);
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("close"));
          }
          const stream = this._ownerWritableStream;
          if (stream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("close"));
          }
          if (WritableStreamCloseQueuedOrInFlight(stream)) {
            return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
          }
          return WritableStreamDefaultWriterClose(this);
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException("releaseLock");
          }
          const stream = this._ownerWritableStream;
          if (stream === void 0) {
            return;
          }
          WritableStreamDefaultWriterRelease(this);
        }
        write(chunk = void 0) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("write"));
          }
          if (this._ownerWritableStream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("write to"));
          }
          return WritableStreamDefaultWriterWrite(this, chunk);
        }
      }
      Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
      });
      setFunctionName(WritableStreamDefaultWriter.prototype.abort, "abort");
      setFunctionName(WritableStreamDefaultWriter.prototype.close, "close");
      setFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, "releaseLock");
      setFunctionName(WritableStreamDefaultWriter.prototype.write, "write");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {
          value: "WritableStreamDefaultWriter",
          configurable: true
        });
      }
      function IsWritableStreamDefaultWriter(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_ownerWritableStream")) {
          return false;
        }
        return x2 instanceof WritableStreamDefaultWriter;
      }
      function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
      }
      function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
      }
      function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
          return promiseResolvedWith(void 0);
        }
        if (state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        return WritableStreamDefaultWriterClose(writer);
      }
      function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
        if (writer._closedPromiseState === "pending") {
          defaultWriterClosedPromiseReject(writer, error);
        } else {
          defaultWriterClosedPromiseResetToRejected(writer, error);
        }
      }
      function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
        if (writer._readyPromiseState === "pending") {
          defaultWriterReadyPromiseReject(writer, error);
        } else {
          defaultWriterReadyPromiseResetToRejected(writer, error);
        }
      }
      function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (state === "errored" || state === "erroring") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
      }
      function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream;
        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
        stream._writer = void 0;
        writer._ownerWritableStream = void 0;
      }
      function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream;
        const controller = stream._writableStreamController;
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream) {
          return promiseRejectedWith(defaultWriterLockException("write to"));
        }
        const state = stream._state;
        if (state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
          return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
        }
        if (state === "erroring") {
          return promiseRejectedWith(stream._storedError);
        }
        const promise = WritableStreamAddWriteRequest(stream);
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
        return promise;
      }
      const closeSentinel = {};
      class WritableStreamDefaultController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("abortReason");
          }
          return this._abortReason;
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("signal");
          }
          if (this._abortController === void 0) {
            throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
          }
          return this._abortController.signal;
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(e2 = void 0) {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("error");
          }
          const state = this._controlledWritableStream._state;
          if (state !== "writable") {
            return;
          }
          WritableStreamDefaultControllerError(this, e2);
        }
        /** @internal */
        [AbortSteps](reason) {
          const result = this._abortAlgorithm(reason);
          WritableStreamDefaultControllerClearAlgorithms(this);
          return result;
        }
        /** @internal */
        [ErrorSteps]() {
          ResetQueue(this);
        }
      }
      Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {
          value: "WritableStreamDefaultController",
          configurable: true
        });
      }
      function IsWritableStreamDefaultController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledWritableStream")) {
          return false;
        }
        return x2 instanceof WritableStreamDefaultController;
      }
      function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream;
        stream._writableStreamController = controller;
        controller._queue = void 0;
        controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._abortReason = void 0;
        controller._abortController = createAbortController();
        controller._started = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._writeAlgorithm = writeAlgorithm;
        controller._closeAlgorithm = closeAlgorithm;
        controller._abortAlgorithm = abortAlgorithm;
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        const startResult = startAlgorithm();
        const startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, () => {
          controller._started = true;
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          return null;
        }, (r2) => {
          controller._started = true;
          WritableStreamDealWithRejection(stream, r2);
          return null;
        });
      }
      function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(WritableStreamDefaultController.prototype);
        let startAlgorithm;
        let writeAlgorithm;
        let closeAlgorithm;
        let abortAlgorithm;
        if (underlyingSink.start !== void 0) {
          startAlgorithm = () => underlyingSink.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingSink.write !== void 0) {
          writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
        } else {
          writeAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSink.close !== void 0) {
          closeAlgorithm = () => underlyingSink.close();
        } else {
          closeAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSink.abort !== void 0) {
          abortAlgorithm = (reason) => underlyingSink.abort(reason);
        } else {
          abortAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = void 0;
        controller._closeAlgorithm = void 0;
        controller._abortAlgorithm = void 0;
        controller._strategySizeAlgorithm = void 0;
      }
      function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0);
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
          return controller._strategySizeAlgorithm(chunk);
        } catch (chunkSizeE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
          return 1;
        }
      }
      function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize);
        } catch (enqueueE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
          return;
        }
        const stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
          const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream;
        if (!controller._started) {
          return;
        }
        if (stream._inFlightWriteRequest !== void 0) {
          return;
        }
        const state = stream._state;
        if (state === "erroring") {
          WritableStreamFinishErroring(stream);
          return;
        }
        if (controller._queue.length === 0) {
          return;
        }
        const value = PeekQueueValue(controller);
        if (value === closeSentinel) {
          WritableStreamDefaultControllerProcessClose(controller);
        } else {
          WritableStreamDefaultControllerProcessWrite(controller, value);
        }
      }
      function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
        if (controller._controlledWritableStream._state === "writable") {
          WritableStreamDefaultControllerError(controller, error);
        }
      }
      function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream);
        DequeueValue(controller);
        const sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(sinkClosePromise, () => {
          WritableStreamFinishInFlightClose(stream);
          return null;
        }, (reason) => {
          WritableStreamFinishInFlightCloseWithError(stream, reason);
          return null;
        });
      }
      function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        const sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, () => {
          WritableStreamFinishInFlightWrite(stream);
          const state = stream._state;
          DequeueValue(controller);
          if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
          }
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          return null;
        }, (reason) => {
          if (stream._state === "writable") {
            WritableStreamDefaultControllerClearAlgorithms(controller);
          }
          WritableStreamFinishInFlightWriteWithError(stream, reason);
          return null;
        });
      }
      function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
      }
      function WritableStreamDefaultControllerError(controller, error) {
        const stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller);
        WritableStreamStartErroring(stream, error);
      }
      function streamBrandCheckException$2(name) {
        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
      }
      function defaultControllerBrandCheckException$2(name) {
        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
      }
      function defaultWriterBrandCheckException(name) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
      }
      function defaultWriterLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released writer");
      }
      function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve, reject) => {
          writer._closedPromise_resolve = resolve;
          writer._closedPromise_reject = reject;
          writer._closedPromiseState = "pending";
        });
      }
      function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseReject(writer, reason);
      }
      function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseResolve(writer);
      }
      function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(writer._closedPromise);
        writer._closedPromise_reject(reason);
        writer._closedPromise_resolve = void 0;
        writer._closedPromise_reject = void 0;
        writer._closedPromiseState = "rejected";
      }
      function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === void 0) {
          return;
        }
        writer._closedPromise_resolve(void 0);
        writer._closedPromise_resolve = void 0;
        writer._closedPromise_reject = void 0;
        writer._closedPromiseState = "resolved";
      }
      function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve, reject) => {
          writer._readyPromise_resolve = resolve;
          writer._readyPromise_reject = reject;
        });
        writer._readyPromiseState = "pending";
      }
      function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseReject(writer, reason);
      }
      function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseResolve(writer);
      }
      function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(writer._readyPromise);
        writer._readyPromise_reject(reason);
        writer._readyPromise_resolve = void 0;
        writer._readyPromise_reject = void 0;
        writer._readyPromiseState = "rejected";
      }
      function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
      }
      function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === void 0) {
          return;
        }
        writer._readyPromise_resolve(void 0);
        writer._readyPromise_resolve = void 0;
        writer._readyPromise_reject = void 0;
        writer._readyPromiseState = "fulfilled";
      }
      function getGlobals() {
        if (typeof globalThis !== "undefined") {
          return globalThis;
        } else if (typeof self !== "undefined") {
          return self;
        } else if (typeof global !== "undefined") {
          return global;
        }
        return void 0;
      }
      const globals = getGlobals();
      function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === "function" || typeof ctor === "object")) {
          return false;
        }
        if (ctor.name !== "DOMException") {
          return false;
        }
        try {
          new ctor();
          return true;
        } catch (_a2) {
          return false;
        }
      }
      function getFromGlobal() {
        const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;
        return isDOMExceptionConstructor(ctor) ? ctor : void 0;
      }
      function createPolyfill() {
        const ctor = function DOMException4(message, name) {
          this.message = message || "";
          this.name = name || "Error";
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
        };
        setFunctionName(ctor, "DOMException");
        ctor.prototype = Object.create(Error.prototype);
        Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: true, configurable: true });
        return ctor;
      }
      const DOMException3 = getFromGlobal() || createPolyfill();
      function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        const reader = AcquireReadableStreamDefaultReader(source);
        const writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = true;
        let shuttingDown = false;
        let currentWrite = promiseResolvedWith(void 0);
        return newPromise((resolve, reject) => {
          let abortAlgorithm;
          if (signal !== void 0) {
            abortAlgorithm = () => {
              const error = signal.reason !== void 0 ? signal.reason : new DOMException3("Aborted", "AbortError");
              const actions = [];
              if (!preventAbort) {
                actions.push(() => {
                  if (dest._state === "writable") {
                    return WritableStreamAbort(dest, error);
                  }
                  return promiseResolvedWith(void 0);
                });
              }
              if (!preventCancel) {
                actions.push(() => {
                  if (source._state === "readable") {
                    return ReadableStreamCancel(source, error);
                  }
                  return promiseResolvedWith(void 0);
                });
              }
              shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error);
            };
            if (signal.aborted) {
              abortAlgorithm();
              return;
            }
            signal.addEventListener("abort", abortAlgorithm);
          }
          function pipeLoop() {
            return newPromise((resolveLoop, rejectLoop) => {
              function next(done) {
                if (done) {
                  resolveLoop();
                } else {
                  PerformPromiseThen(pipeStep(), next, rejectLoop);
                }
              }
              next(false);
            });
          }
          function pipeStep() {
            if (shuttingDown) {
              return promiseResolvedWith(true);
            }
            return PerformPromiseThen(writer._readyPromise, () => {
              return newPromise((resolveRead, rejectRead) => {
                ReadableStreamDefaultReaderRead(reader, {
                  _chunkSteps: (chunk) => {
                    currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop2);
                    resolveRead(false);
                  },
                  _closeSteps: () => resolveRead(true),
                  _errorSteps: rejectRead
                });
              });
            });
          }
          isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
            if (!preventAbort) {
              shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
            } else {
              shutdown(true, storedError);
            }
            return null;
          });
          isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
            if (!preventCancel) {
              shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
            } else {
              shutdown(true, storedError);
            }
            return null;
          });
          isOrBecomesClosed(source, reader._closedPromise, () => {
            if (!preventClose) {
              shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
            } else {
              shutdown();
            }
            return null;
          });
          if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
            const destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
            if (!preventCancel) {
              shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
            } else {
              shutdown(true, destClosed);
            }
          }
          setPromiseIsHandledToTrue(pipeLoop());
          function waitForWritesToFinish() {
            const oldCurrentWrite = currentWrite;
            return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0);
          }
          function isOrBecomesErrored(stream, promise, action) {
            if (stream._state === "errored") {
              action(stream._storedError);
            } else {
              uponRejection(promise, action);
            }
          }
          function isOrBecomesClosed(stream, promise, action) {
            if (stream._state === "closed") {
              action();
            } else {
              uponFulfillment(promise, action);
            }
          }
          function shutdownWithAction(action, originalIsError, originalError) {
            if (shuttingDown) {
              return;
            }
            shuttingDown = true;
            if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
              uponFulfillment(waitForWritesToFinish(), doTheRest);
            } else {
              doTheRest();
            }
            function doTheRest() {
              uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));
              return null;
            }
          }
          function shutdown(isError, error) {
            if (shuttingDown) {
              return;
            }
            shuttingDown = true;
            if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
              uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));
            } else {
              finalize(isError, error);
            }
          }
          function finalize(isError, error) {
            WritableStreamDefaultWriterRelease(writer);
            ReadableStreamReaderGenericRelease(reader);
            if (signal !== void 0) {
              signal.removeEventListener("abort", abortAlgorithm);
            }
            if (isError) {
              reject(error);
            } else {
              resolve(void 0);
            }
            return null;
          }
        });
      }
      class ReadableStreamDefaultController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("desiredSize");
          }
          return ReadableStreamDefaultControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("close");
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError("The stream is not in a state that permits close");
          }
          ReadableStreamDefaultControllerClose(this);
        }
        enqueue(chunk = void 0) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("enqueue");
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError("The stream is not in a state that permits enqueue");
          }
          return ReadableStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e2 = void 0) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("error");
          }
          ReadableStreamDefaultControllerError(this, e2);
        }
        /** @internal */
        [CancelSteps](reason) {
          ResetQueue(this);
          const result = this._cancelAlgorithm(reason);
          ReadableStreamDefaultControllerClearAlgorithms(this);
          return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
          const stream = this._controlledReadableStream;
          if (this._queue.length > 0) {
            const chunk = DequeueValue(this);
            if (this._closeRequested && this._queue.length === 0) {
              ReadableStreamDefaultControllerClearAlgorithms(this);
              ReadableStreamClose(stream);
            } else {
              ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
            readRequest._chunkSteps(chunk);
          } else {
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableStreamDefaultControllerCallPullIfNeeded(this);
          }
        }
        /** @internal */
        [ReleaseSteps]() {
        }
      }
      Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(ReadableStreamDefaultController.prototype.close, "close");
      setFunctionName(ReadableStreamDefaultController.prototype.enqueue, "enqueue");
      setFunctionName(ReadableStreamDefaultController.prototype.error, "error");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {
          value: "ReadableStreamDefaultController",
          configurable: true
        });
      }
      function IsReadableStreamDefaultController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledReadableStream")) {
          return false;
        }
        return x2 instanceof ReadableStreamDefaultController;
      }
      function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (!shouldPull) {
          return;
        }
        if (controller._pulling) {
          controller._pullAgain = true;
          return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
          controller._pulling = false;
          if (controller._pullAgain) {
            controller._pullAgain = false;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          }
          return null;
        }, (e2) => {
          ReadableStreamDefaultControllerError(controller, e2);
          return null;
        });
      }
      function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return false;
        }
        if (!controller._started) {
          return false;
        }
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          return true;
        }
        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
          return true;
        }
        return false;
      }
      function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
        controller._strategySizeAlgorithm = void 0;
      }
      function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return;
        }
        const stream = controller._controlledReadableStream;
        controller._closeRequested = true;
        if (controller._queue.length === 0) {
          ReadableStreamDefaultControllerClearAlgorithms(controller);
          ReadableStreamClose(stream);
        }
      }
      function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return;
        }
        const stream = controller._controlledReadableStream;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          ReadableStreamFulfillReadRequest(stream, chunk, false);
        } else {
          let chunkSize;
          try {
            chunkSize = controller._strategySizeAlgorithm(chunk);
          } catch (chunkSizeE) {
            ReadableStreamDefaultControllerError(controller, chunkSizeE);
            throw chunkSizeE;
          }
          try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
          } catch (enqueueE) {
            ReadableStreamDefaultControllerError(controller, enqueueE);
            throw enqueueE;
          }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
      }
      function ReadableStreamDefaultControllerError(controller, e2) {
        const stream = controller._controlledReadableStream;
        if (stream._state !== "readable") {
          return;
        }
        ResetQueue(controller);
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e2);
      }
      function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state;
        if (state === "errored") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
          return false;
        }
        return true;
      }
      function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state;
        if (!controller._closeRequested && state === "readable") {
          return true;
        }
        return false;
      }
      function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream;
        controller._queue = void 0;
        controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._started = false;
        controller._closeRequested = false;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
          controller._started = true;
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          return null;
        }, (r2) => {
          ReadableStreamDefaultControllerError(controller, r2);
          return null;
        });
      }
      function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        let startAlgorithm;
        let pullAlgorithm;
        let cancelAlgorithm;
        if (underlyingSource.start !== void 0) {
          startAlgorithm = () => underlyingSource.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingSource.pull !== void 0) {
          pullAlgorithm = () => underlyingSource.pull(controller);
        } else {
          pullAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSource.cancel !== void 0) {
          cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function defaultControllerBrandCheckException$1(name) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
      }
      function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
          return ReadableByteStreamTee(stream);
        }
        return ReadableStreamDefaultTee(stream);
      }
      function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgain = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise((resolve) => {
          resolveCancelPromise = resolve;
        });
        function pullAlgorithm() {
          if (reading) {
            readAgain = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const readRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgain = false;
                const chunk1 = chunk;
                const chunk2 = chunk;
                if (!canceled1) {
                  ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                }
                if (!canceled2) {
                  ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                }
                reading = false;
                if (readAgain) {
                  pullAlgorithm();
                }
              });
            },
            _closeSteps: () => {
              reading = false;
              if (!canceled1) {
                ReadableStreamDefaultControllerClose(branch1._readableStreamController);
              }
              if (!canceled2) {
                ReadableStreamDefaultControllerClose(branch2._readableStreamController);
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
          return promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          canceled1 = true;
          reason1 = reason;
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          canceled2 = true;
          reason2 = reason;
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
        }
        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
        uponRejection(reader._closedPromise, (r2) => {
          ReadableStreamDefaultControllerError(branch1._readableStreamController, r2);
          ReadableStreamDefaultControllerError(branch2._readableStreamController, r2);
          if (!canceled1 || !canceled2) {
            resolveCancelPromise(void 0);
          }
          return null;
        });
        return [branch1, branch2];
      }
      function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgainForBranch1 = false;
        let readAgainForBranch2 = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise((resolve) => {
          resolveCancelPromise = resolve;
        });
        function forwardReaderError(thisReader) {
          uponRejection(thisReader._closedPromise, (r2) => {
            if (thisReader !== reader) {
              return null;
            }
            ReadableByteStreamControllerError(branch1._readableStreamController, r2);
            ReadableByteStreamControllerError(branch2._readableStreamController, r2);
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(void 0);
            }
            return null;
          });
        }
        function pullWithDefaultReader() {
          if (IsReadableStreamBYOBReader(reader)) {
            ReadableStreamReaderGenericRelease(reader);
            reader = AcquireReadableStreamDefaultReader(stream);
            forwardReaderError(reader);
          }
          const readRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgainForBranch1 = false;
                readAgainForBranch2 = false;
                const chunk1 = chunk;
                let chunk2 = chunk;
                if (!canceled1 && !canceled2) {
                  try {
                    chunk2 = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                    ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                }
                if (!canceled1) {
                  ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                }
                if (!canceled2) {
                  ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                }
                reading = false;
                if (readAgainForBranch1) {
                  pull1Algorithm();
                } else if (readAgainForBranch2) {
                  pull2Algorithm();
                }
              });
            },
            _closeSteps: () => {
              reading = false;
              if (!canceled1) {
                ReadableByteStreamControllerClose(branch1._readableStreamController);
              }
              if (!canceled2) {
                ReadableByteStreamControllerClose(branch2._readableStreamController);
              }
              if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
              }
              if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
          if (IsReadableStreamDefaultReader(reader)) {
            ReadableStreamReaderGenericRelease(reader);
            reader = AcquireReadableStreamBYOBReader(stream);
            forwardReaderError(reader);
          }
          const byobBranch = forBranch2 ? branch2 : branch1;
          const otherBranch = forBranch2 ? branch1 : branch2;
          const readIntoRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgainForBranch1 = false;
                readAgainForBranch2 = false;
                const byobCanceled = forBranch2 ? canceled2 : canceled1;
                const otherCanceled = forBranch2 ? canceled1 : canceled2;
                if (!otherCanceled) {
                  let clonedChunk;
                  try {
                    clonedChunk = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                    ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                  if (!byobCanceled) {
                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                  }
                  ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                } else if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                reading = false;
                if (readAgainForBranch1) {
                  pull1Algorithm();
                } else if (readAgainForBranch2) {
                  pull2Algorithm();
                }
              });
            },
            _closeSteps: (chunk) => {
              reading = false;
              const byobCanceled = forBranch2 ? canceled2 : canceled1;
              const otherCanceled = forBranch2 ? canceled1 : canceled2;
              if (!byobCanceled) {
                ReadableByteStreamControllerClose(byobBranch._readableStreamController);
              }
              if (!otherCanceled) {
                ReadableByteStreamControllerClose(otherBranch._readableStreamController);
              }
              if (chunk !== void 0) {
                if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                }
              }
              if (!byobCanceled || !otherCanceled) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);
        }
        function pull1Algorithm() {
          if (reading) {
            readAgainForBranch1 = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
          if (byobRequest === null) {
            pullWithDefaultReader();
          } else {
            pullWithBYOBReader(byobRequest._view, false);
          }
          return promiseResolvedWith(void 0);
        }
        function pull2Algorithm() {
          if (reading) {
            readAgainForBranch2 = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
          if (byobRequest === null) {
            pullWithDefaultReader();
          } else {
            pullWithBYOBReader(byobRequest._view, true);
          }
          return promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          canceled1 = true;
          reason1 = reason;
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          canceled2 = true;
          reason2 = reason;
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
          return;
        }
        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
        forwardReaderError(reader);
        return [branch1, branch2];
      }
      function isReadableStreamLike(stream) {
        return typeIsObject(stream) && typeof stream.getReader !== "undefined";
      }
      function ReadableStreamFrom(source) {
        if (isReadableStreamLike(source)) {
          return ReadableStreamFromDefaultReader(source.getReader());
        }
        return ReadableStreamFromIterable(source);
      }
      function ReadableStreamFromIterable(asyncIterable) {
        let stream;
        const iteratorRecord = GetIterator(asyncIterable, "async");
        const startAlgorithm = noop2;
        function pullAlgorithm() {
          let nextResult;
          try {
            nextResult = IteratorNext(iteratorRecord);
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          const nextPromise = promiseResolvedWith(nextResult);
          return transformPromiseWith(nextPromise, (iterResult) => {
            if (!typeIsObject(iterResult)) {
              throw new TypeError("The promise returned by the iterator.next() method must fulfill with an object");
            }
            const done = IteratorComplete(iterResult);
            if (done) {
              ReadableStreamDefaultControllerClose(stream._readableStreamController);
            } else {
              const value = IteratorValue(iterResult);
              ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);
            }
          });
        }
        function cancelAlgorithm(reason) {
          const iterator = iteratorRecord.iterator;
          let returnMethod;
          try {
            returnMethod = GetMethod(iterator, "return");
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          if (returnMethod === void 0) {
            return promiseResolvedWith(void 0);
          }
          let returnResult;
          try {
            returnResult = reflectCall(returnMethod, iterator, [reason]);
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          const returnPromise = promiseResolvedWith(returnResult);
          return transformPromiseWith(returnPromise, (iterResult) => {
            if (!typeIsObject(iterResult)) {
              throw new TypeError("The promise returned by the iterator.return() method must fulfill with an object");
            }
            return void 0;
          });
        }
        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
        return stream;
      }
      function ReadableStreamFromDefaultReader(reader) {
        let stream;
        const startAlgorithm = noop2;
        function pullAlgorithm() {
          let readPromise;
          try {
            readPromise = reader.read();
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          return transformPromiseWith(readPromise, (readResult) => {
            if (!typeIsObject(readResult)) {
              throw new TypeError("The promise returned by the reader.read() method must fulfill with an object");
            }
            if (readResult.done) {
              ReadableStreamDefaultControllerClose(stream._readableStreamController);
            } else {
              const value = readResult.value;
              ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);
            }
          });
        }
        function cancelAlgorithm(reason) {
          try {
            return promiseResolvedWith(reader.cancel(reason));
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
        }
        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
        return stream;
      }
      function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        const original = source;
        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const pull = original === null || original === void 0 ? void 0 : original.pull;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        return {
          autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
          cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
          pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
          start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
          type: type === void 0 ? void 0 : convertReadableStreamType(type, `${context} has member 'type' that`)
        };
      }
      function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
      }
      function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertReadableStreamType(type, context) {
        type = `${type}`;
        if (type !== "bytes") {
          throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
        }
        return type;
      }
      function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
      }
      function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
        const signal = options === null || options === void 0 ? void 0 : options.signal;
        if (signal !== void 0) {
          assertAbortSignal(signal, `${context} has member 'signal' that`);
        }
        return {
          preventAbort: Boolean(preventAbort),
          preventCancel: Boolean(preventCancel),
          preventClose: Boolean(preventClose),
          signal
        };
      }
      function assertAbortSignal(signal, context) {
        if (!isAbortSignal2(signal)) {
          throw new TypeError(`${context} is not an AbortSignal.`);
        }
      }
      function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
        assertRequiredField(readable, "readable", "ReadableWritablePair");
        assertReadableStream(readable, `${context} has member 'readable' that`);
        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
        assertRequiredField(writable, "writable", "ReadableWritablePair");
        assertWritableStream(writable, `${context} has member 'writable' that`);
        return { readable, writable };
      }
      class ReadableStream2 {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
          if (rawUnderlyingSource === void 0) {
            rawUnderlyingSource = null;
          } else {
            assertObject(rawUnderlyingSource, "First parameter");
          }
          const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
          const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
          InitializeReadableStream(this);
          if (underlyingSource.type === "bytes") {
            if (strategy.size !== void 0) {
              throw new RangeError("The strategy for a byte stream cannot have a size function");
            }
            const highWaterMark = ExtractHighWaterMark(strategy, 0);
            SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
          } else {
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
          }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("locked");
          }
          return IsReadableStreamLocked(this);
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(reason = void 0) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1("cancel"));
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
          }
          return ReadableStreamCancel(this, reason);
        }
        getReader(rawOptions = void 0) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("getReader");
          }
          const options = convertReaderOptions(rawOptions, "First parameter");
          if (options.mode === void 0) {
            return AcquireReadableStreamDefaultReader(this);
          }
          return AcquireReadableStreamBYOBReader(this);
        }
        pipeThrough(rawTransform, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("pipeThrough");
          }
          assertRequiredArgument(rawTransform, 1, "pipeThrough");
          const transform = convertReadableWritablePair(rawTransform, "First parameter");
          const options = convertPipeOptions(rawOptions, "Second parameter");
          if (IsReadableStreamLocked(this)) {
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
          }
          if (IsWritableStreamLocked(transform.writable)) {
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
          }
          const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
          setPromiseIsHandledToTrue(promise);
          return transform.readable;
        }
        pipeTo(destination, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
          }
          if (destination === void 0) {
            return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
          }
          if (!IsWritableStream(destination)) {
            return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
          }
          let options;
          try {
            options = convertPipeOptions(rawOptions, "Second parameter");
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
          }
          if (IsWritableStreamLocked(destination)) {
            return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
          }
          return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("tee");
          }
          const branches = ReadableStreamTee(this);
          return CreateArrayFromList(branches);
        }
        values(rawOptions = void 0) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("values");
          }
          const options = convertIteratorOptions(rawOptions, "First parameter");
          return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
        }
        [SymbolAsyncIterator](options) {
          return this.values(options);
        }
        /**
         * Creates a new ReadableStream wrapping the provided iterable or async iterable.
         *
         * This can be used to adapt various kinds of objects into a readable stream,
         * such as an array, an async generator, or a Node.js readable stream.
         */
        static from(asyncIterable) {
          return ReadableStreamFrom(asyncIterable);
        }
      }
      Object.defineProperties(ReadableStream2, {
        from: { enumerable: true }
      });
      Object.defineProperties(ReadableStream2.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
      });
      setFunctionName(ReadableStream2.from, "from");
      setFunctionName(ReadableStream2.prototype.cancel, "cancel");
      setFunctionName(ReadableStream2.prototype.getReader, "getReader");
      setFunctionName(ReadableStream2.prototype.pipeThrough, "pipeThrough");
      setFunctionName(ReadableStream2.prototype.pipeTo, "pipeTo");
      setFunctionName(ReadableStream2.prototype.tee, "tee");
      setFunctionName(ReadableStream2.prototype.values, "values");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStream2.prototype, Symbol.toStringTag, {
          value: "ReadableStream",
          configurable: true
        });
      }
      Object.defineProperty(ReadableStream2.prototype, SymbolAsyncIterator, {
        value: ReadableStream2.prototype.values,
        writable: true,
        configurable: true
      });
      function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(ReadableStream2.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
      }
      function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        const stream = Object.create(ReadableStream2.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableByteStreamController.prototype);
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
        return stream;
      }
      function InitializeReadableStream(stream) {
        stream._state = "readable";
        stream._reader = void 0;
        stream._storedError = void 0;
        stream._disturbed = false;
      }
      function IsReadableStream(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_readableStreamController")) {
          return false;
        }
        return x2 instanceof ReadableStream2;
      }
      function IsReadableStreamLocked(stream) {
        if (stream._reader === void 0) {
          return false;
        }
        return true;
      }
      function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true;
        if (stream._state === "closed") {
          return promiseResolvedWith(void 0);
        }
        if (stream._state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        ReadableStreamClose(stream);
        const reader = stream._reader;
        if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
          const readIntoRequests = reader._readIntoRequests;
          reader._readIntoRequests = new SimpleQueue();
          readIntoRequests.forEach((readIntoRequest) => {
            readIntoRequest._closeSteps(void 0);
          });
        }
        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop2);
      }
      function ReadableStreamClose(stream) {
        stream._state = "closed";
        const reader = stream._reader;
        if (reader === void 0) {
          return;
        }
        defaultReaderClosedPromiseResolve(reader);
        if (IsReadableStreamDefaultReader(reader)) {
          const readRequests = reader._readRequests;
          reader._readRequests = new SimpleQueue();
          readRequests.forEach((readRequest) => {
            readRequest._closeSteps();
          });
        }
      }
      function ReadableStreamError(stream, e2) {
        stream._state = "errored";
        stream._storedError = e2;
        const reader = stream._reader;
        if (reader === void 0) {
          return;
        }
        defaultReaderClosedPromiseReject(reader, e2);
        if (IsReadableStreamDefaultReader(reader)) {
          ReadableStreamDefaultReaderErrorReadRequests(reader, e2);
        } else {
          ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2);
        }
      }
      function streamBrandCheckException$1(name) {
        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
      }
      function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
        return {
          highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
      }
      const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength;
      };
      setFunctionName(byteLengthSizeFunction, "size");
      class ByteLengthQueuingStrategy {
        constructor(options) {
          assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy");
          options = convertQueuingStrategyInit(options, "First parameter");
          this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException("highWaterMark");
          }
          return this._byteLengthQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException("size");
          }
          return byteLengthSizeFunction;
        }
      }
      Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {
          value: "ByteLengthQueuingStrategy",
          configurable: true
        });
      }
      function byteLengthBrandCheckException(name) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
      }
      function IsByteLengthQueuingStrategy(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_byteLengthQueuingStrategyHighWaterMark")) {
          return false;
        }
        return x2 instanceof ByteLengthQueuingStrategy;
      }
      const countSizeFunction = () => {
        return 1;
      };
      setFunctionName(countSizeFunction, "size");
      class CountQueuingStrategy {
        constructor(options) {
          assertRequiredArgument(options, 1, "CountQueuingStrategy");
          options = convertQueuingStrategyInit(options, "First parameter");
          this._countQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException("highWaterMark");
          }
          return this._countQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException("size");
          }
          return countSizeFunction;
        }
      }
      Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {
          value: "CountQueuingStrategy",
          configurable: true
        });
      }
      function countBrandCheckException(name) {
        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
      }
      function IsCountQueuingStrategy(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_countQueuingStrategyHighWaterMark")) {
          return false;
        }
        return x2 instanceof CountQueuingStrategy;
      }
      function convertTransformer(original, context) {
        assertDictionary(original, context);
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const flush = original === null || original === void 0 ? void 0 : original.flush;
        const readableType = original === null || original === void 0 ? void 0 : original.readableType;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const transform = original === null || original === void 0 ? void 0 : original.transform;
        const writableType = original === null || original === void 0 ? void 0 : original.writableType;
        return {
          cancel: cancel === void 0 ? void 0 : convertTransformerCancelCallback(cancel, original, `${context} has member 'cancel' that`),
          flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
          readableType,
          start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
          transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
          writableType
        };
      }
      function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
      }
      function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
      }
      function convertTransformerCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      class TransformStream {
        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
          if (rawTransformer === void 0) {
            rawTransformer = null;
          }
          const writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
          const readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
          const transformer = convertTransformer(rawTransformer, "First parameter");
          if (transformer.readableType !== void 0) {
            throw new RangeError("Invalid readableType specified");
          }
          if (transformer.writableType !== void 0) {
            throw new RangeError("Invalid writableType specified");
          }
          const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
          const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
          const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
          const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
          let startPromise_resolve;
          const startPromise = newPromise((resolve) => {
            startPromise_resolve = resolve;
          });
          InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
          SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
          if (transformer.start !== void 0) {
            startPromise_resolve(transformer.start(this._transformStreamController));
          } else {
            startPromise_resolve(void 0);
          }
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException("readable");
          }
          return this._readable;
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException("writable");
          }
          return this._writable;
        }
      }
      Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {
          value: "TransformStream",
          configurable: true
        });
      }
      function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
          return startPromise;
        }
        function writeAlgorithm(chunk) {
          return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
          return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
          return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
          return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
          return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        stream._backpressure = void 0;
        stream._backpressureChangePromise = void 0;
        stream._backpressureChangePromise_resolve = void 0;
        TransformStreamSetBackpressure(stream, true);
        stream._transformStreamController = void 0;
      }
      function IsTransformStream(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_transformStreamController")) {
          return false;
        }
        return x2 instanceof TransformStream;
      }
      function TransformStreamError(stream, e2) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e2);
        TransformStreamErrorWritableAndUnblockWrite(stream, e2);
      }
      function TransformStreamErrorWritableAndUnblockWrite(stream, e2) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e2);
        TransformStreamUnblockWrite(stream);
      }
      function TransformStreamUnblockWrite(stream) {
        if (stream._backpressure) {
          TransformStreamSetBackpressure(stream, false);
        }
      }
      function TransformStreamSetBackpressure(stream, backpressure) {
        if (stream._backpressureChangePromise !== void 0) {
          stream._backpressureChangePromise_resolve();
        }
        stream._backpressureChangePromise = newPromise((resolve) => {
          stream._backpressureChangePromise_resolve = resolve;
        });
        stream._backpressure = backpressure;
      }
      class TransformStreamDefaultController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("desiredSize");
          }
          const readableController = this._controlledTransformStream._readable._readableStreamController;
          return ReadableStreamDefaultControllerGetDesiredSize(readableController);
        }
        enqueue(chunk = void 0) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("enqueue");
          }
          TransformStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(reason = void 0) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("error");
          }
          TransformStreamDefaultControllerError(this, reason);
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("terminate");
          }
          TransformStreamDefaultControllerTerminate(this);
        }
      }
      Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(TransformStreamDefaultController.prototype.enqueue, "enqueue");
      setFunctionName(TransformStreamDefaultController.prototype.error, "error");
      setFunctionName(TransformStreamDefaultController.prototype.terminate, "terminate");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {
          value: "TransformStreamDefaultController",
          configurable: true
        });
      }
      function IsTransformStreamDefaultController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledTransformStream")) {
          return false;
        }
        return x2 instanceof TransformStreamDefaultController;
      }
      function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm) {
        controller._controlledTransformStream = stream;
        stream._transformStreamController = controller;
        controller._transformAlgorithm = transformAlgorithm;
        controller._flushAlgorithm = flushAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._finishPromise = void 0;
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        const controller = Object.create(TransformStreamDefaultController.prototype);
        let transformAlgorithm;
        let flushAlgorithm;
        let cancelAlgorithm;
        if (transformer.transform !== void 0) {
          transformAlgorithm = (chunk) => transformer.transform(chunk, controller);
        } else {
          transformAlgorithm = (chunk) => {
            try {
              TransformStreamDefaultControllerEnqueue(controller, chunk);
              return promiseResolvedWith(void 0);
            } catch (transformResultE) {
              return promiseRejectedWith(transformResultE);
            }
          };
        }
        if (transformer.flush !== void 0) {
          flushAlgorithm = () => transformer.flush(controller);
        } else {
          flushAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (transformer.cancel !== void 0) {
          cancelAlgorithm = (reason) => transformer.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);
      }
      function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = void 0;
        controller._flushAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
      }
      function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
          throw new TypeError("Readable side is not in a state that permits enqueue");
        }
        try {
          ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        } catch (e2) {
          TransformStreamErrorWritableAndUnblockWrite(stream, e2);
          throw stream._readable._storedError;
        }
        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        if (backpressure !== stream._backpressure) {
          TransformStreamSetBackpressure(stream, true);
        }
      }
      function TransformStreamDefaultControllerError(controller, e2) {
        TransformStreamError(controller._controlledTransformStream, e2);
      }
      function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        const transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, void 0, (r2) => {
          TransformStreamError(controller._controlledTransformStream, r2);
          throw r2;
        });
      }
      function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        const error = new TypeError("TransformStream terminated");
        TransformStreamErrorWritableAndUnblockWrite(stream, error);
      }
      function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController;
        if (stream._backpressure) {
          const backpressureChangePromise = stream._backpressureChangePromise;
          return transformPromiseWith(backpressureChangePromise, () => {
            const writable = stream._writable;
            const state = writable._state;
            if (state === "erroring") {
              throw writable._storedError;
            }
            return TransformStreamDefaultControllerPerformTransform(controller, chunk);
          });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
      }
      function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const readable = stream._readable;
        controller._finishPromise = newPromise((resolve, reject) => {
          controller._finishPromise_resolve = resolve;
          controller._finishPromise_reject = reject;
        });
        const cancelPromise = controller._cancelAlgorithm(reason);
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(cancelPromise, () => {
          if (readable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, readable._storedError);
          } else {
            ReadableStreamDefaultControllerError(readable._readableStreamController, reason);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r2) => {
          ReadableStreamDefaultControllerError(readable._readableStreamController, r2);
          defaultControllerFinishPromiseReject(controller, r2);
          return null;
        });
        return controller._finishPromise;
      }
      function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const readable = stream._readable;
        controller._finishPromise = newPromise((resolve, reject) => {
          controller._finishPromise_resolve = resolve;
          controller._finishPromise_reject = reject;
        });
        const flushPromise = controller._flushAlgorithm();
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(flushPromise, () => {
          if (readable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, readable._storedError);
          } else {
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r2) => {
          ReadableStreamDefaultControllerError(readable._readableStreamController, r2);
          defaultControllerFinishPromiseReject(controller, r2);
          return null;
        });
        return controller._finishPromise;
      }
      function TransformStreamDefaultSourcePullAlgorithm(stream) {
        TransformStreamSetBackpressure(stream, false);
        return stream._backpressureChangePromise;
      }
      function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const writable = stream._writable;
        controller._finishPromise = newPromise((resolve, reject) => {
          controller._finishPromise_resolve = resolve;
          controller._finishPromise_reject = reject;
        });
        const cancelPromise = controller._cancelAlgorithm(reason);
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(cancelPromise, () => {
          if (writable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, writable._storedError);
          } else {
            WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);
            TransformStreamUnblockWrite(stream);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r2) => {
          WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r2);
          TransformStreamUnblockWrite(stream);
          defaultControllerFinishPromiseReject(controller, r2);
          return null;
        });
        return controller._finishPromise;
      }
      function defaultControllerBrandCheckException(name) {
        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
      }
      function defaultControllerFinishPromiseResolve(controller) {
        if (controller._finishPromise_resolve === void 0) {
          return;
        }
        controller._finishPromise_resolve();
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function defaultControllerFinishPromiseReject(controller, reason) {
        if (controller._finishPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(controller._finishPromise);
        controller._finishPromise_reject(reason);
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function streamBrandCheckException(name) {
        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
      }
      exports3.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
      exports3.CountQueuingStrategy = CountQueuingStrategy;
      exports3.ReadableByteStreamController = ReadableByteStreamController;
      exports3.ReadableStream = ReadableStream2;
      exports3.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
      exports3.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
      exports3.ReadableStreamDefaultController = ReadableStreamDefaultController;
      exports3.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
      exports3.TransformStream = TransformStream;
      exports3.TransformStreamDefaultController = TransformStreamDefaultController;
      exports3.WritableStream = WritableStream;
      exports3.WritableStreamDefaultController = WritableStreamDefaultController;
      exports3.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
    }));
  }
});

// ../backend/node_modules/fetch-blob/streams.cjs
var require_streams = __commonJS({
  "../backend/node_modules/fetch-blob/streams.cjs"() {
    var POOL_SIZE2 = 65536;
    if (!globalThis.ReadableStream) {
      try {
        const process2 = require("node:process");
        const { emitWarning } = process2;
        try {
          process2.emitWarning = () => {
          };
          Object.assign(globalThis, require("node:stream/web"));
          process2.emitWarning = emitWarning;
        } catch (error) {
          process2.emitWarning = emitWarning;
          throw error;
        }
      } catch (error) {
        Object.assign(globalThis, require_ponyfill_es2018());
      }
    }
    try {
      const { Blob: Blob4 } = require("buffer");
      if (Blob4 && !Blob4.prototype.stream) {
        Blob4.prototype.stream = function name(params) {
          let position = 0;
          const blob = this;
          return new ReadableStream({
            type: "bytes",
            async pull(ctrl) {
              const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE2));
              const buffer = await chunk.arrayBuffer();
              position += buffer.byteLength;
              ctrl.enqueue(new Uint8Array(buffer));
              if (position === blob.size) {
                ctrl.close();
              }
            }
          });
        };
      }
    } catch (error) {
    }
  }
});

// ../backend/node_modules/fetch-blob/index.js
async function* toIterator(parts, clone2 = true) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* (
        /** @type {AsyncIterableIterator<Uint8Array>} */
        part.stream()
      );
    } else if (ArrayBuffer.isView(part)) {
      if (clone2) {
        let position = part.byteOffset;
        const end = part.byteOffset + part.byteLength;
        while (position !== end) {
          const size = Math.min(end - position, POOL_SIZE);
          const chunk = part.buffer.slice(position, position + size);
          position += chunk.byteLength;
          yield new Uint8Array(chunk);
        }
      } else {
        yield part;
      }
    } else {
      let position = 0, b = (
        /** @type {Blob} */
        part
      );
      while (position !== b.size) {
        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));
        const buffer = await chunk.arrayBuffer();
        position += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
  }
}
var import_streams, POOL_SIZE, _Blob, Blob3, fetch_blob_default;
var init_fetch_blob = __esm({
  "../backend/node_modules/fetch-blob/index.js"() {
    import_streams = __toESM(require_streams(), 1);
    POOL_SIZE = 65536;
    _Blob = class Blob2 {
      /** @type {Array.<(Blob|Uint8Array)>} */
      #parts = [];
      #type = "";
      #size = 0;
      #endings = "transparent";
      /**
       * The Blob() constructor returns a new Blob object. The content
       * of the blob consists of the concatenation of the values given
       * in the parameter array.
       *
       * @param {*} blobParts
       * @param {{ type?: string, endings?: string }} [options]
       */
      constructor(blobParts = [], options = {}) {
        if (typeof blobParts !== "object" || blobParts === null) {
          throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");
        }
        if (typeof blobParts[Symbol.iterator] !== "function") {
          throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");
        }
        if (typeof options !== "object" && typeof options !== "function") {
          throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
        }
        if (options === null) options = {};
        const encoder = new TextEncoder();
        for (const element of blobParts) {
          let part;
          if (ArrayBuffer.isView(element)) {
            part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));
          } else if (element instanceof ArrayBuffer) {
            part = new Uint8Array(element.slice(0));
          } else if (element instanceof Blob2) {
            part = element;
          } else {
            part = encoder.encode(`${element}`);
          }
          this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;
          this.#parts.push(part);
        }
        this.#endings = `${options.endings === void 0 ? "transparent" : options.endings}`;
        const type = options.type === void 0 ? "" : String(options.type);
        this.#type = /^[\x20-\x7E]*$/.test(type) ? type : "";
      }
      /**
       * The Blob interface's size property returns the
       * size of the Blob in bytes.
       */
      get size() {
        return this.#size;
      }
      /**
       * The type property of a Blob object returns the MIME type of the file.
       */
      get type() {
        return this.#type;
      }
      /**
       * The text() method in the Blob interface returns a Promise
       * that resolves with a string containing the contents of
       * the blob, interpreted as UTF-8.
       *
       * @return {Promise<string>}
       */
      async text() {
        const decoder = new TextDecoder();
        let str = "";
        for await (const part of toIterator(this.#parts, false)) {
          str += decoder.decode(part, { stream: true });
        }
        str += decoder.decode();
        return str;
      }
      /**
       * The arrayBuffer() method in the Blob interface returns a
       * Promise that resolves with the contents of the blob as
       * binary data contained in an ArrayBuffer.
       *
       * @return {Promise<ArrayBuffer>}
       */
      async arrayBuffer() {
        const data = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of toIterator(this.#parts, false)) {
          data.set(chunk, offset);
          offset += chunk.length;
        }
        return data.buffer;
      }
      stream() {
        const it = toIterator(this.#parts, true);
        return new globalThis.ReadableStream({
          // @ts-ignore
          type: "bytes",
          async pull(ctrl) {
            const chunk = await it.next();
            chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);
          },
          async cancel() {
            await it.return();
          }
        });
      }
      /**
       * The Blob interface's slice() method creates and returns a
       * new Blob object which contains data from a subset of the
       * blob on which it's called.
       *
       * @param {number} [start]
       * @param {number} [end]
       * @param {string} [type]
       */
      slice(start = 0, end = this.size, type = "") {
        const { size } = this;
        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
        const span = Math.max(relativeEnd - relativeStart, 0);
        const parts = this.#parts;
        const blobParts = [];
        let added = 0;
        for (const part of parts) {
          if (added >= span) {
            break;
          }
          const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
          if (relativeStart && size2 <= relativeStart) {
            relativeStart -= size2;
            relativeEnd -= size2;
          } else {
            let chunk;
            if (ArrayBuffer.isView(part)) {
              chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));
              added += chunk.byteLength;
            } else {
              chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
              added += chunk.size;
            }
            relativeEnd -= size2;
            blobParts.push(chunk);
            relativeStart = 0;
          }
        }
        const blob = new Blob2([], { type: String(type).toLowerCase() });
        blob.#size = span;
        blob.#parts = blobParts;
        return blob;
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
      static [Symbol.hasInstance](object) {
        return object && typeof object === "object" && typeof object.constructor === "function" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
      }
    };
    Object.defineProperties(_Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Blob3 = _Blob;
    fetch_blob_default = Blob3;
  }
});

// ../backend/node_modules/fetch-blob/file.js
var _File, File3, file_default;
var init_file = __esm({
  "../backend/node_modules/fetch-blob/file.js"() {
    init_fetch_blob();
    _File = class File2 extends fetch_blob_default {
      #lastModified = 0;
      #name = "";
      /**
       * @param {*[]} fileBits
       * @param {string} fileName
       * @param {{lastModified?: number, type?: string}} options
       */
      // @ts-ignore
      constructor(fileBits, fileName, options = {}) {
        if (arguments.length < 2) {
          throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);
        }
        super(fileBits, options);
        if (options === null) options = {};
        const lastModified = options.lastModified === void 0 ? Date.now() : Number(options.lastModified);
        if (!Number.isNaN(lastModified)) {
          this.#lastModified = lastModified;
        }
        this.#name = String(fileName);
      }
      get name() {
        return this.#name;
      }
      get lastModified() {
        return this.#lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
      static [Symbol.hasInstance](object) {
        return !!object && object instanceof fetch_blob_default && /^(File)$/.test(object[Symbol.toStringTag]);
      }
    };
    File3 = _File;
    file_default = File3;
  }
});

// ../backend/node_modules/formdata-polyfill/esm.min.js
function formDataToBlob(F2, B = fetch_blob_default) {
  var b = `${r()}${r()}`.replace(/\./g, "").slice(-28).padStart(32, "-"), c = [], p = `--${b}\r
Content-Disposition: form-data; name="`;
  F2.forEach((v, n) => typeof v == "string" ? c.push(p + e(n) + `"\r
\r
${v.replace(/\r(?!\n)|(?<!\r)\n/g, "\r\n")}\r
`) : c.push(p + e(n) + `"; filename="${e(v.name, 1)}"\r
Content-Type: ${v.type || "application/octet-stream"}\r
\r
`, v, "\r\n"));
  c.push(`--${b}--`);
  return new B(c, { type: "multipart/form-data; boundary=" + b });
}
var t, i, h, r, m, f, e, x, FormData2;
var init_esm_min = __esm({
  "../backend/node_modules/formdata-polyfill/esm.min.js"() {
    init_fetch_blob();
    init_file();
    ({ toStringTag: t, iterator: i, hasInstance: h } = Symbol);
    r = Math.random;
    m = "append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(",");
    f = (a, b, c) => (a += "", /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== void 0 ? c + "" : b[t] == "File" ? b.name : "blob", a), b.name !== c || b[t] == "blob" ? new file_default([b], c, b) : b] : [a, b + ""]);
    e = (c, f3) => (f3 ? c : c.replace(/\r?\n|\r/g, "\r\n")).replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
    x = (n, a, e2) => {
      if (a.length < e2) {
        throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e2} arguments required, but only ${a.length} present.`);
      }
    };
    FormData2 = class FormData3 {
      #d = [];
      constructor(...a) {
        if (a.length) throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);
      }
      get [t]() {
        return "FormData";
      }
      [i]() {
        return this.entries();
      }
      static [h](o) {
        return o && typeof o === "object" && o[t] === "FormData" && !m.some((m2) => typeof o[m2] != "function");
      }
      append(...a) {
        x("append", arguments, 2);
        this.#d.push(f(...a));
      }
      delete(a) {
        x("delete", arguments, 1);
        a += "";
        this.#d = this.#d.filter(([b]) => b !== a);
      }
      get(a) {
        x("get", arguments, 1);
        a += "";
        for (var b = this.#d, l = b.length, c = 0; c < l; c++) if (b[c][0] === a) return b[c][1];
        return null;
      }
      getAll(a, b) {
        x("getAll", arguments, 1);
        b = [];
        a += "";
        this.#d.forEach((c) => c[0] === a && b.push(c[1]));
        return b;
      }
      has(a) {
        x("has", arguments, 1);
        a += "";
        return this.#d.some((b) => b[0] === a);
      }
      forEach(a, b) {
        x("forEach", arguments, 1);
        for (var [c, d] of this) a.call(b, d, c, this);
      }
      set(...a) {
        x("set", arguments, 2);
        var b = [], c = true;
        a = f(...a);
        this.#d.forEach((d) => {
          d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);
        });
        c && b.push(a);
        this.#d = b;
      }
      *entries() {
        yield* this.#d;
      }
      *keys() {
        for (var [a] of this) yield a;
      }
      *values() {
        for (var [, a] of this) yield a;
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/errors/base.js
var FetchBaseError;
var init_base = __esm({
  "../backend/node_modules/node-fetch/src/errors/base.js"() {
    FetchBaseError = class extends Error {
      constructor(message, type) {
        super(message);
        Error.captureStackTrace(this, this.constructor);
        this.type = type;
      }
      get name() {
        return this.constructor.name;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/errors/fetch-error.js
var FetchError;
var init_fetch_error = __esm({
  "../backend/node_modules/node-fetch/src/errors/fetch-error.js"() {
    init_base();
    FetchError = class extends FetchBaseError {
      /**
       * @param  {string} message -      Error message for human
       * @param  {string} [type] -        Error type for machine
       * @param  {SystemError} [systemError] - For Node.js system error
       */
      constructor(message, type, systemError) {
        super(message, type);
        if (systemError) {
          this.code = this.errno = systemError.code;
          this.erroredSysCall = systemError.syscall;
        }
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/utils/is.js
var NAME, isURLSearchParameters, isBlob, isAbortSignal, isDomainOrSubdomain, isSameProtocol;
var init_is = __esm({
  "../backend/node_modules/node-fetch/src/utils/is.js"() {
    NAME = Symbol.toStringTag;
    isURLSearchParameters = (object) => {
      return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
    };
    isBlob = (object) => {
      return object && typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
    };
    isAbortSignal = (object) => {
      return typeof object === "object" && (object[NAME] === "AbortSignal" || object[NAME] === "EventTarget");
    };
    isDomainOrSubdomain = (destination, original) => {
      const orig = new URL(original).hostname;
      const dest = new URL(destination).hostname;
      return orig === dest || orig.endsWith(`.${dest}`);
    };
    isSameProtocol = (destination, original) => {
      const orig = new URL(original).protocol;
      const dest = new URL(destination).protocol;
      return orig === dest;
    };
  }
});

// ../backend/node_modules/node-domexception/index.js
var require_node_domexception = __commonJS({
  "../backend/node_modules/node-domexception/index.js"(exports2, module2) {
    if (!globalThis.DOMException) {
      try {
        const { MessageChannel } = require("worker_threads"), port = new MessageChannel().port1, ab = new ArrayBuffer();
        port.postMessage(ab, [ab, ab]);
      } catch (err) {
        err.constructor.name === "DOMException" && (globalThis.DOMException = err.constructor);
      }
    }
    module2.exports = globalThis.DOMException;
  }
});

// ../backend/node_modules/fetch-blob/from.js
var import_node_fs, import_node_path, import_node_domexception, stat, blobFromSync, blobFrom, fileFrom, fileFromSync, fromBlob, fromFile, BlobDataItem;
var init_from = __esm({
  "../backend/node_modules/fetch-blob/from.js"() {
    import_node_fs = require("node:fs");
    import_node_path = require("node:path");
    import_node_domexception = __toESM(require_node_domexception(), 1);
    init_file();
    init_fetch_blob();
    ({ stat } = import_node_fs.promises);
    blobFromSync = (path, type) => fromBlob((0, import_node_fs.statSync)(path), path, type);
    blobFrom = (path, type) => stat(path).then((stat2) => fromBlob(stat2, path, type));
    fileFrom = (path, type) => stat(path).then((stat2) => fromFile(stat2, path, type));
    fileFromSync = (path, type) => fromFile((0, import_node_fs.statSync)(path), path, type);
    fromBlob = (stat2, path, type = "") => new fetch_blob_default([new BlobDataItem({
      path,
      size: stat2.size,
      lastModified: stat2.mtimeMs,
      start: 0
    })], { type });
    fromFile = (stat2, path, type = "") => new file_default([new BlobDataItem({
      path,
      size: stat2.size,
      lastModified: stat2.mtimeMs,
      start: 0
    })], (0, import_node_path.basename)(path), { type, lastModified: stat2.mtimeMs });
    BlobDataItem = class _BlobDataItem {
      #path;
      #start;
      constructor(options) {
        this.#path = options.path;
        this.#start = options.start;
        this.size = options.size;
        this.lastModified = options.lastModified;
      }
      /**
       * Slicing arguments is first validated and formatted
       * to not be out of range by Blob.prototype.slice
       */
      slice(start, end) {
        return new _BlobDataItem({
          path: this.#path,
          lastModified: this.lastModified,
          size: end - start,
          start: this.#start + start
        });
      }
      async *stream() {
        const { mtimeMs } = await stat(this.#path);
        if (mtimeMs > this.lastModified) {
          throw new import_node_domexception.default("The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.", "NotReadableError");
        }
        yield* (0, import_node_fs.createReadStream)(this.#path, {
          start: this.#start,
          end: this.#start + this.size - 1
        });
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/utils/multipart-parser.js
var multipart_parser_exports = {};
__export(multipart_parser_exports, {
  toFormData: () => toFormData
});
function _fileName(headerValue) {
  const m2 = headerValue.match(/\bfilename=("(.*?)"|([^()<>@,;:\\"/[\]?={}\s\t]+))($|;\s)/i);
  if (!m2) {
    return;
  }
  const match = m2[2] || m2[3] || "";
  let filename = match.slice(match.lastIndexOf("\\") + 1);
  filename = filename.replace(/%22/g, '"');
  filename = filename.replace(/&#(\d{4});/g, (m3, code) => {
    return String.fromCharCode(code);
  });
  return filename;
}
async function toFormData(Body2, ct) {
  if (!/multipart/i.test(ct)) {
    throw new TypeError("Failed to fetch");
  }
  const m2 = ct.match(/boundary=(?:"([^"]+)"|([^;]+))/i);
  if (!m2) {
    throw new TypeError("no or bad content-type header, no multipart boundary");
  }
  const parser = new MultipartParser(m2[1] || m2[2]);
  let headerField;
  let headerValue;
  let entryValue;
  let entryName;
  let contentType;
  let filename;
  const entryChunks = [];
  const formData = new FormData2();
  const onPartData = (ui8a) => {
    entryValue += decoder.decode(ui8a, { stream: true });
  };
  const appendToFile = (ui8a) => {
    entryChunks.push(ui8a);
  };
  const appendFileToFormData = () => {
    const file = new file_default(entryChunks, filename, { type: contentType });
    formData.append(entryName, file);
  };
  const appendEntryToFormData = () => {
    formData.append(entryName, entryValue);
  };
  const decoder = new TextDecoder("utf-8");
  decoder.decode();
  parser.onPartBegin = function() {
    parser.onPartData = onPartData;
    parser.onPartEnd = appendEntryToFormData;
    headerField = "";
    headerValue = "";
    entryValue = "";
    entryName = "";
    contentType = "";
    filename = null;
    entryChunks.length = 0;
  };
  parser.onHeaderField = function(ui8a) {
    headerField += decoder.decode(ui8a, { stream: true });
  };
  parser.onHeaderValue = function(ui8a) {
    headerValue += decoder.decode(ui8a, { stream: true });
  };
  parser.onHeaderEnd = function() {
    headerValue += decoder.decode();
    headerField = headerField.toLowerCase();
    if (headerField === "content-disposition") {
      const m3 = headerValue.match(/\bname=("([^"]*)"|([^()<>@,;:\\"/[\]?={}\s\t]+))/i);
      if (m3) {
        entryName = m3[2] || m3[3] || "";
      }
      filename = _fileName(headerValue);
      if (filename) {
        parser.onPartData = appendToFile;
        parser.onPartEnd = appendFileToFormData;
      }
    } else if (headerField === "content-type") {
      contentType = headerValue;
    }
    headerValue = "";
    headerField = "";
  };
  for await (const chunk of Body2) {
    parser.write(chunk);
  }
  parser.end();
  return formData;
}
var s, S, f2, F, LF, CR, SPACE, HYPHEN, COLON, A, Z, lower, noop, MultipartParser;
var init_multipart_parser = __esm({
  "../backend/node_modules/node-fetch/src/utils/multipart-parser.js"() {
    init_from();
    init_esm_min();
    s = 0;
    S = {
      START_BOUNDARY: s++,
      HEADER_FIELD_START: s++,
      HEADER_FIELD: s++,
      HEADER_VALUE_START: s++,
      HEADER_VALUE: s++,
      HEADER_VALUE_ALMOST_DONE: s++,
      HEADERS_ALMOST_DONE: s++,
      PART_DATA_START: s++,
      PART_DATA: s++,
      END: s++
    };
    f2 = 1;
    F = {
      PART_BOUNDARY: f2,
      LAST_BOUNDARY: f2 *= 2
    };
    LF = 10;
    CR = 13;
    SPACE = 32;
    HYPHEN = 45;
    COLON = 58;
    A = 97;
    Z = 122;
    lower = (c) => c | 32;
    noop = () => {
    };
    MultipartParser = class {
      /**
       * @param {string} boundary
       */
      constructor(boundary) {
        this.index = 0;
        this.flags = 0;
        this.onHeaderEnd = noop;
        this.onHeaderField = noop;
        this.onHeadersEnd = noop;
        this.onHeaderValue = noop;
        this.onPartBegin = noop;
        this.onPartData = noop;
        this.onPartEnd = noop;
        this.boundaryChars = {};
        boundary = "\r\n--" + boundary;
        const ui8a = new Uint8Array(boundary.length);
        for (let i2 = 0; i2 < boundary.length; i2++) {
          ui8a[i2] = boundary.charCodeAt(i2);
          this.boundaryChars[ui8a[i2]] = true;
        }
        this.boundary = ui8a;
        this.lookbehind = new Uint8Array(this.boundary.length + 8);
        this.state = S.START_BOUNDARY;
      }
      /**
       * @param {Uint8Array} data
       */
      write(data) {
        let i2 = 0;
        const length_ = data.length;
        let previousIndex = this.index;
        let { lookbehind, boundary, boundaryChars, index, state, flags } = this;
        const boundaryLength = this.boundary.length;
        const boundaryEnd = boundaryLength - 1;
        const bufferLength = data.length;
        let c;
        let cl;
        const mark = (name) => {
          this[name + "Mark"] = i2;
        };
        const clear = (name) => {
          delete this[name + "Mark"];
        };
        const callback = (callbackSymbol, start, end, ui8a) => {
          if (start === void 0 || start !== end) {
            this[callbackSymbol](ui8a && ui8a.subarray(start, end));
          }
        };
        const dataCallback = (name, clear2) => {
          const markSymbol = name + "Mark";
          if (!(markSymbol in this)) {
            return;
          }
          if (clear2) {
            callback(name, this[markSymbol], i2, data);
            delete this[markSymbol];
          } else {
            callback(name, this[markSymbol], data.length, data);
            this[markSymbol] = 0;
          }
        };
        for (i2 = 0; i2 < length_; i2++) {
          c = data[i2];
          switch (state) {
            case S.START_BOUNDARY:
              if (index === boundary.length - 2) {
                if (c === HYPHEN) {
                  flags |= F.LAST_BOUNDARY;
                } else if (c !== CR) {
                  return;
                }
                index++;
                break;
              } else if (index - 1 === boundary.length - 2) {
                if (flags & F.LAST_BOUNDARY && c === HYPHEN) {
                  state = S.END;
                  flags = 0;
                } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {
                  index = 0;
                  callback("onPartBegin");
                  state = S.HEADER_FIELD_START;
                } else {
                  return;
                }
                break;
              }
              if (c !== boundary[index + 2]) {
                index = -2;
              }
              if (c === boundary[index + 2]) {
                index++;
              }
              break;
            case S.HEADER_FIELD_START:
              state = S.HEADER_FIELD;
              mark("onHeaderField");
              index = 0;
            // falls through
            case S.HEADER_FIELD:
              if (c === CR) {
                clear("onHeaderField");
                state = S.HEADERS_ALMOST_DONE;
                break;
              }
              index++;
              if (c === HYPHEN) {
                break;
              }
              if (c === COLON) {
                if (index === 1) {
                  return;
                }
                dataCallback("onHeaderField", true);
                state = S.HEADER_VALUE_START;
                break;
              }
              cl = lower(c);
              if (cl < A || cl > Z) {
                return;
              }
              break;
            case S.HEADER_VALUE_START:
              if (c === SPACE) {
                break;
              }
              mark("onHeaderValue");
              state = S.HEADER_VALUE;
            // falls through
            case S.HEADER_VALUE:
              if (c === CR) {
                dataCallback("onHeaderValue", true);
                callback("onHeaderEnd");
                state = S.HEADER_VALUE_ALMOST_DONE;
              }
              break;
            case S.HEADER_VALUE_ALMOST_DONE:
              if (c !== LF) {
                return;
              }
              state = S.HEADER_FIELD_START;
              break;
            case S.HEADERS_ALMOST_DONE:
              if (c !== LF) {
                return;
              }
              callback("onHeadersEnd");
              state = S.PART_DATA_START;
              break;
            case S.PART_DATA_START:
              state = S.PART_DATA;
              mark("onPartData");
            // falls through
            case S.PART_DATA:
              previousIndex = index;
              if (index === 0) {
                i2 += boundaryEnd;
                while (i2 < bufferLength && !(data[i2] in boundaryChars)) {
                  i2 += boundaryLength;
                }
                i2 -= boundaryEnd;
                c = data[i2];
              }
              if (index < boundary.length) {
                if (boundary[index] === c) {
                  if (index === 0) {
                    dataCallback("onPartData", true);
                  }
                  index++;
                } else {
                  index = 0;
                }
              } else if (index === boundary.length) {
                index++;
                if (c === CR) {
                  flags |= F.PART_BOUNDARY;
                } else if (c === HYPHEN) {
                  flags |= F.LAST_BOUNDARY;
                } else {
                  index = 0;
                }
              } else if (index - 1 === boundary.length) {
                if (flags & F.PART_BOUNDARY) {
                  index = 0;
                  if (c === LF) {
                    flags &= ~F.PART_BOUNDARY;
                    callback("onPartEnd");
                    callback("onPartBegin");
                    state = S.HEADER_FIELD_START;
                    break;
                  }
                } else if (flags & F.LAST_BOUNDARY) {
                  if (c === HYPHEN) {
                    callback("onPartEnd");
                    state = S.END;
                    flags = 0;
                  } else {
                    index = 0;
                  }
                } else {
                  index = 0;
                }
              }
              if (index > 0) {
                lookbehind[index - 1] = c;
              } else if (previousIndex > 0) {
                const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);
                callback("onPartData", 0, previousIndex, _lookbehind);
                previousIndex = 0;
                mark("onPartData");
                i2--;
              }
              break;
            case S.END:
              break;
            default:
              throw new Error(`Unexpected state entered: ${state}`);
          }
        }
        dataCallback("onHeaderField");
        dataCallback("onHeaderValue");
        dataCallback("onPartData");
        this.index = index;
        this.state = state;
        this.flags = flags;
      }
      end() {
        if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {
          this.onPartEnd();
        } else if (this.state !== S.END) {
          throw new Error("MultipartParser.end(): stream ended unexpectedly");
        }
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/body.js
async function consumeBody(data) {
  if (data[INTERNALS].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS].disturbed = true;
  if (data[INTERNALS].error) {
    throw data[INTERNALS].error;
  }
  const { body } = data;
  if (body === null) {
    return import_node_buffer.Buffer.alloc(0);
  }
  if (!(body instanceof import_node_stream.default)) {
    return import_node_buffer.Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(error);
        throw error;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error) {
    const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, "system", error);
    throw error_;
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return import_node_buffer.Buffer.from(accum.join(""));
      }
      return import_node_buffer.Buffer.concat(accum, accumBytes);
    } catch (error) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, "system", error);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
var import_node_stream, import_node_util, import_node_buffer, pipeline, INTERNALS, Body, clone, getNonSpecFormDataBoundary, extractContentType, getTotalBytes, writeToStream;
var init_body = __esm({
  "../backend/node_modules/node-fetch/src/body.js"() {
    import_node_stream = __toESM(require("node:stream"), 1);
    import_node_util = require("node:util");
    import_node_buffer = require("node:buffer");
    init_fetch_blob();
    init_esm_min();
    init_fetch_error();
    init_base();
    init_is();
    pipeline = (0, import_node_util.promisify)(import_node_stream.default.pipeline);
    INTERNALS = Symbol("Body internals");
    Body = class {
      constructor(body, {
        size = 0
      } = {}) {
        let boundary = null;
        if (body === null) {
          body = null;
        } else if (isURLSearchParameters(body)) {
          body = import_node_buffer.Buffer.from(body.toString());
        } else if (isBlob(body)) {
        } else if (import_node_buffer.Buffer.isBuffer(body)) {
        } else if (import_node_util.types.isAnyArrayBuffer(body)) {
          body = import_node_buffer.Buffer.from(body);
        } else if (ArrayBuffer.isView(body)) {
          body = import_node_buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
        } else if (body instanceof import_node_stream.default) {
        } else if (body instanceof FormData2) {
          body = formDataToBlob(body);
          boundary = body.type.split("=")[1];
        } else {
          body = import_node_buffer.Buffer.from(String(body));
        }
        let stream = body;
        if (import_node_buffer.Buffer.isBuffer(body)) {
          stream = import_node_stream.default.Readable.from(body);
        } else if (isBlob(body)) {
          stream = import_node_stream.default.Readable.from(body.stream());
        }
        this[INTERNALS] = {
          body,
          stream,
          boundary,
          disturbed: false,
          error: null
        };
        this.size = size;
        if (body instanceof import_node_stream.default) {
          body.on("error", (error_) => {
            const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, "system", error_);
            this[INTERNALS].error = error;
          });
        }
      }
      get body() {
        return this[INTERNALS].stream;
      }
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      }
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      async arrayBuffer() {
        const { buffer, byteOffset, byteLength } = await consumeBody(this);
        return buffer.slice(byteOffset, byteOffset + byteLength);
      }
      async formData() {
        const ct = this.headers.get("content-type");
        if (ct.startsWith("application/x-www-form-urlencoded")) {
          const formData = new FormData2();
          const parameters = new URLSearchParams(await this.text());
          for (const [name, value] of parameters) {
            formData.append(name, value);
          }
          return formData;
        }
        const { toFormData: toFormData2 } = await Promise.resolve().then(() => (init_multipart_parser(), multipart_parser_exports));
        return toFormData2(this.body, ct);
      }
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      async blob() {
        const ct = this.headers && this.headers.get("content-type") || this[INTERNALS].body && this[INTERNALS].body.type || "";
        const buf = await this.arrayBuffer();
        return new fetch_blob_default([buf], {
          type: ct
        });
      }
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      async json() {
        const text = await this.text();
        return JSON.parse(text);
      }
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      async text() {
        const buffer = await consumeBody(this);
        return new TextDecoder().decode(buffer);
      }
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody(this);
      }
    };
    Body.prototype.buffer = (0, import_node_util.deprecate)(Body.prototype.buffer, "Please use 'response.arrayBuffer()' instead of 'response.buffer()'", "node-fetch#buffer");
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true },
      data: { get: (0, import_node_util.deprecate)(
        () => {
        },
        "data doesn't exist, use json(), text(), arrayBuffer(), or body instead",
        "https://github.com/node-fetch/node-fetch/issues/1000 (response)"
      ) }
    });
    clone = (instance, highWaterMark) => {
      let p1;
      let p2;
      let { body } = instance[INTERNALS];
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof import_node_stream.default && typeof body.getBoundary !== "function") {
        p1 = new import_node_stream.PassThrough({ highWaterMark });
        p2 = new import_node_stream.PassThrough({ highWaterMark });
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].stream = p1;
        body = p2;
      }
      return body;
    };
    getNonSpecFormDataBoundary = (0, import_node_util.deprecate)(
      (body) => body.getBoundary(),
      "form-data doesn't follow the spec and requires special treatment. Use alternative package",
      "https://github.com/node-fetch/node-fetch/issues/1167"
    );
    extractContentType = (body, request) => {
      if (body === null) {
        return null;
      }
      if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      }
      if (isURLSearchParameters(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      }
      if (isBlob(body)) {
        return body.type || null;
      }
      if (import_node_buffer.Buffer.isBuffer(body) || import_node_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
        return null;
      }
      if (body instanceof FormData2) {
        return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
      }
      if (body && typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
      }
      if (body instanceof import_node_stream.default) {
        return null;
      }
      return "text/plain;charset=UTF-8";
    };
    getTotalBytes = (request) => {
      const { body } = request[INTERNALS];
      if (body === null) {
        return 0;
      }
      if (isBlob(body)) {
        return body.size;
      }
      if (import_node_buffer.Buffer.isBuffer(body)) {
        return body.length;
      }
      if (body && typeof body.getLengthSync === "function") {
        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
      }
      return null;
    };
    writeToStream = async (dest, { body }) => {
      if (body === null) {
        dest.end();
      } else {
        await pipeline(body, dest);
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/headers.js
function fromRawHeaders(headers = []) {
  return new Headers2(
    headers.reduce((result, value, index, array) => {
      if (index % 2 === 0) {
        result.push(array.slice(index, index + 2));
      }
      return result;
    }, []).filter(([name, value]) => {
      try {
        validateHeaderName(name);
        validateHeaderValue(name, String(value));
        return true;
      } catch {
        return false;
      }
    })
  );
}
var import_node_util2, import_node_http, validateHeaderName, validateHeaderValue, Headers2;
var init_headers = __esm({
  "../backend/node_modules/node-fetch/src/headers.js"() {
    import_node_util2 = require("node:util");
    import_node_http = __toESM(require("node:http"), 1);
    validateHeaderName = typeof import_node_http.default.validateHeaderName === "function" ? import_node_http.default.validateHeaderName : (name) => {
      if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
        const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
        Object.defineProperty(error, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
        throw error;
      }
    };
    validateHeaderValue = typeof import_node_http.default.validateHeaderValue === "function" ? import_node_http.default.validateHeaderValue : (name, value) => {
      if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
        const error = new TypeError(`Invalid character in header content ["${name}"]`);
        Object.defineProperty(error, "code", { value: "ERR_INVALID_CHAR" });
        throw error;
      }
    };
    Headers2 = class _Headers extends URLSearchParams {
      /**
       * Headers class
       *
       * @constructor
       * @param {HeadersInit} [init] - Response headers
       */
      constructor(init) {
        let result = [];
        if (init instanceof _Headers) {
          const raw = init.raw();
          for (const [name, values] of Object.entries(raw)) {
            result.push(...values.map((value) => [name, value]));
          }
        } else if (init == null) {
        } else if (typeof init === "object" && !import_node_util2.types.isBoxedPrimitive(init)) {
          const method = init[Symbol.iterator];
          if (method == null) {
            result.push(...Object.entries(init));
          } else {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            result = [...init].map((pair) => {
              if (typeof pair !== "object" || import_node_util2.types.isBoxedPrimitive(pair)) {
                throw new TypeError("Each header pair must be an iterable object");
              }
              return [...pair];
            }).map((pair) => {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              return [...pair];
            });
          }
        } else {
          throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
        }
        result = result.length > 0 ? result.map(([name, value]) => {
          validateHeaderName(name);
          validateHeaderValue(name, String(value));
          return [String(name).toLowerCase(), String(value)];
        }) : void 0;
        super(result);
        return new Proxy(this, {
          get(target, p, receiver) {
            switch (p) {
              case "append":
              case "set":
                return (name, value) => {
                  validateHeaderName(name);
                  validateHeaderValue(name, String(value));
                  return URLSearchParams.prototype[p].call(
                    target,
                    String(name).toLowerCase(),
                    String(value)
                  );
                };
              case "delete":
              case "has":
              case "getAll":
                return (name) => {
                  validateHeaderName(name);
                  return URLSearchParams.prototype[p].call(
                    target,
                    String(name).toLowerCase()
                  );
                };
              case "keys":
                return () => {
                  target.sort();
                  return new Set(URLSearchParams.prototype.keys.call(target)).keys();
                };
              default:
                return Reflect.get(target, p, receiver);
            }
          }
        });
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      toString() {
        return Object.prototype.toString.call(this);
      }
      get(name) {
        const values = this.getAll(name);
        if (values.length === 0) {
          return null;
        }
        let value = values.join(", ");
        if (/^content-encoding$/i.test(name)) {
          value = value.toLowerCase();
        }
        return value;
      }
      forEach(callback, thisArg = void 0) {
        for (const name of this.keys()) {
          Reflect.apply(callback, thisArg, [this.get(name), name, this]);
        }
      }
      *values() {
        for (const name of this.keys()) {
          yield this.get(name);
        }
      }
      /**
       * @type {() => IterableIterator<[string, string]>}
       */
      *entries() {
        for (const name of this.keys()) {
          yield [name, this.get(name)];
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * Node-fetch non-spec method
       * returning all headers and their values as array
       * @returns {Record<string, string[]>}
       */
      raw() {
        return [...this.keys()].reduce((result, key) => {
          result[key] = this.getAll(key);
          return result;
        }, {});
      }
      /**
       * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return [...this.keys()].reduce((result, key) => {
          const values = this.getAll(key);
          if (key === "host") {
            result[key] = values[0];
          } else {
            result[key] = values.length > 1 ? values : values[0];
          }
          return result;
        }, {});
      }
    };
    Object.defineProperties(
      Headers2.prototype,
      ["get", "entries", "forEach", "values"].reduce((result, property) => {
        result[property] = { enumerable: true };
        return result;
      }, {})
    );
  }
});

// ../backend/node_modules/node-fetch/src/utils/is-redirect.js
var redirectStatus, isRedirect;
var init_is_redirect = __esm({
  "../backend/node_modules/node-fetch/src/utils/is-redirect.js"() {
    redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
    isRedirect = (code) => {
      return redirectStatus.has(code);
    };
  }
});

// ../backend/node_modules/node-fetch/src/response.js
var INTERNALS2, Response;
var init_response = __esm({
  "../backend/node_modules/node-fetch/src/response.js"() {
    init_headers();
    init_body();
    init_is_redirect();
    INTERNALS2 = Symbol("Response internals");
    Response = class _Response extends Body {
      constructor(body = null, options = {}) {
        super(body, options);
        const status = options.status != null ? options.status : 200;
        const headers = new Headers2(options.headers);
        if (body !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body, this);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS2] = {
          type: "default",
          url: options.url,
          status,
          statusText: options.statusText || "",
          headers,
          counter: options.counter,
          highWaterMark: options.highWaterMark
        };
      }
      get type() {
        return this[INTERNALS2].type;
      }
      get url() {
        return this[INTERNALS2].url || "";
      }
      get status() {
        return this[INTERNALS2].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS2].status >= 200 && this[INTERNALS2].status < 300;
      }
      get redirected() {
        return this[INTERNALS2].counter > 0;
      }
      get statusText() {
        return this[INTERNALS2].statusText;
      }
      get headers() {
        return this[INTERNALS2].headers;
      }
      get highWaterMark() {
        return this[INTERNALS2].highWaterMark;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new _Response(clone(this, this.highWaterMark), {
          type: this.type,
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected,
          size: this.size,
          highWaterMark: this.highWaterMark
        });
      }
      /**
       * @param {string} url    The URL that the new response is to originate from.
       * @param {number} status An optional status code for the response (e.g., 302.)
       * @returns {Response}    A Response object.
       */
      static redirect(url, status = 302) {
        if (!isRedirect(status)) {
          throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        return new _Response(null, {
          headers: {
            location: new URL(url).toString()
          },
          status
        });
      }
      static error() {
        const response = new _Response(null, { status: 0, statusText: "" });
        response[INTERNALS2].type = "error";
        return response;
      }
      static json(data = void 0, init = {}) {
        const body = JSON.stringify(data);
        if (body === void 0) {
          throw new TypeError("data is not JSON serializable");
        }
        const headers = new Headers2(init && init.headers);
        if (!headers.has("content-type")) {
          headers.set("content-type", "application/json");
        }
        return new _Response(body, {
          ...init,
          headers
        });
      }
      get [Symbol.toStringTag]() {
        return "Response";
      }
    };
    Object.defineProperties(Response.prototype, {
      type: { enumerable: true },
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
  }
});

// ../backend/node_modules/node-fetch/src/utils/get-search.js
var getSearch;
var init_get_search = __esm({
  "../backend/node_modules/node-fetch/src/utils/get-search.js"() {
    getSearch = (parsedURL) => {
      if (parsedURL.search) {
        return parsedURL.search;
      }
      const lastOffset = parsedURL.href.length - 1;
      const hash = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
      return parsedURL.href[lastOffset - hash.length] === "?" ? "?" : "";
    };
  }
});

// ../backend/node_modules/node-fetch/src/utils/referrer.js
function stripURLForUseAsAReferrer(url, originOnly = false) {
  if (url == null) {
    return "no-referrer";
  }
  url = new URL(url);
  if (/^(about|blob|data):$/.test(url.protocol)) {
    return "no-referrer";
  }
  url.username = "";
  url.password = "";
  url.hash = "";
  if (originOnly) {
    url.pathname = "";
    url.search = "";
  }
  return url;
}
function validateReferrerPolicy(referrerPolicy) {
  if (!ReferrerPolicy.has(referrerPolicy)) {
    throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
  }
  return referrerPolicy;
}
function isOriginPotentiallyTrustworthy(url) {
  if (/^(http|ws)s:$/.test(url.protocol)) {
    return true;
  }
  const hostIp = url.host.replace(/(^\[)|(]$)/g, "");
  const hostIPVersion = (0, import_node_net.isIP)(hostIp);
  if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
    return true;
  }
  if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
    return true;
  }
  if (url.host === "localhost" || url.host.endsWith(".localhost")) {
    return false;
  }
  if (url.protocol === "file:") {
    return true;
  }
  return false;
}
function isUrlPotentiallyTrustworthy(url) {
  if (/^about:(blank|srcdoc)$/.test(url)) {
    return true;
  }
  if (url.protocol === "data:") {
    return true;
  }
  if (/^(blob|filesystem):$/.test(url.protocol)) {
    return true;
  }
  return isOriginPotentiallyTrustworthy(url);
}
function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {
  if (request.referrer === "no-referrer" || request.referrerPolicy === "") {
    return null;
  }
  const policy = request.referrerPolicy;
  if (request.referrer === "about:client") {
    return "no-referrer";
  }
  const referrerSource = request.referrer;
  let referrerURL = stripURLForUseAsAReferrer(referrerSource);
  let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin;
  }
  if (referrerURLCallback) {
    referrerURL = referrerURLCallback(referrerURL);
  }
  if (referrerOriginCallback) {
    referrerOrigin = referrerOriginCallback(referrerOrigin);
  }
  const currentURL = new URL(request.url);
  switch (policy) {
    case "no-referrer":
      return "no-referrer";
    case "origin":
      return referrerOrigin;
    case "unsafe-url":
      return referrerURL;
    case "strict-origin":
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerOrigin.toString();
    case "strict-origin-when-cross-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerOrigin;
    case "same-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      return "no-referrer";
    case "origin-when-cross-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      return referrerOrigin;
    case "no-referrer-when-downgrade":
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerURL;
    default:
      throw new TypeError(`Invalid referrerPolicy: ${policy}`);
  }
}
function parseReferrerPolicyFromHeader(headers) {
  const policyTokens = (headers.get("referrer-policy") || "").split(/[,\s]+/);
  let policy = "";
  for (const token of policyTokens) {
    if (token && ReferrerPolicy.has(token)) {
      policy = token;
    }
  }
  return policy;
}
var import_node_net, ReferrerPolicy, DEFAULT_REFERRER_POLICY;
var init_referrer = __esm({
  "../backend/node_modules/node-fetch/src/utils/referrer.js"() {
    import_node_net = require("node:net");
    ReferrerPolicy = /* @__PURE__ */ new Set([
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "same-origin",
      "origin",
      "strict-origin",
      "origin-when-cross-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ]);
    DEFAULT_REFERRER_POLICY = "strict-origin-when-cross-origin";
  }
});

// ../backend/node_modules/node-fetch/src/request.js
var import_node_url, import_node_util3, INTERNALS3, isRequest, doBadDataWarn, Request, getNodeRequestOptions;
var init_request = __esm({
  "../backend/node_modules/node-fetch/src/request.js"() {
    import_node_url = require("node:url");
    import_node_util3 = require("node:util");
    init_headers();
    init_body();
    init_is();
    init_get_search();
    init_referrer();
    INTERNALS3 = Symbol("Request internals");
    isRequest = (object) => {
      return typeof object === "object" && typeof object[INTERNALS3] === "object";
    };
    doBadDataWarn = (0, import_node_util3.deprecate)(
      () => {
      },
      ".data is not a valid RequestInit property, use .body instead",
      "https://github.com/node-fetch/node-fetch/issues/1000 (request)"
    );
    Request = class _Request extends Body {
      constructor(input, init = {}) {
        let parsedURL;
        if (isRequest(input)) {
          parsedURL = new URL(input.url);
        } else {
          parsedURL = new URL(input);
          input = {};
        }
        if (parsedURL.username !== "" || parsedURL.password !== "") {
          throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
        }
        let method = init.method || input.method || "GET";
        if (/^(delete|get|head|options|post|put)$/i.test(method)) {
          method = method.toUpperCase();
        }
        if (!isRequest(init) && "data" in init) {
          doBadDataWarn();
        }
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        super(inputBody, {
          size: init.size || input.size || 0
        });
        const headers = new Headers2(init.headers || input.headers || {});
        if (inputBody !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody, this);
          if (contentType) {
            headers.set("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init) {
          signal = init.signal;
        }
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
        }
        let referrer = init.referrer == null ? input.referrer : init.referrer;
        if (referrer === "") {
          referrer = "no-referrer";
        } else if (referrer) {
          const parsedReferrer = new URL(referrer);
          referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? "client" : parsedReferrer;
        } else {
          referrer = void 0;
        }
        this[INTERNALS3] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal,
          referrer
        };
        this.follow = init.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init.follow;
        this.compress = init.compress === void 0 ? input.compress === void 0 ? true : input.compress : init.compress;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
        this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;
        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || "";
      }
      /** @returns {string} */
      get method() {
        return this[INTERNALS3].method;
      }
      /** @returns {string} */
      get url() {
        return (0, import_node_url.format)(this[INTERNALS3].parsedURL);
      }
      /** @returns {Headers} */
      get headers() {
        return this[INTERNALS3].headers;
      }
      get redirect() {
        return this[INTERNALS3].redirect;
      }
      /** @returns {AbortSignal} */
      get signal() {
        return this[INTERNALS3].signal;
      }
      // https://fetch.spec.whatwg.org/#dom-request-referrer
      get referrer() {
        if (this[INTERNALS3].referrer === "no-referrer") {
          return "";
        }
        if (this[INTERNALS3].referrer === "client") {
          return "about:client";
        }
        if (this[INTERNALS3].referrer) {
          return this[INTERNALS3].referrer.toString();
        }
        return void 0;
      }
      get referrerPolicy() {
        return this[INTERNALS3].referrerPolicy;
      }
      set referrerPolicy(referrerPolicy) {
        this[INTERNALS3].referrerPolicy = validateReferrerPolicy(referrerPolicy);
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new _Request(this);
      }
      get [Symbol.toStringTag]() {
        return "Request";
      }
    };
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true },
      referrer: { enumerable: true },
      referrerPolicy: { enumerable: true }
    });
    getNodeRequestOptions = (request) => {
      const { parsedURL } = request[INTERNALS3];
      const headers = new Headers2(request[INTERNALS3].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      let contentLengthValue = null;
      if (request.body === null && /^(post|put)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body !== null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (request.referrerPolicy === "") {
        request.referrerPolicy = DEFAULT_REFERRER_POLICY;
      }
      if (request.referrer && request.referrer !== "no-referrer") {
        request[INTERNALS3].referrer = determineRequestsReferrer(request);
      } else {
        request[INTERNALS3].referrer = "no-referrer";
      }
      if (request[INTERNALS3].referrer instanceof URL) {
        headers.set("Referer", request.referrer);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip, deflate, br");
      }
      let { agent } = request;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      const search = getSearch(parsedURL);
      const options = {
        // Overwrite search to retain trailing ? (issue #776)
        path: parsedURL.pathname + search,
        // The following options are not expressed in the URL
        method: request.method,
        headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent
      };
      return {
        /** @type {URL} */
        parsedURL,
        options
      };
    };
  }
});

// ../backend/node_modules/node-fetch/src/errors/abort-error.js
var AbortError;
var init_abort_error = __esm({
  "../backend/node_modules/node-fetch/src/errors/abort-error.js"() {
    init_base();
    AbortError = class extends FetchBaseError {
      constructor(message, type = "aborted") {
        super(message, type);
      }
    };
  }
});

// ../backend/node_modules/node-fetch/src/index.js
var src_exports = {};
__export(src_exports, {
  AbortError: () => AbortError,
  Blob: () => fetch_blob_default,
  FetchError: () => FetchError,
  File: () => file_default,
  FormData: () => FormData2,
  Headers: () => Headers2,
  Request: () => Request,
  Response: () => Response,
  blobFrom: () => blobFrom,
  blobFromSync: () => blobFromSync,
  default: () => fetch2,
  fileFrom: () => fileFrom,
  fileFromSync: () => fileFromSync,
  isRedirect: () => isRedirect
});
async function fetch2(url, options_) {
  return new Promise((resolve, reject) => {
    const request = new Request(url, options_);
    const { parsedURL, options } = getNodeRequestOptions(request);
    if (!supportedSchemas.has(parsedURL.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (parsedURL.protocol === "data:") {
      const data = dist_default(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve(response2);
      return;
    }
    const send = (parsedURL.protocol === "https:" ? import_node_https.default : import_node_http2.default).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error = new AbortError("The operation was aborted.");
      reject(error);
      if (request.body && request.body instanceof import_node_stream2.default.Readable) {
        request.body.destroy(error);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(parsedURL.toString(), options);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (error) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, "system", error));
      finalize();
    });
    fixResponseChunkedTransferBadEnding(request_, (error) => {
      if (response && response.body) {
        response.body.destroy(error);
      }
    });
    if (process.version < "v14") {
      request_.on("socket", (s2) => {
        let endedWithEventsCount;
        s2.prependListener("end", () => {
          endedWithEventsCount = s2._eventsCount;
        });
        s2.prependListener("close", (hadError) => {
          if (response && endedWithEventsCount < s2._eventsCount && !hadError) {
            const error = new Error("Premature close");
            error.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", error);
          }
        });
      });
    }
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL(location, request.url);
        } catch {
          if (request.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers2(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: clone(request),
              signal: request.signal,
              size: request.size,
              referrer: request.referrer,
              referrerPolicy: request.referrerPolicy
            };
            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOptions.headers.delete(name);
              }
            }
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_node_stream2.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
            if (responseReferrerPolicy) {
              requestOptions.referrerPolicy = responseReferrerPolicy;
            }
            resolve(fetch2(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
          default:
            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
        }
      }
      if (signal) {
        response_.once("end", () => {
          signal.removeEventListener("abort", abortAndFinalize);
        });
      }
      let body = (0, import_node_stream2.pipeline)(response_, new import_node_stream2.PassThrough(), (error) => {
        if (error) {
          reject(error);
        }
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: import_node_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_node_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createGunzip(zlibOptions), (error) => {
          if (error) {
            reject(error);
          }
        });
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_node_stream2.pipeline)(response_, new import_node_stream2.PassThrough(), (error) => {
          if (error) {
            reject(error);
          }
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createInflate(), (error) => {
              if (error) {
                reject(error);
              }
            });
          } else {
            body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createInflateRaw(), (error) => {
              if (error) {
                reject(error);
              }
            });
          }
          response = new Response(body, responseOptions);
          resolve(response);
        });
        raw.once("end", () => {
          if (!response) {
            response = new Response(body, responseOptions);
            resolve(response);
          }
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createBrotliDecompress(), (error) => {
          if (error) {
            reject(error);
          }
        });
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve(response);
    });
    writeToStream(request_, request).catch(reject);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  const LAST_CHUNK = import_node_buffer2.Buffer.from("0\r\n\r\n");
  let isChunkedTransfer = false;
  let properLastChunkReceived = false;
  let previousChunk;
  request.on("response", (response) => {
    const { headers } = response;
    isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
  });
  request.on("socket", (socket) => {
    const onSocketClose = () => {
      if (isChunkedTransfer && !properLastChunkReceived) {
        const error = new Error("Premature close");
        error.code = "ERR_STREAM_PREMATURE_CLOSE";
        errorCallback(error);
      }
    };
    const onData = (buf) => {
      properLastChunkReceived = import_node_buffer2.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
      if (!properLastChunkReceived && previousChunk) {
        properLastChunkReceived = import_node_buffer2.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && import_node_buffer2.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
      }
      previousChunk = buf;
    };
    socket.prependListener("close", onSocketClose);
    socket.on("data", onData);
    request.on("close", () => {
      socket.removeListener("close", onSocketClose);
      socket.removeListener("data", onData);
    });
  });
}
var import_node_http2, import_node_https, import_node_zlib, import_node_stream2, import_node_buffer2, supportedSchemas;
var init_src = __esm({
  "../backend/node_modules/node-fetch/src/index.js"() {
    import_node_http2 = __toESM(require("node:http"), 1);
    import_node_https = __toESM(require("node:https"), 1);
    import_node_zlib = __toESM(require("node:zlib"), 1);
    import_node_stream2 = __toESM(require("node:stream"), 1);
    import_node_buffer2 = require("node:buffer");
    init_dist();
    init_body();
    init_response();
    init_headers();
    init_request();
    init_fetch_error();
    init_abort_error();
    init_is_redirect();
    init_esm_min();
    init_is();
    init_referrer();
    init_from();
    supportedSchemas = /* @__PURE__ */ new Set(["data:", "http:", "https:"]);
  }
});

// ../backend/node_modules/gaxios/build/cjs/src/gaxios.js
var require_gaxios = __commonJS({
  "../backend/node_modules/gaxios/build/cjs/src/gaxios.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Gaxios = void 0;
    var extend_1 = __importDefault2(require_extend());
    var https_1 = require("https");
    var common_js_1 = require_common();
    var retry_js_1 = require_retry();
    var stream_1 = require("stream");
    var interceptor_js_1 = require_interceptor();
    var randomUUID = async () => globalThis.crypto?.randomUUID() || (await import("crypto")).randomUUID();
    var Gaxios = class {
      agentCache = /* @__PURE__ */ new Map();
      /**
       * Default HTTP options that will be used for every HTTP request.
       */
      defaults;
      /**
       * Interceptors
       */
      interceptors;
      /**
       * The Gaxios class is responsible for making HTTP requests.
       * @param defaults The default set of options to be used for this instance.
       */
      constructor(defaults) {
        this.defaults = defaults || {};
        this.interceptors = {
          request: new interceptor_js_1.GaxiosInterceptorManager(),
          response: new interceptor_js_1.GaxiosInterceptorManager()
        };
      }
      /**
       * A {@link fetch `fetch`} compliant API for {@link Gaxios}.
       *
       * @remarks
       *
       * This is useful as a drop-in replacement for `fetch` API usage.
       *
       * @example
       *
       * ```ts
       * const gaxios = new Gaxios();
       * const myFetch: typeof fetch = (...args) => gaxios.fetch(...args);
       * await myFetch('https://example.com');
       * ```
       *
       * @param args `fetch` API or `Gaxios#request` parameters
       * @returns the {@link Response} with Gaxios-added properties
       */
      fetch(...args) {
        const input = args[0];
        const init = args[1];
        let url = void 0;
        const headers = new Headers();
        if (typeof input === "string") {
          url = new URL(input);
        } else if (input instanceof URL) {
          url = input;
        } else if (input && input.url) {
          url = new URL(input.url);
        }
        if (input && typeof input === "object" && "headers" in input) {
          _a.mergeHeaders(headers, input.headers);
        }
        if (init) {
          _a.mergeHeaders(headers, new Headers(init.headers));
        }
        if (typeof input === "object" && !(input instanceof URL)) {
          return this.request({ ...init, ...input, headers, url });
        } else {
          return this.request({ ...init, headers, url });
        }
      }
      /**
       * Perform an HTTP request with the given options.
       * @param opts Set of HTTP options that will be used for this HTTP request.
       */
      async request(opts = {}) {
        let prepared = await this.#prepareRequest(opts);
        prepared = await this.#applyRequestInterceptors(prepared);
        return this.#applyResponseInterceptors(this._request(prepared));
      }
      async _defaultAdapter(config) {
        const fetchImpl = config.fetchImplementation || this.defaults.fetchImplementation || await _a.#getFetch();
        const preparedOpts = { ...config };
        delete preparedOpts.data;
        const res = await fetchImpl(config.url, preparedOpts);
        const data = await this.getResponseData(config, res);
        if (!Object.getOwnPropertyDescriptor(res, "data")?.configurable) {
          Object.defineProperties(res, {
            data: {
              configurable: true,
              writable: true,
              enumerable: true,
              value: data
            }
          });
        }
        return Object.assign(res, { config, data });
      }
      /**
       * Internal, retryable version of the `request` method.
       * @param opts Set of HTTP options that will be used for this HTTP request.
       */
      async _request(opts) {
        try {
          let translatedResponse;
          if (opts.adapter) {
            translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));
          } else {
            translatedResponse = await this._defaultAdapter(opts);
          }
          if (!opts.validateStatus(translatedResponse.status)) {
            if (opts.responseType === "stream") {
              const response = [];
              for await (const chunk of opts.data ?? []) {
                response.push(chunk);
              }
              translatedResponse.data = response;
            }
            const errorInfo = common_js_1.GaxiosError.extractAPIErrorFromResponse(translatedResponse, `Request failed with status code ${translatedResponse.status}`);
            throw new common_js_1.GaxiosError(errorInfo?.message, opts, translatedResponse, errorInfo);
          }
          return translatedResponse;
        } catch (e2) {
          let err;
          if (e2 instanceof common_js_1.GaxiosError) {
            err = e2;
          } else if (e2 instanceof Error) {
            err = new common_js_1.GaxiosError(e2.message, opts, void 0, e2);
          } else {
            err = new common_js_1.GaxiosError("Unexpected Gaxios Error", opts, void 0, e2);
          }
          const { shouldRetry, config } = await (0, retry_js_1.getRetryConfig)(err);
          if (shouldRetry && config) {
            err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;
            opts.retryConfig = err.config?.retryConfig;
            this.#appendTimeoutToSignal(opts);
            return this._request(opts);
          }
          if (opts.errorRedactor) {
            opts.errorRedactor(err);
          }
          throw err;
        }
      }
      async getResponseData(opts, res) {
        if (opts.maxContentLength && res.headers.has("content-length") && opts.maxContentLength < Number.parseInt(res.headers?.get("content-length") || "")) {
          throw new common_js_1.GaxiosError("Response's `Content-Length` is over the limit.", opts, Object.assign(res, { config: opts }));
        }
        switch (opts.responseType) {
          case "stream":
            return res.body;
          case "json":
            return res.json();
          case "arraybuffer":
            return res.arrayBuffer();
          case "blob":
            return res.blob();
          case "text":
            return res.text();
          default:
            return this.getResponseDataFromContentType(res);
        }
      }
      #urlMayUseProxy(url, noProxy = []) {
        const candidate = new URL(url);
        const noProxyList = [...noProxy];
        const noProxyEnvList = (process.env.NO_PROXY ?? process.env.no_proxy)?.split(",") || [];
        for (const rule of noProxyEnvList) {
          noProxyList.push(rule.trim());
        }
        for (const rule of noProxyList) {
          if (rule instanceof RegExp) {
            if (rule.test(candidate.toString())) {
              return false;
            }
          } else if (rule instanceof URL) {
            if (rule.origin === candidate.origin) {
              return false;
            }
          } else if (rule.startsWith("*.") || rule.startsWith(".")) {
            const cleanedRule = rule.replace(/^\*\./, ".");
            if (candidate.hostname.endsWith(cleanedRule)) {
              return false;
            }
          } else if (rule === candidate.origin || rule === candidate.hostname || rule === candidate.href) {
            return false;
          }
        }
        return true;
      }
      /**
       * Applies the request interceptors. The request interceptors are applied after the
       * call to prepareRequest is completed.
       *
       * @param {GaxiosOptionsPrepared} options The current set of options.
       *
       * @returns {Promise<GaxiosOptionsPrepared>} Promise that resolves to the set of options or response after interceptors are applied.
       */
      async #applyRequestInterceptors(options) {
        let promiseChain = Promise.resolve(options);
        for (const interceptor of this.interceptors.request.values()) {
          if (interceptor) {
            promiseChain = promiseChain.then(interceptor.resolved, interceptor.rejected);
          }
        }
        return promiseChain;
      }
      /**
       * Applies the response interceptors. The response interceptors are applied after the
       * call to request is made.
       *
       * @param {GaxiosOptionsPrepared} options The current set of options.
       *
       * @returns {Promise<GaxiosOptionsPrepared>} Promise that resolves to the set of options or response after interceptors are applied.
       */
      async #applyResponseInterceptors(response) {
        let promiseChain = Promise.resolve(response);
        for (const interceptor of this.interceptors.response.values()) {
          if (interceptor) {
            promiseChain = promiseChain.then(interceptor.resolved, interceptor.rejected);
          }
        }
        return promiseChain;
      }
      /**
       * Validates the options, merges them with defaults, and prepare request.
       *
       * @param options The original options passed from the client.
       * @returns Prepared options, ready to make a request
       */
      async #prepareRequest(options) {
        const preparedHeaders = new Headers(this.defaults.headers);
        _a.mergeHeaders(preparedHeaders, options.headers);
        const opts = (0, extend_1.default)(true, {}, this.defaults, options);
        if (!opts.url) {
          throw new Error("URL is required.");
        }
        if (opts.baseURL) {
          opts.url = new URL(opts.url, opts.baseURL);
        }
        opts.url = new URL(opts.url);
        if (opts.params) {
          if (opts.paramsSerializer) {
            let additionalQueryParams = opts.paramsSerializer(opts.params);
            if (additionalQueryParams.startsWith("?")) {
              additionalQueryParams = additionalQueryParams.slice(1);
            }
            const prefix = opts.url.toString().includes("?") ? "&" : "?";
            opts.url = opts.url + prefix + additionalQueryParams;
          } else {
            const url = opts.url instanceof URL ? opts.url : new URL(opts.url);
            for (const [key, value] of new URLSearchParams(opts.params)) {
              url.searchParams.append(key, value);
            }
            opts.url = url;
          }
        }
        if (typeof options.maxContentLength === "number") {
          opts.size = options.maxContentLength;
        }
        if (typeof options.maxRedirects === "number") {
          opts.follow = options.maxRedirects;
        }
        const shouldDirectlyPassData = typeof opts.data === "string" || opts.data instanceof ArrayBuffer || opts.data instanceof Blob || // Node 18 does not have a global `File` object
        globalThis.File && opts.data instanceof File || opts.data instanceof FormData || opts.data instanceof stream_1.Readable || opts.data instanceof ReadableStream || opts.data instanceof String || opts.data instanceof URLSearchParams || ArrayBuffer.isView(opts.data) || // `Buffer` (Node.js), `DataView`, `TypedArray`
        /**
         * @deprecated `node-fetch` or another third-party's request types
         */
        ["Blob", "File", "FormData"].includes(opts.data?.constructor?.name || "");
        if (opts.multipart?.length) {
          const boundary = await randomUUID();
          preparedHeaders.set("content-type", `multipart/related; boundary=${boundary}`);
          opts.body = stream_1.Readable.from(this.getMultipartRequest(opts.multipart, boundary));
        } else if (shouldDirectlyPassData) {
          opts.body = opts.data;
        } else if (typeof opts.data === "object") {
          if (preparedHeaders.get("Content-Type") === "application/x-www-form-urlencoded") {
            opts.body = opts.paramsSerializer ? opts.paramsSerializer(opts.data) : new URLSearchParams(opts.data);
          } else {
            if (!preparedHeaders.has("content-type")) {
              preparedHeaders.set("content-type", "application/json");
            }
            opts.body = JSON.stringify(opts.data);
          }
        } else if (opts.data) {
          opts.body = opts.data;
        }
        opts.validateStatus = opts.validateStatus || this.validateStatus;
        opts.responseType = opts.responseType || "unknown";
        if (!preparedHeaders.has("accept") && opts.responseType === "json") {
          preparedHeaders.set("accept", "application/json");
        }
        const proxy = opts.proxy || process?.env?.HTTPS_PROXY || process?.env?.https_proxy || process?.env?.HTTP_PROXY || process?.env?.http_proxy;
        if (opts.agent) {
        } else if (proxy && this.#urlMayUseProxy(opts.url, opts.noProxy)) {
          const HttpsProxyAgent = await _a.#getProxyAgent();
          if (this.agentCache.has(proxy)) {
            opts.agent = this.agentCache.get(proxy);
          } else {
            opts.agent = new HttpsProxyAgent(proxy, {
              cert: opts.cert,
              key: opts.key
            });
            this.agentCache.set(proxy, opts.agent);
          }
        } else if (opts.cert && opts.key) {
          if (this.agentCache.has(opts.key)) {
            opts.agent = this.agentCache.get(opts.key);
          } else {
            opts.agent = new https_1.Agent({
              cert: opts.cert,
              key: opts.key
            });
            this.agentCache.set(opts.key, opts.agent);
          }
        }
        if (typeof opts.errorRedactor !== "function" && opts.errorRedactor !== false) {
          opts.errorRedactor = common_js_1.defaultErrorRedactor;
        }
        if (opts.body && !("duplex" in opts)) {
          opts.duplex = "half";
        }
        this.#appendTimeoutToSignal(opts);
        return Object.assign(opts, {
          headers: preparedHeaders,
          url: opts.url instanceof URL ? opts.url : new URL(opts.url)
        });
      }
      #appendTimeoutToSignal(opts) {
        if (opts.timeout) {
          const timeoutSignal = AbortSignal.timeout(opts.timeout);
          if (opts.signal && !opts.signal.aborted) {
            opts.signal = AbortSignal.any([opts.signal, timeoutSignal]);
          } else {
            opts.signal = timeoutSignal;
          }
        }
      }
      /**
       * By default, throw for any non-2xx status code
       * @param status status code from the HTTP response
       */
      validateStatus(status) {
        return status >= 200 && status < 300;
      }
      /**
       * Attempts to parse a response by looking at the Content-Type header.
       * @param {Response} response the HTTP response.
       * @returns a promise that resolves to the response data.
       */
      async getResponseDataFromContentType(response) {
        let contentType = response.headers.get("Content-Type");
        if (contentType === null) {
          return response.text();
        }
        contentType = contentType.toLowerCase();
        if (contentType.includes("application/json")) {
          let data = await response.text();
          try {
            data = JSON.parse(data);
          } catch {
          }
          return data;
        } else if (contentType.match(/^text\//)) {
          return response.text();
        } else {
          return response.blob();
        }
      }
      /**
       * Creates an async generator that yields the pieces of a multipart/related request body.
       * This implementation follows the spec: https://www.ietf.org/rfc/rfc2387.txt. However, recursive
       * multipart/related requests are not currently supported.
       *
       * @param {GaxioMultipartOptions[]} multipartOptions the pieces to turn into a multipart/related body.
       * @param {string} boundary the boundary string to be placed between each part.
       */
      async *getMultipartRequest(multipartOptions, boundary) {
        const finale = `--${boundary}--`;
        for (const currentPart of multipartOptions) {
          const partContentType = currentPart.headers.get("Content-Type") || "application/octet-stream";
          const preamble = `--${boundary}\r
Content-Type: ${partContentType}\r
\r
`;
          yield preamble;
          if (typeof currentPart.content === "string") {
            yield currentPart.content;
          } else {
            yield* currentPart.content;
          }
          yield "\r\n";
        }
        yield finale;
      }
      /**
       * A cache for the lazily-loaded proxy agent.
       *
       * Should use {@link Gaxios[#getProxyAgent]} to retrieve.
       */
      // using `import` to dynamically import the types here
      static #proxyAgent;
      /**
       * A cache for the lazily-loaded fetch library.
       *
       * Should use {@link Gaxios[#getFetch]} to retrieve.
       */
      //
      static #fetch;
      /**
       * Imports, caches, and returns a proxy agent - if not already imported
       *
       * @returns A proxy agent
       */
      static async #getProxyAgent() {
        this.#proxyAgent ||= (await Promise.resolve().then(() => __toESM(require_dist2()))).HttpsProxyAgent;
        return this.#proxyAgent;
      }
      static async #getFetch() {
        const hasWindow = typeof window !== "undefined" && !!window;
        this.#fetch ||= hasWindow ? window.fetch : (await Promise.resolve().then(() => (init_src(), src_exports))).default;
        return this.#fetch;
      }
      /**
       * Merges headers.
       * If the base headers do not exist a new `Headers` object will be returned.
       *
       * @remarks
       *
       * Using this utility can be helpful when the headers are not known to exist:
       * - if they exist as `Headers`, that instance will be used
       *   - it improves performance and allows users to use their existing references to their `Headers`
       * - if they exist in another form (`HeadersInit`), they will be used to create a new `Headers` object
       * - if the base headers do not exist a new `Headers` object will be created
       *
       * @param base headers to append/overwrite to
       * @param append headers to append/overwrite with
       * @returns the base headers instance with merged `Headers`
       */
      static mergeHeaders(base, ...append) {
        base = base instanceof Headers ? base : new Headers(base);
        for (const headers of append) {
          const add = headers instanceof Headers ? headers : new Headers(headers);
          add.forEach((value, key) => {
            key === "set-cookie" ? base.append(key, value) : base.set(key, value);
          });
        }
        return base;
      }
    };
    exports2.Gaxios = Gaxios;
    _a = Gaxios;
  }
});

// ../backend/node_modules/gaxios/build/cjs/src/index.js
var require_src2 = __commonJS({
  "../backend/node_modules/gaxios/build/cjs/src/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.instance = exports2.Gaxios = exports2.GaxiosError = void 0;
    exports2.request = request;
    var gaxios_js_1 = require_gaxios();
    Object.defineProperty(exports2, "Gaxios", { enumerable: true, get: function() {
      return gaxios_js_1.Gaxios;
    } });
    var common_js_1 = require_common();
    Object.defineProperty(exports2, "GaxiosError", { enumerable: true, get: function() {
      return common_js_1.GaxiosError;
    } });
    __exportStar2(require_interceptor(), exports2);
    exports2.instance = new gaxios_js_1.Gaxios();
    async function request(opts) {
      return exports2.instance.request(opts);
    }
  }
});

// ../backend/node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "../backend/node_modules/bignumber.js/bignumber.js"(exports2, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone2(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: "\xA0",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e2, i2, isNum, len, str, x2 = this;
          if (!(x2 instanceof BigNumber2)) return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x2.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x2.c = x2.e = null;
              } else if (v.e < MIN_EXP) {
                x2.c = [x2.e = 0];
              } else {
                x2.e = v.e;
                x2.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x2.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e2 = 0, i2 = v; i2 >= 10; i2 /= 10, e2++) ;
                if (e2 > MAX_EXP) {
                  x2.c = x2.e = null;
                } else {
                  x2.e = e2;
                  x2.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v))) return parseNumeric(x2, str, isNum);
              x2.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e2 = str.indexOf(".")) > -1) str = str.replace(".", "");
            if ((i2 = str.search(/e/i)) > 0) {
              if (e2 < 0) e2 = i2;
              e2 += +str.slice(i2 + 1);
              str = str.substring(0, i2);
            } else if (e2 < 0) {
              e2 = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x2 = new BigNumber2(v);
              return round(x2, DECIMAL_PLACES + x2.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0) return parseNumeric(x2, str, isNum, b);
              x2.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x2.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e2 = i2 = 0;
            for (len = str.length; i2 < len; i2++) {
              if (alphabet.indexOf(c = str.charAt(i2)) < 0) {
                if (c == ".") {
                  if (i2 > e2) {
                    e2 = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i2 = -1;
                    e2 = 0;
                    continue;
                  }
                }
                return parseNumeric(x2, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x2.s);
            if ((e2 = str.indexOf(".")) > -1) str = str.replace(".", "");
            else e2 = str.length;
          }
          for (i2 = 0; str.charCodeAt(i2) === 48; i2++) ;
          for (len = str.length; str.charCodeAt(--len) === 48; ) ;
          if (str = str.slice(i2, ++len)) {
            len -= i2;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x2.s * v);
            }
            if ((e2 = e2 - i2 - 1) > MAX_EXP) {
              x2.c = x2.e = null;
            } else if (e2 < MIN_EXP) {
              x2.c = [x2.e = 0];
            } else {
              x2.e = e2;
              x2.c = [];
              i2 = (e2 + 1) % LOG_BASE;
              if (e2 < 0) i2 += LOG_BASE;
              if (i2 < len) {
                if (i2) x2.c.push(+str.slice(0, i2));
                for (len -= LOG_BASE; i2 < len; ) {
                  x2.c.push(+str.slice(i2, i2 += LOG_BASE));
                }
                i2 = LOG_BASE - (str = str.slice(i2)).length;
              } else {
                i2 -= len;
              }
              for (; i2--; str += "0") ;
              x2.c.push(+str);
            }
          } else {
            x2.c = [x2.e = 0];
          }
        }
        BigNumber2.clone = clone2;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object") FORMAT = v;
                else throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true) return false;
          if (!BigNumber2.DEBUG) return true;
          var i2, n, c = v.c, e2 = v.e, s2 = v.s;
          out: if ({}.toString.call(c) == "[object Array]") {
            if ((s2 === 1 || s2 === -1) && e2 >= -MAX && e2 <= MAX && e2 === mathfloor(e2)) {
              if (c[0] === 0) {
                if (e2 === 0 && c.length === 1) return true;
                break out;
              }
              i2 = (e2 + 1) % LOG_BASE;
              if (i2 < 1) i2 += LOG_BASE;
              if (String(c[0]).length == i2) {
                for (i2 = 0; i2 < c.length; i2++) {
                  n = c[i2];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }
                if (n !== 0) return true;
              }
            }
          } else if (c === null && e2 === null && (s2 === null || s2 === 1 || s2 === -1)) {
            return true;
          }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = (function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e2, k, v, i2 = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i2 < k; ) {
                  v = a[i2] * 131072 + (a[i2 + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i2] = b[0];
                    a[i2 + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i2 += 2;
                  }
                }
                i2 = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i2 < k; ) {
                  v = (a[i2] & 31) * 281474976710656 + a[i2 + 1] * 1099511627776 + a[i2 + 2] * 4294967296 + a[i2 + 3] * 16777216 + (a[i2 + 4] << 16) + (a[i2 + 5] << 8) + a[i2 + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i2);
                  } else {
                    c.push(v % 1e14);
                    i2 += 7;
                  }
                }
                i2 = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i2 < k; ) {
                v = random53bitInt();
                if (v < 9e15) c[i2++] = v % 1e14;
              }
            }
            k = c[--i2];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i2] = mathfloor(k / v) * v;
            }
            for (; c[i2] === 0; c.pop(), i2--) ;
            if (i2 < 0) {
              c = [e2 = 0];
            } else {
              for (e2 = -1; c[0] === 0; c.splice(0, 1), e2 -= LOG_BASE) ;
              for (i2 = 1, v = c[0]; v >= 10; v /= 10, i2++) ;
              if (i2 < LOG_BASE) e2 -= LOG_BASE - i2;
            }
            rand.e = e2;
            rand.c = c;
            return rand;
          };
        })();
        BigNumber2.sum = function() {
          var i2 = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i2 < args.length; ) sum = sum.plus(args[i2++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ (function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i2 = 0, len = str.length;
            for (; i2 < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
              arr[0] += alphabet.indexOf(str.charAt(i2++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e2, k, r2, x2, xc, y, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i2 >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x2 = y.pow(str.length - i2);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x2.c), x2.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e2 = k = xc.length;
            for (; xc[--k] == 0; xc.pop()) ;
            if (!xc[0]) return alphabet.charAt(0);
            if (i2 < 0) {
              --e2;
            } else {
              x2.c = xc;
              x2.e = e2;
              x2.s = sign;
              x2 = div(x2, y, dp, rm, baseOut);
              xc = x2.c;
              r2 = x2.r;
              e2 = x2.e;
            }
            d = e2 + dp + 1;
            i2 = xc[d];
            k = baseOut / 2;
            r2 = r2 || d < 0 || xc[d + 1] != null;
            r2 = rm < 4 ? (i2 != null || r2) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : i2 > k || i2 == k && (rm == 4 || r2 || rm == 6 && xc[d - 1] & 1 || rm == (x2.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r2 ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r2) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e2;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; ) ;
              for (i2 = 0, str = ""; i2 <= k; str += alphabet.charAt(xc[i2++])) ;
              str = toFixedPoint(str, e2, alphabet.charAt(0));
            }
            return str;
          };
        })();
        div = /* @__PURE__ */ (function() {
          function multiply(x2, k, base) {
            var m2, temp, xlo, xhi, carry = 0, i2 = x2.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x2 = x2.slice(); i2--; ) {
              xlo = x2[i2] % SQRT_BASE;
              xhi = x2[i2] / SQRT_BASE | 0;
              m2 = khi * xlo + xhi * klo;
              temp = klo * xlo + m2 % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m2 / SQRT_BASE | 0) + khi * xhi;
              x2[i2] = temp % base;
            }
            if (carry) x2 = [carry].concat(x2);
            return x2;
          }
          function compare2(a, b, aL, bL) {
            var i2, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i2 = cmp = 0; i2 < aL; i2++) {
                if (a[i2] != b[i2]) {
                  cmp = a[i2] > b[i2] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i2 = 0;
            for (; aL--; ) {
              a[aL] -= i2;
              i2 = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i2 * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
          }
          return function(x2, y, dp, rm, base) {
            var cmp, e2, i2, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s2 = x2.s == y.s ? 1 : -1, xc = x2.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x2.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s2 * 0 : s2 / 0
                )
              );
            }
            q = new BigNumber2(s2);
            qc = q.c = [];
            e2 = x2.e - y.e;
            s2 = dp + e2 + 1;
            if (!base) {
              base = BASE;
              e2 = bitFloor(x2.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s2 = s2 / LOG_BASE | 0;
            }
            for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++) ;
            if (yc[i2] > (xc[i2] || 0)) e2--;
            if (s2 < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i2 = 0;
              s2 += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0) ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base) n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL) prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i2++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s2--);
              more = rem[0] != null;
              if (!qc[0]) qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i2 = 1, s2 = qc[0]; s2 >= 10; s2 /= 10, i2++) ;
              round(q, dp + (q.e = i2 + e2 * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e2;
              q.r = +more;
            }
            return q;
          };
        })();
        function format(n, i2, rm, id) {
          var c0, e2, ne, len, str;
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i2 == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i2, rm);
            e2 = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i2 <= e2 || e2 <= TO_EXP_NEG)) {
              for (; len < i2; str += "0", len++) ;
              str = toExponential(str, e2);
            } else {
              i2 -= ne + (id === 2 && e2 > ne);
              str = toFixedPoint(str, e2, "0");
              if (e2 + 1 > len) {
                if (--i2 > 0) for (str += "."; i2--; str += "0") ;
              } else {
                i2 += e2 - len;
                if (i2 > 0) {
                  if (e2 + 1 == len) str += ".";
                  for (; i2--; str += "0") ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i2 = 1, x2 = new BigNumber2(args[0]);
          for (; i2 < args.length; i2++) {
            y = new BigNumber2(args[i2]);
            if (!y.s || (k = compare(x2, y)) === n || k === 0 && x2.s === n) {
              x2 = y;
            }
          }
          return x2;
        }
        function normalise(n, c, e2) {
          var i2 = 1, j = c.length;
          for (; !c[--j]; c.pop()) ;
          for (j = c[0]; j >= 10; j /= 10, i2++) ;
          if ((e2 = i2 + e2 * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e2 < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e2;
            n.c = c;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ (function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x2, str, isNum, b) {
            var base, s2 = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s2)) {
              x2.s = isNaN(s2) ? null : s2 < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s2 = s2.replace(basePrefix, function(m2, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m2;
                });
                if (b) {
                  base = b;
                  s2 = s2.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s2) return new BigNumber2(s2, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x2.s = null;
            }
            x2.c = x2.e = null;
          };
        })();
        function round(x2, sd, rm, r2) {
          var d, i2, j, k, n, ni, rd, xc = x2.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
              i2 = sd - d;
              if (i2 < 0) {
                i2 += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i2 + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r2) {
                    for (; xc.length <= ni; xc.push(0)) ;
                    n = rd = 0;
                    d = 1;
                    i2 %= LOG_BASE;
                    j = i2 - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++) ;
                  i2 %= LOG_BASE;
                  j = i2 - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r2 = r2 || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r2 = rm < 4 ? (rd || r2) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r2 || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i2 > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x2.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r2) {
                  sd -= x2.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x2.e = -sd || 0;
                } else {
                  xc[0] = x2.e = 0;
                }
                return x2;
              }
              if (i2 == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i2];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r2) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i2 = 1, j = xc[0]; j >= 10; j /= 10, i2++) ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++) ;
                    if (i2 != k) {
                      x2.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i2 = xc.length; xc[--i2] === 0; xc.pop()) ;
            }
            if (x2.e > MAX_EXP) {
              x2.c = x2.e = null;
            } else if (x2.e < MIN_EXP) {
              x2.c = [x2.e = 0];
            }
          }
          return x2;
        }
        function valueOf(n) {
          var str, e2 = n.e;
          if (e2 === null) return n.toString();
          str = coeffToString(n.c);
          str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(str, e2) : toFixedPoint(str, e2, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x2 = new BigNumber2(this);
          if (x2.s < 0) x2.s = 1;
          return x2;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x2 = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x2), dp + x2.e + 1, rm);
          }
          if (!(c = x2.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
          if (n < 0) n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m2) {
          var half, isModExp, i2, k, more, nIsBig, nIsNeg, nIsOdd, y, x2 = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m2 != null) m2 = new BigNumber2(m2);
          nIsBig = n.e > 14;
          if (!x2.c || !x2.c[0] || x2.c[0] == 1 && !x2.e && x2.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x2), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m2 ? y.mod(m2) : y;
          }
          nIsNeg = n.s < 0;
          if (m2) {
            if (m2.c ? !m2.c[0] : !m2.s) return new BigNumber2(NaN);
            isModExp = !nIsNeg && x2.isInteger() && m2.isInteger();
            if (isModExp) x2 = x2.mod(m2);
          } else if (n.e > 9 && (x2.e > 0 || x2.e < -1 || (x2.e == 0 ? x2.c[0] > 1 || nIsBig && x2.c[1] >= 24e7 : x2.c[0] < 8e13 || nIsBig && x2.c[0] <= 9999975e7))) {
            k = x2.s < 0 && isOdd(n) ? -0 : 0;
            if (x2.e > -1) k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i2 = Math.abs(+valueOf(n));
            nIsOdd = i2 % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x2);
              if (!y.c) break;
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m2);
              }
            }
            if (i2) {
              i2 = mathfloor(i2 / 2);
              if (i2 === 0) break;
              nIsOdd = i2 % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i2 = +valueOf(n);
                if (i2 === 0) break;
                nIsOdd = i2 % 2;
              }
            }
            x2 = x2.times(x2);
            if (k) {
              if (x2.c && x2.c.length > k) x2.c.length = k;
            } else if (isModExp) {
              x2 = x2.mod(m2);
            }
          }
          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);
          return m2 ? y.mod(m2) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i2, j, t2, xLTy, x2 = this, a = x2.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x2.plus(y);
          }
          var xe = x2.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x2.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x2 : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x2 : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t2 = xc;
            } else {
              ye = xe;
              t2 = yc;
            }
            t2.reverse();
            for (b = a; b--; t2.push(0)) ;
            t2.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t2 = xc;
            xc = yc;
            yc = t2;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i2 = xc.length);
          if (b > 0) for (; b--; xc[i2++] = 0) ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i2 = j; i2 && !xc[--i2]; xc[i2] = b) ;
              --xc[i2];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s2, x2 = this;
          y = new BigNumber2(y, b);
          if (!x2.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x2.c && !x2.c[0]) {
            return new BigNumber2(x2);
          }
          if (MODULO_MODE == 9) {
            s2 = y.s;
            y.s = 1;
            q = div(x2, y, 0, 3);
            y.s = s2;
            q.s *= s2;
          } else {
            q = div(x2, y, 0, MODULO_MODE);
          }
          y = x2.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1) y.s = x2.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e2, i2, j, k, m2, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x2 = this, xc = x2.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x2.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x2.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e2 = bitFloor(x2.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x2.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i2 = xcL;
            xcL = ycL;
            ycL = i2;
          }
          for (i2 = xcL + ycL, zc = []; i2--; zc.push(0)) ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i2 = ycL; --i2 >= 0; ) {
            c = 0;
            ylo = yc[i2] % sqrtBase;
            yhi = yc[i2] / sqrtBase | 0;
            for (k = xcL, j = i2 + k; j > i2; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m2 = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m2 % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m2 / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e2;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e2);
        };
        P.negated = function() {
          var x2 = new BigNumber2(this);
          x2.s = -x2.s || null;
          return x2;
        };
        P.plus = function(y, b) {
          var t2, x2 = this, a = x2.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x2.minus(y);
          }
          var xe = x2.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x2.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x2 : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t2 = yc;
            } else {
              a = -a;
              t2 = xc;
            }
            t2.reverse();
            for (; a--; t2.push(0)) ;
            t2.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t2 = yc;
            yc = xc;
            xc = t2;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x2 = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x2), sd, rm);
          }
          if (!(c = x2.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--) ;
            for (v = c[0]; v >= 10; v /= 10, n++) ;
          }
          if (sd && x2.e + 1 > n) n = x2.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m2, n, r2, rep, t2, x2 = this, c = x2.c, s2 = x2.s, e2 = x2.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s2 !== 1 || !c || !c[0]) {
            return new BigNumber2(!s2 || s2 < 0 && (!c || c[0]) ? NaN : c ? x2 : 1 / 0);
          }
          s2 = Math.sqrt(+valueOf(x2));
          if (s2 == 0 || s2 == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e2) % 2 == 0) n += "0";
            s2 = Math.sqrt(+n);
            e2 = bitFloor((e2 + 1) / 2) - (e2 < 0 || e2 % 2);
            if (s2 == 1 / 0) {
              n = "5e" + e2;
            } else {
              n = s2.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e2;
            }
            r2 = new BigNumber2(n);
          } else {
            r2 = new BigNumber2(s2 + "");
          }
          if (r2.c[0]) {
            e2 = r2.e;
            s2 = e2 + dp;
            if (s2 < 3) s2 = 0;
            for (; ; ) {
              t2 = r2;
              r2 = half.times(t2.plus(div(x2, t2, dp, 1)));
              if (coeffToString(t2.c).slice(0, s2) === (n = coeffToString(r2.c)).slice(0, s2)) {
                if (r2.e < e2) --s2;
                n = n.slice(s2 - 3, s2 + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t2, t2.e + DECIMAL_PLACES + 2, 0);
                    if (t2.times(t2).eq(x2)) {
                      r2 = t2;
                      break;
                    }
                  }
                  dp += 4;
                  s2 += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r2, r2.e + DECIMAL_PLACES + 2, 1);
                    m2 = !r2.times(r2).eq(x2);
                  }
                  break;
                }
              }
            }
          }
          return round(r2, r2.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m2);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x2 = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x2.toFixed(dp, rm);
          if (x2.c) {
            var i2, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x2.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i2 = g1;
              g1 = g2;
              g2 = i2;
              len -= i2;
            }
            if (g1 > 0 && len > 0) {
              i2 = len % g1 || g1;
              intPart = intDigits.substr(0, i2);
              for (; i2 < len; i2 += g1) intPart += groupSeparator + intDigits.substr(i2, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i2);
              if (isNeg) intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e2, exp, n, n0, n1, q, r2, s2, x2 = this, xc = x2.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc) return new BigNumber2(x2);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s2 = coeffToString(xc);
          e2 = d.e = s2.length - x2.e - 1;
          d.c[0] = POWS_TEN[(exp = e2 % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e2 > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s2);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x2.s;
          e2 = e2 * 2;
          r2 = div(n1, d1, e2, ROUNDING_MODE).minus(x2).abs().comparedTo(
            div(n0, d0, e2, ROUNDING_MODE).minus(x2).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r2;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s2 = n.s, e2 = n.e;
          if (e2 === null) {
            if (s2) {
              str = "Infinity";
              if (s2 < 0) str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(coeffToString(n.c), e2) : toFixedPoint(coeffToString(n.c), e2, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e2 + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e2, "0"), 10, b, s2, true);
            }
            if (s2 < 0 && n.c[0]) str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i2 = n | 0;
        return n > 0 || n === i2 ? i2 : i2 - 1;
      }
      function coeffToString(a) {
        var s2, z, i2 = 1, j = a.length, r2 = a[0] + "";
        for (; i2 < j; ) {
          s2 = a[i2++] + "";
          z = LOG_BASE - s2.length;
          for (; z--; s2 = "0" + s2) ;
          r2 += s2;
        }
        for (j = r2.length; r2.charCodeAt(--j) === 48; ) ;
        return r2.slice(0, j + 1 || 1);
      }
      function compare(x2, y) {
        var a, b, xc = x2.c, yc = y.c, i2 = x2.s, j = y.s, k = x2.e, l = y.e;
        if (!i2 || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b) return a ? b ? 0 : -j : i2;
        if (i2 != j) return i2;
        a = i2 < 0;
        b = k == l;
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i2 = 0; i2 < j; i2++) if (xc[i2] != yc[i2]) return xc[i2] > yc[i2] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e2) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e2 < 0 ? "e" : "e+") + e2;
      }
      function toFixedPoint(str, e2, z) {
        var len, zs;
        if (e2 < 0) {
          for (zs = z + "."; ++e2; zs += z) ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e2 > len) {
            for (zs = z, e2 -= len; --e2; zs += z) ;
            str += zs;
          } else if (e2 < len) {
            str = str.slice(0, e2) + "." + str.slice(e2);
          }
        }
        return str;
      }
      BigNumber = clone2();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports2);
  }
});

// ../backend/node_modules/json-bigint/lib/stringify.js
var require_stringify = __commonJS({
  "../backend/node_modules/json-bigint/lib/stringify.js"(exports2, module2) {
    var BigNumber = require_bignumber();
    var JSON2 = module2.exports;
    (function() {
      "use strict";
      function f3(n) {
        return n < 10 ? "0" + n : n;
      }
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        // table of character substitutions
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
      }, rep;
      function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
          var c = meta[a];
          return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
      }
      function str(key, holder) {
        var i2, k, v, length, mind = gap, partial, value = holder[key], isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        if (typeof rep === "function") {
          value = rep.call(holder, key, value);
        }
        switch (typeof value) {
          case "string":
            if (isBigNumber) {
              return value;
            } else {
              return quote(value);
            }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
          case "null":
          case "bigint":
            return String(value);
          // If the type is 'object', we might be dealing with an object or an array or
          // null.
          case "object":
            if (!value) {
              return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
              length = value.length;
              for (i2 = 0; i2 < length; i2 += 1) {
                partial[i2] = str(i2, value) || "null";
              }
              v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
              gap = mind;
              return v;
            }
            if (rep && typeof rep === "object") {
              length = rep.length;
              for (i2 = 0; i2 < length; i2 += 1) {
                if (typeof rep[i2] === "string") {
                  k = rep[i2];
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                  }
                }
              }
            } else {
              Object.keys(value).forEach(function(k2) {
                var v2 = str(k2, value);
                if (v2) {
                  partial.push(quote(k2) + (gap ? ": " : ":") + v2);
                }
              });
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
      }
      if (typeof JSON2.stringify !== "function") {
        JSON2.stringify = function(value, replacer, space) {
          var i2;
          gap = "";
          indent = "";
          if (typeof space === "number") {
            for (i2 = 0; i2 < space; i2 += 1) {
              indent += " ";
            }
          } else if (typeof space === "string") {
            indent = space;
          }
          rep = replacer;
          if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
            throw new Error("JSON.stringify");
          }
          return str("", { "": value });
        };
      }
    })();
  }
});

// ../backend/node_modules/json-bigint/lib/parse.js
var require_parse2 = __commonJS({
  "../backend/node_modules/json-bigint/lib/parse.js"(exports2, module2) {
    var BigNumber = null;
    var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
    var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
    var json_parse = function(options) {
      "use strict";
      var _options = {
        strict: false,
        // not being strict means do not generate syntax errors for "duplicate key"
        storeAsString: false,
        // toggles whether the values should be stored as BigNumber (default) or a string
        alwaysParseAsBig: false,
        // toggles whether all numbers should be Big
        useNativeBigInt: false,
        // toggles whether to use native BigInt instead of bignumber.js
        protoAction: "error",
        constructorAction: "error"
      };
      if (options !== void 0 && options !== null) {
        if (options.strict === true) {
          _options.strict = true;
        }
        if (options.storeAsString === true) {
          _options.storeAsString = true;
        }
        _options.alwaysParseAsBig = options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
        _options.useNativeBigInt = options.useNativeBigInt === true ? options.useNativeBigInt : false;
        if (typeof options.constructorAction !== "undefined") {
          if (options.constructorAction === "error" || options.constructorAction === "ignore" || options.constructorAction === "preserve") {
            _options.constructorAction = options.constructorAction;
          } else {
            throw new Error(
              `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
            );
          }
        }
        if (typeof options.protoAction !== "undefined") {
          if (options.protoAction === "error" || options.protoAction === "ignore" || options.protoAction === "preserve") {
            _options.protoAction = options.protoAction;
          } else {
            throw new Error(
              `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
            );
          }
        }
      }
      var at, ch, escapee = {
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	"
      }, text, error = function(m2) {
        throw {
          name: "SyntaxError",
          message: m2,
          at,
          text
        };
      }, next = function(c) {
        if (c && c !== ch) {
          error("Expected '" + c + "' instead of '" + ch + "'");
        }
        ch = text.charAt(at);
        at += 1;
        return ch;
      }, number = function() {
        var number2, string2 = "";
        if (ch === "-") {
          string2 = "-";
          next("-");
        }
        while (ch >= "0" && ch <= "9") {
          string2 += ch;
          next();
        }
        if (ch === ".") {
          string2 += ".";
          while (next() && ch >= "0" && ch <= "9") {
            string2 += ch;
          }
        }
        if (ch === "e" || ch === "E") {
          string2 += ch;
          next();
          if (ch === "-" || ch === "+") {
            string2 += ch;
            next();
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next();
          }
        }
        number2 = +string2;
        if (!isFinite(number2)) {
          error("Bad number");
        } else {
          if (BigNumber == null) BigNumber = require_bignumber();
          if (string2.length > 15)
            return _options.storeAsString ? string2 : _options.useNativeBigInt ? BigInt(string2) : new BigNumber(string2);
          else
            return !_options.alwaysParseAsBig ? number2 : _options.useNativeBigInt ? BigInt(number2) : new BigNumber(number2);
        }
      }, string = function() {
        var hex, i2, string2 = "", uffff;
        if (ch === '"') {
          var startAt = at;
          while (next()) {
            if (ch === '"') {
              if (at - 1 > startAt) string2 += text.substring(startAt, at - 1);
              next();
              return string2;
            }
            if (ch === "\\") {
              if (at - 1 > startAt) string2 += text.substring(startAt, at - 1);
              next();
              if (ch === "u") {
                uffff = 0;
                for (i2 = 0; i2 < 4; i2 += 1) {
                  hex = parseInt(next(), 16);
                  if (!isFinite(hex)) {
                    break;
                  }
                  uffff = uffff * 16 + hex;
                }
                string2 += String.fromCharCode(uffff);
              } else if (typeof escapee[ch] === "string") {
                string2 += escapee[ch];
              } else {
                break;
              }
              startAt = at;
            }
          }
        }
        error("Bad string");
      }, white = function() {
        while (ch && ch <= " ") {
          next();
        }
      }, word = function() {
        switch (ch) {
          case "t":
            next("t");
            next("r");
            next("u");
            next("e");
            return true;
          case "f":
            next("f");
            next("a");
            next("l");
            next("s");
            next("e");
            return false;
          case "n":
            next("n");
            next("u");
            next("l");
            next("l");
            return null;
        }
        error("Unexpected '" + ch + "'");
      }, value, array = function() {
        var array2 = [];
        if (ch === "[") {
          next("[");
          white();
          if (ch === "]") {
            next("]");
            return array2;
          }
          while (ch) {
            array2.push(value());
            white();
            if (ch === "]") {
              next("]");
              return array2;
            }
            next(",");
            white();
          }
        }
        error("Bad array");
      }, object = function() {
        var key, object2 = /* @__PURE__ */ Object.create(null);
        if (ch === "{") {
          next("{");
          white();
          if (ch === "}") {
            next("}");
            return object2;
          }
          while (ch) {
            key = string();
            white();
            next(":");
            if (_options.strict === true && Object.hasOwnProperty.call(object2, key)) {
              error('Duplicate key "' + key + '"');
            }
            if (suspectProtoRx.test(key) === true) {
              if (_options.protoAction === "error") {
                error("Object contains forbidden prototype property");
              } else if (_options.protoAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else if (suspectConstructorRx.test(key) === true) {
              if (_options.constructorAction === "error") {
                error("Object contains forbidden constructor property");
              } else if (_options.constructorAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else {
              object2[key] = value();
            }
            white();
            if (ch === "}") {
              next("}");
              return object2;
            }
            next(",");
            white();
          }
        }
        error("Bad object");
      };
      value = function() {
        white();
        switch (ch) {
          case "{":
            return object();
          case "[":
            return array();
          case '"':
            return string();
          case "-":
            return number();
          default:
            return ch >= "0" && ch <= "9" ? number() : word();
        }
      };
      return function(source, reviver) {
        var result;
        text = source + "";
        at = 0;
        ch = " ";
        result = value();
        white();
        if (ch) {
          error("Syntax error");
        }
        return typeof reviver === "function" ? (function walk(holder, key) {
          var k, v, value2 = holder[key];
          if (value2 && typeof value2 === "object") {
            Object.keys(value2).forEach(function(k2) {
              v = walk(value2, k2);
              if (v !== void 0) {
                value2[k2] = v;
              } else {
                delete value2[k2];
              }
            });
          }
          return reviver.call(holder, key, value2);
        })({ "": result }, "") : result;
      };
    };
    module2.exports = json_parse;
  }
});

// ../backend/node_modules/json-bigint/index.js
var require_json_bigint = __commonJS({
  "../backend/node_modules/json-bigint/index.js"(exports2, module2) {
    var json_stringify = require_stringify().stringify;
    var json_parse = require_parse2();
    module2.exports = function(options) {
      return {
        parse: json_parse(options),
        stringify: json_stringify
      };
    };
    module2.exports.parse = json_parse();
    module2.exports.stringify = json_stringify;
  }
});

// ../backend/node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js
var require_gcp_residency = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GCE_LINUX_BIOS_PATHS = void 0;
    exports2.isGoogleCloudServerless = isGoogleCloudServerless;
    exports2.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;
    exports2.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;
    exports2.isGoogleComputeEngine = isGoogleComputeEngine;
    exports2.detectGCPResidency = detectGCPResidency;
    var fs_1 = require("fs");
    var os_1 = require("os");
    exports2.GCE_LINUX_BIOS_PATHS = {
      BIOS_DATE: "/sys/class/dmi/id/bios_date",
      BIOS_VENDOR: "/sys/class/dmi/id/bios_vendor"
    };
    var GCE_MAC_ADDRESS_REGEX = /^42:01/;
    function isGoogleCloudServerless() {
      const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;
      return !!isGFEnvironment;
    }
    function isGoogleComputeEngineLinux() {
      if ((0, os_1.platform)() !== "linux")
        return false;
      try {
        (0, fs_1.statSync)(exports2.GCE_LINUX_BIOS_PATHS.BIOS_DATE);
        const biosVendor = (0, fs_1.readFileSync)(exports2.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, "utf8");
        return /Google/.test(biosVendor);
      } catch {
        return false;
      }
    }
    function isGoogleComputeEngineMACAddress() {
      const interfaces = (0, os_1.networkInterfaces)();
      for (const item of Object.values(interfaces)) {
        if (!item)
          continue;
        for (const { mac } of item) {
          if (GCE_MAC_ADDRESS_REGEX.test(mac)) {
            return true;
          }
        }
      }
      return false;
    }
    function isGoogleComputeEngine() {
      return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();
    }
    function detectGCPResidency() {
      return isGoogleCloudServerless() || isGoogleComputeEngine();
    }
  }
});

// ../backend/node_modules/google-logging-utils/build/src/colours.js
var require_colours = __commonJS({
  "../backend/node_modules/google-logging-utils/build/src/colours.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Colours = void 0;
    var Colours = class _Colours {
      /**
       * @param stream The stream (e.g. process.stderr)
       * @returns true if the stream should have colourization enabled
       */
      static isEnabled(stream) {
        return stream && // May happen in browsers.
        stream.isTTY && (typeof stream.getColorDepth === "function" ? stream.getColorDepth() > 2 : true);
      }
      static refresh() {
        _Colours.enabled = _Colours.isEnabled(process === null || process === void 0 ? void 0 : process.stderr);
        if (!this.enabled) {
          _Colours.reset = "";
          _Colours.bright = "";
          _Colours.dim = "";
          _Colours.red = "";
          _Colours.green = "";
          _Colours.yellow = "";
          _Colours.blue = "";
          _Colours.magenta = "";
          _Colours.cyan = "";
          _Colours.white = "";
          _Colours.grey = "";
        } else {
          _Colours.reset = "\x1B[0m";
          _Colours.bright = "\x1B[1m";
          _Colours.dim = "\x1B[2m";
          _Colours.red = "\x1B[31m";
          _Colours.green = "\x1B[32m";
          _Colours.yellow = "\x1B[33m";
          _Colours.blue = "\x1B[34m";
          _Colours.magenta = "\x1B[35m";
          _Colours.cyan = "\x1B[36m";
          _Colours.white = "\x1B[37m";
          _Colours.grey = "\x1B[90m";
        }
      }
    };
    exports2.Colours = Colours;
    Colours.enabled = false;
    Colours.reset = "";
    Colours.bright = "";
    Colours.dim = "";
    Colours.red = "";
    Colours.green = "";
    Colours.yellow = "";
    Colours.blue = "";
    Colours.magenta = "";
    Colours.cyan = "";
    Colours.white = "";
    Colours.grey = "";
    Colours.refresh();
  }
});

// ../backend/node_modules/google-logging-utils/build/src/logging-utils.js
var require_logging_utils = __commonJS({
  "../backend/node_modules/google-logging-utils/build/src/logging-utils.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ (function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i2 = 0; i2 < k.length; i2++) if (k[i2] !== "default") __createBinding2(result, mod, k[i2]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    })();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.env = exports2.DebugLogBackendBase = exports2.placeholder = exports2.AdhocDebugLogger = exports2.LogSeverity = void 0;
    exports2.getNodeBackend = getNodeBackend;
    exports2.getDebugBackend = getDebugBackend;
    exports2.getStructuredBackend = getStructuredBackend;
    exports2.setBackend = setBackend;
    exports2.log = log;
    var events_1 = require("events");
    var process2 = __importStar2(require("process"));
    var util = __importStar2(require("util"));
    var colours_1 = require_colours();
    var LogSeverity;
    (function(LogSeverity2) {
      LogSeverity2["DEFAULT"] = "DEFAULT";
      LogSeverity2["DEBUG"] = "DEBUG";
      LogSeverity2["INFO"] = "INFO";
      LogSeverity2["WARNING"] = "WARNING";
      LogSeverity2["ERROR"] = "ERROR";
    })(LogSeverity || (exports2.LogSeverity = LogSeverity = {}));
    var AdhocDebugLogger = class extends events_1.EventEmitter {
      /**
       * @param upstream The backend will pass a function that will be
       *   called whenever our logger function is invoked.
       */
      constructor(namespace, upstream) {
        super();
        this.namespace = namespace;
        this.upstream = upstream;
        this.func = Object.assign(this.invoke.bind(this), {
          // Also add an instance pointer back to us.
          instance: this,
          // And pull over the EventEmitter functionality.
          on: (event, listener) => this.on(event, listener)
        });
        this.func.debug = (...args) => this.invokeSeverity(LogSeverity.DEBUG, ...args);
        this.func.info = (...args) => this.invokeSeverity(LogSeverity.INFO, ...args);
        this.func.warn = (...args) => this.invokeSeverity(LogSeverity.WARNING, ...args);
        this.func.error = (...args) => this.invokeSeverity(LogSeverity.ERROR, ...args);
        this.func.sublog = (namespace2) => log(namespace2, this.func);
      }
      invoke(fields, ...args) {
        if (this.upstream) {
          try {
            this.upstream(fields, ...args);
          } catch (e2) {
          }
        }
        try {
          this.emit("log", fields, args);
        } catch (e2) {
        }
      }
      invokeSeverity(severity, ...args) {
        this.invoke({ severity }, ...args);
      }
    };
    exports2.AdhocDebugLogger = AdhocDebugLogger;
    exports2.placeholder = new AdhocDebugLogger("", () => {
    }).func;
    var DebugLogBackendBase = class {
      constructor() {
        var _a;
        this.cached = /* @__PURE__ */ new Map();
        this.filters = [];
        this.filtersSet = false;
        let nodeFlag = (_a = process2.env[exports2.env.nodeEnables]) !== null && _a !== void 0 ? _a : "*";
        if (nodeFlag === "all") {
          nodeFlag = "*";
        }
        this.filters = nodeFlag.split(",");
      }
      log(namespace, fields, ...args) {
        try {
          if (!this.filtersSet) {
            this.setFilters();
            this.filtersSet = true;
          }
          let logger = this.cached.get(namespace);
          if (!logger) {
            logger = this.makeLogger(namespace);
            this.cached.set(namespace, logger);
          }
          logger(fields, ...args);
        } catch (e2) {
          console.error(e2);
        }
      }
    };
    exports2.DebugLogBackendBase = DebugLogBackendBase;
    var NodeBackend = class extends DebugLogBackendBase {
      constructor() {
        super(...arguments);
        this.enabledRegexp = /.*/g;
      }
      isEnabled(namespace) {
        return this.enabledRegexp.test(namespace);
      }
      makeLogger(namespace) {
        if (!this.enabledRegexp.test(namespace)) {
          return () => {
          };
        }
        return (fields, ...args) => {
          var _a;
          const nscolour = `${colours_1.Colours.green}${namespace}${colours_1.Colours.reset}`;
          const pid = `${colours_1.Colours.yellow}${process2.pid}${colours_1.Colours.reset}`;
          let level;
          switch (fields.severity) {
            case LogSeverity.ERROR:
              level = `${colours_1.Colours.red}${fields.severity}${colours_1.Colours.reset}`;
              break;
            case LogSeverity.INFO:
              level = `${colours_1.Colours.magenta}${fields.severity}${colours_1.Colours.reset}`;
              break;
            case LogSeverity.WARNING:
              level = `${colours_1.Colours.yellow}${fields.severity}${colours_1.Colours.reset}`;
              break;
            default:
              level = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.DEFAULT;
              break;
          }
          const msg = util.formatWithOptions({ colors: colours_1.Colours.enabled }, ...args);
          const filteredFields = Object.assign({}, fields);
          delete filteredFields.severity;
          const fieldsJson = Object.getOwnPropertyNames(filteredFields).length ? JSON.stringify(filteredFields) : "";
          const fieldsColour = fieldsJson ? `${colours_1.Colours.grey}${fieldsJson}${colours_1.Colours.reset}` : "";
          console.error("%s [%s|%s] %s%s", pid, nscolour, level, msg, fieldsJson ? ` ${fieldsColour}` : "");
        };
      }
      // Regexp patterns below are from here:
      // https://github.com/nodejs/node/blob/c0aebed4b3395bd65d54b18d1fd00f071002ac20/lib/internal/util/debuglog.js#L36
      setFilters() {
        const totalFilters = this.filters.join(",");
        const regexp = totalFilters.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^");
        this.enabledRegexp = new RegExp(`^${regexp}$`, "i");
      }
    };
    function getNodeBackend() {
      return new NodeBackend();
    }
    var DebugBackend = class extends DebugLogBackendBase {
      constructor(pkg) {
        super();
        this.debugPkg = pkg;
      }
      makeLogger(namespace) {
        const debugLogger = this.debugPkg(namespace);
        return (fields, ...args) => {
          debugLogger(args[0], ...args.slice(1));
        };
      }
      setFilters() {
        var _a;
        const existingFilters = (_a = process2.env["NODE_DEBUG"]) !== null && _a !== void 0 ? _a : "";
        process2.env["NODE_DEBUG"] = `${existingFilters}${existingFilters ? "," : ""}${this.filters.join(",")}`;
      }
    };
    function getDebugBackend(debugPkg) {
      return new DebugBackend(debugPkg);
    }
    var StructuredBackend = class extends DebugLogBackendBase {
      constructor(upstream) {
        var _a;
        super();
        this.upstream = (_a = upstream) !== null && _a !== void 0 ? _a : void 0;
      }
      makeLogger(namespace) {
        var _a;
        const debugLogger = (_a = this.upstream) === null || _a === void 0 ? void 0 : _a.makeLogger(namespace);
        return (fields, ...args) => {
          var _a2;
          const severity = (_a2 = fields.severity) !== null && _a2 !== void 0 ? _a2 : LogSeverity.INFO;
          const json = Object.assign({
            severity,
            message: util.format(...args)
          }, fields);
          const jsonString = JSON.stringify(json);
          if (debugLogger) {
            debugLogger(fields, jsonString);
          } else {
            console.log("%s", jsonString);
          }
        };
      }
      setFilters() {
        var _a;
        (_a = this.upstream) === null || _a === void 0 ? void 0 : _a.setFilters();
      }
    };
    function getStructuredBackend(upstream) {
      return new StructuredBackend(upstream);
    }
    exports2.env = {
      /**
       * Filter wildcards specific to the Node syntax, and similar to the built-in
       * utils.debuglog() environment variable. If missing, disables logging.
       */
      nodeEnables: "GOOGLE_SDK_NODE_LOGGING"
    };
    var loggerCache = /* @__PURE__ */ new Map();
    var cachedBackend = void 0;
    function setBackend(backend) {
      cachedBackend = backend;
      loggerCache.clear();
    }
    function log(namespace, parent) {
      if (!cachedBackend) {
        const enablesFlag = process2.env[exports2.env.nodeEnables];
        if (!enablesFlag) {
          return exports2.placeholder;
        }
      }
      if (!namespace) {
        return exports2.placeholder;
      }
      if (parent) {
        namespace = `${parent.instance.namespace}:${namespace}`;
      }
      const existing = loggerCache.get(namespace);
      if (existing) {
        return existing.func;
      }
      if (cachedBackend === null) {
        return exports2.placeholder;
      } else if (cachedBackend === void 0) {
        cachedBackend = getNodeBackend();
      }
      const logger = (() => {
        let previousBackend = void 0;
        const newLogger = new AdhocDebugLogger(namespace, (fields, ...args) => {
          if (previousBackend !== cachedBackend) {
            if (cachedBackend === null) {
              return;
            } else if (cachedBackend === void 0) {
              cachedBackend = getNodeBackend();
            }
            previousBackend = cachedBackend;
          }
          cachedBackend === null || cachedBackend === void 0 ? void 0 : cachedBackend.log(namespace, fields, ...args);
        });
        return newLogger;
      })();
      loggerCache.set(namespace, logger);
      return logger.func;
    }
  }
});

// ../backend/node_modules/google-logging-utils/build/src/index.js
var require_src3 = __commonJS({
  "../backend/node_modules/google-logging-utils/build/src/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_logging_utils(), exports2);
  }
});

// ../backend/node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js
var require_src4 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ (function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i2 = 0; i2 < k.length; i2++) if (k[i2] !== "default") __createBinding2(result, mod, k[i2]);
        }
        __setModuleDefault2(result, mod);
        return result;
      };
    })();
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gcpResidencyCache = exports2.METADATA_SERVER_DETECTION = exports2.HEADERS = exports2.HEADER_VALUE = exports2.HEADER_NAME = exports2.SECONDARY_HOST_ADDRESS = exports2.HOST_ADDRESS = exports2.BASE_PATH = void 0;
    exports2.instance = instance;
    exports2.project = project;
    exports2.universe = universe;
    exports2.bulk = bulk;
    exports2.isAvailable = isAvailable;
    exports2.resetIsAvailableCache = resetIsAvailableCache;
    exports2.getGCPResidency = getGCPResidency;
    exports2.setGCPResidency = setGCPResidency;
    exports2.requestTimeout = requestTimeout;
    var gaxios_1 = require_src2();
    var jsonBigint = require_json_bigint();
    var gcp_residency_1 = require_gcp_residency();
    var logger = __importStar2(require_src3());
    exports2.BASE_PATH = "/computeMetadata/v1";
    exports2.HOST_ADDRESS = "http://169.254.169.254";
    exports2.SECONDARY_HOST_ADDRESS = "http://metadata.google.internal.";
    exports2.HEADER_NAME = "Metadata-Flavor";
    exports2.HEADER_VALUE = "Google";
    exports2.HEADERS = Object.freeze({ [exports2.HEADER_NAME]: exports2.HEADER_VALUE });
    var log = logger.log("gcp-metadata");
    exports2.METADATA_SERVER_DETECTION = Object.freeze({
      "assume-present": "don't try to ping the metadata server, but assume it's present",
      none: "don't try to ping the metadata server, but don't try to use it either",
      "bios-only": "treat the result of a BIOS probe as canonical (don't fall back to pinging)",
      "ping-only": "skip the BIOS probe, and go straight to pinging"
    });
    function getBaseUrl(baseUrl) {
      if (!baseUrl) {
        baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports2.HOST_ADDRESS;
      }
      if (!/^https?:\/\//.test(baseUrl)) {
        baseUrl = `http://${baseUrl}`;
      }
      return new URL(exports2.BASE_PATH, baseUrl).href;
    }
    function validate(options) {
      Object.keys(options).forEach((key) => {
        switch (key) {
          case "params":
          case "property":
          case "headers":
            break;
          case "qs":
            throw new Error("'qs' is not a valid configuration option. Please use 'params' instead.");
          default:
            throw new Error(`'${key}' is not a valid configuration option.`);
        }
      });
    }
    async function metadataAccessor(type, options = {}, noResponseRetries = 3, fastFail = false) {
      const headers = new Headers(exports2.HEADERS);
      let metadataKey = "";
      let params = {};
      if (typeof type === "object") {
        const metadataAccessor2 = type;
        new Headers(metadataAccessor2.headers).forEach((value, key) => headers.set(key, value));
        metadataKey = metadataAccessor2.metadataKey;
        params = metadataAccessor2.params || params;
        noResponseRetries = metadataAccessor2.noResponseRetries || noResponseRetries;
        fastFail = metadataAccessor2.fastFail || fastFail;
      } else {
        metadataKey = type;
      }
      if (typeof options === "string") {
        metadataKey += `/${options}`;
      } else {
        validate(options);
        if (options.property) {
          metadataKey += `/${options.property}`;
        }
        new Headers(options.headers).forEach((value, key) => headers.set(key, value));
        params = options.params || params;
      }
      const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;
      const req = {
        url: `${getBaseUrl()}/${metadataKey}`,
        headers,
        retryConfig: { noResponseRetries },
        params,
        responseType: "text",
        timeout: requestTimeout()
      };
      log.info("instance request %j", req);
      const res = await requestMethod(req);
      log.info("instance metadata is %s", res.data);
      const metadataFlavor = res.headers.get(exports2.HEADER_NAME);
      if (metadataFlavor !== exports2.HEADER_VALUE) {
        throw new RangeError(`Invalid response from metadata service: incorrect ${exports2.HEADER_NAME} header. Expected '${exports2.HEADER_VALUE}', got ${metadataFlavor ? `'${metadataFlavor}'` : "no header"}`);
      }
      if (typeof res.data === "string") {
        try {
          return jsonBigint.parse(res.data);
        } catch {
        }
      }
      return res.data;
    }
    async function fastFailMetadataRequest(options) {
      const secondaryOptions = {
        ...options,
        url: options.url?.toString().replace(getBaseUrl(), getBaseUrl(exports2.SECONDARY_HOST_ADDRESS))
      };
      const r1 = (0, gaxios_1.request)(options);
      const r2 = (0, gaxios_1.request)(secondaryOptions);
      return Promise.any([r1, r2]);
    }
    function instance(options) {
      return metadataAccessor("instance", options);
    }
    function project(options) {
      return metadataAccessor("project", options);
    }
    function universe(options) {
      return metadataAccessor("universe", options);
    }
    async function bulk(properties) {
      const r2 = {};
      await Promise.all(properties.map((item) => {
        return (async () => {
          const res = await metadataAccessor(item);
          const key = item.metadataKey;
          r2[key] = res;
        })();
      }));
      return r2;
    }
    function detectGCPAvailableRetries() {
      return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;
    }
    var cachedIsAvailableResponse;
    async function isAvailable() {
      if (process.env.METADATA_SERVER_DETECTION) {
        const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();
        if (!(value in exports2.METADATA_SERVER_DETECTION)) {
          throw new RangeError(`Unknown \`METADATA_SERVER_DETECTION\` env variable. Got \`${value}\`, but it should be \`${Object.keys(exports2.METADATA_SERVER_DETECTION).join("`, `")}\`, or unset`);
        }
        switch (value) {
          case "assume-present":
            return true;
          case "none":
            return false;
          case "bios-only":
            return getGCPResidency();
          case "ping-only":
        }
      }
      try {
        if (cachedIsAvailableResponse === void 0) {
          cachedIsAvailableResponse = metadataAccessor(
            "instance",
            void 0,
            detectGCPAvailableRetries(),
            // If the default HOST_ADDRESS has been overridden, we should not
            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in
            // a non-GCP environment):
            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST)
          );
        }
        await cachedIsAvailableResponse;
        return true;
      } catch (e2) {
        const err = e2;
        if (process.env.DEBUG_AUTH) {
          console.info(err);
        }
        if (err.type === "request-timeout") {
          return false;
        }
        if (err.response && err.response.status === 404) {
          return false;
        } else {
          if (!(err.response && err.response.status === 404) && // A warning is emitted if we see an unexpected err.code, or err.code
          // is not populated:
          (!err.code || ![
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "ENETUNREACH",
            "ENOENT",
            "ENOTFOUND",
            "ECONNREFUSED"
          ].includes(err.code.toString()))) {
            let code = "UNKNOWN";
            if (err.code)
              code = err.code.toString();
            process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, "MetadataLookupWarning");
          }
          return false;
        }
      }
    }
    function resetIsAvailableCache() {
      cachedIsAvailableResponse = void 0;
    }
    exports2.gcpResidencyCache = null;
    function getGCPResidency() {
      if (exports2.gcpResidencyCache === null) {
        setGCPResidency();
      }
      return exports2.gcpResidencyCache;
    }
    function setGCPResidency(value = null) {
      exports2.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();
    }
    function requestTimeout() {
      return getGCPResidency() ? 0 : 3e3;
    }
    __exportStar2(require_gcp_residency(), exports2);
  }
});

// ../backend/node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "../backend/node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    var i2;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// ../backend/node_modules/google-auth-library/build/src/crypto/shared.js
var require_shared = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/crypto/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromArrayBufferToHex = fromArrayBufferToHex;
    function fromArrayBufferToHex(arrayBuffer) {
      const byteArray = Array.from(new Uint8Array(arrayBuffer));
      return byteArray.map((byte) => {
        return byte.toString(16).padStart(2, "0");
      }).join("");
    }
  }
});

// ../backend/node_modules/google-auth-library/build/src/crypto/browser/crypto.js
var require_crypto = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BrowserCrypto = void 0;
    var base64js = require_base64_js();
    var shared_1 = require_shared();
    var BrowserCrypto = class _BrowserCrypto {
      constructor() {
        if (typeof window === "undefined" || window.crypto === void 0 || window.crypto.subtle === void 0) {
          throw new Error("SubtleCrypto not found. Make sure it's an https:// website.");
        }
      }
      async sha256DigestBase64(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return base64js.fromByteArray(new Uint8Array(outputBuffer));
      }
      randomBytesBase64(count) {
        const array = new Uint8Array(count);
        window.crypto.getRandomValues(array);
        return base64js.fromByteArray(array);
      }
      static padBase64(base64) {
        while (base64.length % 4 !== 0) {
          base64 += "=";
        }
        return base64;
      }
      async verify(pubkey, data, signature) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const signatureArray = base64js.toByteArray(_BrowserCrypto.padBase64(signature));
        const cryptoKey = await window.crypto.subtle.importKey("jwk", pubkey, algo, true, ["verify"]);
        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);
        return result;
      }
      async sign(privateKey, data) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const cryptoKey = await window.crypto.subtle.importKey("jwk", privateKey, algo, true, ["sign"]);
        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);
        return base64js.fromByteArray(new Uint8Array(result));
      }
      decodeBase64StringUtf8(base64) {
        const uint8array = base64js.toByteArray(_BrowserCrypto.padBase64(base64));
        const result = new TextDecoder().decode(uint8array);
        return result;
      }
      encodeBase64StringUtf8(text) {
        const uint8array = new TextEncoder().encode(text);
        const result = base64js.fromByteArray(uint8array);
        return result;
      }
      /**
       * Computes the SHA-256 hash of the provided string.
       * @param str The plain text string to hash.
       * @return A promise that resolves with the SHA-256 hash of the provided
       *   string in hexadecimal encoding.
       */
      async sha256DigestHex(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return (0, shared_1.fromArrayBufferToHex)(outputBuffer);
      }
      /**
       * Computes the HMAC hash of a message using the provided crypto key and the
       * SHA-256 algorithm.
       * @param key The secret crypto key in utf-8 or ArrayBuffer format.
       * @param msg The plain text message.
       * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
       *   format.
       */
      async signWithHmacSha256(key, msg) {
        const rawKey = typeof key === "string" ? key : String.fromCharCode(...new Uint16Array(key));
        const enc = new TextEncoder();
        const cryptoKey = await window.crypto.subtle.importKey("raw", enc.encode(rawKey), {
          name: "HMAC",
          hash: {
            name: "SHA-256"
          }
        }, false, ["sign"]);
        return window.crypto.subtle.sign("HMAC", cryptoKey, enc.encode(msg));
      }
    };
    exports2.BrowserCrypto = BrowserCrypto;
  }
});

// ../backend/node_modules/google-auth-library/build/src/crypto/node/crypto.js
var require_crypto2 = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/crypto/node/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeCrypto = void 0;
    var crypto2 = require("crypto");
    var NodeCrypto = class {
      async sha256DigestBase64(str) {
        return crypto2.createHash("sha256").update(str).digest("base64");
      }
      randomBytesBase64(count) {
        return crypto2.randomBytes(count).toString("base64");
      }
      async verify(pubkey, data, signature) {
        const verifier = crypto2.createVerify("RSA-SHA256");
        verifier.update(data);
        verifier.end();
        return verifier.verify(pubkey, signature, "base64");
      }
      async sign(privateKey, data) {
        const signer = crypto2.createSign("RSA-SHA256");
        signer.update(data);
        signer.end();
        return signer.sign(privateKey, "base64");
      }
      decodeBase64StringUtf8(base64) {
        return Buffer.from(base64, "base64").toString("utf-8");
      }
      encodeBase64StringUtf8(text) {
        return Buffer.from(text, "utf-8").toString("base64");
      }
      /**
       * Computes the SHA-256 hash of the provided string.
       * @param str The plain text string to hash.
       * @return A promise that resolves with the SHA-256 hash of the provided
       *   string in hexadecimal encoding.
       */
      async sha256DigestHex(str) {
        return crypto2.createHash("sha256").update(str).digest("hex");
      }
      /**
       * Computes the HMAC hash of a message using the provided crypto key and the
       * SHA-256 algorithm.
       * @param key The secret crypto key in utf-8 or ArrayBuffer format.
       * @param msg The plain text message.
       * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
       *   format.
       */
      async signWithHmacSha256(key, msg) {
        const cryptoKey = typeof key === "string" ? key : toBuffer(key);
        return toArrayBuffer(crypto2.createHmac("sha256", cryptoKey).update(msg).digest());
      }
    };
    exports2.NodeCrypto = NodeCrypto;
    function toArrayBuffer(buffer) {
      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
    }
    function toBuffer(arrayBuffer) {
      return Buffer.from(arrayBuffer);
    }
  }
});

// ../backend/node_modules/google-auth-library/build/src/crypto/crypto.js
var require_crypto3 = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/crypto/crypto.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    }));
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCrypto = createCrypto;
    exports2.hasBrowserCrypto = hasBrowserCrypto;
    var crypto_1 = require_crypto();
    var crypto_2 = require_crypto2();
    __exportStar2(require_shared(), exports2);
    function createCrypto() {
      if (hasBrowserCrypto()) {
        return new crypto_1.BrowserCrypto();
      }
      return new crypto_2.NodeCrypto();
    }
    function hasBrowserCrypto() {
      return typeof window !== "undefined" && typeof window.crypto !== "undefined" && typeof window.crypto.subtle !== "undefined";
    }
  }
});

// ../backend/node_modules/google-auth-library/build/src/util.js
var require_util2 = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LRUCache = void 0;
    exports2.snakeToCamel = snakeToCamel;
    exports2.originalOrCamelOptions = originalOrCamelOptions;
    exports2.removeUndefinedValuesInObject = removeUndefinedValuesInObject;
    exports2.isValidFile = isValidFile;
    exports2.getWellKnownCertificateConfigFileLocation = getWellKnownCertificateConfigFileLocation;
    var fs2 = require("fs");
    var os = require("os");
    var path = require("path");
    var WELL_KNOWN_CERTIFICATE_CONFIG_FILE = "certificate_config.json";
    var CLOUDSDK_CONFIG_DIRECTORY = "gcloud";
    function snakeToCamel(str) {
      return str.replace(/([_][^_])/g, (match) => match.slice(1).toUpperCase());
    }
    function originalOrCamelOptions(obj) {
      function get(key) {
        const o = obj || {};
        return o[key] ?? o[snakeToCamel(key)];
      }
      return { get };
    }
    var LRUCache = class {
      capacity;
      /**
       * Maps are in order. Thus, the older item is the first item.
       *
       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}
       */
      #cache = /* @__PURE__ */ new Map();
      maxAge;
      constructor(options) {
        this.capacity = options.capacity;
        this.maxAge = options.maxAge;
      }
      /**
       * Moves the key to the end of the cache.
       *
       * @param key the key to move
       * @param value the value of the key
       */
      #moveToEnd(key, value) {
        this.#cache.delete(key);
        this.#cache.set(key, {
          value,
          lastAccessed: Date.now()
        });
      }
      /**
       * Add an item to the cache.
       *
       * @param key the key to upsert
       * @param value the value of the key
       */
      set(key, value) {
        this.#moveToEnd(key, value);
        this.#evict();
      }
      /**
       * Get an item from the cache.
       *
       * @param key the key to retrieve
       */
      get(key) {
        const item = this.#cache.get(key);
        if (!item)
          return;
        this.#moveToEnd(key, item.value);
        this.#evict();
        return item.value;
      }
      /**
       * Maintain the cache based on capacity and TTL.
       */
      #evict() {
        const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;
        let oldestItem = this.#cache.entries().next();
        while (!oldestItem.done && (this.#cache.size > this.capacity || // too many
        oldestItem.value[1].lastAccessed < cutoffDate)) {
          this.#cache.delete(oldestItem.value[0]);
          oldestItem = this.#cache.entries().next();
        }
      }
    };
    exports2.LRUCache = LRUCache;
    function removeUndefinedValuesInObject(object) {
      Object.entries(object).forEach(([key, value]) => {
        if (value === void 0 || value === "undefined") {
          delete object[key];
        }
      });
      return object;
    }
    async function isValidFile(filePath) {
      try {
        const stats = await fs2.promises.lstat(filePath);
        return stats.isFile();
      } catch (e2) {
        return false;
      }
    }
    function getWellKnownCertificateConfigFileLocation() {
      const configDir = process.env.CLOUDSDK_CONFIG || (_isWindows() ? path.join(process.env.APPDATA || "", CLOUDSDK_CONFIG_DIRECTORY) : path.join(process.env.HOME || "", ".config", CLOUDSDK_CONFIG_DIRECTORY));
      return path.join(configDir, WELL_KNOWN_CERTIFICATE_CONFIG_FILE);
    }
    function _isWindows() {
      return os.platform().startsWith("win");
    }
  }
});

// ../backend/node_modules/google-auth-library/package.json
var require_package2 = __commonJS({
  "../backend/node_modules/google-auth-library/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-auth-library",
      version: "10.2.1",
      author: "Google Inc.",
      description: "Google APIs Authentication Client Library for Node.js",
      engines: {
        node: ">=18"
      },
      main: "./build/src/index.js",
      types: "./build/src/index.d.ts",
      repository: "googleapis/google-auth-library-nodejs.git",
      keywords: [
        "google",
        "api",
        "google apis",
        "client",
        "client library"
      ],
      dependencies: {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        gaxios: "^7.0.0",
        "gcp-metadata": "^7.0.0",
        "google-logging-utils": "^1.0.0",
        gtoken: "^8.0.0",
        jws: "^4.0.0"
      },
      devDependencies: {
        "@types/base64-js": "^1.2.5",
        "@types/jws": "^3.1.0",
        "@types/mocha": "^10.0.10",
        "@types/mv": "^2.1.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^22.0.0",
        "@types/sinon": "^17.0.0",
        "assert-rejects": "^1.0.0",
        c8: "^10.0.0",
        codecov: "^3.0.2",
        gts: "^6.0.0",
        "is-docker": "^3.0.0",
        jsdoc: "^4.0.0",
        "jsdoc-fresh": "^4.0.0",
        "jsdoc-region-tag": "^3.0.0",
        karma: "^6.0.0",
        "karma-chrome-launcher": "^3.0.0",
        "karma-coverage": "^2.0.0",
        "karma-firefox-launcher": "^2.0.0",
        "karma-mocha": "^2.0.0",
        "karma-sourcemap-loader": "^0.4.0",
        "karma-webpack": "^5.0.1",
        keypair: "^1.0.4",
        linkinator: "^6.1.2",
        mocha: "^11.1.0",
        mv: "^2.1.1",
        ncp: "^2.0.0",
        nock: "14.0.5",
        "null-loader": "^4.0.0",
        puppeteer: "^24.0.0",
        sinon: "^21.0.0",
        "ts-loader": "^8.0.0",
        typescript: "5.8.2",
        webpack: "^5.21.2",
        "webpack-cli": "^4.0.0"
      },
      files: [
        "build/src",
        "!build/src/**/*.map"
      ],
      scripts: {
        test: "c8 mocha build/test",
        clean: "gts clean",
        prepare: "npm run compile",
        lint: "gts check --no-inline-config",
        compile: "tsc -p .",
        fix: "gts fix",
        pretest: "npm run compile -- --sourceMap",
        docs: "jsdoc -c .jsdoc.js",
        "samples-setup": "cd samples/ && npm link ../ && npm run setup && cd ../",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "system-test": "mocha build/system-test --timeout 60000",
        "presystem-test": "npm run compile -- --sourceMap",
        webpack: "webpack",
        "browser-test": "karma start",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        prelint: "cd samples; npm link ../; npm install"
      },
      license: "Apache-2.0"
    };
  }
});

// ../backend/node_modules/google-auth-library/build/src/shared.cjs
var require_shared2 = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/shared.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.USER_AGENT = exports2.PRODUCT_NAME = exports2.pkg = void 0;
    var pkg = require_package2();
    exports2.pkg = pkg;
    var PRODUCT_NAME = "google-api-nodejs-client";
    exports2.PRODUCT_NAME = PRODUCT_NAME;
    var USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;
    exports2.USER_AGENT = USER_AGENT;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/authclient.js
var require_authclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/authclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthClient = exports2.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports2.DEFAULT_UNIVERSE = void 0;
    var events_1 = require("events");
    var gaxios_1 = require_src2();
    var util_1 = require_util2();
    var google_logging_utils_1 = require_src3();
    var shared_cjs_1 = require_shared2();
    exports2.DEFAULT_UNIVERSE = "googleapis.com";
    exports2.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1e3;
    var AuthClient = class _AuthClient extends events_1.EventEmitter {
      apiKey;
      projectId;
      /**
       * The quota project ID. The quota project can be used by client libraries for the billing purpose.
       * See {@link https://cloud.google.com/docs/quota Working with quotas}
       */
      quotaProjectId;
      /**
       * The {@link Gaxios `Gaxios`} instance used for making requests.
       */
      transporter;
      credentials = {};
      eagerRefreshThresholdMillis = exports2.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;
      forceRefreshOnFailure = false;
      universeDomain = exports2.DEFAULT_UNIVERSE;
      /**
       * Symbols that can be added to GaxiosOptions to specify the method name that is
       * making an RPC call, for logging purposes, as well as a string ID that can be
       * used to correlate calls and responses.
       */
      static RequestMethodNameSymbol = Symbol("request method name");
      static RequestLogIdSymbol = Symbol("request log id");
      constructor(opts = {}) {
        super();
        const options = (0, util_1.originalOrCamelOptions)(opts);
        this.apiKey = opts.apiKey;
        this.projectId = options.get("project_id") ?? null;
        this.quotaProjectId = options.get("quota_project_id");
        this.credentials = options.get("credentials") ?? {};
        this.universeDomain = options.get("universe_domain") ?? exports2.DEFAULT_UNIVERSE;
        this.transporter = opts.transporter ?? new gaxios_1.Gaxios(opts.transporterOptions);
        if (options.get("useAuthRequestParameters") !== false) {
          this.transporter.interceptors.request.add(_AuthClient.DEFAULT_REQUEST_INTERCEPTOR);
          this.transporter.interceptors.response.add(_AuthClient.DEFAULT_RESPONSE_INTERCEPTOR);
        }
        if (opts.eagerRefreshThresholdMillis) {
          this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = opts.forceRefreshOnFailure ?? false;
      }
      /**
       * A {@link fetch `fetch`} compliant API for {@link AuthClient}.
       *
       * @see {@link AuthClient.request} for the classic method.
       *
       * @remarks
       *
       * This is useful as a drop-in replacement for `fetch` API usage.
       *
       * @example
       *
       * ```ts
       * const authClient = new AuthClient();
       * const fetchWithAuthClient: typeof fetch = (...args) => authClient.fetch(...args);
       * await fetchWithAuthClient('https://example.com');
       * ```
       *
       * @param args `fetch` API or {@link Gaxios.fetch `Gaxios#fetch`} parameters
       * @returns the {@link GaxiosResponse} with Gaxios-added properties
       */
      fetch(...args) {
        const input = args[0];
        const init = args[1];
        let url = void 0;
        const headers = new Headers();
        if (typeof input === "string") {
          url = new URL(input);
        } else if (input instanceof URL) {
          url = input;
        } else if (input && input.url) {
          url = new URL(input.url);
        }
        if (input && typeof input === "object" && "headers" in input) {
          gaxios_1.Gaxios.mergeHeaders(headers, input.headers);
        }
        if (init) {
          gaxios_1.Gaxios.mergeHeaders(headers, new Headers(init.headers));
        }
        if (typeof input === "object" && !(input instanceof URL)) {
          return this.request({ ...init, ...input, headers, url });
        } else {
          return this.request({ ...init, headers, url });
        }
      }
      /**
       * Sets the auth credentials.
       */
      setCredentials(credentials) {
        this.credentials = credentials;
      }
      /**
       * Append additional headers, e.g., x-goog-user-project, shared across the
       * classes inheriting AuthClient. This method should be used by any method
       * that overrides getRequestMetadataAsync(), which is a shared helper for
       * setting request information in both gRPC and HTTP API calls.
       *
       * @param headers object to append additional headers to.
       */
      addSharedMetadataHeaders(headers) {
        if (!headers.has("x-goog-user-project") && // don't override a value the user sets.
        this.quotaProjectId) {
          headers.set("x-goog-user-project", this.quotaProjectId);
        }
        return headers;
      }
      /**
       * Adds the `x-goog-user-project` and `authorization` headers to the target Headers
       * object, if they exist on the source.
       *
       * @param target the headers to target
       * @param source the headers to source from
       * @returns the target headers
       */
      addUserProjectAndAuthHeaders(target, source) {
        const xGoogUserProject = source.get("x-goog-user-project");
        const authorizationHeader = source.get("authorization");
        if (xGoogUserProject) {
          target.set("x-goog-user-project", xGoogUserProject);
        }
        if (authorizationHeader) {
          target.set("authorization", authorizationHeader);
        }
        return target;
      }
      static log = (0, google_logging_utils_1.log)("auth");
      static DEFAULT_REQUEST_INTERCEPTOR = {
        resolved: async (config) => {
          if (!config.headers.has("x-goog-api-client")) {
            const nodeVersion = process.version.replace(/^v/, "");
            config.headers.set("x-goog-api-client", `gl-node/${nodeVersion}`);
          }
          const userAgent = config.headers.get("User-Agent");
          if (!userAgent) {
            config.headers.set("User-Agent", shared_cjs_1.USER_AGENT);
          } else if (!userAgent.includes(`${shared_cjs_1.PRODUCT_NAME}/`)) {
            config.headers.set("User-Agent", `${userAgent} ${shared_cjs_1.USER_AGENT}`);
          }
          try {
            const symbols = config;
            const methodName = symbols[_AuthClient.RequestMethodNameSymbol];
            const logId = `${Math.floor(Math.random() * 1e3)}`;
            symbols[_AuthClient.RequestLogIdSymbol] = logId;
            const logObject = {
              url: config.url,
              headers: config.headers
            };
            if (methodName) {
              _AuthClient.log.info("%s [%s] request %j", methodName, logId, logObject);
            } else {
              _AuthClient.log.info("[%s] request %j", logId, logObject);
            }
          } catch (e2) {
          }
          return config;
        }
      };
      static DEFAULT_RESPONSE_INTERCEPTOR = {
        resolved: async (response) => {
          try {
            const symbols = response.config;
            const methodName = symbols[_AuthClient.RequestMethodNameSymbol];
            const logId = symbols[_AuthClient.RequestLogIdSymbol];
            if (methodName) {
              _AuthClient.log.info("%s [%s] response %j", methodName, logId, response.data);
            } else {
              _AuthClient.log.info("[%s] response %j", logId, response.data);
            }
          } catch (e2) {
          }
          return response;
        },
        rejected: async (error) => {
          try {
            const symbols = error.config;
            const methodName = symbols[_AuthClient.RequestMethodNameSymbol];
            const logId = symbols[_AuthClient.RequestLogIdSymbol];
            if (methodName) {
              _AuthClient.log.info("%s [%s] error %j", methodName, logId, error.response?.data);
            } else {
              _AuthClient.log.error("[%s] error %j", logId, error.response?.data);
            }
          } catch (e2) {
          }
          throw error;
        }
      };
      /**
       * Sets the method name that is making a Gaxios request, so that logging may tag
       * log lines with the operation.
       * @param config A Gaxios request config
       * @param methodName The method name making the call
       */
      static setMethodName(config, methodName) {
        try {
          const symbols = config;
          symbols[_AuthClient.RequestMethodNameSymbol] = methodName;
        } catch (e2) {
        }
      }
      /**
       * Retry config for Auth-related requests.
       *
       * @remarks
       *
       * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}
       * config as some downstream APIs would prefer if customers explicitly enable retries,
       * such as GCS.
       */
      static get RETRY_CONFIG() {
        return {
          retry: true,
          retryConfig: {
            httpMethodsToRetry: ["GET", "PUT", "POST", "HEAD", "OPTIONS", "DELETE"]
          }
        };
      }
    };
    exports2.AuthClient = AuthClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/loginticket.js
var require_loginticket = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/loginticket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoginTicket = void 0;
    var LoginTicket = class {
      envelope;
      payload;
      /**
       * Create a simple class to extract user ID from an ID Token
       *
       * @param {string} env Envelope of the jwt
       * @param {TokenPayload} pay Payload of the jwt
       * @constructor
       */
      constructor(env, pay) {
        this.envelope = env;
        this.payload = pay;
      }
      getEnvelope() {
        return this.envelope;
      }
      getPayload() {
        return this.payload;
      }
      /**
       * Create a simple class to extract user ID from an ID Token
       *
       * @return The user ID
       */
      getUserId() {
        const payload = this.getPayload();
        if (payload && payload.sub) {
          return payload.sub;
        }
        return null;
      }
      /**
       * Returns attributes from the login ticket.  This can contain
       * various information about the user session.
       *
       * @return The envelope and payload
       */
      getAttributes() {
        return { envelope: this.getEnvelope(), payload: this.getPayload() };
      }
    };
    exports2.LoginTicket = LoginTicket;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/oauth2client.js
var require_oauth2client = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/oauth2client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OAuth2Client = exports2.ClientAuthentication = exports2.CertificateFormat = exports2.CodeChallengeMethod = void 0;
    var gaxios_1 = require_src2();
    var querystring = require("querystring");
    var stream = require("stream");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util_1 = require_util2();
    var crypto_1 = require_crypto3();
    var authclient_1 = require_authclient();
    var loginticket_1 = require_loginticket();
    var CodeChallengeMethod;
    (function(CodeChallengeMethod2) {
      CodeChallengeMethod2["Plain"] = "plain";
      CodeChallengeMethod2["S256"] = "S256";
    })(CodeChallengeMethod || (exports2.CodeChallengeMethod = CodeChallengeMethod = {}));
    var CertificateFormat;
    (function(CertificateFormat2) {
      CertificateFormat2["PEM"] = "PEM";
      CertificateFormat2["JWK"] = "JWK";
    })(CertificateFormat || (exports2.CertificateFormat = CertificateFormat = {}));
    var ClientAuthentication;
    (function(ClientAuthentication2) {
      ClientAuthentication2["ClientSecretPost"] = "ClientSecretPost";
      ClientAuthentication2["ClientSecretBasic"] = "ClientSecretBasic";
      ClientAuthentication2["None"] = "None";
    })(ClientAuthentication || (exports2.ClientAuthentication = ClientAuthentication = {}));
    var OAuth2Client2 = class _OAuth2Client extends authclient_1.AuthClient {
      redirectUri;
      certificateCache = {};
      certificateExpiry = null;
      certificateCacheFormat = CertificateFormat.PEM;
      refreshTokenPromises = /* @__PURE__ */ new Map();
      endpoints;
      issuers;
      clientAuthentication;
      // TODO: refactor tests to make this private
      _clientId;
      // TODO: refactor tests to make this private
      _clientSecret;
      refreshHandler;
      /**
       * An OAuth2 Client for Google APIs.
       *
       * @param options The OAuth2 Client Options. Passing an `clientId` directly is **@DEPRECATED**.
       * @param clientSecret **@DEPRECATED**. Provide a {@link OAuth2ClientOptions `OAuth2ClientOptions`} object in the first parameter instead.
       * @param redirectUri **@DEPRECATED**. Provide a {@link OAuth2ClientOptions `OAuth2ClientOptions`} object in the first parameter instead.
       */
      constructor(options = {}, clientSecret, redirectUri) {
        super(typeof options === "object" ? options : {});
        if (typeof options !== "object") {
          options = {
            clientId: options,
            clientSecret,
            redirectUri
          };
        }
        this._clientId = options.clientId || options.client_id;
        this._clientSecret = options.clientSecret || options.client_secret;
        this.redirectUri = options.redirectUri || options.redirect_uris?.[0];
        this.endpoints = {
          tokenInfoUrl: "https://oauth2.googleapis.com/tokeninfo",
          oauth2AuthBaseUrl: "https://accounts.google.com/o/oauth2/v2/auth",
          oauth2TokenUrl: "https://oauth2.googleapis.com/token",
          oauth2RevokeUrl: "https://oauth2.googleapis.com/revoke",
          oauth2FederatedSignonPemCertsUrl: "https://www.googleapis.com/oauth2/v1/certs",
          oauth2FederatedSignonJwkCertsUrl: "https://www.googleapis.com/oauth2/v3/certs",
          oauth2IapPublicKeyUrl: "https://www.gstatic.com/iap/verify/public_key",
          ...options.endpoints
        };
        this.clientAuthentication = options.clientAuthentication || ClientAuthentication.ClientSecretPost;
        this.issuers = options.issuers || [
          "accounts.google.com",
          "https://accounts.google.com",
          this.universeDomain
        ];
      }
      /**
       * @deprecated use instance's {@link OAuth2Client.endpoints}
       */
      static GOOGLE_TOKEN_INFO_URL = "https://oauth2.googleapis.com/tokeninfo";
      /**
       * Clock skew - five minutes in seconds
       */
      static CLOCK_SKEW_SECS_ = 300;
      /**
       * The default max Token Lifetime is one day in seconds
       */
      static DEFAULT_MAX_TOKEN_LIFETIME_SECS_ = 86400;
      /**
       * Generates URL for consent page landing.
       * @param opts Options.
       * @return URL to consent page.
       */
      generateAuthUrl(opts = {}) {
        if (opts.code_challenge_method && !opts.code_challenge) {
          throw new Error("If a code_challenge_method is provided, code_challenge must be included.");
        }
        opts.response_type = opts.response_type || "code";
        opts.client_id = opts.client_id || this._clientId;
        opts.redirect_uri = opts.redirect_uri || this.redirectUri;
        if (Array.isArray(opts.scope)) {
          opts.scope = opts.scope.join(" ");
        }
        const rootUrl = this.endpoints.oauth2AuthBaseUrl.toString();
        return rootUrl + "?" + querystring.stringify(opts);
      }
      generateCodeVerifier() {
        throw new Error("generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.");
      }
      /**
       * Convenience method to automatically generate a code_verifier, and its
       * resulting SHA256. If used, this must be paired with a S256
       * code_challenge_method.
       *
       * For a full example see:
       * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js
       */
      async generateCodeVerifierAsync() {
        const crypto2 = (0, crypto_1.createCrypto)();
        const randomString = crypto2.randomBytesBase64(96);
        const codeVerifier = randomString.replace(/\+/g, "~").replace(/=/g, "_").replace(/\//g, "-");
        const unencodedCodeChallenge = await crypto2.sha256DigestBase64(codeVerifier);
        const codeChallenge = unencodedCodeChallenge.split("=")[0].replace(/\+/g, "-").replace(/\//g, "_");
        return { codeVerifier, codeChallenge };
      }
      getToken(codeOrOptions, callback) {
        const options = typeof codeOrOptions === "string" ? { code: codeOrOptions } : codeOrOptions;
        if (callback) {
          this.getTokenAsync(options).then((r2) => callback(null, r2.tokens, r2.res), (e2) => callback(e2, null, e2.response));
        } else {
          return this.getTokenAsync(options);
        }
      }
      async getTokenAsync(options) {
        const url = this.endpoints.oauth2TokenUrl.toString();
        const headers = new Headers();
        const values = {
          client_id: options.client_id || this._clientId,
          code_verifier: options.codeVerifier,
          code: options.code,
          grant_type: "authorization_code",
          redirect_uri: options.redirect_uri || this.redirectUri
        };
        if (this.clientAuthentication === ClientAuthentication.ClientSecretBasic) {
          const basic = Buffer.from(`${this._clientId}:${this._clientSecret}`);
          headers.set("authorization", `Basic ${basic.toString("base64")}`);
        }
        if (this.clientAuthentication === ClientAuthentication.ClientSecretPost) {
          values.client_secret = this._clientSecret;
        }
        const opts = {
          ..._OAuth2Client.RETRY_CONFIG,
          method: "POST",
          url,
          data: new URLSearchParams((0, util_1.removeUndefinedValuesInObject)(values)),
          headers
        };
        authclient_1.AuthClient.setMethodName(opts, "getTokenAsync");
        const res = await this.transporter.request(opts);
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      /**
       * Refreshes the access token.
       * @param refresh_token Existing refresh token.
       * @private
       */
      async refreshToken(refreshToken) {
        if (!refreshToken) {
          return this.refreshTokenNoCache(refreshToken);
        }
        if (this.refreshTokenPromises.has(refreshToken)) {
          return this.refreshTokenPromises.get(refreshToken);
        }
        const p = this.refreshTokenNoCache(refreshToken).then((r2) => {
          this.refreshTokenPromises.delete(refreshToken);
          return r2;
        }, (e2) => {
          this.refreshTokenPromises.delete(refreshToken);
          throw e2;
        });
        this.refreshTokenPromises.set(refreshToken, p);
        return p;
      }
      async refreshTokenNoCache(refreshToken) {
        if (!refreshToken) {
          throw new Error("No refresh token is set.");
        }
        const url = this.endpoints.oauth2TokenUrl.toString();
        const data = {
          refresh_token: refreshToken,
          client_id: this._clientId,
          client_secret: this._clientSecret,
          grant_type: "refresh_token"
        };
        let res;
        try {
          const opts = {
            ..._OAuth2Client.RETRY_CONFIG,
            method: "POST",
            url,
            data: new URLSearchParams((0, util_1.removeUndefinedValuesInObject)(data))
          };
          authclient_1.AuthClient.setMethodName(opts, "refreshTokenNoCache");
          res = await this.transporter.request(opts);
        } catch (e2) {
          if (e2 instanceof gaxios_1.GaxiosError && e2.message === "invalid_grant" && e2.response?.data && /ReAuth/i.test(e2.response.data.error_description)) {
            e2.message = JSON.stringify(e2.response.data);
          }
          throw e2;
        }
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      refreshAccessToken(callback) {
        if (callback) {
          this.refreshAccessTokenAsync().then((r2) => callback(null, r2.credentials, r2.res), callback);
        } else {
          return this.refreshAccessTokenAsync();
        }
      }
      async refreshAccessTokenAsync() {
        const r2 = await this.refreshToken(this.credentials.refresh_token);
        const tokens = r2.tokens;
        tokens.refresh_token = this.credentials.refresh_token;
        this.credentials = tokens;
        return { credentials: this.credentials, res: r2.res };
      }
      getAccessToken(callback) {
        if (callback) {
          this.getAccessTokenAsync().then((r2) => callback(null, r2.token, r2.res), callback);
        } else {
          return this.getAccessTokenAsync();
        }
      }
      async getAccessTokenAsync() {
        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();
        if (shouldRefresh) {
          if (!this.credentials.refresh_token) {
            if (this.refreshHandler) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken?.access_token) {
                this.setCredentials(refreshedAccessToken);
                return { token: this.credentials.access_token };
              }
            } else {
              throw new Error("No refresh token or refresh handler callback is set.");
            }
          }
          const r2 = await this.refreshAccessTokenAsync();
          if (!r2.credentials || r2.credentials && !r2.credentials.access_token) {
            throw new Error("Could not refresh access token.");
          }
          return { token: r2.credentials.access_token, res: r2.res };
        } else {
          return { token: this.credentials.access_token };
        }
      }
      /**
       * The main authentication interface.  It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * In OAuth2Client, the result has the form:
       * { authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders(url) {
        const headers = (await this.getRequestMetadataAsync(url)).headers;
        return headers;
      }
      async getRequestMetadataAsync(url) {
        url;
        const thisCreds = this.credentials;
        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {
          throw new Error("No access, refresh token, API key or refresh handler callback is set.");
        }
        if (thisCreds.access_token && !this.isTokenExpiring()) {
          thisCreds.token_type = thisCreds.token_type || "Bearer";
          const headers2 = new Headers({
            authorization: thisCreds.token_type + " " + thisCreds.access_token
          });
          return { headers: this.addSharedMetadataHeaders(headers2) };
        }
        if (this.refreshHandler) {
          const refreshedAccessToken = await this.processAndValidateRefreshHandler();
          if (refreshedAccessToken?.access_token) {
            this.setCredentials(refreshedAccessToken);
            const headers2 = new Headers({
              authorization: "Bearer " + this.credentials.access_token
            });
            return { headers: this.addSharedMetadataHeaders(headers2) };
          }
        }
        if (this.apiKey) {
          return { headers: new Headers({ "X-Goog-Api-Key": this.apiKey }) };
        }
        let r2 = null;
        let tokens = null;
        try {
          r2 = await this.refreshToken(thisCreds.refresh_token);
          tokens = r2.tokens;
        } catch (err) {
          const e2 = err;
          if (e2.response && (e2.response.status === 403 || e2.response.status === 404)) {
            e2.message = `Could not refresh access token: ${e2.message}`;
          }
          throw e2;
        }
        const credentials = this.credentials;
        credentials.token_type = credentials.token_type || "Bearer";
        tokens.refresh_token = credentials.refresh_token;
        this.credentials = tokens;
        const headers = new Headers({
          authorization: credentials.token_type + " " + tokens.access_token
        });
        return { headers: this.addSharedMetadataHeaders(headers), res: r2.res };
      }
      /**
       * Generates an URL to revoke the given token.
       * @param token The existing token to be revoked.
       *
       * @deprecated use instance method {@link OAuth2Client.getRevokeTokenURL}
       */
      static getRevokeTokenUrl(token) {
        return new _OAuth2Client().getRevokeTokenURL(token).toString();
      }
      /**
       * Generates a URL to revoke the given token.
       *
       * @param token The existing token to be revoked.
       */
      getRevokeTokenURL(token) {
        const url = new URL(this.endpoints.oauth2RevokeUrl);
        url.searchParams.append("token", token);
        return url;
      }
      revokeToken(token, callback) {
        const opts = {
          ..._OAuth2Client.RETRY_CONFIG,
          url: this.getRevokeTokenURL(token).toString(),
          method: "POST"
        };
        authclient_1.AuthClient.setMethodName(opts, "revokeToken");
        if (callback) {
          this.transporter.request(opts).then((r2) => callback(null, r2), callback);
        } else {
          return this.transporter.request(opts);
        }
      }
      revokeCredentials(callback) {
        if (callback) {
          this.revokeCredentialsAsync().then((res) => callback(null, res), callback);
        } else {
          return this.revokeCredentialsAsync();
        }
      }
      async revokeCredentialsAsync() {
        const token = this.credentials.access_token;
        this.credentials = {};
        if (token) {
          return this.revokeToken(token);
        } else {
          throw new Error("No access token to revoke.");
        }
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r2) => callback(null, r2), (e2) => {
            return callback(e2, e2.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      async requestAsync(opts, reAuthRetried = false) {
        try {
          const r2 = await this.getRequestMetadataAsync();
          opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);
          this.addUserProjectAndAuthHeaders(opts.headers, r2.headers);
          if (this.apiKey) {
            opts.headers.set("X-Goog-Api-Key", this.apiKey);
          }
          return await this.transporter.request(opts);
        } catch (e2) {
          const res = e2.response;
          if (res) {
            const statusCode = res.status;
            const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);
            const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!reAuthRetried && isAuthErr && !isReadableStream && mayRequireRefresh) {
              await this.refreshAccessTokenAsync();
              return this.requestAsync(opts, true);
            } else if (!reAuthRetried && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken?.access_token) {
                this.setCredentials(refreshedAccessToken);
              }
              return this.requestAsync(opts, true);
            }
          }
          throw e2;
        }
      }
      verifyIdToken(options, callback) {
        if (callback && typeof callback !== "function") {
          throw new Error("This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.");
        }
        if (callback) {
          this.verifyIdTokenAsync(options).then((r2) => callback(null, r2), callback);
        } else {
          return this.verifyIdTokenAsync(options);
        }
      }
      async verifyIdTokenAsync(options) {
        if (!options.idToken) {
          throw new Error("The verifyIdToken method requires an ID Token");
        }
        const response = await this.getFederatedSignonCertsAsync();
        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, this.issuers, options.maxExpiry);
        return login;
      }
      /**
       * Obtains information about the provisioned access token.  Especially useful
       * if you want to check the scopes that were provisioned to a given token.
       *
       * @param accessToken Required.  The Access Token for which you want to get
       * user info.
       */
      async getTokenInfo(accessToken) {
        const { data } = await this.transporter.request({
          ..._OAuth2Client.RETRY_CONFIG,
          method: "POST",
          headers: {
            "content-type": "application/x-www-form-urlencoded;charset=UTF-8",
            authorization: `Bearer ${accessToken}`
          },
          url: this.endpoints.tokenInfoUrl.toString()
        });
        const info = Object.assign({
          expiry_date: (/* @__PURE__ */ new Date()).getTime() + data.expires_in * 1e3,
          scopes: data.scope.split(" ")
        }, data);
        delete info.expires_in;
        delete info.scope;
        return info;
      }
      getFederatedSignonCerts(callback) {
        if (callback) {
          this.getFederatedSignonCertsAsync().then((r2) => callback(null, r2.certs, r2.res), callback);
        } else {
          return this.getFederatedSignonCertsAsync();
        }
      }
      async getFederatedSignonCertsAsync() {
        const nowTime = (/* @__PURE__ */ new Date()).getTime();
        const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;
        if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {
          return { certs: this.certificateCache, format };
        }
        let res;
        let url;
        switch (format) {
          case CertificateFormat.PEM:
            url = this.endpoints.oauth2FederatedSignonPemCertsUrl.toString();
            break;
          case CertificateFormat.JWK:
            url = this.endpoints.oauth2FederatedSignonJwkCertsUrl.toString();
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        try {
          const opts = {
            ..._OAuth2Client.RETRY_CONFIG,
            url
          };
          authclient_1.AuthClient.setMethodName(opts, "getFederatedSignonCertsAsync");
          res = await this.transporter.request(opts);
        } catch (e2) {
          if (e2 instanceof Error) {
            e2.message = `Failed to retrieve verification certificates: ${e2.message}`;
          }
          throw e2;
        }
        const cacheControl = res?.headers.get("cache-control");
        let cacheAge = -1;
        if (cacheControl) {
          const maxAge = /max-age=(?<maxAge>[0-9]+)/.exec(cacheControl)?.groups?.maxAge;
          if (maxAge) {
            cacheAge = Number(maxAge) * 1e3;
          }
        }
        let certificates = {};
        switch (format) {
          case CertificateFormat.PEM:
            certificates = res.data;
            break;
          case CertificateFormat.JWK:
            for (const key of res.data.keys) {
              certificates[key.kid] = key;
            }
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        const now = /* @__PURE__ */ new Date();
        this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);
        this.certificateCache = certificates;
        this.certificateCacheFormat = format;
        return { certs: certificates, format, res };
      }
      getIapPublicKeys(callback) {
        if (callback) {
          this.getIapPublicKeysAsync().then((r2) => callback(null, r2.pubkeys, r2.res), callback);
        } else {
          return this.getIapPublicKeysAsync();
        }
      }
      async getIapPublicKeysAsync() {
        let res;
        const url = this.endpoints.oauth2IapPublicKeyUrl.toString();
        try {
          const opts = {
            ..._OAuth2Client.RETRY_CONFIG,
            url
          };
          authclient_1.AuthClient.setMethodName(opts, "getIapPublicKeysAsync");
          res = await this.transporter.request(opts);
        } catch (e2) {
          if (e2 instanceof Error) {
            e2.message = `Failed to retrieve verification certificates: ${e2.message}`;
          }
          throw e2;
        }
        return { pubkeys: res.data, res };
      }
      verifySignedJwtWithCerts() {
        throw new Error("verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.");
      }
      /**
       * Verify the id token is signed with the correct certificate
       * and is from the correct audience.
       * @param jwt The jwt to verify (The ID Token in this case).
       * @param certs The array of certs to test the jwt against.
       * @param requiredAudience The audience to test the jwt against.
       * @param issuers The allowed issuers of the jwt (Optional).
       * @param maxExpiry The max expiry the certificate can be (Optional).
       * @return Returns a promise resolving to LoginTicket on verification.
       */
      async verifySignedJwtWithCertsAsync(jwt2, certs, requiredAudience, issuers, maxExpiry) {
        const crypto2 = (0, crypto_1.createCrypto)();
        if (!maxExpiry) {
          maxExpiry = _OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_;
        }
        const segments = jwt2.split(".");
        if (segments.length !== 3) {
          throw new Error("Wrong number of segments in token: " + jwt2);
        }
        const signed = segments[0] + "." + segments[1];
        let signature = segments[2];
        let envelope;
        let payload;
        try {
          envelope = JSON.parse(crypto2.decodeBase64StringUtf8(segments[0]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;
          }
          throw err;
        }
        if (!envelope) {
          throw new Error("Can't parse token envelope: " + segments[0]);
        }
        try {
          payload = JSON.parse(crypto2.decodeBase64StringUtf8(segments[1]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token payload '${segments[0]}`;
          }
          throw err;
        }
        if (!payload) {
          throw new Error("Can't parse token payload: " + segments[1]);
        }
        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {
          throw new Error("No pem found for envelope: " + JSON.stringify(envelope));
        }
        const cert = certs[envelope.kid];
        if (envelope.alg === "ES256") {
          signature = formatEcdsa.joseToDer(signature, "ES256").toString("base64");
        }
        const verified = await crypto2.verify(cert, signed, signature);
        if (!verified) {
          throw new Error("Invalid token signature: " + jwt2);
        }
        if (!payload.iat) {
          throw new Error("No issue time in token: " + JSON.stringify(payload));
        }
        if (!payload.exp) {
          throw new Error("No expiration time in token: " + JSON.stringify(payload));
        }
        const iat = Number(payload.iat);
        if (isNaN(iat))
          throw new Error("iat field using invalid format");
        const exp = Number(payload.exp);
        if (isNaN(exp))
          throw new Error("exp field using invalid format");
        const now = (/* @__PURE__ */ new Date()).getTime() / 1e3;
        if (exp >= now + maxExpiry) {
          throw new Error("Expiration time too far in future: " + JSON.stringify(payload));
        }
        const earliest = iat - _OAuth2Client.CLOCK_SKEW_SECS_;
        const latest = exp + _OAuth2Client.CLOCK_SKEW_SECS_;
        if (now < earliest) {
          throw new Error("Token used too early, " + now + " < " + earliest + ": " + JSON.stringify(payload));
        }
        if (now > latest) {
          throw new Error("Token used too late, " + now + " > " + latest + ": " + JSON.stringify(payload));
        }
        if (issuers && issuers.indexOf(payload.iss) < 0) {
          throw new Error("Invalid issuer, expected one of [" + issuers + "], but got " + payload.iss);
        }
        if (typeof requiredAudience !== "undefined" && requiredAudience !== null) {
          const aud = payload.aud;
          let audVerified = false;
          if (requiredAudience.constructor === Array) {
            audVerified = requiredAudience.indexOf(aud) > -1;
          } else {
            audVerified = aud === requiredAudience;
          }
          if (!audVerified) {
            throw new Error("Wrong recipient, payload audience != requiredAudience");
          }
        }
        return new loginticket_1.LoginTicket(envelope, payload);
      }
      /**
       * Returns a promise that resolves with AccessTokenResponse type if
       * refreshHandler is defined.
       * If not, nothing is returned.
       */
      async processAndValidateRefreshHandler() {
        if (this.refreshHandler) {
          const accessTokenResponse = await this.refreshHandler();
          if (!accessTokenResponse.access_token) {
            throw new Error("No access token is returned by the refreshHandler callback.");
          }
          return accessTokenResponse;
        }
        return;
      }
      /**
       * Returns true if a token is expired or will expire within
       * eagerRefreshThresholdMillismilliseconds.
       * If there is no expiry time, assumes the token is not expired or expiring.
       */
      isTokenExpiring() {
        const expiryDate = this.credentials.expiry_date;
        return expiryDate ? expiryDate <= (/* @__PURE__ */ new Date()).getTime() + this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.OAuth2Client = OAuth2Client2;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/computeclient.js
var require_computeclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/computeclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Compute = void 0;
    var gaxios_1 = require_src2();
    var gcpMetadata = require_src4();
    var oauth2client_1 = require_oauth2client();
    var Compute = class extends oauth2client_1.OAuth2Client {
      serviceAccountEmail;
      scopes;
      /**
       * Google Compute Engine service account credentials.
       *
       * Retrieve access token from the metadata server.
       * See: https://cloud.google.com/compute/docs/access/authenticate-workloads#applications
       */
      constructor(options = {}) {
        super(options);
        this.credentials = { expiry_date: 1, refresh_token: "compute-placeholder" };
        this.serviceAccountEmail = options.serviceAccountEmail || "default";
        this.scopes = Array.isArray(options.scopes) ? options.scopes : options.scopes ? [options.scopes] : [];
      }
      /**
       * Refreshes the access token.
       * @param refreshToken Unused parameter
       */
      async refreshTokenNoCache() {
        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;
        let data;
        try {
          const instanceOptions = {
            property: tokenPath
          };
          if (this.scopes.length > 0) {
            instanceOptions.params = {
              scopes: this.scopes.join(",")
            };
          }
          data = await gcpMetadata.instance(instanceOptions);
        } catch (e2) {
          if (e2 instanceof gaxios_1.GaxiosError) {
            e2.message = `Could not refresh access token: ${e2.message}`;
            this.wrapError(e2);
          }
          throw e2;
        }
        const tokens = data;
        if (data && data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res: null };
      }
      /**
       * Fetches an ID token.
       * @param targetAudience the audience for the fetched ID token.
       */
      async fetchIdToken(targetAudience) {
        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity?format=full&audience=${targetAudience}`;
        let idToken;
        try {
          const instanceOptions = {
            property: idTokenPath
          };
          idToken = await gcpMetadata.instance(instanceOptions);
        } catch (e2) {
          if (e2 instanceof Error) {
            e2.message = `Could not fetch ID token: ${e2.message}`;
          }
          throw e2;
        }
        return idToken;
      }
      wrapError(e2) {
        const res = e2.response;
        if (res && res.status) {
          e2.status = res.status;
          if (res.status === 403) {
            e2.message = "A Forbidden error was returned while attempting to retrieve an access token for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have the correct permission scopes specified: " + e2.message;
          } else if (res.status === 404) {
            e2.message = "A Not Found error was returned while attempting to retrieve an accesstoken for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have any permission scopes specified: " + e2.message;
          }
        }
      }
    };
    exports2.Compute = Compute;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/idtokenclient.js
var require_idtokenclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/idtokenclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdTokenClient = void 0;
    var oauth2client_1 = require_oauth2client();
    var IdTokenClient = class extends oauth2client_1.OAuth2Client {
      targetAudience;
      idTokenProvider;
      /**
       * Google ID Token client
       *
       * Retrieve ID token from the metadata server.
       * See: https://cloud.google.com/docs/authentication/get-id-token#metadata-server
       */
      constructor(options) {
        super(options);
        this.targetAudience = options.targetAudience;
        this.idTokenProvider = options.idTokenProvider;
      }
      async getRequestMetadataAsync() {
        if (!this.credentials.id_token || !this.credentials.expiry_date || this.isTokenExpiring()) {
          const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);
          this.credentials = {
            id_token: idToken,
            expiry_date: this.getIdTokenExpiryDate(idToken)
          };
        }
        const headers = new Headers({
          authorization: "Bearer " + this.credentials.id_token
        });
        return { headers };
      }
      getIdTokenExpiryDate(idToken) {
        const payloadB64 = idToken.split(".")[1];
        if (payloadB64) {
          const payload = JSON.parse(Buffer.from(payloadB64, "base64").toString("ascii"));
          return payload.exp * 1e3;
        }
      }
    };
    exports2.IdTokenClient = IdTokenClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/envDetect.js
var require_envDetect = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/envDetect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GCPEnv = void 0;
    exports2.clear = clear;
    exports2.getEnv = getEnv;
    var gcpMetadata = require_src4();
    var GCPEnv;
    (function(GCPEnv2) {
      GCPEnv2["APP_ENGINE"] = "APP_ENGINE";
      GCPEnv2["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
      GCPEnv2["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
      GCPEnv2["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
      GCPEnv2["CLOUD_RUN"] = "CLOUD_RUN";
      GCPEnv2["NONE"] = "NONE";
    })(GCPEnv || (exports2.GCPEnv = GCPEnv = {}));
    var envPromise;
    function clear() {
      envPromise = void 0;
    }
    async function getEnv() {
      if (envPromise) {
        return envPromise;
      }
      envPromise = getEnvMemoized();
      return envPromise;
    }
    async function getEnvMemoized() {
      let env = GCPEnv.NONE;
      if (isAppEngine()) {
        env = GCPEnv.APP_ENGINE;
      } else if (isCloudFunction()) {
        env = GCPEnv.CLOUD_FUNCTIONS;
      } else if (await isComputeEngine()) {
        if (await isKubernetesEngine()) {
          env = GCPEnv.KUBERNETES_ENGINE;
        } else if (isCloudRun()) {
          env = GCPEnv.CLOUD_RUN;
        } else {
          env = GCPEnv.COMPUTE_ENGINE;
        }
      } else {
        env = GCPEnv.NONE;
      }
      return env;
    }
    function isAppEngine() {
      return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
    }
    function isCloudFunction() {
      return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
    }
    function isCloudRun() {
      return !!process.env.K_CONFIGURATION;
    }
    async function isKubernetesEngine() {
      try {
        await gcpMetadata.instance("attributes/cluster-name");
        return true;
      } catch (e2) {
        return false;
      }
    }
    async function isComputeEngine() {
      return gcpMetadata.isAvailable();
    }
  }
});

// ../backend/node_modules/gtoken/node_modules/jws/lib/data-stream.js
var require_data_stream2 = __commonJS({
  "../backend/node_modules/gtoken/node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var Stream3 = require("stream");
    var util = require("util");
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer4.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer4.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream3);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer4.concat([this.buffer, Buffer4.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// ../backend/node_modules/gtoken/node_modules/jwa/index.js
var require_jwa2 = __commonJS({
  "../backend/node_modules/gtoken/node_modules/jwa/index.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var crypto2 = require("crypto");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require("util");
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i2 = 0; i2 < padding; ++i2) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer4.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    var bufferEqual;
    var timingSafeEqual = "timingSafeEqual" in crypto2 ? function timingSafeEqual2(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return crypto2.timingSafeEqual(a, b);
    } : function timingSafeEqual2(a, b) {
      if (!bufferEqual) {
        bufferEqual = require_buffer_equal_constant_time();
      }
      return bufferEqual(a, b);
    };
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return timingSafeEqual(Buffer4.from(signature), Buffer4.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// ../backend/node_modules/gtoken/node_modules/jws/lib/tostring.js
var require_tostring2 = __commonJS({
  "../backend/node_modules/gtoken/node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer4 = require("buffer").Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer4.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// ../backend/node_modules/gtoken/node_modules/jws/lib/sign-stream.js
var require_sign_stream2 = __commonJS({
  "../backend/node_modules/gtoken/node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream2();
    var jwa = require_jwa2();
    var Stream3 = require("stream");
    var toString = require_tostring2();
    var util = require("util");
    function base64url(string, encoding) {
      return Buffer4.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream3);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e2) {
        this.readable = false;
        this.emit("error", e2);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// ../backend/node_modules/gtoken/node_modules/jws/lib/verify-stream.js
var require_verify_stream2 = __commonJS({
  "../backend/node_modules/gtoken/node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream2();
    var jwa = require_jwa2();
    var Stream3 = require("stream");
    var toString = require_tostring2();
    var util = require("util");
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e2) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer4.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer4.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream3);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e2) {
        this.readable = false;
        this.emit("error", e2);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// ../backend/node_modules/gtoken/node_modules/jws/index.js
var require_jws2 = __commonJS({
  "../backend/node_modules/gtoken/node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream2();
    var VerifyStream = require_verify_stream2();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// ../backend/node_modules/gtoken/build/cjs/src/index.cjs
var require_src5 = __commonJS({
  "../backend/node_modules/gtoken/build/cjs/src/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.GoogleToken = void 0;
    var fs2 = _interopRequireWildcard(require("fs"));
    var _gaxios = require_src2();
    var jws = _interopRequireWildcard(require_jws2());
    var path = _interopRequireWildcard(require("path"));
    var _util = require("util");
    function _interopRequireWildcard(e2, t2) {
      if ("function" == typeof WeakMap) var r2 = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function _interopRequireWildcard2(e3, t3) {
        if (!t3 && e3 && e3.__esModule) return e3;
        var o, i2, f3 = { __proto__: null, "default": e3 };
        if (null === e3 || "object" != _typeof(e3) && "function" != typeof e3) return f3;
        if (o = t3 ? n : r2) {
          if (o.has(e3)) return o.get(e3);
          o.set(e3, f3);
        }
        for (var _t3 in e3) "default" !== _t3 && {}.hasOwnProperty.call(e3, _t3) && ((i2 = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e3, _t3)) && (i2.get || i2.set) ? o(f3, _t3, i2) : f3[_t3] = e3[_t3]);
        return f3;
      })(e2, t2);
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classPrivateMethodInitSpec(e2, a) {
      _checkPrivateRedeclaration(e2, a), a.add(e2);
    }
    function _classPrivateFieldInitSpec(e2, t2, a) {
      _checkPrivateRedeclaration(e2, t2), t2.set(e2, a);
    }
    function _checkPrivateRedeclaration(e2, t2) {
      if (t2.has(e2)) throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
    function _classPrivateFieldSet(s2, a, r2) {
      return s2.set(_assertClassBrand(s2, a), r2), r2;
    }
    function _classPrivateFieldGet(s2, a) {
      return s2.get(_assertClassBrand(s2, a));
    }
    function _assertClassBrand(e2, t2, n) {
      if ("function" == typeof e2 ? e2 === t2 : e2.has(t2)) return arguments.length < 3 ? t2 : n;
      throw new TypeError("Private element is not present on this object");
    }
    function _defineProperties(e2, r2) {
      for (var t2 = 0; t2 < r2.length; t2++) {
        var o = r2[t2];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e2, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e2, r2, t2) {
      return r2 && _defineProperties(e2.prototype, r2), t2 && _defineProperties(e2, t2), Object.defineProperty(e2, "prototype", { writable: false }), e2;
    }
    function _classCallCheck(a, n) {
      if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    function _callSuper(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _possibleConstructorReturn(t2, e2) {
      if (e2 && ("object" == _typeof(e2) || "function" == typeof e2)) return e2;
      if (void 0 !== e2) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t2);
    }
    function _assertThisInitialized(e2) {
      if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e2;
    }
    function _inherits(t2, e2) {
      if ("function" != typeof e2 && null !== e2) throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), Object.defineProperty(t2, "prototype", { writable: false }), e2 && _setPrototypeOf(t2, e2);
    }
    function _wrapNativeSuper(t2) {
      var r2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
      return _wrapNativeSuper = function _wrapNativeSuper2(t3) {
        if (null === t3 || !_isNativeFunction(t3)) return t3;
        if ("function" != typeof t3) throw new TypeError("Super expression must either be null or a function");
        if (void 0 !== r2) {
          if (r2.has(t3)) return r2.get(t3);
          r2.set(t3, Wrapper);
        }
        function Wrapper() {
          return _construct(t3, arguments, _getPrototypeOf(this).constructor);
        }
        return Wrapper.prototype = Object.create(t3.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }), _setPrototypeOf(Wrapper, t3);
      }, _wrapNativeSuper(t2);
    }
    function _construct(t2, e2, r2) {
      if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
      var o = [null];
      o.push.apply(o, e2);
      var p = new (t2.bind.apply(t2, o))();
      return r2 && _setPrototypeOf(p, r2.prototype), p;
    }
    function _isNativeReflectConstruct() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _isNativeFunction(t2) {
      try {
        return -1 !== Function.toString.call(t2).indexOf("[native code]");
      } catch (n) {
        return "function" == typeof t2;
      }
    }
    function _setPrototypeOf(t2, e2) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
        return t3.__proto__ = e3, t3;
      }, _setPrototypeOf(t2, e2);
    }
    function _getPrototypeOf(t2) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
        return t3.__proto__ || Object.getPrototypeOf(t3);
      }, _getPrototypeOf(t2);
    }
    function _defineProperty(e2, r2, t2) {
      return (r2 = _toPropertyKey(r2)) in e2 ? Object.defineProperty(e2, r2, { value: t2, enumerable: true, configurable: true, writable: true }) : e2[r2] = t2, e2;
    }
    function _toPropertyKey(t2) {
      var i2 = _toPrimitive(t2, "string");
      return "symbol" == _typeof(i2) ? i2 : i2 + "";
    }
    function _toPrimitive(t2, r2) {
      if ("object" != _typeof(t2) || !t2) return t2;
      var e2 = t2[Symbol.toPrimitive];
      if (void 0 !== e2) {
        var i2 = e2.call(t2, r2 || "default");
        if ("object" != _typeof(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _regenerator() {
      var e2, t2, r2 = "function" == typeof Symbol ? Symbol : {}, n = r2.iterator || "@@iterator", o = r2.toStringTag || "@@toStringTag";
      function i2(r3, n2, o2, i3) {
        var c2 = n2 && n2.prototype instanceof Generator ? n2 : Generator, u2 = Object.create(c2.prototype);
        return _regeneratorDefine2(u2, "_invoke", (function(r4, n3, o3) {
          var i4, c3, u3, f4 = 0, p = o3 || [], y = false, G = { p: 0, n: 0, v: e2, a: d, f: d.bind(e2, 4), d: function d2(t3, r5) {
            return i4 = t3, c3 = 0, u3 = e2, G.n = r5, a;
          } };
          function d(r5, n4) {
            for (c3 = r5, u3 = n4, t2 = 0; !y && f4 && !o4 && t2 < p.length; t2++) {
              var o4, i5 = p[t2], d2 = G.p, l = i5[2];
              r5 > 3 ? (o4 = l === n4) && (u3 = i5[(c3 = i5[4]) ? 5 : (c3 = 3, 3)], i5[4] = i5[5] = e2) : i5[0] <= d2 && ((o4 = r5 < 2 && d2 < i5[1]) ? (c3 = 0, G.v = n4, G.n = i5[1]) : d2 < l && (o4 = r5 < 3 || i5[0] > n4 || n4 > l) && (i5[4] = r5, i5[5] = n4, G.n = l, c3 = 0));
            }
            if (o4 || r5 > 1) return a;
            throw y = true, n4;
          }
          return function(o4, p2, l) {
            if (f4 > 1) throw TypeError("Generator is already running");
            for (y && 1 === p2 && d(p2, l), c3 = p2, u3 = l; (t2 = c3 < 2 ? e2 : u3) || !y; ) {
              i4 || (c3 ? c3 < 3 ? (c3 > 1 && (G.n = -1), d(c3, u3)) : G.n = u3 : G.v = u3);
              try {
                if (f4 = 2, i4) {
                  if (c3 || (o4 = "next"), t2 = i4[o4]) {
                    if (!(t2 = t2.call(i4, u3))) throw TypeError("iterator result is not an object");
                    if (!t2.done) return t2;
                    u3 = t2.value, c3 < 2 && (c3 = 0);
                  } else 1 === c3 && (t2 = i4["return"]) && t2.call(i4), c3 < 2 && (u3 = TypeError("The iterator does not provide a '" + o4 + "' method"), c3 = 1);
                  i4 = e2;
                } else if ((t2 = (y = G.n < 0) ? u3 : r4.call(n3, G)) !== a) break;
              } catch (t3) {
                i4 = e2, c3 = 1, u3 = t3;
              } finally {
                f4 = 1;
              }
            }
            return { value: t2, done: y };
          };
        })(r3, o2, i3), true), u2;
      }
      var a = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      t2 = Object.getPrototypeOf;
      var c = [][n] ? t2(t2([][n]())) : (_regeneratorDefine2(t2 = {}, n, function() {
        return this;
      }), t2), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
      function f3(e3) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(e3, GeneratorFunctionPrototype) : (e3.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e3, o, "GeneratorFunction")), e3.prototype = Object.create(u), e3;
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function() {
        return this;
      }), _regeneratorDefine2(u, "toString", function() {
        return "[object Generator]";
      }), (_regenerator = function _regenerator2() {
        return { w: i2, m: f3 };
      })();
    }
    function _regeneratorDefine2(e2, r2, n, t2) {
      var i2 = Object.defineProperty;
      try {
        i2({}, "", {});
      } catch (e3) {
        i2 = 0;
      }
      _regeneratorDefine2 = function _regeneratorDefine(e3, r3, n2, t3) {
        if (r3) i2 ? i2(e3, r3, { value: n2, enumerable: !t3, configurable: !t3, writable: !t3 }) : e3[r3] = n2;
        else {
          var o = function o2(r4, n3) {
            _regeneratorDefine2(e3, r4, function(e4) {
              return this._invoke(r4, n3, e4);
            });
          };
          o("next", 0), o("throw", 1), o("return", 2);
        }
      }, _regeneratorDefine2(e2, r2, n, t2);
    }
    function asyncGeneratorStep(n, t2, e2, r2, o, a, c) {
      try {
        var i2 = n[a](c), u = i2.value;
      } catch (n2) {
        return void e2(n2);
      }
      i2.done ? t2(u) : Promise.resolve(u).then(r2, o);
    }
    function _asyncToGenerator(n) {
      return function() {
        var t2 = this, e2 = arguments;
        return new Promise(function(r2, o) {
          var a = n.apply(t2, e2);
          function _next(n2) {
            asyncGeneratorStep(a, r2, o, _next, _throw, "next", n2);
          }
          function _throw(n2) {
            asyncGeneratorStep(a, r2, o, _next, _throw, "throw", n2);
          }
          _next(void 0);
        });
      };
    }
    var readFile = fs2.readFile ? (0, _util.promisify)(fs2.readFile) : /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regenerator().m(function _callee() {
      return _regenerator().w(function(_context) {
        while (1) switch (_context.n) {
          case 0:
            throw new ErrorWithCode("use key rather than keyFile.", "MISSING_CREDENTIALS");
          case 1:
            return _context.a(2);
        }
      }, _callee);
    }));
    var GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token";
    var GOOGLE_REVOKE_TOKEN_URL = "https://oauth2.googleapis.com/revoke?token=";
    var ErrorWithCode = /* @__PURE__ */ (function(_Error) {
      function ErrorWithCode2(message, code) {
        var _this;
        _classCallCheck(this, ErrorWithCode2);
        _this = _callSuper(this, ErrorWithCode2, [message]);
        _defineProperty(_this, "code", void 0);
        _this.code = code;
        return _this;
      }
      _inherits(ErrorWithCode2, _Error);
      return _createClass(ErrorWithCode2);
    })(/* @__PURE__ */ _wrapNativeSuper(Error));
    var _inFlightRequest = /* @__PURE__ */ new WeakMap();
    var _GoogleToken_brand = /* @__PURE__ */ new WeakSet();
    var GoogleToken = exports2.GoogleToken = /* @__PURE__ */ (function() {
      function GoogleToken2(_options) {
        _classCallCheck(this, GoogleToken2);
        _classPrivateMethodInitSpec(this, _GoogleToken_brand);
        _defineProperty(this, "expiresAt", void 0);
        _defineProperty(this, "key", void 0);
        _defineProperty(this, "keyFile", void 0);
        _defineProperty(this, "iss", void 0);
        _defineProperty(this, "sub", void 0);
        _defineProperty(this, "scope", void 0);
        _defineProperty(this, "rawToken", void 0);
        _defineProperty(this, "tokenExpires", void 0);
        _defineProperty(this, "email", void 0);
        _defineProperty(this, "additionalClaims", void 0);
        _defineProperty(this, "eagerRefreshThresholdMillis", void 0);
        _defineProperty(this, "transporter", {
          request: function request(opts) {
            return (0, _gaxios.request)(opts);
          }
        });
        _classPrivateFieldInitSpec(this, _inFlightRequest, void 0);
        _assertClassBrand(_GoogleToken_brand, this, _configure).call(this, _options);
      }
      return _createClass(GoogleToken2, [{
        key: "accessToken",
        get: function get() {
          return this.rawToken ? this.rawToken.access_token : void 0;
        }
      }, {
        key: "idToken",
        get: function get() {
          return this.rawToken ? this.rawToken.id_token : void 0;
        }
      }, {
        key: "tokenType",
        get: function get() {
          return this.rawToken ? this.rawToken.token_type : void 0;
        }
      }, {
        key: "refreshToken",
        get: function get() {
          return this.rawToken ? this.rawToken.refresh_token : void 0;
        }
      }, {
        key: "hasExpired",
        value: function hasExpired() {
          var now = (/* @__PURE__ */ new Date()).getTime();
          if (this.rawToken && this.expiresAt) {
            return now >= this.expiresAt;
          } else {
            return true;
          }
        }
        /**
         * Returns whether the token will expire within eagerRefreshThresholdMillis
         *
         * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.
         */
      }, {
        key: "isTokenExpiring",
        value: function isTokenExpiring() {
          var _this$eagerRefreshThr;
          var now = (/* @__PURE__ */ new Date()).getTime();
          var eagerRefreshThresholdMillis = (_this$eagerRefreshThr = this.eagerRefreshThresholdMillis) !== null && _this$eagerRefreshThr !== void 0 ? _this$eagerRefreshThr : 0;
          if (this.rawToken && this.expiresAt) {
            return this.expiresAt <= now + eagerRefreshThresholdMillis;
          } else {
            return true;
          }
        }
        /**
         * Returns a cached token or retrieves a new one from Google.
         *
         * @param callback The callback function.
         */
      }, {
        key: "getToken",
        value: function getToken(callback) {
          var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          if (_typeof(callback) === "object") {
            opts = callback;
            callback = void 0;
          }
          opts = Object.assign({
            forceRefresh: false
          }, opts);
          if (callback) {
            var cb = callback;
            _assertClassBrand(_GoogleToken_brand, this, _getTokenAsync).call(this, opts).then(function(t2) {
              return cb(null, t2);
            }, callback);
            return;
          }
          return _assertClassBrand(_GoogleToken_brand, this, _getTokenAsync).call(this, opts);
        }
        /**
         * Given a keyFile, extract the key and client email if available
         * @param keyFile Path to a json, pem, or p12 file that contains the key.
         * @returns an object with privateKey and clientEmail properties
         */
      }, {
        key: "getCredentials",
        value: (function() {
          var _getCredentials = _asyncToGenerator(/* @__PURE__ */ _regenerator().m(function _callee2(keyFile) {
            var ext, key, body, privateKey, clientEmail, _privateKey, _t;
            return _regenerator().w(function(_context2) {
              while (1) switch (_context2.n) {
                case 0:
                  ext = path.extname(keyFile);
                  _t = ext;
                  _context2.n = _t === ".json" ? 1 : _t === ".der" ? 4 : _t === ".crt" ? 4 : _t === ".pem" ? 4 : _t === ".p12" ? 6 : _t === ".pfx" ? 6 : 7;
                  break;
                case 1:
                  _context2.n = 2;
                  return readFile(keyFile, "utf8");
                case 2:
                  key = _context2.v;
                  body = JSON.parse(key);
                  privateKey = body.private_key;
                  clientEmail = body.client_email;
                  if (!(!privateKey || !clientEmail)) {
                    _context2.n = 3;
                    break;
                  }
                  throw new ErrorWithCode("private_key and client_email are required.", "MISSING_CREDENTIALS");
                case 3:
                  return _context2.a(2, {
                    privateKey,
                    clientEmail
                  });
                case 4:
                  _context2.n = 5;
                  return readFile(keyFile, "utf8");
                case 5:
                  _privateKey = _context2.v;
                  return _context2.a(2, {
                    privateKey: _privateKey
                  });
                case 6:
                  throw new ErrorWithCode("*.p12 certificates are not supported after v6.1.2. Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.", "UNKNOWN_CERTIFICATE_TYPE");
                case 7:
                  throw new ErrorWithCode("Unknown certificate type. Type is determined based on file extension. Current supported extensions are *.json, and *.pem.", "UNKNOWN_CERTIFICATE_TYPE");
                case 8:
                  return _context2.a(2);
              }
            }, _callee2);
          }));
          function getCredentials(_x) {
            return _getCredentials.apply(this, arguments);
          }
          return getCredentials;
        })()
      }, {
        key: "revokeToken",
        value: function revokeToken(callback) {
          if (callback) {
            _assertClassBrand(_GoogleToken_brand, this, _revokeTokenAsync).call(this).then(function() {
              return callback();
            }, callback);
            return;
          }
          return _assertClassBrand(_GoogleToken_brand, this, _revokeTokenAsync).call(this);
        }
      }]);
    })();
    function _getTokenAsync(_x2) {
      return _getTokenAsync2.apply(this, arguments);
    }
    function _getTokenAsync2() {
      _getTokenAsync2 = _asyncToGenerator(/* @__PURE__ */ _regenerator().m(function _callee3(opts) {
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              if (!(_classPrivateFieldGet(_inFlightRequest, this) && !opts.forceRefresh)) {
                _context3.n = 1;
                break;
              }
              return _context3.a(2, _classPrivateFieldGet(_inFlightRequest, this));
            case 1:
              _context3.p = 1;
              _context3.n = 2;
              return _classPrivateFieldSet(_inFlightRequest, this, _assertClassBrand(_GoogleToken_brand, this, _getTokenAsyncInner).call(this, opts));
            case 2:
              return _context3.a(2, _context3.v);
            case 3:
              _context3.p = 3;
              _classPrivateFieldSet(_inFlightRequest, this, void 0);
              return _context3.f(3);
            case 4:
              return _context3.a(2);
          }
        }, _callee3, this, [[1, , 3, 4]]);
      }));
      return _getTokenAsync2.apply(this, arguments);
    }
    function _getTokenAsyncInner(_x3) {
      return _getTokenAsyncInner2.apply(this, arguments);
    }
    function _getTokenAsyncInner2() {
      _getTokenAsyncInner2 = _asyncToGenerator(/* @__PURE__ */ _regenerator().m(function _callee4(opts) {
        var creds;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              if (!(this.isTokenExpiring() === false && opts.forceRefresh === false)) {
                _context4.n = 1;
                break;
              }
              return _context4.a(2, Promise.resolve(this.rawToken));
            case 1:
              if (!(!this.key && !this.keyFile)) {
                _context4.n = 2;
                break;
              }
              throw new Error("No key or keyFile set.");
            case 2:
              if (!(!this.key && this.keyFile)) {
                _context4.n = 4;
                break;
              }
              _context4.n = 3;
              return this.getCredentials(this.keyFile);
            case 3:
              creds = _context4.v;
              this.key = creds.privateKey;
              this.iss = creds.clientEmail || this.iss;
              if (!creds.clientEmail) {
                _assertClassBrand(_GoogleToken_brand, this, _ensureEmail).call(this);
              }
            case 4:
              return _context4.a(2, _assertClassBrand(_GoogleToken_brand, this, _requestToken).call(this));
          }
        }, _callee4, this);
      }));
      return _getTokenAsyncInner2.apply(this, arguments);
    }
    function _ensureEmail() {
      if (!this.iss) {
        throw new ErrorWithCode("email is required.", "MISSING_CREDENTIALS");
      }
    }
    function _revokeTokenAsync() {
      return _revokeTokenAsync2.apply(this, arguments);
    }
    function _revokeTokenAsync2() {
      _revokeTokenAsync2 = _asyncToGenerator(/* @__PURE__ */ _regenerator().m(function _callee5() {
        var url;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              if (this.accessToken) {
                _context5.n = 1;
                break;
              }
              throw new Error("No token to revoke.");
            case 1:
              url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;
              _context5.n = 2;
              return this.transporter.request({
                url,
                retry: true
              });
            case 2:
              _assertClassBrand(_GoogleToken_brand, this, _configure).call(this, {
                email: this.iss,
                sub: this.sub,
                key: this.key,
                keyFile: this.keyFile,
                scope: this.scope,
                additionalClaims: this.additionalClaims
              });
            case 3:
              return _context5.a(2);
          }
        }, _callee5, this);
      }));
      return _revokeTokenAsync2.apply(this, arguments);
    }
    function _configure() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.keyFile = options.keyFile;
      this.key = options.key;
      this.rawToken = void 0;
      this.iss = options.email || options.iss;
      this.sub = options.sub;
      this.additionalClaims = options.additionalClaims;
      if (_typeof(options.scope) === "object") {
        this.scope = options.scope.join(" ");
      } else {
        this.scope = options.scope;
      }
      this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;
      if (options.transporter) {
        this.transporter = options.transporter;
      }
    }
    function _requestToken() {
      return _requestToken2.apply(this, arguments);
    }
    function _requestToken2() {
      _requestToken2 = _asyncToGenerator(/* @__PURE__ */ _regenerator().m(function _callee6() {
        var iat, additionalClaims, payload, signedJWT, r2, _response, _response2, body, desc, _t2;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              iat = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
              additionalClaims = this.additionalClaims || {};
              payload = Object.assign({
                iss: this.iss,
                scope: this.scope,
                aud: GOOGLE_TOKEN_URL,
                exp: iat + 3600,
                iat,
                sub: this.sub
              }, additionalClaims);
              signedJWT = jws.sign({
                header: {
                  alg: "RS256"
                },
                payload,
                secret: this.key
              });
              _context6.p = 1;
              _context6.n = 2;
              return this.transporter.request({
                method: "POST",
                url: GOOGLE_TOKEN_URL,
                data: new URLSearchParams({
                  grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
                  assertion: signedJWT
                }),
                responseType: "json",
                retryConfig: {
                  httpMethodsToRetry: ["POST"]
                }
              });
            case 2:
              r2 = _context6.v;
              this.rawToken = r2.data;
              this.expiresAt = r2.data.expires_in === null || r2.data.expires_in === void 0 ? void 0 : (iat + r2.data.expires_in) * 1e3;
              return _context6.a(2, this.rawToken);
            case 3:
              _context6.p = 3;
              _t2 = _context6.v;
              this.rawToken = void 0;
              this.tokenExpires = void 0;
              body = _t2.response && (_response = _t2.response) !== null && _response !== void 0 && _response.data ? (_response2 = _t2.response) === null || _response2 === void 0 ? void 0 : _response2.data : {};
              if (body.error) {
                desc = body.error_description ? ": ".concat(body.error_description) : "";
                _t2.message = "".concat(body.error).concat(desc);
              }
              throw _t2;
            case 4:
              return _context6.a(2);
          }
        }, _callee6, this, [[1, 3]]);
      }));
      return _requestToken2.apply(this, arguments);
    }
  }
});

// ../backend/node_modules/google-auth-library/node_modules/jws/lib/data-stream.js
var require_data_stream3 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var Stream3 = require("stream");
    var util = require("util");
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer4.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer4.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream3);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer4.concat([this.buffer, Buffer4.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// ../backend/node_modules/google-auth-library/node_modules/jwa/index.js
var require_jwa3 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/jwa/index.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var crypto2 = require("crypto");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require("util");
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer4.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i2 = 0; i2 < padding; ++i2) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer4.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    var bufferEqual;
    var timingSafeEqual = "timingSafeEqual" in crypto2 ? function timingSafeEqual2(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return crypto2.timingSafeEqual(a, b);
    } : function timingSafeEqual2(a, b) {
      if (!bufferEqual) {
        bufferEqual = require_buffer_equal_constant_time();
      }
      return bufferEqual(a, b);
    };
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return timingSafeEqual(Buffer4.from(signature), Buffer4.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// ../backend/node_modules/google-auth-library/node_modules/jws/lib/tostring.js
var require_tostring3 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer4 = require("buffer").Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer4.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// ../backend/node_modules/google-auth-library/node_modules/jws/lib/sign-stream.js
var require_sign_stream3 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream3();
    var jwa = require_jwa3();
    var Stream3 = require("stream");
    var toString = require_tostring3();
    var util = require("util");
    function base64url(string, encoding) {
      return Buffer4.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream3);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e2) {
        this.readable = false;
        this.emit("error", e2);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// ../backend/node_modules/google-auth-library/node_modules/jws/lib/verify-stream.js
var require_verify_stream3 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer4 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream3();
    var jwa = require_jwa3();
    var Stream3 = require("stream");
    var toString = require_tostring3();
    var util = require("util");
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e2) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer4.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer4.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream3);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e2) {
        this.readable = false;
        this.emit("error", e2);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// ../backend/node_modules/google-auth-library/node_modules/jws/index.js
var require_jws3 = __commonJS({
  "../backend/node_modules/google-auth-library/node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream3();
    var VerifyStream = require_verify_stream3();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/jwtaccess.js
var require_jwtaccess = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/jwtaccess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWTAccess = void 0;
    var jws = require_jws3();
    var util_1 = require_util2();
    var DEFAULT_HEADER = {
      alg: "RS256",
      typ: "JWT"
    };
    var JWTAccess = class _JWTAccess {
      email;
      key;
      keyId;
      projectId;
      eagerRefreshThresholdMillis;
      cache = new util_1.LRUCache({
        capacity: 500,
        maxAge: 60 * 60 * 1e3
      });
      /**
       * JWTAccess service account credentials.
       *
       * Create a new access token by using the credential to create a new JWT token
       * that's recognized as the access token.
       *
       * @param email the service account email address.
       * @param key the private key that will be used to sign the token.
       * @param keyId the ID of the private key used to sign the token.
       */
      constructor(email, key, keyId, eagerRefreshThresholdMillis) {
        this.email = email;
        this.key = key;
        this.keyId = keyId;
        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis ?? 5 * 60 * 1e3;
      }
      /**
       * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url
       *
       * @param url The URI being authorized.
       * @param scopes The scope or scopes being authorized
       * @returns A string that returns the cached key.
       */
      getCachedKey(url, scopes) {
        let cacheKey = url;
        if (scopes && Array.isArray(scopes) && scopes.length) {
          cacheKey = url ? `${url}_${scopes.join("_")}` : `${scopes.join("_")}`;
        } else if (typeof scopes === "string") {
          cacheKey = url ? `${url}_${scopes}` : scopes;
        }
        if (!cacheKey) {
          throw Error("Scopes or url must be provided");
        }
        return cacheKey;
      }
      /**
       * Get a non-expired access token, after refreshing if necessary.
       *
       * @param url The URI being authorized.
       * @param additionalClaims An object with a set of additional claims to
       * include in the payload.
       * @returns An object that includes the authorization header.
       */
      getRequestHeaders(url, additionalClaims, scopes) {
        const key = this.getCachedKey(url, scopes);
        const cachedToken = this.cache.get(key);
        const now = Date.now();
        if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {
          return new Headers(cachedToken.headers);
        }
        const iat = Math.floor(Date.now() / 1e3);
        const exp = _JWTAccess.getExpirationTime(iat);
        let defaultClaims;
        if (Array.isArray(scopes)) {
          scopes = scopes.join(" ");
        }
        if (scopes) {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            scope: scopes,
            exp,
            iat
          };
        } else {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            aud: url,
            exp,
            iat
          };
        }
        if (additionalClaims) {
          for (const claim in defaultClaims) {
            if (additionalClaims[claim]) {
              throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);
            }
          }
        }
        const header = this.keyId ? { ...DEFAULT_HEADER, kid: this.keyId } : DEFAULT_HEADER;
        const payload = Object.assign(defaultClaims, additionalClaims);
        const signedJWT = jws.sign({ header, payload, secret: this.key });
        const headers = new Headers({ authorization: `Bearer ${signedJWT}` });
        this.cache.set(key, {
          expiration: exp * 1e3,
          headers
        });
        return headers;
      }
      /**
       * Returns an expiration time for the JWT token.
       *
       * @param iat The issued at time for the JWT.
       * @returns An expiration time for the JWT.
       */
      static getExpirationTime(iat) {
        const exp = iat + 3600;
        return exp;
      }
      /**
       * Create a JWTAccess credentials instance using the given input options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            reject(new Error("Must pass in a stream containing the service account auth settings."));
          }
          let s2 = "";
          inputStream.setEncoding("utf8").on("data", (chunk) => s2 += chunk).on("error", reject).on("end", () => {
            try {
              const data = JSON.parse(s2);
              this.fromJSON(data);
              resolve();
            } catch (err) {
              reject(err);
            }
          });
        });
      }
    };
    exports2.JWTAccess = JWTAccess;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/jwtclient.js
var require_jwtclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/jwtclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWT = void 0;
    var gtoken_1 = require_src5();
    var jwtaccess_1 = require_jwtaccess();
    var oauth2client_1 = require_oauth2client();
    var authclient_1 = require_authclient();
    var JWT = class _JWT extends oauth2client_1.OAuth2Client {
      email;
      keyFile;
      key;
      keyId;
      defaultScopes;
      scopes;
      scope;
      subject;
      gtoken;
      additionalClaims;
      useJWTAccessWithScope;
      defaultServicePath;
      access;
      /**
       * JWT service account credentials.
       *
       * Retrieve access token using gtoken.
       *
       * @param options the
       */
      constructor(options = {}) {
        super(options);
        this.email = options.email;
        this.keyFile = options.keyFile;
        this.key = options.key;
        this.keyId = options.keyId;
        this.scopes = options.scopes;
        this.subject = options.subject;
        this.additionalClaims = options.additionalClaims;
        this.credentials = { refresh_token: "jwt-placeholder", expiry_date: 1 };
      }
      /**
       * Creates a copy of the credential with the specified scopes.
       * @param scopes List of requested scopes or a single scope.
       * @return The cloned instance.
       */
      createScoped(scopes) {
        const jwt2 = new _JWT(this);
        jwt2.scopes = scopes;
        return jwt2;
      }
      /**
       * Obtains the metadata to be sent with the request.
       *
       * @param url the URI being authorized.
       */
      async getRequestMetadataAsync(url) {
        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;
        const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes() || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;
        if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {
          throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);
        }
        if (!this.apiKey && useSelfSignedJWT) {
          if (this.additionalClaims && this.additionalClaims.target_audience) {
            const { tokens } = await this.refreshToken();
            return {
              headers: this.addSharedMetadataHeaders(new Headers({
                authorization: `Bearer ${tokens.id_token}`
              }))
            };
          } else {
            if (!this.access) {
              this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);
            }
            let scopes;
            if (this.hasUserScopes()) {
              scopes = this.scopes;
            } else if (!url) {
              scopes = this.defaultScopes;
            }
            const useScopes = this.useJWTAccessWithScope || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;
            const headers = await this.access.getRequestHeaders(
              url ?? void 0,
              this.additionalClaims,
              // Scopes take precedent over audience for signing,
              // so we only provide them if `useJWTAccessWithScope` is on or
              // if we are in a non-default universe
              useScopes ? scopes : void 0
            );
            return { headers: this.addSharedMetadataHeaders(headers) };
          }
        } else if (this.hasAnyScopes() || this.apiKey) {
          return super.getRequestMetadataAsync(url);
        } else {
          return { headers: new Headers() };
        }
      }
      /**
       * Fetches an ID token.
       * @param targetAudience the audience for the fetched ID token.
       */
      async fetchIdToken(targetAudience) {
        const gtoken = new gtoken_1.GoogleToken({
          iss: this.email,
          sub: this.subject,
          scope: this.scopes || this.defaultScopes,
          keyFile: this.keyFile,
          key: this.key,
          additionalClaims: { target_audience: targetAudience },
          transporter: this.transporter
        });
        await gtoken.getToken({
          forceRefresh: true
        });
        if (!gtoken.idToken) {
          throw new Error("Unknown error: Failed to fetch ID token");
        }
        return gtoken.idToken;
      }
      /**
       * Determine if there are currently scopes available.
       */
      hasUserScopes() {
        if (!this.scopes) {
          return false;
        }
        return this.scopes.length > 0;
      }
      /**
       * Are there any default or user scopes defined.
       */
      hasAnyScopes() {
        if (this.scopes && this.scopes.length > 0)
          return true;
        if (this.defaultScopes && this.defaultScopes.length > 0)
          return true;
        return false;
      }
      authorize(callback) {
        if (callback) {
          this.authorizeAsync().then((r2) => callback(null, r2), callback);
        } else {
          return this.authorizeAsync();
        }
      }
      async authorizeAsync() {
        const result = await this.refreshToken();
        if (!result) {
          throw new Error("No result returned");
        }
        this.credentials = result.tokens;
        this.credentials.refresh_token = "jwt-placeholder";
        this.key = this.gtoken.key;
        this.email = this.gtoken.iss;
        return result.tokens;
      }
      /**
       * Refreshes the access token.
       * @param refreshToken ignored
       * @private
       */
      async refreshTokenNoCache() {
        const gtoken = this.createGToken();
        const token = await gtoken.getToken({
          forceRefresh: this.isTokenExpiring()
        });
        const tokens = {
          access_token: token.access_token,
          token_type: "Bearer",
          expiry_date: gtoken.expiresAt,
          id_token: gtoken.idToken
        };
        this.emit("tokens", tokens);
        return { res: null, tokens };
      }
      /**
       * Create a gToken if it doesn't already exist.
       */
      createGToken() {
        if (!this.gtoken) {
          this.gtoken = new gtoken_1.GoogleToken({
            iss: this.email,
            sub: this.subject,
            scope: this.scopes || this.defaultScopes,
            keyFile: this.keyFile,
            key: this.key,
            additionalClaims: this.additionalClaims,
            transporter: this.transporter
          });
        }
        return this.gtoken;
      }
      /**
       * Create a JWT credentials instance using the given input options.
       * @param json The input object.
       *
       * @remarks
       *
       * **Important**: If you accept a credential configuration (credential JSON/File/Stream) from an external source for authentication to Google Cloud, you must validate it before providing it to any Google API or library. Providing an unvalidated credential configuration to Google APIs can compromise the security of your systems and data. For more information, refer to {@link https://cloud.google.com/docs/authentication/external/externally-sourced-credentials Validate credential configurations from external sources}.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
        this.quotaProjectId = json.quota_project_id;
        this.universeDomain = json.universe_domain || this.universeDomain;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the service account auth settings.");
          }
          let s2 = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s2 += chunk).on("end", () => {
            try {
              const data = JSON.parse(s2);
              this.fromJSON(data);
              resolve();
            } catch (e2) {
              reject(e2);
            }
          });
        });
      }
      /**
       * Creates a JWT credentials instance using an API Key for authentication.
       * @param apiKey The API Key in string form.
       */
      fromAPIKey(apiKey) {
        if (typeof apiKey !== "string") {
          throw new Error("Must provide an API Key string.");
        }
        this.apiKey = apiKey;
      }
      /**
       * Using the key or keyFile on the JWT client, obtain an object that contains
       * the key and the client email.
       */
      async getCredentials() {
        if (this.key) {
          return { private_key: this.key, client_email: this.email };
        } else if (this.keyFile) {
          const gtoken = this.createGToken();
          const creds = await gtoken.getCredentials(this.keyFile);
          return { private_key: creds.privateKey, client_email: creds.clientEmail };
        }
        throw new Error("A key or a keyFile must be provided to getCredentials.");
      }
    };
    exports2.JWT = JWT;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/refreshclient.js
var require_refreshclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/refreshclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserRefreshClient = exports2.USER_REFRESH_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    var authclient_1 = require_authclient();
    exports2.USER_REFRESH_ACCOUNT_TYPE = "authorized_user";
    var UserRefreshClient = class _UserRefreshClient extends oauth2client_1.OAuth2Client {
      // TODO: refactor tests to make this private
      // In a future gts release, the _propertyName rule will be lifted.
      // This is also a hard one because `this.refreshToken` is a function.
      _refreshToken;
      /**
       * The User Refresh Token client.
       *
       * @param optionsOrClientId The User Refresh Token client options. Passing an `clientId` directly is **@DEPRECATED**.
       * @param clientSecret **@DEPRECATED**. Provide a {@link UserRefreshClientOptions `UserRefreshClientOptions`} object in the first parameter instead.
       * @param refreshToken **@DEPRECATED**. Provide a {@link UserRefreshClientOptions `UserRefreshClientOptions`} object in the first parameter instead.
       * @param eagerRefreshThresholdMillis **@DEPRECATED**. Provide a {@link UserRefreshClientOptions `UserRefreshClientOptions`} object in the first parameter instead.
       * @param forceRefreshOnFailure **@DEPRECATED**. Provide a {@link UserRefreshClientOptions `UserRefreshClientOptions`} object in the first parameter instead.
       */
      constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : {
          clientId: optionsOrClientId,
          clientSecret,
          refreshToken,
          eagerRefreshThresholdMillis,
          forceRefreshOnFailure
        };
        super(opts);
        this._refreshToken = opts.refreshToken;
        this.credentials.refresh_token = opts.refreshToken;
      }
      /**
       * Refreshes the access token.
       * @param refreshToken An ignored refreshToken..
       * @param callback Optional callback.
       */
      async refreshTokenNoCache() {
        return super.refreshTokenNoCache(this._refreshToken);
      }
      async fetchIdToken(targetAudience) {
        const opts = {
          ..._UserRefreshClient.RETRY_CONFIG,
          url: this.endpoints.oauth2TokenUrl,
          method: "POST",
          data: new URLSearchParams({
            client_id: this._clientId,
            client_secret: this._clientSecret,
            grant_type: "refresh_token",
            refresh_token: this._refreshToken,
            target_audience: targetAudience
          })
        };
        authclient_1.AuthClient.setMethodName(opts, "fetchIdToken");
        const res = await this.transporter.request(opts);
        return res.data.id_token;
      }
      /**
       * Create a UserRefreshClient credentials instance using the given input
       * options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the user refresh token");
        }
        if (json.type !== "authorized_user") {
          throw new Error('The incoming JSON object does not have the "authorized_user" type');
        }
        if (!json.client_id) {
          throw new Error("The incoming JSON object does not contain a client_id field");
        }
        if (!json.client_secret) {
          throw new Error("The incoming JSON object does not contain a client_secret field");
        }
        if (!json.refresh_token) {
          throw new Error("The incoming JSON object does not contain a refresh_token field");
        }
        this._clientId = json.client_id;
        this._clientSecret = json.client_secret;
        this._refreshToken = json.refresh_token;
        this.credentials.refresh_token = json.refresh_token;
        this.quotaProjectId = json.quota_project_id;
        this.universeDomain = json.universe_domain || this.universeDomain;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      async fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            return reject(new Error("Must pass in a stream containing the user refresh token."));
          }
          let s2 = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s2 += chunk).on("end", () => {
            try {
              const data = JSON.parse(s2);
              this.fromJSON(data);
              return resolve();
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
      /**
       * Create a UserRefreshClient credentials instance using the given input
       * options.
       * @param json The input object.
       */
      static fromJSON(json) {
        const client2 = new _UserRefreshClient();
        client2.fromJSON(json);
        return client2;
      }
    };
    exports2.UserRefreshClient = UserRefreshClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/impersonated.js
var require_impersonated = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/impersonated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Impersonated = exports2.IMPERSONATED_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    var gaxios_1 = require_src2();
    var util_1 = require_util2();
    exports2.IMPERSONATED_ACCOUNT_TYPE = "impersonated_service_account";
    var Impersonated = class _Impersonated extends oauth2client_1.OAuth2Client {
      sourceClient;
      targetPrincipal;
      targetScopes;
      delegates;
      lifetime;
      endpoint;
      /**
       * Impersonated service account credentials.
       *
       * Create a new access token by impersonating another service account.
       *
       * Impersonated Credentials allowing credentials issued to a user or
       * service account to impersonate another. The source project using
       * Impersonated Credentials must enable the "IAMCredentials" API.
       * Also, the target service account must grant the orginating principal
       * the "Service Account Token Creator" IAM role.
       *
       * @param {object} options - The configuration object.
       * @param {object} [options.sourceClient] the source credential used as to
       * acquire the impersonated credentials.
       * @param {string} [options.targetPrincipal] the service account to
       * impersonate.
       * @param {string[]} [options.delegates] the chained list of delegates
       * required to grant the final access_token. If set, the sequence of
       * identities must have "Service Account Token Creator" capability granted to
       * the preceding identity. For example, if set to [serviceAccountB,
       * serviceAccountC], the sourceCredential must have the Token Creator role on
       * serviceAccountB. serviceAccountB must have the Token Creator on
       * serviceAccountC. Finally, C must have Token Creator on target_principal.
       * If left unset, sourceCredential must have that role on targetPrincipal.
       * @param {string[]} [options.targetScopes] scopes to request during the
       * authorization grant.
       * @param {number} [options.lifetime] number of seconds the delegated
       * credential should be valid for up to 3600 seconds by default, or 43,200
       * seconds by extending the token's lifetime, see:
       * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth
       * @param {string} [options.endpoint] api endpoint override.
       */
      constructor(options = {}) {
        super(options);
        this.credentials = {
          expiry_date: 1,
          refresh_token: "impersonated-placeholder"
        };
        this.sourceClient = options.sourceClient ?? new oauth2client_1.OAuth2Client();
        this.targetPrincipal = options.targetPrincipal ?? "";
        this.delegates = options.delegates ?? [];
        this.targetScopes = options.targetScopes ?? [];
        this.lifetime = options.lifetime ?? 3600;
        const usingExplicitUniverseDomain = !!(0, util_1.originalOrCamelOptions)(options).get("universe_domain");
        if (!usingExplicitUniverseDomain) {
          this.universeDomain = this.sourceClient.universeDomain;
        } else if (this.sourceClient.universeDomain !== this.universeDomain) {
          throw new RangeError(`Universe domain ${this.sourceClient.universeDomain} in source credentials does not match ${this.universeDomain} universe domain set for impersonated credentials.`);
        }
        this.endpoint = options.endpoint ?? `https://iamcredentials.${this.universeDomain}`;
      }
      /**
       * Signs some bytes.
       *
       * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob Reference Documentation}
       * @param blobToSign String to sign.
       *
       * @returns A {@link SignBlobResponse} denoting the keyID and signedBlob in base64 string
       */
      async sign(blobToSign) {
        await this.sourceClient.getAccessToken();
        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;
        const u = `${this.endpoint}/v1/${name}:signBlob`;
        const body = {
          delegates: this.delegates,
          payload: Buffer.from(blobToSign).toString("base64")
        };
        const res = await this.sourceClient.request({
          ..._Impersonated.RETRY_CONFIG,
          url: u,
          data: body,
          method: "POST"
        });
        return res.data;
      }
      /** The service account email to be impersonated. */
      getTargetPrincipal() {
        return this.targetPrincipal;
      }
      /**
       * Refreshes the access token.
       */
      async refreshToken() {
        try {
          await this.sourceClient.getAccessToken();
          const name = "projects/-/serviceAccounts/" + this.targetPrincipal;
          const u = `${this.endpoint}/v1/${name}:generateAccessToken`;
          const body = {
            delegates: this.delegates,
            scope: this.targetScopes,
            lifetime: this.lifetime + "s"
          };
          const res = await this.sourceClient.request({
            ..._Impersonated.RETRY_CONFIG,
            url: u,
            data: body,
            method: "POST"
          });
          const tokenResponse = res.data;
          this.credentials.access_token = tokenResponse.accessToken;
          this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);
          return {
            tokens: this.credentials,
            res
          };
        } catch (error) {
          if (!(error instanceof Error))
            throw error;
          let status = 0;
          let message = "";
          if (error instanceof gaxios_1.GaxiosError) {
            status = error?.response?.data?.error?.status;
            message = error?.response?.data?.error?.message;
          }
          if (status && message) {
            error.message = `${status}: unable to impersonate: ${message}`;
            throw error;
          } else {
            error.message = `unable to impersonate: ${error}`;
            throw error;
          }
        }
      }
      /**
       * Generates an OpenID Connect ID token for a service account.
       *
       * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken Reference Documentation}
       *
       * @param targetAudience the audience for the fetched ID token.
       * @param options the for the request
       * @return an OpenID Connect ID token
       */
      async fetchIdToken(targetAudience, options) {
        await this.sourceClient.getAccessToken();
        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;
        const u = `${this.endpoint}/v1/${name}:generateIdToken`;
        const body = {
          delegates: this.delegates,
          audience: targetAudience,
          includeEmail: options?.includeEmail ?? true,
          useEmailAzp: options?.includeEmail ?? true
        };
        const res = await this.sourceClient.request({
          ..._Impersonated.RETRY_CONFIG,
          url: u,
          data: body,
          method: "POST"
        });
        return res.data.token;
      }
    };
    exports2.Impersonated = Impersonated;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/oauth2common.js
var require_oauth2common = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/oauth2common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OAuthClientAuthHandler = void 0;
    exports2.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;
    var gaxios_1 = require_src2();
    var crypto_1 = require_crypto3();
    var METHODS_SUPPORTING_REQUEST_BODY = ["PUT", "POST", "PATCH"];
    var OAuthClientAuthHandler = class {
      #crypto = (0, crypto_1.createCrypto)();
      #clientAuthentication;
      transporter;
      /**
       * Instantiates an OAuth client authentication handler.
       * @param options The OAuth Client Auth Handler instance options. Passing an `ClientAuthentication` directly is **@DEPRECATED**.
       */
      constructor(options) {
        if (options && "clientId" in options) {
          this.#clientAuthentication = options;
          this.transporter = new gaxios_1.Gaxios();
        } else {
          this.#clientAuthentication = options?.clientAuthentication;
          this.transporter = options?.transporter || new gaxios_1.Gaxios();
        }
      }
      /**
       * Applies client authentication on the OAuth request's headers or POST
       * body but does not process the request.
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       * @param bearerToken The optional bearer token to use for authentication.
       *   When this is used, no client authentication credentials are needed.
       */
      applyClientAuthenticationOptions(opts, bearerToken) {
        opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);
        this.injectAuthenticatedHeaders(opts, bearerToken);
        if (!bearerToken) {
          this.injectAuthenticatedRequestBody(opts);
        }
      }
      /**
       * Applies client authentication on the request's header if either
       * basic authentication or bearer token authentication is selected.
       *
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       * @param bearerToken The optional bearer token to use for authentication.
       *   When this is used, no client authentication credentials are needed.
       */
      injectAuthenticatedHeaders(opts, bearerToken) {
        if (bearerToken) {
          opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers, {
            authorization: `Bearer ${bearerToken}`
          });
        } else if (this.#clientAuthentication?.confidentialClientType === "basic") {
          opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);
          const clientId = this.#clientAuthentication.clientId;
          const clientSecret = this.#clientAuthentication.clientSecret || "";
          const base64EncodedCreds = this.#crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);
          gaxios_1.Gaxios.mergeHeaders(opts.headers, {
            authorization: `Basic ${base64EncodedCreds}`
          });
        }
      }
      /**
       * Applies client authentication on the request's body if request-body
       * client authentication is selected.
       *
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       */
      injectAuthenticatedRequestBody(opts) {
        if (this.#clientAuthentication?.confidentialClientType === "request-body") {
          const method = (opts.method || "GET").toUpperCase();
          if (!METHODS_SUPPORTING_REQUEST_BODY.includes(method)) {
            throw new Error(`${method} HTTP method does not support ${this.#clientAuthentication.confidentialClientType} client authentication`);
          }
          const headers = new Headers(opts.headers);
          const contentType = headers.get("content-type");
          if (contentType?.startsWith("application/x-www-form-urlencoded") || opts.data instanceof URLSearchParams) {
            const data = new URLSearchParams(opts.data ?? "");
            data.append("client_id", this.#clientAuthentication.clientId);
            data.append("client_secret", this.#clientAuthentication.clientSecret || "");
            opts.data = data;
          } else if (contentType?.startsWith("application/json")) {
            opts.data = opts.data || {};
            Object.assign(opts.data, {
              client_id: this.#clientAuthentication.clientId,
              client_secret: this.#clientAuthentication.clientSecret || ""
            });
          } else {
            throw new Error(`${contentType} content-types are not supported with ${this.#clientAuthentication.confidentialClientType} client authentication`);
          }
        }
      }
      /**
       * Retry config for Auth-related requests.
       *
       * @remarks
       *
       * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}
       * config as some downstream APIs would prefer if customers explicitly enable retries,
       * such as GCS.
       */
      static get RETRY_CONFIG() {
        return {
          retry: true,
          retryConfig: {
            httpMethodsToRetry: ["GET", "PUT", "POST", "HEAD", "OPTIONS", "DELETE"]
          }
        };
      }
    };
    exports2.OAuthClientAuthHandler = OAuthClientAuthHandler;
    function getErrorFromOAuthErrorResponse(resp, err) {
      const errorCode = resp.error;
      const errorDescription = resp.error_description;
      const errorUri = resp.error_uri;
      let message = `Error code ${errorCode}`;
      if (typeof errorDescription !== "undefined") {
        message += `: ${errorDescription}`;
      }
      if (typeof errorUri !== "undefined") {
        message += ` - ${errorUri}`;
      }
      const newError = new Error(message);
      if (err) {
        const keys = Object.keys(err);
        if (err.stack) {
          keys.push("stack");
        }
        keys.forEach((key) => {
          if (key !== "message") {
            Object.defineProperty(newError, key, {
              value: err[key],
              writable: false,
              enumerable: true
            });
          }
        });
      }
      return newError;
    }
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/stscredentials.js
var require_stscredentials = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/stscredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StsCredentials = void 0;
    var gaxios_1 = require_src2();
    var authclient_1 = require_authclient();
    var oauth2common_1 = require_oauth2common();
    var util_1 = require_util2();
    var StsCredentials = class _StsCredentials extends oauth2common_1.OAuthClientAuthHandler {
      #tokenExchangeEndpoint;
      /**
       * Initializes an STS credentials instance.
       *
       * @param options The STS credentials instance options. Passing an `tokenExchangeEndpoint` directly is **@DEPRECATED**.
       * @param clientAuthentication **@DEPRECATED**. Provide a {@link StsCredentialsConstructionOptions `StsCredentialsConstructionOptions`} object in the first parameter instead.
       */
      constructor(options = {
        tokenExchangeEndpoint: ""
      }, clientAuthentication) {
        if (typeof options !== "object" || options instanceof URL) {
          options = {
            tokenExchangeEndpoint: options,
            clientAuthentication
          };
        }
        super(options);
        this.#tokenExchangeEndpoint = options.tokenExchangeEndpoint;
      }
      /**
       * Exchanges the provided token for another type of token based on the
       * rfc8693 spec.
       * @param stsCredentialsOptions The token exchange options used to populate
       *   the token exchange request.
       * @param additionalHeaders Optional additional headers to pass along the
       *   request.
       * @param options Optional additional GCP-specific non-spec defined options
       *   to send with the request.
       *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`
       * @return A promise that resolves with the token exchange response containing
       *   the requested token and its expiration time.
       */
      async exchangeToken(stsCredentialsOptions, headers, options) {
        const values = {
          grant_type: stsCredentialsOptions.grantType,
          resource: stsCredentialsOptions.resource,
          audience: stsCredentialsOptions.audience,
          scope: stsCredentialsOptions.scope?.join(" "),
          requested_token_type: stsCredentialsOptions.requestedTokenType,
          subject_token: stsCredentialsOptions.subjectToken,
          subject_token_type: stsCredentialsOptions.subjectTokenType,
          actor_token: stsCredentialsOptions.actingParty?.actorToken,
          actor_token_type: stsCredentialsOptions.actingParty?.actorTokenType,
          // Non-standard GCP-specific options.
          options: options && JSON.stringify(options)
        };
        const opts = {
          ..._StsCredentials.RETRY_CONFIG,
          url: this.#tokenExchangeEndpoint.toString(),
          method: "POST",
          headers,
          data: new URLSearchParams((0, util_1.removeUndefinedValuesInObject)(values))
        };
        authclient_1.AuthClient.setMethodName(opts, "exchangeToken");
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const stsSuccessfulResponse = response.data;
          stsSuccessfulResponse.res = response;
          return stsSuccessfulResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              // Preserve other fields from the original error.
              error
            );
          }
          throw error;
        }
      }
    };
    exports2.StsCredentials = StsCredentials;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/baseexternalclient.js
var require_baseexternalclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/baseexternalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseExternalAccountClient = exports2.CLOUD_RESOURCE_MANAGER = exports2.EXTERNAL_ACCOUNT_TYPE = exports2.EXPIRATION_TIME_OFFSET = void 0;
    var gaxios_1 = require_src2();
    var stream = require("stream");
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var util_1 = require_util2();
    var shared_cjs_1 = require_shared2();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var DEFAULT_OAUTH_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
    var DEFAULT_TOKEN_LIFESPAN = 3600;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    exports2.EXTERNAL_ACCOUNT_TYPE = "external_account";
    exports2.CLOUD_RESOURCE_MANAGER = "https://cloudresourcemanager.googleapis.com/v1/projects/";
    var WORKFORCE_AUDIENCE_PATTERN = "//iam\\.googleapis\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+";
    var DEFAULT_TOKEN_URL = "https://sts.{universeDomain}/v1/token";
    var BaseExternalAccountClient = class _BaseExternalAccountClient extends authclient_1.AuthClient {
      /**
       * OAuth scopes for the GCP access token to use. When not provided,
       * the default https://www.googleapis.com/auth/cloud-platform is
       * used.
       */
      scopes;
      projectNumber;
      audience;
      subjectTokenType;
      stsCredential;
      clientAuth;
      credentialSourceType;
      cachedAccessToken;
      serviceAccountImpersonationUrl;
      serviceAccountImpersonationLifetime;
      workforcePoolUserProject;
      configLifetimeRequested;
      tokenUrl;
      /**
       * @example
       * ```ts
       * new URL('https://cloudresourcemanager.googleapis.com/v1/projects/');
       * ```
       */
      cloudResourceManagerURL;
      supplierContext;
      /**
       * A pending access token request. Used for concurrent calls.
       */
      #pendingAccessToken = null;
      /**
       * Instantiate a BaseExternalAccountClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file. The camelCased options
       *   are aliases for the snake_cased options.
       */
      constructor(options) {
        super(options);
        const opts = (0, util_1.originalOrCamelOptions)(options);
        const type = opts.get("type");
        if (type && type !== exports2.EXTERNAL_ACCOUNT_TYPE) {
          throw new Error(`Expected "${exports2.EXTERNAL_ACCOUNT_TYPE}" type but received "${options.type}"`);
        }
        const clientId = opts.get("client_id");
        const clientSecret = opts.get("client_secret");
        this.tokenUrl = opts.get("token_url") ?? DEFAULT_TOKEN_URL.replace("{universeDomain}", this.universeDomain);
        const subjectTokenType = opts.get("subject_token_type");
        const workforcePoolUserProject = opts.get("workforce_pool_user_project");
        const serviceAccountImpersonationUrl = opts.get("service_account_impersonation_url");
        const serviceAccountImpersonation = opts.get("service_account_impersonation");
        const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get("token_lifetime_seconds");
        this.cloudResourceManagerURL = new URL(opts.get("cloud_resource_manager_url") || `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);
        if (clientId) {
          this.clientAuth = {
            confidentialClientType: "basic",
            clientId,
            clientSecret
          };
        }
        this.stsCredential = new sts.StsCredentials({
          tokenExchangeEndpoint: this.tokenUrl,
          clientAuthentication: this.clientAuth
        });
        this.scopes = opts.get("scopes") || [DEFAULT_OAUTH_SCOPE];
        this.cachedAccessToken = null;
        this.audience = opts.get("audience");
        this.subjectTokenType = subjectTokenType;
        this.workforcePoolUserProject = workforcePoolUserProject;
        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);
        if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {
          throw new Error("workforcePoolUserProject should not be set for non-workforce pool credentials.");
        }
        this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;
        this.serviceAccountImpersonationLifetime = serviceAccountImpersonationLifetime;
        if (this.serviceAccountImpersonationLifetime) {
          this.configLifetimeRequested = true;
        } else {
          this.configLifetimeRequested = false;
          this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;
        }
        this.projectNumber = this.getProjectNumber(this.audience);
        this.supplierContext = {
          audience: this.audience,
          subjectTokenType: this.subjectTokenType,
          transporter: this.transporter
        };
      }
      /** The service account email to be impersonated, if available. */
      getServiceAccountEmail() {
        if (this.serviceAccountImpersonationUrl) {
          if (this.serviceAccountImpersonationUrl.length > 256) {
            throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);
          }
          const re = /serviceAccounts\/(?<email>[^:]+):generateAccessToken$/;
          const result = re.exec(this.serviceAccountImpersonationUrl);
          return result?.groups?.email || null;
        }
        return null;
      }
      /**
       * Provides a mechanism to inject GCP access tokens directly.
       * When the provided credential expires, a new credential, using the
       * external account options, is retrieved.
       * @param credentials The Credentials object to set on the current client.
       */
      setCredentials(credentials) {
        super.setCredentials(credentials);
        this.cachedAccessToken = credentials;
      }
      /**
       * @return A promise that resolves with the current GCP access token
       *   response. If the current credential is expired, a new one is retrieved.
       */
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      /**
       * The main authentication interface. It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * The result has the form:
       * { authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = new Headers({
          authorization: `Bearer ${accessTokenResponse.token}`
        });
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r2) => callback(null, r2), (e2) => {
            return callback(e2, e2.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * @return A promise that resolves with the project ID corresponding to the
       *   current workload identity pool or current workforce pool if
       *   determinable. For workforce pool credential, it returns the project ID
       *   corresponding to the workforcePoolUserProject.
       *   This is introduced to match the current pattern of using the Auth
       *   library:
       *   const projectId = await auth.getProjectId();
       *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;
       *   const res = await client.request({ url });
       *   The resource may not have permission
       *   (resourcemanager.projects.get) to call this API or the required
       *   scopes may not be selected:
       *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes
       */
      async getProjectId() {
        const projectNumber = this.projectNumber || this.workforcePoolUserProject;
        if (this.projectId) {
          return this.projectId;
        } else if (projectNumber) {
          const headers = await this.getRequestHeaders();
          const opts = {
            ..._BaseExternalAccountClient.RETRY_CONFIG,
            headers,
            url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`
          };
          authclient_1.AuthClient.setMethodName(opts, "getProjectId");
          const response = await this.transporter.request(opts);
          this.projectId = response.data.projectId;
          return this.projectId;
        }
        return null;
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, reAuthRetried = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);
          this.addUserProjectAndAuthHeaders(opts.headers, requestHeaders);
          response = await this.transporter.request(opts);
        } catch (e2) {
          const res = e2.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e2;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * External credentials are exchanged for GCP access tokens via the token
       * exchange endpoint and other settings provided in the client options
       * object.
       * If the service_account_impersonation_url is provided, an additional
       * step to exchange the external account GCP access token for a service
       * account impersonated token is performed.
       * @return A promise that resolves with the fresh GCP access tokens.
       */
      async refreshAccessTokenAsync() {
        this.#pendingAccessToken = this.#pendingAccessToken || this.#internalRefreshAccessTokenAsync();
        try {
          return await this.#pendingAccessToken;
        } finally {
          this.#pendingAccessToken = null;
        }
      }
      async #internalRefreshAccessTokenAsync() {
        const subjectToken = await this.retrieveSubjectToken();
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          audience: this.audience,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: this.subjectTokenType,
          // generateAccessToken requires the provided access token to have
          // scopes:
          // https://www.googleapis.com/auth/iam or
          // https://www.googleapis.com/auth/cloud-platform
          // The new service account access token scopes will match the user
          // provided ones.
          scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()
        };
        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? { userProject: this.workforcePoolUserProject } : void 0;
        const additionalHeaders = new Headers({
          "x-goog-api-client": this.getMetricsHeaderValue()
        });
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);
        if (this.serviceAccountImpersonationUrl) {
          this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);
        } else if (stsResponse.expires_in) {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            expiry_date: (/* @__PURE__ */ new Date()).getTime() + stsResponse.expires_in * 1e3,
            res: stsResponse.res
          };
        } else {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            res: stsResponse.res
          };
        }
        this.credentials = {};
        Object.assign(this.credentials, this.cachedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedAccessToken.expiry_date,
          access_token: this.cachedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedAccessToken;
      }
      /**
       * Returns the workload identity pool project number if it is determinable
       * from the audience resource name.
       * @param audience The STS audience used to determine the project number.
       * @return The project number associated with the workload identity pool, if
       *   this can be determined from the STS audience field. Otherwise, null is
       *   returned.
       */
      getProjectNumber(audience) {
        const match = audience.match(/\/projects\/([^/]+)/);
        if (!match) {
          return null;
        }
        return match[1];
      }
      /**
       * Exchanges an external account GCP access token for a service
       * account impersonated access token using iamcredentials
       * GenerateAccessToken API.
       * @param token The access token to exchange for a service account access
       *   token.
       * @return A promise that resolves with the service account impersonated
       *   credentials response.
       */
      async getImpersonatedAccessToken(token) {
        const opts = {
          ..._BaseExternalAccountClient.RETRY_CONFIG,
          url: this.serviceAccountImpersonationUrl,
          method: "POST",
          headers: {
            "content-type": "application/json",
            authorization: `Bearer ${token}`
          },
          data: {
            scope: this.getScopesArray(),
            lifetime: this.serviceAccountImpersonationLifetime + "s"
          }
        };
        authclient_1.AuthClient.setMethodName(opts, "getImpersonatedAccessToken");
        const response = await this.transporter.request(opts);
        const successResponse = response.data;
        return {
          access_token: successResponse.accessToken,
          // Convert from ISO format to timestamp.
          expiry_date: new Date(successResponse.expireTime).getTime(),
          res: response
        };
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param accessToken The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(accessToken) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
      /**
       * @return The list of scopes for the requested GCP access token.
       */
      getScopesArray() {
        if (typeof this.scopes === "string") {
          return [this.scopes];
        }
        return this.scopes || [DEFAULT_OAUTH_SCOPE];
      }
      getMetricsHeaderValue() {
        const nodeVersion = process.version.replace(/^v/, "");
        const saImpersonation = this.serviceAccountImpersonationUrl !== void 0;
        const credentialSourceType = this.credentialSourceType ? this.credentialSourceType : "unknown";
        return `gl-node/${nodeVersion} auth/${shared_cjs_1.pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;
      }
      getTokenUrl() {
        return this.tokenUrl;
      }
    };
    exports2.BaseExternalAccountClient = BaseExternalAccountClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js
var require_filesubjecttokensupplier = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileSubjectTokenSupplier = void 0;
    var util_1 = require("util");
    var fs2 = require("fs");
    var readFile = (0, util_1.promisify)(fs2.readFile ?? (() => {
    }));
    var realpath = (0, util_1.promisify)(fs2.realpath ?? (() => {
    }));
    var lstat = (0, util_1.promisify)(fs2.lstat ?? (() => {
    }));
    var FileSubjectTokenSupplier = class {
      filePath;
      formatType;
      subjectTokenFieldName;
      /**
       * Instantiates a new file based subject token supplier.
       * @param opts The file subject token supplier options to build the supplier
       *   with.
       */
      constructor(opts) {
        this.filePath = opts.filePath;
        this.formatType = opts.formatType;
        this.subjectTokenFieldName = opts.subjectTokenFieldName;
      }
      /**
       * Returns the subject token stored at the file specified in the constructor.
       * @param context {@link ExternalAccountSupplierContext} from the calling
       *   {@link IdentityPoolClient}, contains the requested audience and subject
       *   token type for the external account identity. Not used.
       */
      async getSubjectToken() {
        let parsedFilePath = this.filePath;
        try {
          parsedFilePath = await realpath(parsedFilePath);
          if (!(await lstat(parsedFilePath)).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        let subjectToken;
        const rawText = await readFile(parsedFilePath, { encoding: "utf8" });
        if (this.formatType === "text") {
          subjectToken = rawText;
        } else if (this.formatType === "json" && this.subjectTokenFieldName) {
          const json = JSON.parse(rawText);
          subjectToken = json[this.subjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source file");
        }
        return subjectToken;
      }
    };
    exports2.FileSubjectTokenSupplier = FileSubjectTokenSupplier;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js
var require_urlsubjecttokensupplier = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UrlSubjectTokenSupplier = void 0;
    var authclient_1 = require_authclient();
    var UrlSubjectTokenSupplier = class {
      url;
      headers;
      formatType;
      subjectTokenFieldName;
      additionalGaxiosOptions;
      /**
       * Instantiates a URL subject token supplier.
       * @param opts The URL subject token supplier options to build the supplier with.
       */
      constructor(opts) {
        this.url = opts.url;
        this.formatType = opts.formatType;
        this.subjectTokenFieldName = opts.subjectTokenFieldName;
        this.headers = opts.headers;
        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;
      }
      /**
       * Sends a GET request to the URL provided in the constructor and resolves
       * with the returned external subject token.
       * @param context {@link ExternalAccountSupplierContext} from the calling
       *   {@link IdentityPoolClient}, contains the requested audience and subject
       *   token type for the external account identity. Not used.
       */
      async getSubjectToken(context) {
        const opts = {
          ...this.additionalGaxiosOptions,
          url: this.url,
          method: "GET",
          headers: this.headers
        };
        authclient_1.AuthClient.setMethodName(opts, "getSubjectToken");
        let subjectToken;
        if (this.formatType === "text") {
          const response = await context.transporter.request(opts);
          subjectToken = response.data;
        } else if (this.formatType === "json" && this.subjectTokenFieldName) {
          const response = await context.transporter.request(opts);
          subjectToken = response.data[this.subjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source URL");
        }
        return subjectToken;
      }
    };
    exports2.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/certificatesubjecttokensupplier.js
var require_certificatesubjecttokensupplier = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/certificatesubjecttokensupplier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CertificateSubjectTokenSupplier = exports2.InvalidConfigurationError = exports2.CertificateSourceUnavailableError = exports2.CERTIFICATE_CONFIGURATION_ENV_VARIABLE = void 0;
    var util_1 = require_util2();
    var fs2 = require("fs");
    var crypto_1 = require("crypto");
    var https2 = require("https");
    exports2.CERTIFICATE_CONFIGURATION_ENV_VARIABLE = "GOOGLE_API_CERTIFICATE_CONFIG";
    var CertificateSourceUnavailableError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "CertificateSourceUnavailableError";
      }
    };
    exports2.CertificateSourceUnavailableError = CertificateSourceUnavailableError;
    var InvalidConfigurationError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InvalidConfigurationError";
      }
    };
    exports2.InvalidConfigurationError = InvalidConfigurationError;
    var CertificateSubjectTokenSupplier = class {
      certificateConfigPath;
      trustChainPath;
      cert;
      key;
      /**
       * Initializes a new instance of the CertificateSubjectTokenSupplier.
       * @param opts The configuration options for the supplier.
       */
      constructor(opts) {
        if (!opts.useDefaultCertificateConfig && !opts.certificateConfigLocation) {
          throw new InvalidConfigurationError("Either `useDefaultCertificateConfig` must be true or a `certificateConfigLocation` must be provided.");
        }
        if (opts.useDefaultCertificateConfig && opts.certificateConfigLocation) {
          throw new InvalidConfigurationError("Both `useDefaultCertificateConfig` and `certificateConfigLocation` cannot be provided.");
        }
        this.trustChainPath = opts.trustChainPath;
        this.certificateConfigPath = opts.certificateConfigLocation ?? "";
      }
      /**
       * Creates an HTTPS agent configured with the client certificate and private key for mTLS.
       * @returns An mTLS-configured https.Agent.
       */
      async createMtlsHttpsAgent() {
        if (!this.key || !this.cert) {
          throw new InvalidConfigurationError("Cannot create mTLS Agent with missing certificate or key");
        }
        return new https2.Agent({ key: this.key, cert: this.cert });
      }
      /**
       * Constructs the subject token, which is the base64-encoded certificate chain.
       * @returns A promise that resolves with the subject token.
       */
      async getSubjectToken() {
        this.certificateConfigPath = await this.#resolveCertificateConfigFilePath();
        const { certPath, keyPath } = await this.#getCertAndKeyPaths();
        ({ cert: this.cert, key: this.key } = await this.#getKeyAndCert(certPath, keyPath));
        return await this.#processChainFromPaths(this.cert);
      }
      /**
       * Resolves the absolute path to the certificate configuration file
       * by checking the "certificate_config_location" provided in the ADC file,
       * or the "GOOGLE_API_CERTIFICATE_CONFIG" environment variable
       * or in the default gcloud path.
       * @param overridePath An optional path to check first.
       * @returns The resolved file path.
       */
      async #resolveCertificateConfigFilePath() {
        const overridePath = this.certificateConfigPath;
        if (overridePath) {
          if (await (0, util_1.isValidFile)(overridePath)) {
            return overridePath;
          }
          throw new CertificateSourceUnavailableError(`Provided certificate config path is invalid: ${overridePath}`);
        }
        const envPath = process.env[exports2.CERTIFICATE_CONFIGURATION_ENV_VARIABLE];
        if (envPath) {
          if (await (0, util_1.isValidFile)(envPath)) {
            return envPath;
          }
          throw new CertificateSourceUnavailableError(`Path from environment variable "${exports2.CERTIFICATE_CONFIGURATION_ENV_VARIABLE}" is invalid: ${envPath}`);
        }
        const wellKnownPath = (0, util_1.getWellKnownCertificateConfigFileLocation)();
        if (await (0, util_1.isValidFile)(wellKnownPath)) {
          return wellKnownPath;
        }
        throw new CertificateSourceUnavailableError(`Could not find certificate configuration file. Searched override path, the "${exports2.CERTIFICATE_CONFIGURATION_ENV_VARIABLE}" env var, and the gcloud path (${wellKnownPath}).`);
      }
      /**
       * Reads and parses the certificate config JSON file to extract the certificate and key paths.
       * @returns An object containing the certificate and key paths.
       */
      async #getCertAndKeyPaths() {
        const configPath = this.certificateConfigPath;
        let fileContents;
        try {
          fileContents = await fs2.promises.readFile(configPath, "utf8");
        } catch (err) {
          throw new CertificateSourceUnavailableError(`Failed to read certificate config file at: ${configPath}`);
        }
        try {
          const config = JSON.parse(fileContents);
          const certPath = config?.cert_configs?.workload?.cert_path;
          const keyPath = config?.cert_configs?.workload?.key_path;
          if (!certPath || !keyPath) {
            throw new InvalidConfigurationError(`Certificate config file (${configPath}) is missing required "cert_path" or "key_path" in the workload config.`);
          }
          return { certPath, keyPath };
        } catch (e2) {
          if (e2 instanceof InvalidConfigurationError)
            throw e2;
          throw new InvalidConfigurationError(`Failed to parse certificate config from ${configPath}: ${e2.message}`);
        }
      }
      /**
       * Reads and parses the cert and key files get their content and check valid format.
       * @returns An object containing the cert content and key content in buffer format.
       */
      async #getKeyAndCert(certPath, keyPath) {
        let cert, key;
        try {
          cert = await fs2.promises.readFile(certPath);
          new crypto_1.X509Certificate(cert);
        } catch (err) {
          const message = err instanceof Error ? err.message : String(err);
          throw new CertificateSourceUnavailableError(`Failed to read certificate file at ${certPath}: ${message}`);
        }
        try {
          key = await fs2.promises.readFile(keyPath);
          (0, crypto_1.createPrivateKey)(key);
        } catch (err) {
          const message = err instanceof Error ? err.message : String(err);
          throw new CertificateSourceUnavailableError(`Failed to read private key file at ${keyPath}: ${message}`);
        }
        return { cert, key };
      }
      /**
       * Reads the leaf certificate and trust chain, combines them,
       * and returns a JSON array of base64-encoded certificates.
       * @returns A stringified JSON array of the certificate chain.
       */
      async #processChainFromPaths(leafCertBuffer) {
        const leafCert = new crypto_1.X509Certificate(leafCertBuffer);
        if (!this.trustChainPath) {
          return JSON.stringify([leafCert.raw.toString("base64")]);
        }
        try {
          const chainPems = await fs2.promises.readFile(this.trustChainPath, "utf8");
          const pemBlocks = chainPems.match(/-----BEGIN CERTIFICATE-----[^-]+-----END CERTIFICATE-----/g) ?? [];
          const chainCerts = pemBlocks.map((pem, index) => {
            try {
              return new crypto_1.X509Certificate(pem);
            } catch (err) {
              const message = err instanceof Error ? err.message : String(err);
              throw new InvalidConfigurationError(`Failed to parse certificate at index ${index} in trust chain file ${this.trustChainPath}: ${message}`);
            }
          });
          const leafIndex = chainCerts.findIndex((chainCert) => leafCert.raw.equals(chainCert.raw));
          let finalChain;
          if (leafIndex === -1) {
            finalChain = [leafCert, ...chainCerts];
          } else if (leafIndex === 0) {
            finalChain = chainCerts;
          } else {
            throw new InvalidConfigurationError(`Leaf certificate exists in the trust chain but is not the first entry (found at index ${leafIndex}).`);
          }
          return JSON.stringify(finalChain.map((cert) => cert.raw.toString("base64")));
        } catch (err) {
          if (err instanceof InvalidConfigurationError)
            throw err;
          const message = err instanceof Error ? err.message : String(err);
          throw new CertificateSourceUnavailableError(`Failed to process certificate chain from ${this.trustChainPath}: ${message}`);
        }
      }
    };
    exports2.CertificateSubjectTokenSupplier = CertificateSubjectTokenSupplier;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/identitypoolclient.js
var require_identitypoolclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/identitypoolclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdentityPoolClient = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var util_1 = require_util2();
    var filesubjecttokensupplier_1 = require_filesubjecttokensupplier();
    var urlsubjecttokensupplier_1 = require_urlsubjecttokensupplier();
    var certificatesubjecttokensupplier_1 = require_certificatesubjecttokensupplier();
    var stscredentials_1 = require_stscredentials();
    var gaxios_1 = require_src2();
    var IdentityPoolClient = class _IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {
      subjectTokenSupplier;
      /**
       * Instantiate an IdentityPoolClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid file-sourced or
       * url-sourced credential or a workforce pool user project is provided
       * with a non workforce audience.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file. The camelCased options
       *   are aliases for the snake_cased options.
       */
      constructor(options) {
        super(options);
        const opts = (0, util_1.originalOrCamelOptions)(options);
        const credentialSource = opts.get("credential_source");
        const subjectTokenSupplier = opts.get("subject_token_supplier");
        if (!credentialSource && !subjectTokenSupplier) {
          throw new Error("A credential source or subject token supplier must be specified.");
        }
        if (credentialSource && subjectTokenSupplier) {
          throw new Error("Only one of credential source or subject token supplier can be specified.");
        }
        if (subjectTokenSupplier) {
          this.subjectTokenSupplier = subjectTokenSupplier;
          this.credentialSourceType = "programmatic";
        } else {
          const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);
          const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get("format"));
          const formatType = formatOpts.get("type") || "text";
          const formatSubjectTokenFieldName = formatOpts.get("subject_token_field_name");
          if (formatType !== "json" && formatType !== "text") {
            throw new Error(`Invalid credential_source format "${formatType}"`);
          }
          if (formatType === "json" && !formatSubjectTokenFieldName) {
            throw new Error("Missing subject_token_field_name for JSON credential_source format");
          }
          const file = credentialSourceOpts.get("file");
          const url = credentialSourceOpts.get("url");
          const certificate = credentialSourceOpts.get("certificate");
          const headers = credentialSourceOpts.get("headers");
          if (file && url || url && certificate || file && certificate) {
            throw new Error('No valid Identity Pool "credential_source" provided, must be either file, url, or certificate.');
          } else if (file) {
            this.credentialSourceType = "file";
            this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({
              filePath: file,
              formatType,
              subjectTokenFieldName: formatSubjectTokenFieldName
            });
          } else if (url) {
            this.credentialSourceType = "url";
            this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({
              url,
              formatType,
              subjectTokenFieldName: formatSubjectTokenFieldName,
              headers,
              additionalGaxiosOptions: _IdentityPoolClient.RETRY_CONFIG
            });
          } else if (certificate) {
            this.credentialSourceType = "certificate";
            const certificateSubjecttokensupplier = new certificatesubjecttokensupplier_1.CertificateSubjectTokenSupplier({
              useDefaultCertificateConfig: certificate.use_default_certificate_config,
              certificateConfigLocation: certificate.certificate_config_location,
              trustChainPath: certificate.trust_chain_path
            });
            this.subjectTokenSupplier = certificateSubjecttokensupplier;
          } else {
            throw new Error('No valid Identity Pool "credential_source" provided, must be either file, url, or certificate.');
          }
        }
      }
      /**
       * Triggered when a external subject token is needed to be exchanged for a GCP
       * access token via GCP STS endpoint. Gets a subject token by calling
       * the configured {@link SubjectTokenSupplier}
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        const subjectToken = await this.subjectTokenSupplier.getSubjectToken(this.supplierContext);
        if (this.subjectTokenSupplier instanceof certificatesubjecttokensupplier_1.CertificateSubjectTokenSupplier) {
          const mtlsAgent = await this.subjectTokenSupplier.createMtlsHttpsAgent();
          this.stsCredential = new stscredentials_1.StsCredentials({
            tokenExchangeEndpoint: this.getTokenUrl(),
            clientAuthentication: this.clientAuth,
            transporter: new gaxios_1.Gaxios({ agent: mtlsAgent })
          });
          this.transporter = new gaxios_1.Gaxios({
            ...this.transporter.defaults || {},
            agent: mtlsAgent
          });
        }
        return subjectToken;
      }
    };
    exports2.IdentityPoolClient = IdentityPoolClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js
var require_awsrequestsigner = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsRequestSigner = void 0;
    var gaxios_1 = require_src2();
    var crypto_1 = require_crypto3();
    var AWS_ALGORITHM = "AWS4-HMAC-SHA256";
    var AWS_REQUEST_TYPE = "aws4_request";
    var AwsRequestSigner = class {
      getCredentials;
      region;
      crypto;
      /**
       * Instantiates an AWS API request signer used to send authenticated signed
       * requests to AWS APIs based on the AWS Signature Version 4 signing process.
       * This also provides a mechanism to generate the signed request without
       * sending it.
       * @param getCredentials A mechanism to retrieve AWS security credentials
       *   when needed.
       * @param region The AWS region to use.
       */
      constructor(getCredentials, region) {
        this.getCredentials = getCredentials;
        this.region = region;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      /**
       * Generates the signed request for the provided HTTP request for calling
       * an AWS API. This follows the steps described at:
       * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html
       * @param amzOptions The AWS request options that need to be signed.
       * @return A promise that resolves with the GaxiosOptions containing the
       *   signed HTTP request parameters.
       */
      async getRequestOptions(amzOptions) {
        if (!amzOptions.url) {
          throw new RangeError('"url" is required in "amzOptions"');
        }
        const requestPayloadData = typeof amzOptions.data === "object" ? JSON.stringify(amzOptions.data) : amzOptions.data;
        const url = amzOptions.url;
        const method = amzOptions.method || "GET";
        const requestPayload = amzOptions.body || requestPayloadData;
        const additionalAmzHeaders = amzOptions.headers;
        const awsSecurityCredentials = await this.getCredentials();
        const uri = new URL(url);
        if (typeof requestPayload !== "string" && requestPayload !== void 0) {
          throw new TypeError(`'requestPayload' is expected to be a string if provided. Got: ${requestPayload}`);
        }
        const headerMap = await generateAuthenticationHeaderMap({
          crypto: this.crypto,
          host: uri.host,
          canonicalUri: uri.pathname,
          canonicalQuerystring: uri.search.slice(1),
          method,
          region: this.region,
          securityCredentials: awsSecurityCredentials,
          requestPayload,
          additionalAmzHeaders
        });
        const headers = gaxios_1.Gaxios.mergeHeaders(
          // Add x-amz-date if available.
          headerMap.amzDate ? { "x-amz-date": headerMap.amzDate } : {},
          {
            authorization: headerMap.authorizationHeader,
            host: uri.host
          },
          additionalAmzHeaders || {}
        );
        if (awsSecurityCredentials.token) {
          gaxios_1.Gaxios.mergeHeaders(headers, {
            "x-amz-security-token": awsSecurityCredentials.token
          });
        }
        const awsSignedReq = {
          url,
          method,
          headers
        };
        if (requestPayload !== void 0) {
          awsSignedReq.body = requestPayload;
        }
        return awsSignedReq;
      }
    };
    exports2.AwsRequestSigner = AwsRequestSigner;
    async function sign(crypto2, key, msg) {
      return await crypto2.signWithHmacSha256(key, msg);
    }
    async function getSigningKey(crypto2, key, dateStamp, region, serviceName) {
      const kDate = await sign(crypto2, `AWS4${key}`, dateStamp);
      const kRegion = await sign(crypto2, kDate, region);
      const kService = await sign(crypto2, kRegion, serviceName);
      const kSigning = await sign(crypto2, kService, "aws4_request");
      return kSigning;
    }
    async function generateAuthenticationHeaderMap(options) {
      const additionalAmzHeaders = gaxios_1.Gaxios.mergeHeaders(options.additionalAmzHeaders);
      const requestPayload = options.requestPayload || "";
      const serviceName = options.host.split(".")[0];
      const now = /* @__PURE__ */ new Date();
      const amzDate = now.toISOString().replace(/[-:]/g, "").replace(/\.[0-9]+/, "");
      const dateStamp = now.toISOString().replace(/[-]/g, "").replace(/T.*/, "");
      if (options.securityCredentials.token) {
        additionalAmzHeaders.set("x-amz-security-token", options.securityCredentials.token);
      }
      const amzHeaders = gaxios_1.Gaxios.mergeHeaders(
        {
          host: options.host
        },
        // Previously the date was not fixed with x-amz- and could be provided manually.
        // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req
        additionalAmzHeaders.has("date") ? {} : { "x-amz-date": amzDate },
        additionalAmzHeaders
      );
      let canonicalHeaders = "";
      const signedHeadersList = [
        ...amzHeaders.keys()
      ].sort();
      signedHeadersList.forEach((key) => {
        canonicalHeaders += `${key}:${amzHeaders.get(key)}
`;
      });
      const signedHeaders = signedHeadersList.join(";");
      const payloadHash = await options.crypto.sha256DigestHex(requestPayload);
      const canonicalRequest = `${options.method.toUpperCase()}
${options.canonicalUri}
${options.canonicalQuerystring}
${canonicalHeaders}
${signedHeaders}
${payloadHash}`;
      const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;
      const stringToSign = `${AWS_ALGORITHM}
${amzDate}
${credentialScope}
` + await options.crypto.sha256DigestHex(canonicalRequest);
      const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);
      const signature = await sign(options.crypto, signingKey, stringToSign);
      const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;
      return {
        // Do not return x-amz-date if date is available.
        amzDate: additionalAmzHeaders.has("date") ? void 0 : amzDate,
        authorizationHeader,
        canonicalQuerystring: options.canonicalQuerystring
      };
    }
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js
var require_defaultawssecuritycredentialssupplier = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultAwsSecurityCredentialsSupplier = void 0;
    var authclient_1 = require_authclient();
    var DefaultAwsSecurityCredentialsSupplier = class {
      regionUrl;
      securityCredentialsUrl;
      imdsV2SessionTokenUrl;
      additionalGaxiosOptions;
      /**
       * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information
       * from the credential_source stored in the ADC file.
       * @param opts The default aws security credentials supplier options object to
       *   build the supplier with.
       */
      constructor(opts) {
        this.regionUrl = opts.regionUrl;
        this.securityCredentialsUrl = opts.securityCredentialsUrl;
        this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;
        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;
      }
      /**
       * Returns the active AWS region. This first checks to see if the region
       * is available as an environment variable. If it is not, then the supplier
       * will call the region URL.
       * @param context {@link ExternalAccountSupplierContext} from the calling
       *   {@link AwsClient}, contains the requested audience and subject token type
       *   for the external account identity.
       * @return A promise that resolves with the AWS region string.
       */
      async getAwsRegion(context) {
        if (this.#regionFromEnv) {
          return this.#regionFromEnv;
        }
        const metadataHeaders = new Headers();
        if (!this.#regionFromEnv && this.imdsV2SessionTokenUrl) {
          metadataHeaders.set("x-aws-ec2-metadata-token", await this.#getImdsV2SessionToken(context.transporter));
        }
        if (!this.regionUrl) {
          throw new RangeError('Unable to determine AWS region due to missing "options.credential_source.region_url"');
        }
        const opts = {
          ...this.additionalGaxiosOptions,
          url: this.regionUrl,
          method: "GET",
          headers: metadataHeaders
        };
        authclient_1.AuthClient.setMethodName(opts, "getAwsRegion");
        const response = await context.transporter.request(opts);
        return response.data.substr(0, response.data.length - 1);
      }
      /**
       * Returns AWS security credentials. This first checks to see if the credentials
       * is available as environment variables. If it is not, then the supplier
       * will call the security credentials URL.
       * @param context {@link ExternalAccountSupplierContext} from the calling
       *   {@link AwsClient}, contains the requested audience and subject token type
       *   for the external account identity.
       * @return A promise that resolves with the AWS security credentials.
       */
      async getAwsSecurityCredentials(context) {
        if (this.#securityCredentialsFromEnv) {
          return this.#securityCredentialsFromEnv;
        }
        const metadataHeaders = new Headers();
        if (this.imdsV2SessionTokenUrl) {
          metadataHeaders.set("x-aws-ec2-metadata-token", await this.#getImdsV2SessionToken(context.transporter));
        }
        const roleName = await this.#getAwsRoleName(metadataHeaders, context.transporter);
        const awsCreds = await this.#retrieveAwsSecurityCredentials(roleName, metadataHeaders, context.transporter);
        return {
          accessKeyId: awsCreds.AccessKeyId,
          secretAccessKey: awsCreds.SecretAccessKey,
          token: awsCreds.Token
        };
      }
      /**
       * @param transporter The transporter to use for requests.
       * @return A promise that resolves with the IMDSv2 Session Token.
       */
      async #getImdsV2SessionToken(transporter) {
        const opts = {
          ...this.additionalGaxiosOptions,
          url: this.imdsV2SessionTokenUrl,
          method: "PUT",
          headers: { "x-aws-ec2-metadata-token-ttl-seconds": "300" }
        };
        authclient_1.AuthClient.setMethodName(opts, "#getImdsV2SessionToken");
        const response = await transporter.request(opts);
        return response.data;
      }
      /**
       * @param headers The headers to be used in the metadata request.
       * @param transporter The transporter to use for requests.
       * @return A promise that resolves with the assigned role to the current
       *   AWS VM. This is needed for calling the security-credentials endpoint.
       */
      async #getAwsRoleName(headers, transporter) {
        if (!this.securityCredentialsUrl) {
          throw new Error('Unable to determine AWS role name due to missing "options.credential_source.url"');
        }
        const opts = {
          ...this.additionalGaxiosOptions,
          url: this.securityCredentialsUrl,
          method: "GET",
          headers
        };
        authclient_1.AuthClient.setMethodName(opts, "#getAwsRoleName");
        const response = await transporter.request(opts);
        return response.data;
      }
      /**
       * Retrieves the temporary AWS credentials by calling the security-credentials
       * endpoint as specified in the `credential_source` object.
       * @param roleName The role attached to the current VM.
       * @param headers The headers to be used in the metadata request.
       * @param transporter The transporter to use for requests.
       * @return A promise that resolves with the temporary AWS credentials
       *   needed for creating the GetCallerIdentity signed request.
       */
      async #retrieveAwsSecurityCredentials(roleName, headers, transporter) {
        const opts = {
          ...this.additionalGaxiosOptions,
          url: `${this.securityCredentialsUrl}/${roleName}`,
          headers
        };
        authclient_1.AuthClient.setMethodName(opts, "#retrieveAwsSecurityCredentials");
        const response = await transporter.request(opts);
        return response.data;
      }
      get #regionFromEnv() {
        return process.env["AWS_REGION"] || process.env["AWS_DEFAULT_REGION"] || null;
      }
      get #securityCredentialsFromEnv() {
        if (process.env["AWS_ACCESS_KEY_ID"] && process.env["AWS_SECRET_ACCESS_KEY"]) {
          return {
            accessKeyId: process.env["AWS_ACCESS_KEY_ID"],
            secretAccessKey: process.env["AWS_SECRET_ACCESS_KEY"],
            token: process.env["AWS_SESSION_TOKEN"]
          };
        }
        return null;
      }
    };
    exports2.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/awsclient.js
var require_awsclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/awsclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsClient = void 0;
    var awsrequestsigner_1 = require_awsrequestsigner();
    var baseexternalclient_1 = require_baseexternalclient();
    var defaultawssecuritycredentialssupplier_1 = require_defaultawssecuritycredentialssupplier();
    var util_1 = require_util2();
    var gaxios_1 = require_src2();
    var AwsClient = class _AwsClient extends baseexternalclient_1.BaseExternalAccountClient {
      environmentId;
      awsSecurityCredentialsSupplier;
      regionalCredVerificationUrl;
      awsRequestSigner;
      region;
      static #DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = "https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15";
      /**
       * @deprecated AWS client no validates the EC2 metadata address.
       **/
      static AWS_EC2_METADATA_IPV4_ADDRESS = "169.254.169.254";
      /**
       * @deprecated AWS client no validates the EC2 metadata address.
       **/
      static AWS_EC2_METADATA_IPV6_ADDRESS = "fd00:ec2::254";
      /**
       * Instantiates an AwsClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid AWS credential.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       */
      constructor(options) {
        super(options);
        const opts = (0, util_1.originalOrCamelOptions)(options);
        const credentialSource = opts.get("credential_source");
        const awsSecurityCredentialsSupplier = opts.get("aws_security_credentials_supplier");
        if (!credentialSource && !awsSecurityCredentialsSupplier) {
          throw new Error("A credential source or AWS security credentials supplier must be specified.");
        }
        if (credentialSource && awsSecurityCredentialsSupplier) {
          throw new Error("Only one of credential source or AWS security credentials supplier can be specified.");
        }
        if (awsSecurityCredentialsSupplier) {
          this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;
          this.regionalCredVerificationUrl = _AwsClient.#DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;
          this.credentialSourceType = "programmatic";
        } else {
          const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);
          this.environmentId = credentialSourceOpts.get("environment_id");
          const regionUrl = credentialSourceOpts.get("region_url");
          const securityCredentialsUrl = credentialSourceOpts.get("url");
          const imdsV2SessionTokenUrl = credentialSourceOpts.get("imdsv2_session_token_url");
          this.awsSecurityCredentialsSupplier = new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({
            regionUrl,
            securityCredentialsUrl,
            imdsV2SessionTokenUrl
          });
          this.regionalCredVerificationUrl = credentialSourceOpts.get("regional_cred_verification_url");
          this.credentialSourceType = "aws";
          this.validateEnvironmentId();
        }
        this.awsRequestSigner = null;
        this.region = "";
      }
      validateEnvironmentId() {
        const match = this.environmentId?.match(/^(aws)(\d+)$/);
        if (!match || !this.regionalCredVerificationUrl) {
          throw new Error('No valid AWS "credential_source" provided');
        } else if (parseInt(match[2], 10) !== 1) {
          throw new Error(`aws version "${match[2]}" is not supported in the current build.`);
        }
      }
      /**
       * Triggered when an external subject token is needed to be exchanged for a
       * GCP access token via GCP STS endpoint. This will call the
       * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS
       * Security Credentials, then use them to create a signed AWS STS request that
       * can be exchanged for a GCP access token.
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (!this.awsRequestSigner) {
          this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);
          this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {
            return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);
          }, this.region);
        }
        const options = await this.awsRequestSigner.getRequestOptions({
          ..._AwsClient.RETRY_CONFIG,
          url: this.regionalCredVerificationUrl.replace("{region}", this.region),
          method: "POST"
        });
        const reformattedHeader = [];
        const extendedHeaders = gaxios_1.Gaxios.mergeHeaders({
          // The full, canonical resource name of the workload identity pool
          // provider, with or without the HTTPS prefix.
          // Including this header as part of the signature is recommended to
          // ensure data integrity.
          "x-goog-cloud-target-resource": this.audience
        }, options.headers);
        extendedHeaders.forEach((value, key) => reformattedHeader.push({ key, value }));
        return encodeURIComponent(JSON.stringify({
          url: options.url,
          method: options.method,
          headers: reformattedHeader
        }));
      }
    };
    exports2.AwsClient = AwsClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/executable-response.js
var require_executable_response = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/executable-response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidSubjectTokenError = exports2.InvalidMessageFieldError = exports2.InvalidCodeFieldError = exports2.InvalidTokenTypeFieldError = exports2.InvalidExpirationTimeFieldError = exports2.InvalidSuccessFieldError = exports2.InvalidVersionFieldError = exports2.ExecutableResponseError = exports2.ExecutableResponse = void 0;
    var SAML_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:saml2";
    var OIDC_SUBJECT_TOKEN_TYPE1 = "urn:ietf:params:oauth:token-type:id_token";
    var OIDC_SUBJECT_TOKEN_TYPE2 = "urn:ietf:params:oauth:token-type:jwt";
    var ExecutableResponse = class {
      /**
       * The version of the Executable response. Only version 1 is currently supported.
       */
      version;
      /**
       * Whether the executable ran successfully.
       */
      success;
      /**
       * The epoch time for expiration of the token in seconds.
       */
      expirationTime;
      /**
       * The type of subject token in the response, currently supported values are:
       * urn:ietf:params:oauth:token-type:saml2
       * urn:ietf:params:oauth:token-type:id_token
       * urn:ietf:params:oauth:token-type:jwt
       */
      tokenType;
      /**
       * The error code from the executable.
       */
      errorCode;
      /**
       * The error message from the executable.
       */
      errorMessage;
      /**
       * The subject token from the executable, format depends on tokenType.
       */
      subjectToken;
      /**
       * Instantiates an ExecutableResponse instance using the provided JSON object
       * from the output of the executable.
       * @param responseJson Response from a 3rd party executable, loaded from a
       * run of the executable or a cached output file.
       */
      constructor(responseJson) {
        if (!responseJson.version) {
          throw new InvalidVersionFieldError("Executable response must contain a 'version' field.");
        }
        if (responseJson.success === void 0) {
          throw new InvalidSuccessFieldError("Executable response must contain a 'success' field.");
        }
        this.version = responseJson.version;
        this.success = responseJson.success;
        if (this.success) {
          this.expirationTime = responseJson.expiration_time;
          this.tokenType = responseJson.token_type;
          if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {
            throw new InvalidTokenTypeFieldError(`Executable response must contain a 'token_type' field when successful and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);
          }
          if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {
            if (!responseJson.saml_response) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);
            }
            this.subjectToken = responseJson.saml_response;
          } else {
            if (!responseJson.id_token) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'id_token' field when token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);
            }
            this.subjectToken = responseJson.id_token;
          }
        } else {
          if (!responseJson.code) {
            throw new InvalidCodeFieldError("Executable response must contain a 'code' field when unsuccessful.");
          }
          if (!responseJson.message) {
            throw new InvalidMessageFieldError("Executable response must contain a 'message' field when unsuccessful.");
          }
          this.errorCode = responseJson.code;
          this.errorMessage = responseJson.message;
        }
      }
      /**
       * @return A boolean representing if the response has a valid token. Returns
       * true when the response was successful and the token is not expired.
       */
      isValid() {
        return !this.isExpired() && this.success;
      }
      /**
       * @return A boolean representing if the response is expired. Returns true if the
       * provided timeout has passed.
       */
      isExpired() {
        return this.expirationTime !== void 0 && this.expirationTime < Math.round(Date.now() / 1e3);
      }
    };
    exports2.ExecutableResponse = ExecutableResponse;
    var ExecutableResponseError = class extends Error {
      constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableResponseError = ExecutableResponseError;
    var InvalidVersionFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidVersionFieldError = InvalidVersionFieldError;
    var InvalidSuccessFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidSuccessFieldError = InvalidSuccessFieldError;
    var InvalidExpirationTimeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;
    var InvalidTokenTypeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;
    var InvalidCodeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidCodeFieldError = InvalidCodeFieldError;
    var InvalidMessageFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidMessageFieldError = InvalidMessageFieldError;
    var InvalidSubjectTokenError = class extends ExecutableResponseError {
    };
    exports2.InvalidSubjectTokenError = InvalidSubjectTokenError;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js
var require_pluggable_auth_handler = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthHandler = exports2.ExecutableError = void 0;
    var executable_response_1 = require_executable_response();
    var childProcess = require("child_process");
    var fs2 = require("fs");
    var ExecutableError = class extends Error {
      /**
       * The exit code returned by the executable.
       */
      code;
      constructor(message, code) {
        super(`The executable failed with exit code: ${code} and error message: ${message}.`);
        this.code = code;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableError = ExecutableError;
    var PluggableAuthHandler = class _PluggableAuthHandler {
      commandComponents;
      timeoutMillis;
      outputFile;
      /**
       * Instantiates a PluggableAuthHandler instance using the provided
       * PluggableAuthHandlerOptions object.
       */
      constructor(options) {
        if (!options.command) {
          throw new Error("No command provided.");
        }
        this.commandComponents = _PluggableAuthHandler.parseCommand(options.command);
        this.timeoutMillis = options.timeoutMillis;
        if (!this.timeoutMillis) {
          throw new Error("No timeoutMillis provided.");
        }
        this.outputFile = options.outputFile;
      }
      /**
       * Calls user provided executable to get a 3rd party subject token and
       * returns the response.
       * @param envMap a Map of additional Environment Variables required for
       *   the executable.
       * @return A promise that resolves with the executable response.
       */
      retrieveResponseFromExecutable(envMap) {
        return new Promise((resolve, reject) => {
          const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {
            env: { ...process.env, ...Object.fromEntries(envMap) }
          });
          let output = "";
          child.stdout.on("data", (data) => {
            output += data;
          });
          child.stderr.on("data", (err) => {
            output += err;
          });
          const timeout = setTimeout(() => {
            child.removeAllListeners();
            child.kill();
            return reject(new Error("The executable failed to finish within the timeout specified."));
          }, this.timeoutMillis);
          child.on("close", (code) => {
            clearTimeout(timeout);
            if (code === 0) {
              try {
                const responseJson = JSON.parse(output);
                const response = new executable_response_1.ExecutableResponse(responseJson);
                return resolve(response);
              } catch (error) {
                if (error instanceof executable_response_1.ExecutableResponseError) {
                  return reject(error);
                }
                return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));
              }
            } else {
              return reject(new ExecutableError(output, code.toString()));
            }
          });
        });
      }
      /**
       * Checks user provided output file for response from previous run of
       * executable and return the response if it exists, is formatted correctly, and is not expired.
       */
      async retrieveCachedResponse() {
        if (!this.outputFile || this.outputFile.length === 0) {
          return void 0;
        }
        let filePath;
        try {
          filePath = await fs2.promises.realpath(this.outputFile);
        } catch {
          return void 0;
        }
        if (!(await fs2.promises.lstat(filePath)).isFile()) {
          return void 0;
        }
        const responseString = await fs2.promises.readFile(filePath, {
          encoding: "utf8"
        });
        if (responseString === "") {
          return void 0;
        }
        try {
          const responseJson = JSON.parse(responseString);
          const response = new executable_response_1.ExecutableResponse(responseJson);
          if (response.isValid()) {
            return new executable_response_1.ExecutableResponse(responseJson);
          }
          return void 0;
        } catch (error) {
          if (error instanceof executable_response_1.ExecutableResponseError) {
            throw error;
          }
          throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);
        }
      }
      /**
       * Parses given command string into component array, splitting on spaces unless
       * spaces are between quotation marks.
       */
      static parseCommand(command) {
        const components = command.match(/(?:[^\s"]+|"[^"]*")+/g);
        if (!components) {
          throw new Error(`Provided command: "${command}" could not be parsed.`);
        }
        for (let i2 = 0; i2 < components.length; i2++) {
          if (components[i2][0] === '"' && components[i2].slice(-1) === '"') {
            components[i2] = components[i2].slice(1, -1);
          }
        }
        return components;
      }
    };
    exports2.PluggableAuthHandler = PluggableAuthHandler;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js
var require_pluggable_auth_client = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthClient = exports2.ExecutableError = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var executable_response_1 = require_executable_response();
    var pluggable_auth_handler_1 = require_pluggable_auth_handler();
    var pluggable_auth_handler_2 = require_pluggable_auth_handler();
    Object.defineProperty(exports2, "ExecutableError", { enumerable: true, get: function() {
      return pluggable_auth_handler_2.ExecutableError;
    } });
    var DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1e3;
    var MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1e3;
    var MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1e3;
    var GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = "GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES";
    var MAXIMUM_EXECUTABLE_VERSION = 1;
    var PluggableAuthClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * The command used to retrieve the third party token.
       */
      command;
      /**
       * The timeout in milliseconds for running executable,
       * set to default if none provided.
       */
      timeoutMillis;
      /**
       * The path to file to check for cached executable response.
       */
      outputFile;
      /**
       * Executable and output file handler.
       */
      handler;
      /**
       * Instantiates a PluggableAuthClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid pluggable auth credential.
       * @param options The external account options object typically loaded from
       *   the external account JSON credential file.
       */
      constructor(options) {
        super(options);
        if (!options.credential_source.executable) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        this.command = options.credential_source.executable.command;
        if (!this.command) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        if (options.credential_source.executable.timeout_millis === void 0) {
          this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;
        } else {
          this.timeoutMillis = options.credential_source.executable.timeout_millis;
          if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {
            throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);
          }
        }
        this.outputFile = options.credential_source.executable.output_file;
        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({
          command: this.command,
          timeoutMillis: this.timeoutMillis,
          outputFile: this.outputFile
        });
        this.credentialSourceType = "executable";
      }
      /**
       * Triggered when an external subject token is needed to be exchanged for a
       * GCP access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this calls a user provided executable which returns the subject token.
       * The logic is summarized as:
       * 1. Validated that the executable is allowed to run. The
       *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to
       *    1 for security reasons.
       * 2. If an output file is specified by the user, check the file location
       *    for a response. If the file exists and contains a valid response,
       *    return the subject token from the file.
       * 3. Call the provided executable and return response.
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== "1") {
          throw new Error("Pluggable Auth executables need to be explicitly allowed to run by setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment Variable to 1.");
        }
        let executableResponse = void 0;
        if (this.outputFile) {
          executableResponse = await this.handler.retrieveCachedResponse();
        }
        if (!executableResponse) {
          const envMap = /* @__PURE__ */ new Map();
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE", this.audience);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE", this.subjectTokenType);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE", "0");
          if (this.outputFile) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE", this.outputFile);
          }
          const serviceAccountEmail = this.getServiceAccountEmail();
          if (serviceAccountEmail) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL", serviceAccountEmail);
          }
          executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);
        }
        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {
          throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);
        }
        if (!executableResponse.success) {
          throw new pluggable_auth_handler_1.ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);
        }
        if (this.outputFile) {
          if (!executableResponse.expirationTime) {
            throw new executable_response_1.InvalidExpirationTimeFieldError("The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.");
          }
        }
        if (executableResponse.isExpired()) {
          throw new Error("Executable response is expired.");
        }
        return executableResponse.subjectToken;
      }
    };
    exports2.PluggableAuthClient = PluggableAuthClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/externalclient.js
var require_externalclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/externalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountClient = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var identitypoolclient_1 = require_identitypoolclient();
    var awsclient_1 = require_awsclient();
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var ExternalAccountClient = class {
      constructor() {
        throw new Error("ExternalAccountClients should be initialized via: ExternalAccountClient.fromJSON(), directly via explicit constructors, eg. new AwsClient(options), new IdentityPoolClient(options), newPluggableAuthClientOptions, or via new GoogleAuth(options).getClient()");
      }
      /**
       * This static method will instantiate the
       * corresponding type of external account credential depending on the
       * underlying credential source.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @return A BaseExternalAccountClient instance or null if the options
       *   provided do not correspond to an external account credential.
       */
      static fromJSON(options) {
        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          if (options.credential_source?.environment_id) {
            return new awsclient_1.AwsClient(options);
          } else if (options.credential_source?.executable) {
            return new pluggable_auth_client_1.PluggableAuthClient(options);
          } else {
            return new identitypoolclient_1.IdentityPoolClient(options);
          }
        } else {
          return null;
        }
      }
    };
    exports2.ExternalAccountClient = ExternalAccountClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js
var require_externalAccountAuthorizedUserClient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountAuthorizedUserClient = exports2.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;
    var authclient_1 = require_authclient();
    var oauth2common_1 = require_oauth2common();
    var gaxios_1 = require_src2();
    var stream = require("stream");
    var baseexternalclient_1 = require_baseexternalclient();
    exports2.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = "external_account_authorized_user";
    var DEFAULT_TOKEN_URL = "https://sts.{universeDomain}/v1/oauthtoken";
    var ExternalAccountAuthorizedUserHandler = class _ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {
      #tokenRefreshEndpoint;
      /**
       * Initializes an ExternalAccountAuthorizedUserHandler instance.
       * @param url The URL of the token refresh endpoint.
       * @param transporter The transporter to use for the refresh request.
       * @param clientAuthentication The client authentication credentials to use
       *   for the refresh request.
       */
      constructor(options) {
        super(options);
        this.#tokenRefreshEndpoint = options.tokenRefreshEndpoint;
      }
      /**
       * Requests a new access token from the token_url endpoint using the provided
       *   refresh token.
       * @param refreshToken The refresh token to use to generate a new access token.
       * @param additionalHeaders Optional additional headers to pass along the
       *   request.
       * @return A promise that resolves with the token refresh response containing
       *   the requested access token and its expiration time.
       */
      async refreshToken(refreshToken, headers) {
        const opts = {
          ..._ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,
          url: this.#tokenRefreshEndpoint,
          method: "POST",
          headers,
          data: new URLSearchParams({
            grant_type: "refresh_token",
            refresh_token: refreshToken
          })
        };
        authclient_1.AuthClient.setMethodName(opts, "refreshToken");
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const tokenRefreshResponse = response.data;
          tokenRefreshResponse.res = response;
          return tokenRefreshResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              // Preserve other fields from the original error.
              error
            );
          }
          throw error;
        }
      }
    };
    var ExternalAccountAuthorizedUserClient = class extends authclient_1.AuthClient {
      cachedAccessToken;
      externalAccountAuthorizedUserHandler;
      refreshToken;
      /**
       * Instantiates an ExternalAccountAuthorizedUserClient instances using the
       * provided JSON object loaded from a credentials files.
       * An error is throws if the credential is not valid.
       * @param options The external account authorized user option object typically
       *   from the external accoutn authorized user JSON credential file.
       */
      constructor(options) {
        super(options);
        if (options.universe_domain) {
          this.universeDomain = options.universe_domain;
        }
        this.refreshToken = options.refresh_token;
        const clientAuthentication = {
          confidentialClientType: "basic",
          clientId: options.client_id,
          clientSecret: options.client_secret
        };
        this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler({
          tokenRefreshEndpoint: options.token_url ?? DEFAULT_TOKEN_URL.replace("{universeDomain}", this.universeDomain),
          transporter: this.transporter,
          clientAuthentication
        });
        this.cachedAccessToken = null;
        this.quotaProjectId = options.quota_project_id;
        if (typeof options?.eagerRefreshThresholdMillis !== "number") {
          this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!options?.forceRefreshOnFailure;
      }
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = new Headers({
          authorization: `Bearer ${accessTokenResponse.token}`
        });
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r2) => callback(null, r2), (e2) => {
            return callback(e2, e2.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, reAuthRetried = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);
          this.addUserProjectAndAuthHeaders(opts.headers, requestHeaders);
          response = await this.transporter.request(opts);
        } catch (e2) {
          const res = e2.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e2;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * @return A promise that resolves with the refreshed credential.
       */
      async refreshAccessTokenAsync() {
        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);
        this.cachedAccessToken = {
          access_token: refreshResponse.access_token,
          expiry_date: (/* @__PURE__ */ new Date()).getTime() + refreshResponse.expires_in * 1e3,
          res: refreshResponse.res
        };
        if (refreshResponse.refresh_token !== void 0) {
          this.refreshToken = refreshResponse.refresh_token;
        }
        return this.cachedAccessToken;
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param credentials The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(credentials) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/googleauth.js
var require_googleauth = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/googleauth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.GoogleAuthExceptionMessages = void 0;
    var child_process_1 = require("child_process");
    var fs2 = require("fs");
    var gaxios_1 = require_src2();
    var gcpMetadata = require_src4();
    var os = require("os");
    var path = require("path");
    var crypto_1 = require_crypto3();
    var computeclient_1 = require_computeclient();
    var idtokenclient_1 = require_idtokenclient();
    var envDetect_1 = require_envDetect();
    var jwtclient_1 = require_jwtclient();
    var refreshclient_1 = require_refreshclient();
    var impersonated_1 = require_impersonated();
    var externalclient_1 = require_externalclient();
    var baseexternalclient_1 = require_baseexternalclient();
    var authclient_1 = require_authclient();
    var externalAccountAuthorizedUserClient_1 = require_externalAccountAuthorizedUserClient();
    var util_1 = require_util2();
    exports2.GoogleAuthExceptionMessages = {
      API_KEY_WITH_CREDENTIALS: "API Keys and Credentials are mutually exclusive authentication methods and cannot be used together.",
      NO_PROJECT_ID_FOUND: "Unable to detect a Project Id in the current environment. \nTo learn more about authentication and Google APIs, visit: \nhttps://cloud.google.com/docs/authentication/getting-started",
      NO_CREDENTIALS_FOUND: "Unable to find credentials in current environment. \nTo learn more about authentication and Google APIs, visit: \nhttps://cloud.google.com/docs/authentication/getting-started",
      NO_ADC_FOUND: "Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.",
      NO_UNIVERSE_DOMAIN_FOUND: "Unable to detect a Universe Domain in the current environment.\nTo learn more about Universe Domain retrieval, visit: \nhttps://cloud.google.com/compute/docs/metadata/predefined-metadata-keys"
    };
    var GoogleAuth = class {
      /**
       * Caches a value indicating whether the auth layer is running on Google
       * Compute Engine.
       * @private
       */
      checkIsGCE = void 0;
      useJWTAccessWithScope;
      defaultServicePath;
      // Note:  this properly is only public to satisfy unit tests.
      // https://github.com/Microsoft/TypeScript/issues/5228
      get isGCE() {
        return this.checkIsGCE;
      }
      _findProjectIdPromise;
      _cachedProjectId;
      // To save the contents of the JSON credential file
      jsonContent = null;
      apiKey;
      cachedCredential = null;
      /**
       * A pending {@link AuthClient}. Used for concurrent {@link GoogleAuth.getClient} calls.
       */
      #pendingAuthClient = null;
      /**
       * Scopes populated by the client library by default. We differentiate between
       * these and user defined scopes when deciding whether to use a self-signed JWT.
       */
      defaultScopes;
      keyFilename;
      scopes;
      clientOptions = {};
      /**
       * Configuration is resolved in the following order of precedence:
       * - {@link GoogleAuthOptions.credentials `credentials`}
       * - {@link GoogleAuthOptions.keyFilename `keyFilename`}
       * - {@link GoogleAuthOptions.keyFile `keyFile`}
       *
       * {@link GoogleAuthOptions.clientOptions `clientOptions`} are passed to the
       * {@link AuthClient `AuthClient`s}.
       *
       * @param opts
       */
      constructor(opts = {}) {
        this._cachedProjectId = opts.projectId || null;
        this.cachedCredential = opts.authClient || null;
        this.keyFilename = opts.keyFilename || opts.keyFile;
        this.scopes = opts.scopes;
        this.clientOptions = opts.clientOptions || {};
        this.jsonContent = opts.credentials || null;
        this.apiKey = opts.apiKey || this.clientOptions.apiKey || null;
        if (this.apiKey && (this.jsonContent || this.clientOptions.credentials)) {
          throw new RangeError(exports2.GoogleAuthExceptionMessages.API_KEY_WITH_CREDENTIALS);
        }
        if (opts.universeDomain) {
          this.clientOptions.universeDomain = opts.universeDomain;
        }
      }
      // GAPIC client libraries should always use self-signed JWTs. The following
      // variables are set on the JWT client in order to indicate the type of library,
      // and sign the JWT with the correct audience and scopes (if not supplied).
      setGapicJWTValues(client2) {
        client2.defaultServicePath = this.defaultServicePath;
        client2.useJWTAccessWithScope = this.useJWTAccessWithScope;
        client2.defaultScopes = this.defaultScopes;
      }
      getProjectId(callback) {
        if (callback) {
          this.getProjectIdAsync().then((r2) => callback(null, r2), callback);
        } else {
          return this.getProjectIdAsync();
        }
      }
      /**
       * A temporary method for internal `getProjectId` usages where `null` is
       * acceptable. In a future major release, `getProjectId` should return `null`
       * (as the `Promise<string | null>` base signature describes) and this private
       * method should be removed.
       *
       * @returns Promise that resolves with project id (or `null`)
       */
      async getProjectIdOptional() {
        try {
          return await this.getProjectId();
        } catch (e2) {
          if (e2 instanceof Error && e2.message === exports2.GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {
            return null;
          } else {
            throw e2;
          }
        }
      }
      /**
       * A private method for finding and caching a projectId.
       *
       * Supports environments in order of precedence:
       * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable
       * - GOOGLE_APPLICATION_CREDENTIALS JSON file
       * - Cloud SDK: `gcloud config config-helper --format json`
       * - GCE project ID from metadata server
       *
       * @returns projectId
       */
      async findAndCacheProjectId() {
        let projectId = null;
        projectId ||= await this.getProductionProjectId();
        projectId ||= await this.getFileProjectId();
        projectId ||= await this.getDefaultServiceProjectId();
        projectId ||= await this.getGCEProjectId();
        projectId ||= await this.getExternalAccountClientProjectId();
        if (projectId) {
          this._cachedProjectId = projectId;
          return projectId;
        } else {
          throw new Error(exports2.GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);
        }
      }
      async getProjectIdAsync() {
        if (this._cachedProjectId) {
          return this._cachedProjectId;
        }
        if (!this._findProjectIdPromise) {
          this._findProjectIdPromise = this.findAndCacheProjectId();
        }
        return this._findProjectIdPromise;
      }
      /**
       * Retrieves a universe domain from the metadata server via
       * {@link gcpMetadata.universe}.
       *
       * @returns a universe domain
       */
      async getUniverseDomainFromMetadataServer() {
        let universeDomain;
        try {
          universeDomain = await gcpMetadata.universe("universe-domain");
          universeDomain ||= authclient_1.DEFAULT_UNIVERSE;
        } catch (e2) {
          if (e2 && e2?.response?.status === 404) {
            universeDomain = authclient_1.DEFAULT_UNIVERSE;
          } else {
            throw e2;
          }
        }
        return universeDomain;
      }
      /**
       * Retrieves, caches, and returns the universe domain in the following order
       * of precedence:
       * - The universe domain in {@link GoogleAuth.clientOptions}
       * - An existing or ADC {@link AuthClient}'s universe domain
       * - {@link gcpMetadata.universe}, if {@link Compute} client
       *
       * @returns The universe domain
       */
      async getUniverseDomain() {
        let universeDomain = (0, util_1.originalOrCamelOptions)(this.clientOptions).get("universe_domain");
        try {
          universeDomain ??= (await this.getClient()).universeDomain;
        } catch {
          universeDomain ??= authclient_1.DEFAULT_UNIVERSE;
        }
        return universeDomain;
      }
      /**
       * @returns Any scopes (user-specified or default scopes specified by the
       *   client library) that need to be set on the current Auth client.
       */
      getAnyScopes() {
        return this.scopes || this.defaultScopes;
      }
      getApplicationDefault(optionsOrCallback = {}, callback) {
        let options;
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.getApplicationDefaultAsync(options).then((r2) => callback(null, r2.credential, r2.projectId), callback);
        } else {
          return this.getApplicationDefaultAsync(options);
        }
      }
      async getApplicationDefaultAsync(options = {}) {
        if (this.cachedCredential) {
          return await this.#prepareAndCacheClient(this.cachedCredential, null);
        }
        let credential;
        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          return await this.#prepareAndCacheClient(credential);
        }
        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          return await this.#prepareAndCacheClient(credential);
        }
        if (await this._checkIsGCE()) {
          options.scopes = this.getAnyScopes();
          return await this.#prepareAndCacheClient(new computeclient_1.Compute(options));
        }
        throw new Error(exports2.GoogleAuthExceptionMessages.NO_ADC_FOUND);
      }
      async #prepareAndCacheClient(credential, quotaProjectIdOverride = process.env["GOOGLE_CLOUD_QUOTA_PROJECT"] || null) {
        const projectId = await this.getProjectIdOptional();
        if (quotaProjectIdOverride) {
          credential.quotaProjectId = quotaProjectIdOverride;
        }
        this.cachedCredential = credential;
        return { credential, projectId };
      }
      /**
       * Determines whether the auth layer is running on Google Compute Engine.
       * Checks for GCP Residency, then fallback to checking if metadata server
       * is available.
       *
       * @returns A promise that resolves with the boolean.
       * @api private
       */
      async _checkIsGCE() {
        if (this.checkIsGCE === void 0) {
          this.checkIsGCE = gcpMetadata.getGCPResidency() || await gcpMetadata.isAvailable();
        }
        return this.checkIsGCE;
      }
      /**
       * Attempts to load default credentials from the environment variable path..
       * @returns Promise that resolves with the OAuth2Client or null.
       * @api private
       */
      async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {
        const credentialsPath = process.env["GOOGLE_APPLICATION_CREDENTIALS"] || process.env["google_application_credentials"];
        if (!credentialsPath || credentialsPath.length === 0) {
          return null;
        }
        try {
          return this._getApplicationCredentialsFromFilePath(credentialsPath, options);
        } catch (e2) {
          if (e2 instanceof Error) {
            e2.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e2.message}`;
          }
          throw e2;
        }
      }
      /**
       * Attempts to load default credentials from a well-known file location
       * @return Promise that resolves with the OAuth2Client or null.
       * @api private
       */
      async _tryGetApplicationCredentialsFromWellKnownFile(options) {
        let location = null;
        if (this._isWindows()) {
          location = process.env["APPDATA"];
        } else {
          const home = process.env["HOME"];
          if (home) {
            location = path.join(home, ".config");
          }
        }
        if (location) {
          location = path.join(location, "gcloud", "application_default_credentials.json");
          if (!fs2.existsSync(location)) {
            location = null;
          }
        }
        if (!location) {
          return null;
        }
        const client2 = await this._getApplicationCredentialsFromFilePath(location, options);
        return client2;
      }
      /**
       * Attempts to load default credentials from a file at the given path..
       * @param filePath The path to the file to read.
       * @returns Promise that resolves with the OAuth2Client
       * @api private
       */
      async _getApplicationCredentialsFromFilePath(filePath, options = {}) {
        if (!filePath || filePath.length === 0) {
          throw new Error("The file path is invalid.");
        }
        try {
          filePath = fs2.realpathSync(filePath);
          if (!fs2.lstatSync(filePath).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        const readStream = fs2.createReadStream(filePath);
        return this.fromStream(readStream, options);
      }
      /**
       * Create a credentials instance using a given impersonated input options.
       * @param json The impersonated input object.
       * @returns JWT or UserRefresh Client with data
       */
      fromImpersonatedJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing an  impersonated refresh token");
        }
        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          throw new Error(`The incoming JSON object does not have the "${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}" type`);
        }
        if (!json.source_credentials) {
          throw new Error("The incoming JSON object does not contain a source_credentials field");
        }
        if (!json.service_account_impersonation_url) {
          throw new Error("The incoming JSON object does not contain a service_account_impersonation_url field");
        }
        const sourceClient = this.fromJSON(json.source_credentials);
        if (json.service_account_impersonation_url?.length > 256) {
          throw new RangeError(`Target principal is too long: ${json.service_account_impersonation_url}`);
        }
        const targetPrincipal = /(?<target>[^/]+):(generateAccessToken|generateIdToken)$/.exec(json.service_account_impersonation_url)?.groups?.target;
        if (!targetPrincipal) {
          throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);
        }
        const targetScopes = this.getAnyScopes() ?? [];
        return new impersonated_1.Impersonated({
          ...json,
          sourceClient,
          targetPrincipal,
          targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]
        });
      }
      /**
       * Create a credentials instance using the given input options.
       * This client is not cached.
       *
       * **Important**: If you accept a credential configuration (credential JSON/File/Stream) from an external source for authentication to Google Cloud, you must validate it before providing it to any Google API or library. Providing an unvalidated credential configuration to Google APIs can compromise the security of your systems and data. For more information, refer to {@link https://cloud.google.com/docs/authentication/external/externally-sourced-credentials Validate credential configurations from external sources}.
       *
       * @param json The input object.
       * @param options The JWT or UserRefresh options for the client
       * @returns JWT or UserRefresh Client with data
       */
      fromJSON(json, options = {}) {
        let client2;
        const preferredUniverseDomain = (0, util_1.originalOrCamelOptions)(options).get("universe_domain");
        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {
          client2 = new refreshclient_1.UserRefreshClient(options);
          client2.fromJSON(json);
        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          client2 = this.fromImpersonatedJSON(json);
        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          client2 = externalclient_1.ExternalAccountClient.fromJSON({
            ...json,
            ...options
          });
          client2.scopes = this.getAnyScopes();
        } else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {
          client2 = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient({
            ...json,
            ...options
          });
        } else {
          options.scopes = this.scopes;
          client2 = new jwtclient_1.JWT(options);
          this.setGapicJWTValues(client2);
          client2.fromJSON(json);
        }
        if (preferredUniverseDomain) {
          client2.universeDomain = preferredUniverseDomain;
        }
        return client2;
      }
      /**
       * Return a JWT or UserRefreshClient from JavaScript object, caching both the
       * object used to instantiate and the client.
       * @param json The input object.
       * @param options The JWT or UserRefresh options for the client
       * @returns JWT or UserRefresh Client with data
       */
      _cacheClientFromJSON(json, options) {
        const client2 = this.fromJSON(json, options);
        this.jsonContent = json;
        this.cachedCredential = client2;
        return client2;
      }
      fromStream(inputStream, optionsOrCallback = {}, callback) {
        let options = {};
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.fromStreamAsync(inputStream, options).then((r2) => callback(null, r2), callback);
        } else {
          return this.fromStreamAsync(inputStream, options);
        }
      }
      fromStreamAsync(inputStream, options) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the Google auth settings.");
          }
          const chunks = [];
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => chunks.push(chunk)).on("end", () => {
            try {
              try {
                const data = JSON.parse(chunks.join(""));
                const r2 = this._cacheClientFromJSON(data, options);
                return resolve(r2);
              } catch (err) {
                if (!this.keyFilename)
                  throw err;
                const client2 = new jwtclient_1.JWT({
                  ...this.clientOptions,
                  keyFile: this.keyFilename
                });
                this.cachedCredential = client2;
                this.setGapicJWTValues(client2);
                return resolve(client2);
              }
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
      /**
       * Create a credentials instance using the given API key string.
       * The created client is not cached. In order to create and cache it use the {@link GoogleAuth.getClient `getClient`} method after first providing an {@link GoogleAuth.apiKey `apiKey`}.
       *
       * @param apiKey The API key string
       * @param options An optional options object.
       * @returns A JWT loaded from the key
       */
      fromAPIKey(apiKey, options = {}) {
        return new jwtclient_1.JWT({ ...options, apiKey });
      }
      /**
       * Determines whether the current operating system is Windows.
       * @api private
       */
      _isWindows() {
        const sys = os.platform();
        if (sys && sys.length >= 3) {
          if (sys.substring(0, 3).toLowerCase() === "win") {
            return true;
          }
        }
        return false;
      }
      /**
       * Run the Google Cloud SDK command that prints the default project ID
       */
      async getDefaultServiceProjectId() {
        return new Promise((resolve) => {
          (0, child_process_1.exec)("gcloud config config-helper --format json", (err, stdout) => {
            if (!err && stdout) {
              try {
                const projectId = JSON.parse(stdout).configuration.properties.core.project;
                resolve(projectId);
                return;
              } catch (e2) {
              }
            }
            resolve(null);
          });
        });
      }
      /**
       * Loads the project id from environment variables.
       * @api private
       */
      getProductionProjectId() {
        return process.env["GCLOUD_PROJECT"] || process.env["GOOGLE_CLOUD_PROJECT"] || process.env["gcloud_project"] || process.env["google_cloud_project"];
      }
      /**
       * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.
       * @api private
       */
      async getFileProjectId() {
        if (this.cachedCredential) {
          return this.cachedCredential.projectId;
        }
        if (this.keyFilename) {
          const creds = await this.getClient();
          if (creds && creds.projectId) {
            return creds.projectId;
          }
        }
        const r2 = await this._tryGetApplicationCredentialsFromEnvironmentVariable();
        if (r2) {
          return r2.projectId;
        } else {
          return null;
        }
      }
      /**
       * Gets the project ID from external account client if available.
       */
      async getExternalAccountClientProjectId() {
        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          return null;
        }
        const creds = await this.getClient();
        return await creds.getProjectId();
      }
      /**
       * Gets the Compute Engine project ID if it can be inferred.
       */
      async getGCEProjectId() {
        try {
          const r2 = await gcpMetadata.project("project-id");
          return r2;
        } catch (e2) {
          return null;
        }
      }
      getCredentials(callback) {
        if (callback) {
          this.getCredentialsAsync().then((r2) => callback(null, r2), callback);
        } else {
          return this.getCredentialsAsync();
        }
      }
      async getCredentialsAsync() {
        const client2 = await this.getClient();
        if (client2 instanceof impersonated_1.Impersonated) {
          return { client_email: client2.getTargetPrincipal() };
        }
        if (client2 instanceof baseexternalclient_1.BaseExternalAccountClient) {
          const serviceAccountEmail = client2.getServiceAccountEmail();
          if (serviceAccountEmail) {
            return {
              client_email: serviceAccountEmail,
              universe_domain: client2.universeDomain
            };
          }
        }
        if (this.jsonContent) {
          return {
            client_email: this.jsonContent.client_email,
            private_key: this.jsonContent.private_key,
            universe_domain: this.jsonContent.universe_domain
          };
        }
        if (await this._checkIsGCE()) {
          const [client_email, universe_domain] = await Promise.all([
            gcpMetadata.instance("service-accounts/default/email"),
            this.getUniverseDomain()
          ]);
          return { client_email, universe_domain };
        }
        throw new Error(exports2.GoogleAuthExceptionMessages.NO_CREDENTIALS_FOUND);
      }
      /**
       * Automatically obtain an {@link AuthClient `AuthClient`} based on the
       * provided configuration. If no options were passed, use Application
       * Default Credentials.
       */
      async getClient() {
        if (this.cachedCredential) {
          return this.cachedCredential;
        }
        this.#pendingAuthClient = this.#pendingAuthClient || this.#determineClient();
        try {
          return await this.#pendingAuthClient;
        } finally {
          this.#pendingAuthClient = null;
        }
      }
      async #determineClient() {
        if (this.jsonContent) {
          return this._cacheClientFromJSON(this.jsonContent, this.clientOptions);
        } else if (this.keyFilename) {
          const filePath = path.resolve(this.keyFilename);
          const stream = fs2.createReadStream(filePath);
          return await this.fromStreamAsync(stream, this.clientOptions);
        } else if (this.apiKey) {
          const client2 = await this.fromAPIKey(this.apiKey, this.clientOptions);
          client2.scopes = this.scopes;
          const { credential } = await this.#prepareAndCacheClient(client2);
          return credential;
        } else {
          const { credential } = await this.getApplicationDefaultAsync(this.clientOptions);
          return credential;
        }
      }
      /**
       * Creates a client which will fetch an ID token for authorization.
       * @param targetAudience the audience for the fetched ID token.
       * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.
       */
      async getIdTokenClient(targetAudience) {
        const client2 = await this.getClient();
        if (!("fetchIdToken" in client2)) {
          throw new Error("Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.");
        }
        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client2 });
      }
      /**
       * Automatically obtain application default credentials, and return
       * an access token for making requests.
       */
      async getAccessToken() {
        const client2 = await this.getClient();
        return (await client2.getAccessToken()).token;
      }
      /**
       * Obtain the HTTP headers that will provide authorization for a given
       * request.
       */
      async getRequestHeaders(url) {
        const client2 = await this.getClient();
        return client2.getRequestHeaders(url);
      }
      /**
       * Obtain credentials for a request, then attach the appropriate headers to
       * the request options.
       * @param opts Axios or Request options on which to attach the headers
       */
      async authorizeRequest(opts = {}) {
        const url = opts.url;
        const client2 = await this.getClient();
        const headers = await client2.getRequestHeaders(url);
        opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers, headers);
        return opts;
      }
      /**
       * A {@link fetch `fetch`} compliant API for {@link GoogleAuth}.
       *
       * @see {@link GoogleAuth.request} for the classic method.
       *
       * @remarks
       *
       * This is useful as a drop-in replacement for `fetch` API usage.
       *
       * @example
       *
       * ```ts
       * const auth = new GoogleAuth();
       * const fetchWithAuth: typeof fetch = (...args) => auth.fetch(...args);
       * await fetchWithAuth('https://example.com');
       * ```
       *
       * @param args `fetch` API or {@link Gaxios.fetch `Gaxios#fetch`} parameters
       * @returns the {@link GaxiosResponse} with Gaxios-added properties
       */
      async fetch(...args) {
        const client2 = await this.getClient();
        return client2.fetch(...args);
      }
      /**
       * Automatically obtain application default credentials, and make an
       * HTTP request using the given options.
       *
       * @see {@link GoogleAuth.fetch} for the modern method.
       *
       * @param opts Axios request options for the HTTP request.
       */
      async request(opts) {
        const client2 = await this.getClient();
        return client2.request(opts);
      }
      /**
       * Determine the compute environment in which the code is running.
       */
      getEnv() {
        return (0, envDetect_1.getEnv)();
      }
      /**
       * Sign the given data with the current private key, or go out
       * to the IAM API to sign it.
       * @param data The data to be signed.
       * @param endpoint A custom endpoint to use.
       *
       * @example
       * ```
       * sign('data', 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/');
       * ```
       */
      async sign(data, endpoint) {
        const client2 = await this.getClient();
        const universe = await this.getUniverseDomain();
        endpoint = endpoint || `https://iamcredentials.${universe}/v1/projects/-/serviceAccounts/`;
        if (client2 instanceof impersonated_1.Impersonated) {
          const signed = await client2.sign(data);
          return signed.signedBlob;
        }
        const crypto2 = (0, crypto_1.createCrypto)();
        if (client2 instanceof jwtclient_1.JWT && client2.key) {
          const sign = await crypto2.sign(client2.key, data);
          return sign;
        }
        const creds = await this.getCredentials();
        if (!creds.client_email) {
          throw new Error("Cannot sign data without `client_email`.");
        }
        return this.signBlob(crypto2, creds.client_email, data, endpoint);
      }
      async signBlob(crypto2, emailOrUniqueId, data, endpoint) {
        const url = new URL(endpoint + `${emailOrUniqueId}:signBlob`);
        const res = await this.request({
          method: "POST",
          url: url.href,
          data: {
            payload: crypto2.encodeBase64StringUtf8(data)
          },
          retry: true,
          retryConfig: {
            httpMethodsToRetry: ["POST"]
          }
        });
        return res.data.signedBlob;
      }
    };
    exports2.GoogleAuth = GoogleAuth;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/iam.js
var require_iam = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/iam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IAMAuth = void 0;
    var IAMAuth = class {
      selector;
      token;
      /**
       * IAM credentials.
       *
       * @param selector the iam authority selector
       * @param token the token
       * @constructor
       */
      constructor(selector, token) {
        this.selector = selector;
        this.token = token;
        this.selector = selector;
        this.token = token;
      }
      /**
       * Acquire the HTTP headers required to make an authenticated request.
       */
      getRequestHeaders() {
        return {
          "x-goog-iam-authority-selector": this.selector,
          "x-goog-iam-authorization-token": this.token
        };
      }
    };
    exports2.IAMAuth = IAMAuth;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/downscopedclient.js
var require_downscopedclient = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/downscopedclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DownscopedClient = exports2.EXPIRATION_TIME_OFFSET = exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;
    var gaxios_1 = require_src2();
    var stream = require("stream");
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    var DownscopedClient = class extends authclient_1.AuthClient {
      authClient;
      credentialAccessBoundary;
      cachedDownscopedAccessToken;
      stsCredential;
      /**
       * Instantiates a downscoped client object using the provided source
       * AuthClient and credential access boundary rules.
       * To downscope permissions of a source AuthClient, a Credential Access
       * Boundary that specifies which resources the new credential can access, as
       * well as an upper bound on the permissions that are available on each
       * resource, has to be defined. A downscoped client can then be instantiated
       * using the source AuthClient and the Credential Access Boundary.
       * @param options the {@link DownscopedClientOptions `DownscopedClientOptions`} to use. Passing an `AuthClient` directly is **@DEPRECATED**.
       * @param credentialAccessBoundary **@DEPRECATED**. Provide a {@link DownscopedClientOptions `DownscopedClientOptions`} object in the first parameter instead.
       */
      constructor(options, credentialAccessBoundary = {
        accessBoundary: {
          accessBoundaryRules: []
        }
      }) {
        super(options instanceof authclient_1.AuthClient ? {} : options);
        if (options instanceof authclient_1.AuthClient) {
          this.authClient = options;
          this.credentialAccessBoundary = credentialAccessBoundary;
        } else {
          this.authClient = options.authClient;
          this.credentialAccessBoundary = options.credentialAccessBoundary;
        }
        if (this.credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {
          throw new Error("At least one access boundary rule needs to be defined.");
        } else if (this.credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT) {
          throw new Error(`The provided access boundary has more than ${exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);
        }
        for (const rule of this.credentialAccessBoundary.accessBoundary.accessBoundaryRules) {
          if (rule.availablePermissions.length === 0) {
            throw new Error("At least one permission should be defined in access boundary rules.");
          }
        }
        this.stsCredential = new sts.StsCredentials({
          tokenExchangeEndpoint: `https://sts.${this.universeDomain}/v1/token`
        });
        this.cachedDownscopedAccessToken = null;
      }
      /**
       * Provides a mechanism to inject Downscoped access tokens directly.
       * The expiry_date field is required to facilitate determination of the token
       * expiration which would make it easier for the token consumer to handle.
       * @param credentials The Credentials object to set on the current client.
       */
      setCredentials(credentials) {
        if (!credentials.expiry_date) {
          throw new Error("The access token expiry_date field is missing in the provided credentials.");
        }
        super.setCredentials(credentials);
        this.cachedDownscopedAccessToken = credentials;
      }
      async getAccessToken() {
        if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedDownscopedAccessToken.access_token,
          expirationTime: this.cachedDownscopedAccessToken.expiry_date,
          res: this.cachedDownscopedAccessToken.res
        };
      }
      /**
       * The main authentication interface. It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * The result has the form:
       * { authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = new Headers({
          authorization: `Bearer ${accessTokenResponse.token}`
        });
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r2) => callback(null, r2), (e2) => {
            return callback(e2, e2.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, reAuthRetried = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);
          this.addUserProjectAndAuthHeaders(opts.headers, requestHeaders);
          response = await this.transporter.request(opts);
        } catch (e2) {
          const res = e2.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e2;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * GCP access tokens are retrieved from authclient object/source credential.
       * Then GCP access tokens are exchanged for downscoped access tokens via the
       * token exchange endpoint.
       * @return A promise that resolves with the fresh downscoped access token.
       */
      async refreshAccessTokenAsync() {
        const subjectToken = (await this.authClient.getAccessToken()).token;
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: STS_SUBJECT_TOKEN_TYPE
        };
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, this.credentialAccessBoundary);
        const sourceCredExpireDate = this.authClient.credentials?.expiry_date || null;
        const expiryDate = stsResponse.expires_in ? (/* @__PURE__ */ new Date()).getTime() + stsResponse.expires_in * 1e3 : sourceCredExpireDate;
        this.cachedDownscopedAccessToken = {
          access_token: stsResponse.access_token,
          expiry_date: expiryDate,
          res: stsResponse.res
        };
        this.credentials = {};
        Object.assign(this.credentials, this.cachedDownscopedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedDownscopedAccessToken.expiry_date,
          access_token: this.cachedDownscopedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedDownscopedAccessToken;
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param downscopedAccessToken The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(downscopedAccessToken) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.DownscopedClient = DownscopedClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/auth/passthrough.js
var require_passthrough = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/auth/passthrough.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PassThroughClient = void 0;
    var authclient_1 = require_authclient();
    var PassThroughClient = class extends authclient_1.AuthClient {
      /**
       * Creates a request without any authentication headers or checks.
       *
       * @remarks
       *
       * In testing environments it may be useful to change the provided
       * {@link AuthClient.transporter} for any desired request overrides/handling.
       *
       * @param opts
       * @returns The response of the request.
       */
      async request(opts) {
        return this.transporter.request(opts);
      }
      /**
       * A required method of the base class.
       * Always will return an empty object.
       *
       * @returns {}
       */
      async getAccessToken() {
        return {};
      }
      /**
       * A required method of the base class.
       * Always will return an empty object.
       *
       * @returns {}
       */
      async getRequestHeaders() {
        return new Headers();
      }
    };
    exports2.PassThroughClient = PassThroughClient;
  }
});

// ../backend/node_modules/google-auth-library/build/src/index.js
var require_src6 = __commonJS({
  "../backend/node_modules/google-auth-library/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.auth = exports2.PassThroughClient = exports2.ExecutableError = exports2.PluggableAuthClient = exports2.DownscopedClient = exports2.BaseExternalAccountClient = exports2.ExternalAccountClient = exports2.IdentityPoolClient = exports2.AwsRequestSigner = exports2.AwsClient = exports2.UserRefreshClient = exports2.LoginTicket = exports2.ClientAuthentication = exports2.OAuth2Client = exports2.CodeChallengeMethod = exports2.Impersonated = exports2.JWT = exports2.JWTAccess = exports2.IdTokenClient = exports2.IAMAuth = exports2.GCPEnv = exports2.Compute = exports2.DEFAULT_UNIVERSE = exports2.AuthClient = exports2.gaxios = exports2.gcpMetadata = void 0;
    var googleauth_1 = require_googleauth();
    Object.defineProperty(exports2, "GoogleAuth", { enumerable: true, get: function() {
      return googleauth_1.GoogleAuth;
    } });
    exports2.gcpMetadata = require_src4();
    exports2.gaxios = require_src2();
    var authclient_1 = require_authclient();
    Object.defineProperty(exports2, "AuthClient", { enumerable: true, get: function() {
      return authclient_1.AuthClient;
    } });
    Object.defineProperty(exports2, "DEFAULT_UNIVERSE", { enumerable: true, get: function() {
      return authclient_1.DEFAULT_UNIVERSE;
    } });
    var computeclient_1 = require_computeclient();
    Object.defineProperty(exports2, "Compute", { enumerable: true, get: function() {
      return computeclient_1.Compute;
    } });
    var envDetect_1 = require_envDetect();
    Object.defineProperty(exports2, "GCPEnv", { enumerable: true, get: function() {
      return envDetect_1.GCPEnv;
    } });
    var iam_1 = require_iam();
    Object.defineProperty(exports2, "IAMAuth", { enumerable: true, get: function() {
      return iam_1.IAMAuth;
    } });
    var idtokenclient_1 = require_idtokenclient();
    Object.defineProperty(exports2, "IdTokenClient", { enumerable: true, get: function() {
      return idtokenclient_1.IdTokenClient;
    } });
    var jwtaccess_1 = require_jwtaccess();
    Object.defineProperty(exports2, "JWTAccess", { enumerable: true, get: function() {
      return jwtaccess_1.JWTAccess;
    } });
    var jwtclient_1 = require_jwtclient();
    Object.defineProperty(exports2, "JWT", { enumerable: true, get: function() {
      return jwtclient_1.JWT;
    } });
    var impersonated_1 = require_impersonated();
    Object.defineProperty(exports2, "Impersonated", { enumerable: true, get: function() {
      return impersonated_1.Impersonated;
    } });
    var oauth2client_1 = require_oauth2client();
    Object.defineProperty(exports2, "CodeChallengeMethod", { enumerable: true, get: function() {
      return oauth2client_1.CodeChallengeMethod;
    } });
    Object.defineProperty(exports2, "OAuth2Client", { enumerable: true, get: function() {
      return oauth2client_1.OAuth2Client;
    } });
    Object.defineProperty(exports2, "ClientAuthentication", { enumerable: true, get: function() {
      return oauth2client_1.ClientAuthentication;
    } });
    var loginticket_1 = require_loginticket();
    Object.defineProperty(exports2, "LoginTicket", { enumerable: true, get: function() {
      return loginticket_1.LoginTicket;
    } });
    var refreshclient_1 = require_refreshclient();
    Object.defineProperty(exports2, "UserRefreshClient", { enumerable: true, get: function() {
      return refreshclient_1.UserRefreshClient;
    } });
    var awsclient_1 = require_awsclient();
    Object.defineProperty(exports2, "AwsClient", { enumerable: true, get: function() {
      return awsclient_1.AwsClient;
    } });
    var awsrequestsigner_1 = require_awsrequestsigner();
    Object.defineProperty(exports2, "AwsRequestSigner", { enumerable: true, get: function() {
      return awsrequestsigner_1.AwsRequestSigner;
    } });
    var identitypoolclient_1 = require_identitypoolclient();
    Object.defineProperty(exports2, "IdentityPoolClient", { enumerable: true, get: function() {
      return identitypoolclient_1.IdentityPoolClient;
    } });
    var externalclient_1 = require_externalclient();
    Object.defineProperty(exports2, "ExternalAccountClient", { enumerable: true, get: function() {
      return externalclient_1.ExternalAccountClient;
    } });
    var baseexternalclient_1 = require_baseexternalclient();
    Object.defineProperty(exports2, "BaseExternalAccountClient", { enumerable: true, get: function() {
      return baseexternalclient_1.BaseExternalAccountClient;
    } });
    var downscopedclient_1 = require_downscopedclient();
    Object.defineProperty(exports2, "DownscopedClient", { enumerable: true, get: function() {
      return downscopedclient_1.DownscopedClient;
    } });
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    Object.defineProperty(exports2, "PluggableAuthClient", { enumerable: true, get: function() {
      return pluggable_auth_client_1.PluggableAuthClient;
    } });
    Object.defineProperty(exports2, "ExecutableError", { enumerable: true, get: function() {
      return pluggable_auth_client_1.ExecutableError;
    } });
    var passthrough_1 = require_passthrough();
    Object.defineProperty(exports2, "PassThroughClient", { enumerable: true, get: function() {
      return passthrough_1.PassThroughClient;
    } });
    var auth = new googleauth_1.GoogleAuth();
    exports2.auth = auth;
  }
});

// ../backend/node_modules/crypto-js/core.js
var require_core = __commonJS({
  "../backend/node_modules/crypto-js/core.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports2, function() {
      var CryptoJS = CryptoJS || (function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof require === "function") {
          try {
            crypto2 = require("crypto");
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || /* @__PURE__ */ (function() {
          function F2() {
          }
          return function(obj) {
            var subtype;
            F2.prototype = obj;
            subtype = new F2();
            F2.prototype = null;
            return subtype;
          };
        })();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ (function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        })();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i2 = 0; i2 < thatSigBytes; i2++) {
                var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2.words = this.words.slice(0);
            return clone2;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i2 = 0; i2 < nBytes; i2 += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
              words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i2 = 0; i2 < latin1StrLength; i2++) {
              words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e2) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2._data = this._data.clone();
            return clone2;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      })(Math);
      return CryptoJS;
    });
  }
});

// ../backend/node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "../backend/node_modules/crypto-js/x64-core.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i2 = 0; i2 < x64WordsLength; i2++) {
              var x64Word = x64Words[i2];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            var words = clone2.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i2 = 0; i2 < wordsLength; i2++) {
              words[i2] = words[i2].clone();
            }
            return clone2;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// ../backend/node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "../backend/node_modules/crypto-js/lib-typedarrays.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i2 = 0; i2 < typedArrayByteLength; i2++) {
              words[i2 >>> 2] |= typedArray[i2] << 24 - i2 % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// ../backend/node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "../backend/node_modules/crypto-js/enc-utf16.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = swapEndian(words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= swapEndian(utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// ../backend/node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "../backend/node_modules/crypto-js/enc-base64.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// ../backend/node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "../backend/node_modules/crypto-js/enc-base64url.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  }
});

// ../backend/node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "../backend/node_modules/crypto-js/md5.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i2 = 0; i2 < 64; i2++) {
            T[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i2 = 0; i2 < 4; i2++) {
              var H_i = H[i2];
              H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function FF(a, b, c, d, x2, s2, t2) {
          var n = a + (b & c | ~b & d) + x2 + t2;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        function GG(a, b, c, d, x2, s2, t2) {
          var n = a + (b & d | c & ~d) + x2 + t2;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        function HH(a, b, c, d, x2, s2, t2) {
          var n = a + (b ^ c ^ d) + x2 + t2;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        function II(a, b, c, d, x2, s2, t2) {
          var n = a + (c ^ (b | ~d)) + x2 + t2;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// ../backend/node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "../backend/node_modules/crypto-js/sha1.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e2 = H[4];
            for (var i2 = 0; i2 < 80; i2++) {
              if (i2 < 16) {
                W[i2] = M[offset + i2] | 0;
              } else {
                var n = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
                W[i2] = n << 1 | n >>> 31;
              }
              var t2 = (a << 5 | a >>> 27) + e2 + W[i2];
              if (i2 < 20) {
                t2 += (b & c | ~b & d) + 1518500249;
              } else if (i2 < 40) {
                t2 += (b ^ c ^ d) + 1859775393;
              } else if (i2 < 60) {
                t2 += (b & c | b & d | c & d) - 1894007588;
              } else {
                t2 += (b ^ c ^ d) - 899497514;
              }
              e2 = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t2;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// ../backend/node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "../backend/node_modules/crypto-js/sha256.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e2 = H2[4];
            var f3 = H2[5];
            var g = H2[6];
            var h2 = H2[7];
            for (var i2 = 0; i2 < 64; i2++) {
              if (i2 < 16) {
                W[i2] = M[offset + i2] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i2 - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i2] = gamma0 + W[i2 - 7] + gamma1 + W[i2 - 16];
              }
              var ch = e2 & f3 ^ ~e2 & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
              var t1 = h2 + sigma1 + ch + K[i2] + W[i2];
              var t2 = sigma0 + maj;
              h2 = g;
              g = f3;
              f3 = e2;
              e2 = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e2 | 0;
            H2[5] = H2[5] + f3 | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// ../backend/node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "../backend/node_modules/crypto-js/sha224.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// ../backend/node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "../backend/node_modules/crypto-js/sha512.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i2 = 0; i2 < 80; i2++) {
            W[i2] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i2 = 0; i2 < 80; i2++) {
              var Wil;
              var Wih;
              var Wi = W[i2];
              if (i2 < 16) {
                Wih = Wi.high = M[offset + i2 * 2] | 0;
                Wil = Wi.low = M[offset + i2 * 2 + 1] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i2 - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i2 - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i2 - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i2];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// ../backend/node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "../backend/node_modules/crypto-js/sha384.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// ../backend/node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "../backend/node_modules/crypto-js/sha3.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x2 = 1, y = 0;
          for (var t2 = 0; t2 < 24; t2++) {
            RHO_OFFSETS[x2 + 5 * y] = (t2 + 1) * (t2 + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x2 + 3 * y) % 5;
            x2 = newX;
            y = newY;
          }
          for (var x2 = 0; x2 < 5; x2++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x2 + 5 * y] = y + (2 * x2 + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i2 = 0; i2 < 24; i2++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i2] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i2 = 0; i2 < 25; i2++) {
            T[i2] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i2 = 0; i2 < nBlockSizeLanes; i2++) {
              var M2i = M[offset + 2 * i2];
              var M2i1 = M[offset + 2 * i2 + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i2];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x2 = 0; x2 < 5; x2++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x2 + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x2];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x2 = 0; x2 < 5; x2++) {
                var Tx4 = T[(x2 + 4) % 5];
                var Tx1 = T[(x2 + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x2 + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x2 = 0; x2 < 5; x2++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x2 + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x2 + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x2 + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i2 = 0; i2 < outputLengthLanes; i2++) {
              var lane = state[i2];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            var state = clone2._state = this._state.slice(0);
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = state[i2].clone();
            }
            return clone2;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// ../backend/node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "../backend/node_modules/crypto-js/ripemd160.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t2;
            for (var i2 = 0; i2 < 80; i2 += 1) {
              t2 = al + M[offset + zl[i2]] | 0;
              if (i2 < 16) {
                t2 += f1(bl, cl, dl) + hl[0];
              } else if (i2 < 32) {
                t2 += f22(bl, cl, dl) + hl[1];
              } else if (i2 < 48) {
                t2 += f3(bl, cl, dl) + hl[2];
              } else if (i2 < 64) {
                t2 += f4(bl, cl, dl) + hl[3];
              } else {
                t2 += f5(bl, cl, dl) + hl[4];
              }
              t2 = t2 | 0;
              t2 = rotl(t2, sl[i2]);
              t2 = t2 + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t2;
              t2 = ar + M[offset + zr[i2]] | 0;
              if (i2 < 16) {
                t2 += f5(br, cr, dr) + hr[0];
              } else if (i2 < 32) {
                t2 += f4(br, cr, dr) + hr[1];
              } else if (i2 < 48) {
                t2 += f3(br, cr, dr) + hr[2];
              } else if (i2 < 64) {
                t2 += f22(br, cr, dr) + hr[3];
              } else {
                t2 += f1(br, cr, dr) + hr[4];
              }
              t2 = t2 | 0;
              t2 = rotl(t2, sr[i2]);
              t2 = t2 + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t2;
            }
            t2 = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t2;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i2 = 0; i2 < 5; i2++) {
              var H_i = H[i2];
              H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function f1(x2, y, z) {
          return x2 ^ y ^ z;
        }
        function f22(x2, y, z) {
          return x2 & y | ~x2 & z;
        }
        function f3(x2, y, z) {
          return (x2 | ~y) ^ z;
        }
        function f4(x2, y, z) {
          return x2 & z | y & ~z;
        }
        function f5(x2, y, z) {
          return x2 ^ (y | ~z);
        }
        function rotl(x2, n) {
          return x2 << n | x2 >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// ../backend/node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "../backend/node_modules/crypto-js/hmac.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i2 = 0; i2 < hasherBlockSize; i2++) {
              oKeyWords[i2] ^= 1549556828;
              iKeyWords[i2] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// ../backend/node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "../backend/node_modules/crypto-js/pbkdf2.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha256(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i2 = 1; i2 < iterations; i2++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// ../backend/node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "../backend/node_modules/crypto-js/evpkdf.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i2 = 1; i2 < iterations; i2++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// ../backend/node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "../backend/node_modules/crypto-js/cipher-core.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.lib.Cipher || (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ (function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          })()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = (function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= block[i2];
            }
          }
          return CBC2;
        })();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      })();
    });
  }
});

// ../backend/node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "../backend/node_modules/crypto-js/mode-cfb.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CFB = (function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i2 = 0; i2 < blockSize; i2++) {
            words[offset + i2] ^= keystream[i2];
          }
        }
        return CFB;
      })();
      return CryptoJS.mode.CFB;
    });
  }
});

// ../backend/node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "../backend/node_modules/crypto-js/mode-ctr.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTR = (function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      })();
      return CryptoJS.mode.CTR;
    });
  }
});

// ../backend/node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "../backend/node_modules/crypto-js/mode-ctr-gladman.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = (function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      })();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// ../backend/node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "../backend/node_modules/crypto-js/mode-ofb.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.OFB = (function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      })();
      return CryptoJS.mode.OFB;
    });
  }
});

// ../backend/node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "../backend/node_modules/crypto-js/mode-ecb.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.ECB = (function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      })();
      return CryptoJS.mode.ECB;
    });
  }
});

// ../backend/node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "../backend/node_modules/crypto-js/pad-ansix923.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// ../backend/node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "../backend/node_modules/crypto-js/pad-iso10126.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// ../backend/node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "../backend/node_modules/crypto-js/pad-iso97971.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// ../backend/node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "../backend/node_modules/crypto-js/pad-zeropadding.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i2 = data.sigBytes - 1;
          for (var i2 = data.sigBytes - 1; i2 >= 0; i2--) {
            if (dataWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) {
              data.sigBytes = i2 + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// ../backend/node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "../backend/node_modules/crypto-js/pad-nopadding.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// ../backend/node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "../backend/node_modules/crypto-js/format-hex.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// ../backend/node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "../backend/node_modules/crypto-js/aes.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i2 = 0; i2 < 256; i2++) {
            if (i2 < 128) {
              d[i2] = i2 << 1;
            } else {
              d[i2] = i2 << 1 ^ 283;
            }
          }
          var x2 = 0;
          var xi = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x2] = sx;
            INV_SBOX[sx] = x2;
            var x22 = d[x2];
            var x4 = d[x22];
            var x8 = d[x4];
            var t2 = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x2] = t2 << 24 | t2 >>> 8;
            SUB_MIX_1[x2] = t2 << 16 | t2 >>> 16;
            SUB_MIX_2[x2] = t2 << 8 | t2 >>> 24;
            SUB_MIX_3[x2] = t2;
            var t2 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x2 * 16843008;
            INV_SUB_MIX_0[sx] = t2 << 24 | t2 >>> 8;
            INV_SUB_MIX_1[sx] = t2 << 16 | t2 >>> 16;
            INV_SUB_MIX_2[sx] = t2 << 8 | t2 >>> 24;
            INV_SUB_MIX_3[sx] = t2;
            if (!x2) {
              x2 = xi = 1;
            } else {
              x2 = x22 ^ d[d[d[x8 ^ x22]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t2;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t2 = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t2 = t2 << 8 | t2 >>> 24;
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                  t2 ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t2;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t2 = keySchedule[ksRow];
              } else {
                var t2 = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t2;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t2 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t2 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t2 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t2 & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t2 = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t2;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t2 = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t2;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// ../backend/node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "../backend/node_modules/crypto-js/tripledes.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i2 = 0; i2 < 56; i2++) {
              var keyBitPos = PC1[i2] - 1;
              keyBits[i2] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i2 = 0; i2 < 24; i2++) {
                subKey[i2 / 6 | 0] |= keyBits[(PC2[i2] - 1 + bitShift) % 28] << 31 - i2 % 6;
                subKey[4 + (i2 / 6 | 0)] |= keyBits[28 + (PC2[i2 + 24] - 1 + bitShift) % 28] << 31 - i2 % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i2 = 1; i2 < 7; i2++) {
                subKey[i2] = subKey[i2] >>> (i2 - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i2 = 0; i2 < 16; i2++) {
              invSubKeys[i2] = subKeys[15 - i2];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f3 = 0;
              for (var i2 = 0; i2 < 8; i2++) {
                f3 |= SBOX_P[i2][((rBlock ^ subKey[i2]) & SBOX_MASK[i2]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f3;
            }
            var t2 = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t2;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t2 = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t2;
          this._lBlock ^= t2 << offset;
        }
        function exchangeRL(offset, mask) {
          var t2 = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t2;
          this._rBlock ^= t2 << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// ../backend/node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "../backend/node_modules/crypto-js/rc4.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S2 = this._S = [];
            for (var i2 = 0; i2 < 256; i2++) {
              S2[i2] = i2;
            }
            for (var i2 = 0, j = 0; i2 < 256; i2++) {
              var keyByteIndex = i2 % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S2[i2] + keyByte) % 256;
              var t2 = S2[i2];
              S2[i2] = S2[j];
              S2[j] = t2;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S2 = this._S;
          var i2 = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i2 = (i2 + 1) % 256;
            j = (j + S2[i2]) % 256;
            var t2 = S2[i2];
            S2[i2] = S2[j];
            S2[j] = t2;
            keystreamWord |= S2[(S2[i2] + S2[j]) % 256] << 24 - n * 8;
          }
          this._i = i2;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i2 = this.cfg.drop; i2 > 0; i2--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// ../backend/node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "../backend/node_modules/crypto-js/rabbit.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S2 = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i2 = 0; i2 < 4; i2++) {
              K[i2] = (K[i2] << 8 | K[i2] >>> 24) & 16711935 | (K[i2] << 24 | K[i2] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S2[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S2[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S2[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S2[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S2[i2] = (S2[i2] << 8 | S2[i2] >>> 24) & 16711935 | (S2[i2] << 24 | S2[i2] >>> 8) & 4278255360;
              M[offset + i2] ^= S2[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i2] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// ../backend/node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "../backend/node_modules/crypto-js/rabbit-legacy.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S2 = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S2[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S2[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S2[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S2[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S2[i2] = (S2[i2] << 8 | S2[i2] >>> 24) & 16711935 | (S2[i2] << 24 | S2[i2] >>> 8) & 4278255360;
              M[offset + i2] ^= S2[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i2] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// ../backend/node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "../backend/node_modules/crypto-js/blowfish.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F2(ctx, x2) {
          let a = x2 >> 24 & 255;
          let b = x2 >> 16 & 255;
          let c = x2 >> 8 & 255;
          let d = x2 & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i2 = 0; i2 < N; ++i2) {
            Xl = Xl ^ ctx.pbox[i2];
            Xr = F2(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i2 = N + 1; i2 > 1; --i2) {
            Xl = Xl ^ ctx.pbox[i2];
            Xr = F2(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i2 = 0; i2 < N + 2; i2 += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i2] = Data1;
            ctx.pbox[i2 + 1] = Data2;
          }
          for (let i2 = 0; i2 < 4; i2++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i2][j] = Data1;
              ctx.sbox[i2][j + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function(M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS.Blowfish;
    });
  }
});

// ../backend/node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "../backend/node_modules/crypto-js/index.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// ../backend/node_modules/restructure/dist/main.cjs
var require_main = __commonJS({
  "../backend/node_modules/restructure/dist/main.cjs"(exports2, module2) {
    function $parcel$exportWildcard(dest, source) {
      Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) {
          return;
        }
        Object.defineProperty(dest, key, {
          enumerable: true,
          get: function get() {
            return source[key];
          }
        });
      });
      return dest;
    }
    function $parcel$export(e2, n, v, s2) {
      Object.defineProperty(e2, n, { get: v, set: s2, enumerable: true, configurable: true });
    }
    $parcel$export(module2.exports, "EncodeStream", () => $1ed46182c1410e1d$export$9b4f661deaa36c3e);
    $parcel$export(module2.exports, "DecodeStream", () => $8ae20583b93e4933$export$c18b354bac7948e9);
    $parcel$export(module2.exports, "Array", () => $8ea28a08eae2a116$export$c4be6576ca6fe4aa);
    $parcel$export(module2.exports, "LazyArray", () => $444f112d3cbc7e9f$export$5576c026028d4983);
    $parcel$export(module2.exports, "Bitfield", () => $3def237a34a226b5$export$96b43b8a49f688ea);
    $parcel$export(module2.exports, "Boolean", () => $8415e91bb83faf74$export$ff887cefee4d61ec);
    $parcel$export(module2.exports, "Buffer", () => $08d28604119af47e$export$7d22a0eea6656474);
    $parcel$export(module2.exports, "Enum", () => $070ce31ea947467f$export$deb82508dd66d288);
    $parcel$export(module2.exports, "Optional", () => $80703542fcfb6ff0$export$7acb7b24c478f9c6);
    $parcel$export(module2.exports, "Reserved", () => $f4fd49878232508a$export$da9b5fe187a9aa1);
    $parcel$export(module2.exports, "String", () => $d8705cd4022e7dcf$export$89b8e0fa65f6a914);
    $parcel$export(module2.exports, "Struct", () => $aa8b66bae6abe658$export$eabc71f011df675a);
    $parcel$export(module2.exports, "VersionedStruct", () => $fcb208a95f6d048b$export$95a8b60f4da7dec8);
    var $8ae20583b93e4933$var$ENCODING_MAPPING = {
      utf16le: "utf-16le",
      ucs2: "utf-16le",
      utf16be: "utf-16be"
    };
    var $8ae20583b93e4933$export$c18b354bac7948e9 = class {
      constructor(buffer) {
        this.buffer = buffer;
        this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        this.pos = 0;
        this.length = this.buffer.length;
      }
      readString(length, encoding = "ascii") {
        encoding = $8ae20583b93e4933$var$ENCODING_MAPPING[encoding] || encoding;
        let buf = this.readBuffer(length);
        try {
          let decoder = new TextDecoder(encoding);
          return decoder.decode(buf);
        } catch (err) {
          return buf;
        }
      }
      readBuffer(length) {
        return this.buffer.slice(this.pos, this.pos += length);
      }
      readUInt24BE() {
        return (this.readUInt16BE() << 8) + this.readUInt8();
      }
      readUInt24LE() {
        return this.readUInt16LE() + (this.readUInt8() << 16);
      }
      readInt24BE() {
        return (this.readInt16BE() << 8) + this.readUInt8();
      }
      readInt24LE() {
        return this.readUInt16LE() + (this.readInt8() << 16);
      }
    };
    $8ae20583b93e4933$export$c18b354bac7948e9.TYPES = {
      UInt8: 1,
      UInt16: 2,
      UInt24: 3,
      UInt32: 4,
      Int8: 1,
      Int16: 2,
      Int24: 3,
      Int32: 4,
      Float: 4,
      Double: 8
    };
    for (let key of Object.getOwnPropertyNames(DataView.prototype)) if (key.slice(0, 3) === "get") {
      let type = key.slice(3).replace("Ui", "UI");
      if (type === "Float32") type = "Float";
      else if (type === "Float64") type = "Double";
      let bytes = $8ae20583b93e4933$export$c18b354bac7948e9.TYPES[type];
      $8ae20583b93e4933$export$c18b354bac7948e9.prototype["read" + type + (bytes === 1 ? "" : "BE")] = function() {
        const ret = this.view[key](this.pos, false);
        this.pos += bytes;
        return ret;
      };
      if (bytes !== 1) $8ae20583b93e4933$export$c18b354bac7948e9.prototype["read" + type + "LE"] = function() {
        const ret = this.view[key](this.pos, true);
        this.pos += bytes;
        return ret;
      };
    }
    var $1ed46182c1410e1d$var$textEncoder = new TextEncoder();
    var $1ed46182c1410e1d$var$isBigEndian = new Uint8Array(new Uint16Array([
      4660
    ]).buffer)[0] == 18;
    var $1ed46182c1410e1d$export$9b4f661deaa36c3e = class {
      constructor(buffer) {
        this.buffer = buffer;
        this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
        this.pos = 0;
      }
      writeBuffer(buffer) {
        this.buffer.set(buffer, this.pos);
        this.pos += buffer.length;
      }
      writeString(string, encoding = "ascii") {
        let buf;
        switch (encoding) {
          case "utf16le":
          case "utf16-le":
          case "ucs2":
            buf = $1ed46182c1410e1d$var$stringToUtf16(string, $1ed46182c1410e1d$var$isBigEndian);
            break;
          case "utf16be":
          case "utf16-be":
            buf = $1ed46182c1410e1d$var$stringToUtf16(string, !$1ed46182c1410e1d$var$isBigEndian);
            break;
          case "utf8":
            buf = $1ed46182c1410e1d$var$textEncoder.encode(string);
            break;
          case "ascii":
            buf = $1ed46182c1410e1d$var$stringToAscii(string);
            break;
          default:
            throw new Error(`Unsupported encoding: ${encoding}`);
        }
        this.writeBuffer(buf);
      }
      writeUInt24BE(val) {
        this.buffer[this.pos++] = val >>> 16 & 255;
        this.buffer[this.pos++] = val >>> 8 & 255;
        this.buffer[this.pos++] = val & 255;
      }
      writeUInt24LE(val) {
        this.buffer[this.pos++] = val & 255;
        this.buffer[this.pos++] = val >>> 8 & 255;
        this.buffer[this.pos++] = val >>> 16 & 255;
      }
      writeInt24BE(val) {
        if (val >= 0) this.writeUInt24BE(val);
        else this.writeUInt24BE(val + 16777215 + 1);
      }
      writeInt24LE(val) {
        if (val >= 0) this.writeUInt24LE(val);
        else this.writeUInt24LE(val + 16777215 + 1);
      }
      fill(val, length) {
        if (length < this.buffer.length) {
          this.buffer.fill(val, this.pos, this.pos + length);
          this.pos += length;
        } else {
          const buf = new Uint8Array(length);
          buf.fill(val);
          this.writeBuffer(buf);
        }
      }
    };
    function $1ed46182c1410e1d$var$stringToUtf16(string, swap) {
      let buf = new Uint16Array(string.length);
      for (let i2 = 0; i2 < string.length; i2++) {
        let code = string.charCodeAt(i2);
        if (swap) code = code >> 8 | (code & 255) << 8;
        buf[i2] = code;
      }
      return new Uint8Array(buf.buffer);
    }
    function $1ed46182c1410e1d$var$stringToAscii(string) {
      let buf = new Uint8Array(string.length);
      for (let i2 = 0; i2 < string.length; i2++)
        buf[i2] = string.charCodeAt(i2);
      return buf;
    }
    for (let key of Object.getOwnPropertyNames(DataView.prototype)) if (key.slice(0, 3) === "set") {
      let type = key.slice(3).replace("Ui", "UI");
      if (type === "Float32") type = "Float";
      else if (type === "Float64") type = "Double";
      let bytes = (0, $8ae20583b93e4933$export$c18b354bac7948e9).TYPES[type];
      $1ed46182c1410e1d$export$9b4f661deaa36c3e.prototype["write" + type + (bytes === 1 ? "" : "BE")] = function(value) {
        this.view[key](this.pos, value, false);
        this.pos += bytes;
      };
      if (bytes !== 1) $1ed46182c1410e1d$export$9b4f661deaa36c3e.prototype["write" + type + "LE"] = function(value) {
        this.view[key](this.pos, value, true);
        this.pos += bytes;
      };
    }
    var $8d21f7fa58802901$export$ef88aa0d34c34520 = class {
      fromBuffer(buffer) {
        let stream = new (0, $8ae20583b93e4933$export$c18b354bac7948e9)(buffer);
        return this.decode(stream);
      }
      toBuffer(value) {
        let size = this.size(value);
        let buffer = new Uint8Array(size);
        let stream = new (0, $1ed46182c1410e1d$export$9b4f661deaa36c3e)(buffer);
        this.encode(stream, value);
        return buffer;
      }
    };
    var $af65abf7bf65ac42$exports = {};
    $parcel$export($af65abf7bf65ac42$exports, "Number", () => $af65abf7bf65ac42$export$fffa67e515d04022);
    $parcel$export($af65abf7bf65ac42$exports, "uint8", () => $af65abf7bf65ac42$export$52e103c63c4e68cf);
    $parcel$export($af65abf7bf65ac42$exports, "uint16be", () => $af65abf7bf65ac42$export$60dfe43c8297a8f8);
    $parcel$export($af65abf7bf65ac42$exports, "uint16", () => $af65abf7bf65ac42$export$56bd24b5a3ee8456);
    $parcel$export($af65abf7bf65ac42$exports, "uint16le", () => $af65abf7bf65ac42$export$b92d76f0ca6d1789);
    $parcel$export($af65abf7bf65ac42$exports, "uint24be", () => $af65abf7bf65ac42$export$255f45171f96b50c);
    $parcel$export($af65abf7bf65ac42$exports, "uint24", () => $af65abf7bf65ac42$export$1925298fbd719b21);
    $parcel$export($af65abf7bf65ac42$exports, "uint24le", () => $af65abf7bf65ac42$export$758e1dafc8dc7271);
    $parcel$export($af65abf7bf65ac42$exports, "uint32be", () => $af65abf7bf65ac42$export$74c16dba6c885532);
    $parcel$export($af65abf7bf65ac42$exports, "uint32", () => $af65abf7bf65ac42$export$de9ffb9418dd7d0d);
    $parcel$export($af65abf7bf65ac42$exports, "uint32le", () => $af65abf7bf65ac42$export$5f744bb30a534bc9);
    $parcel$export($af65abf7bf65ac42$exports, "int8", () => $af65abf7bf65ac42$export$5984f25eab09961f);
    $parcel$export($af65abf7bf65ac42$exports, "int16be", () => $af65abf7bf65ac42$export$198ae7d10d26a900);
    $parcel$export($af65abf7bf65ac42$exports, "int16", () => $af65abf7bf65ac42$export$c35c15c7caeff2b6);
    $parcel$export($af65abf7bf65ac42$exports, "int16le", () => $af65abf7bf65ac42$export$399cc4b7169e5aed);
    $parcel$export($af65abf7bf65ac42$exports, "int24be", () => $af65abf7bf65ac42$export$3676d1f71eca2ec0);
    $parcel$export($af65abf7bf65ac42$exports, "int24", () => $af65abf7bf65ac42$export$73f695d681ac61f9);
    $parcel$export($af65abf7bf65ac42$exports, "int24le", () => $af65abf7bf65ac42$export$671f8672dbd40a4);
    $parcel$export($af65abf7bf65ac42$exports, "int32be", () => $af65abf7bf65ac42$export$78a2ac3d09dd42d5);
    $parcel$export($af65abf7bf65ac42$exports, "int32", () => $af65abf7bf65ac42$export$1d95835383bb05a);
    $parcel$export($af65abf7bf65ac42$exports, "int32le", () => $af65abf7bf65ac42$export$5ec1f146e759329a);
    $parcel$export($af65abf7bf65ac42$exports, "floatbe", () => $af65abf7bf65ac42$export$92b5c14c6abb5c97);
    $parcel$export($af65abf7bf65ac42$exports, "float", () => $af65abf7bf65ac42$export$6b5cd3983e3ee5ab);
    $parcel$export($af65abf7bf65ac42$exports, "floatle", () => $af65abf7bf65ac42$export$6d20592bc4cb19d9);
    $parcel$export($af65abf7bf65ac42$exports, "doublebe", () => $af65abf7bf65ac42$export$e50b9e97e4d43631);
    $parcel$export($af65abf7bf65ac42$exports, "double", () => $af65abf7bf65ac42$export$7b3cbda67be88f5f);
    $parcel$export($af65abf7bf65ac42$exports, "doublele", () => $af65abf7bf65ac42$export$6f53315aa512b751);
    $parcel$export($af65abf7bf65ac42$exports, "Fixed", () => $af65abf7bf65ac42$export$13475bbd2a37a9b4);
    $parcel$export($af65abf7bf65ac42$exports, "fixed16be", () => $af65abf7bf65ac42$export$f87b441e6bd90278);
    $parcel$export($af65abf7bf65ac42$exports, "fixed16", () => $af65abf7bf65ac42$export$a3abada75ef55921);
    $parcel$export($af65abf7bf65ac42$exports, "fixed16le", () => $af65abf7bf65ac42$export$3752a2886837dc22);
    $parcel$export($af65abf7bf65ac42$exports, "fixed32be", () => $af65abf7bf65ac42$export$dd71d8d9bc792632);
    $parcel$export($af65abf7bf65ac42$exports, "fixed32", () => $af65abf7bf65ac42$export$e913265d48471f2d);
    $parcel$export($af65abf7bf65ac42$exports, "fixed32le", () => $af65abf7bf65ac42$export$7fc47db6a5fc8223);
    var $af65abf7bf65ac42$export$fffa67e515d04022 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type, endian = "BE") {
        super();
        this.type = type;
        this.endian = endian;
        this.fn = this.type;
        if (this.type[this.type.length - 1] !== "8") this.fn += this.endian;
      }
      size() {
        return (0, $8ae20583b93e4933$export$c18b354bac7948e9).TYPES[this.type];
      }
      decode(stream) {
        return stream[`read${this.fn}`]();
      }
      encode(stream, val) {
        return stream[`write${this.fn}`](val);
      }
    };
    var $af65abf7bf65ac42$export$52e103c63c4e68cf = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt8");
    var $af65abf7bf65ac42$export$60dfe43c8297a8f8 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt16", "BE");
    var $af65abf7bf65ac42$export$56bd24b5a3ee8456 = $af65abf7bf65ac42$export$60dfe43c8297a8f8;
    var $af65abf7bf65ac42$export$b92d76f0ca6d1789 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt16", "LE");
    var $af65abf7bf65ac42$export$255f45171f96b50c = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt24", "BE");
    var $af65abf7bf65ac42$export$1925298fbd719b21 = $af65abf7bf65ac42$export$255f45171f96b50c;
    var $af65abf7bf65ac42$export$758e1dafc8dc7271 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt24", "LE");
    var $af65abf7bf65ac42$export$74c16dba6c885532 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt32", "BE");
    var $af65abf7bf65ac42$export$de9ffb9418dd7d0d = $af65abf7bf65ac42$export$74c16dba6c885532;
    var $af65abf7bf65ac42$export$5f744bb30a534bc9 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt32", "LE");
    var $af65abf7bf65ac42$export$5984f25eab09961f = new $af65abf7bf65ac42$export$fffa67e515d04022("Int8");
    var $af65abf7bf65ac42$export$198ae7d10d26a900 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int16", "BE");
    var $af65abf7bf65ac42$export$c35c15c7caeff2b6 = $af65abf7bf65ac42$export$198ae7d10d26a900;
    var $af65abf7bf65ac42$export$399cc4b7169e5aed = new $af65abf7bf65ac42$export$fffa67e515d04022("Int16", "LE");
    var $af65abf7bf65ac42$export$3676d1f71eca2ec0 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int24", "BE");
    var $af65abf7bf65ac42$export$73f695d681ac61f9 = $af65abf7bf65ac42$export$3676d1f71eca2ec0;
    var $af65abf7bf65ac42$export$671f8672dbd40a4 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int24", "LE");
    var $af65abf7bf65ac42$export$78a2ac3d09dd42d5 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int32", "BE");
    var $af65abf7bf65ac42$export$1d95835383bb05a = $af65abf7bf65ac42$export$78a2ac3d09dd42d5;
    var $af65abf7bf65ac42$export$5ec1f146e759329a = new $af65abf7bf65ac42$export$fffa67e515d04022("Int32", "LE");
    var $af65abf7bf65ac42$export$92b5c14c6abb5c97 = new $af65abf7bf65ac42$export$fffa67e515d04022("Float", "BE");
    var $af65abf7bf65ac42$export$6b5cd3983e3ee5ab = $af65abf7bf65ac42$export$92b5c14c6abb5c97;
    var $af65abf7bf65ac42$export$6d20592bc4cb19d9 = new $af65abf7bf65ac42$export$fffa67e515d04022("Float", "LE");
    var $af65abf7bf65ac42$export$e50b9e97e4d43631 = new $af65abf7bf65ac42$export$fffa67e515d04022("Double", "BE");
    var $af65abf7bf65ac42$export$7b3cbda67be88f5f = $af65abf7bf65ac42$export$e50b9e97e4d43631;
    var $af65abf7bf65ac42$export$6f53315aa512b751 = new $af65abf7bf65ac42$export$fffa67e515d04022("Double", "LE");
    var $af65abf7bf65ac42$export$13475bbd2a37a9b4 = class extends $af65abf7bf65ac42$export$fffa67e515d04022 {
      constructor(size, endian, fracBits = size >> 1) {
        super(`Int${size}`, endian);
        this._point = 1 << fracBits;
      }
      decode(stream) {
        return super.decode(stream) / this._point;
      }
      encode(stream, val) {
        return super.encode(stream, val * this._point | 0);
      }
    };
    var $af65abf7bf65ac42$export$f87b441e6bd90278 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(16, "BE");
    var $af65abf7bf65ac42$export$a3abada75ef55921 = $af65abf7bf65ac42$export$f87b441e6bd90278;
    var $af65abf7bf65ac42$export$3752a2886837dc22 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(16, "LE");
    var $af65abf7bf65ac42$export$dd71d8d9bc792632 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(32, "BE");
    var $af65abf7bf65ac42$export$e913265d48471f2d = $af65abf7bf65ac42$export$dd71d8d9bc792632;
    var $af65abf7bf65ac42$export$7fc47db6a5fc8223 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(32, "LE");
    var $4559ecf940edc78d$exports = {};
    $parcel$export($4559ecf940edc78d$exports, "resolveLength", () => $4559ecf940edc78d$export$83b6dc3503c1fda6);
    $parcel$export($4559ecf940edc78d$exports, "PropertyDescriptor", () => $4559ecf940edc78d$export$41705b1d644e0f14);
    function $4559ecf940edc78d$export$83b6dc3503c1fda6(length, stream, parent) {
      let res;
      if (typeof length === "number") res = length;
      else if (typeof length === "function") res = length.call(parent, parent);
      else if (parent && typeof length === "string") res = parent[length];
      else if (stream && length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) res = length.decode(stream);
      if (isNaN(res)) throw new Error("Not a fixed size");
      return res;
    }
    var $4559ecf940edc78d$export$41705b1d644e0f14 = class {
      constructor(opts = {}) {
        this.enumerable = true;
        this.configurable = true;
        for (let key in opts) {
          const val = opts[key];
          this[key] = val;
        }
      }
    };
    var $8ea28a08eae2a116$export$c4be6576ca6fe4aa = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type, length, lengthType = "count") {
        super();
        this.type = type;
        this.length = length;
        this.lengthType = lengthType;
      }
      decode(stream, parent) {
        let length;
        const { pos } = stream;
        const res = [];
        let ctx = parent;
        if (this.length != null) length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
          Object.defineProperties(res, {
            parent: {
              value: parent
            },
            _startOffset: {
              value: pos
            },
            _currentOffset: {
              value: 0,
              writable: true
            },
            _length: {
              value: length
            }
          });
          ctx = res;
        }
        if (length == null || this.lengthType === "bytes") {
          const target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;
          while (stream.pos < target) res.push(this.type.decode(stream, ctx));
        } else for (let i2 = 0, end = length; i2 < end; i2++) res.push(this.type.decode(stream, ctx));
        return res;
      }
      size(array, ctx, includePointers = true) {
        if (!array) return this.type.size(null, ctx) * $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, ctx);
        let size = 0;
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
          size += this.length.size();
          ctx = {
            parent: ctx,
            pointerSize: 0
          };
        }
        for (let item of array) size += this.type.size(item, ctx);
        if (ctx && includePointers && this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) size += ctx.pointerSize;
        return size;
      }
      encode(stream, array, parent) {
        let ctx = parent;
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
          ctx = {
            pointers: [],
            startOffset: stream.pos,
            parent
          };
          ctx.pointerOffset = stream.pos + this.size(array, ctx, false);
          this.length.encode(stream, array.length);
        }
        for (let item of array) this.type.encode(stream, item, ctx);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
          let i2 = 0;
          while (i2 < ctx.pointers.length) {
            const ptr = ctx.pointers[i2++];
            ptr.type.encode(stream, ptr.val, ptr.parent);
          }
        }
      }
    };
    var $444f112d3cbc7e9f$export$5576c026028d4983 = class extends (0, $8ea28a08eae2a116$export$c4be6576ca6fe4aa) {
      decode(stream, parent) {
        const { pos } = stream;
        const length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) parent = {
          parent,
          _startOffset: pos,
          _currentOffset: 0,
          _length: length
        };
        const res = new $444f112d3cbc7e9f$var$LazyArrayValue(this.type, length, stream, parent);
        stream.pos += length * this.type.size(null, parent);
        return res;
      }
      size(val, ctx) {
        if (val instanceof $444f112d3cbc7e9f$var$LazyArrayValue) val = val.toArray();
        return super.size(val, ctx);
      }
      encode(stream, val, ctx) {
        if (val instanceof $444f112d3cbc7e9f$var$LazyArrayValue) val = val.toArray();
        return super.encode(stream, val, ctx);
      }
    };
    var $444f112d3cbc7e9f$var$LazyArrayValue = class {
      constructor(type, length, stream, ctx) {
        this.type = type;
        this.length = length;
        this.stream = stream;
        this.ctx = ctx;
        this.base = this.stream.pos;
        this.items = [];
      }
      get(index) {
        if (index < 0 || index >= this.length) return void 0;
        if (this.items[index] == null) {
          const { pos } = this.stream;
          this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
          this.items[index] = this.type.decode(this.stream, this.ctx);
          this.stream.pos = pos;
        }
        return this.items[index];
      }
      toArray() {
        const result = [];
        for (let i2 = 0, end = this.length; i2 < end; i2++) result.push(this.get(i2));
        return result;
      }
    };
    var $3def237a34a226b5$export$96b43b8a49f688ea = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type, flags = []) {
        super();
        this.type = type;
        this.flags = flags;
      }
      decode(stream) {
        const val = this.type.decode(stream);
        const res = {};
        for (let i2 = 0; i2 < this.flags.length; i2++) {
          const flag = this.flags[i2];
          if (flag != null) res[flag] = !!(val & 1 << i2);
        }
        return res;
      }
      size() {
        return this.type.size();
      }
      encode(stream, keys) {
        let val = 0;
        for (let i2 = 0; i2 < this.flags.length; i2++) {
          const flag = this.flags[i2];
          if (flag != null) {
            if (keys[flag]) val |= 1 << i2;
          }
        }
        return this.type.encode(stream, val);
      }
    };
    var $8415e91bb83faf74$export$ff887cefee4d61ec = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type) {
        super();
        this.type = type;
      }
      decode(stream, parent) {
        return !!this.type.decode(stream, parent);
      }
      size(val, parent) {
        return this.type.size(val, parent);
      }
      encode(stream, val, parent) {
        return this.type.encode(stream, +val, parent);
      }
    };
    var $08d28604119af47e$export$7d22a0eea6656474 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(length) {
        super();
        this.length = length;
      }
      decode(stream, parent) {
        const length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        return stream.readBuffer(length);
      }
      size(val, parent) {
        if (!val) return $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, parent);
        let len = val.length;
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) len += this.length.size();
        return len;
      }
      encode(stream, buf, parent) {
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) this.length.encode(stream, buf.length);
        return stream.writeBuffer(buf);
      }
    };
    var $070ce31ea947467f$export$deb82508dd66d288 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type, options = []) {
        super();
        this.type = type;
        this.options = options;
      }
      decode(stream) {
        const index = this.type.decode(stream);
        return this.options[index] || index;
      }
      size() {
        return this.type.size();
      }
      encode(stream, val) {
        const index = this.options.indexOf(val);
        if (index === -1) throw new Error(`Unknown option in enum: ${val}`);
        return this.type.encode(stream, index);
      }
    };
    var $80703542fcfb6ff0$export$7acb7b24c478f9c6 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type, condition = true) {
        super();
        this.type = type;
        this.condition = condition;
      }
      decode(stream, parent) {
        let { condition } = this;
        if (typeof condition === "function") condition = condition.call(parent, parent);
        if (condition) return this.type.decode(stream, parent);
      }
      size(val, parent) {
        let { condition } = this;
        if (typeof condition === "function") condition = condition.call(parent, parent);
        if (condition) return this.type.size(val, parent);
        else return 0;
      }
      encode(stream, val, parent) {
        let { condition } = this;
        if (typeof condition === "function") condition = condition.call(parent, parent);
        if (condition) return this.type.encode(stream, val, parent);
      }
    };
    var $f4fd49878232508a$export$da9b5fe187a9aa1 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(type, count = 1) {
        super();
        this.type = type;
        this.count = count;
      }
      decode(stream, parent) {
        stream.pos += this.size(null, parent);
        return void 0;
      }
      size(data, parent) {
        const count = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.count, null, parent);
        return this.type.size() * count;
      }
      encode(stream, val, parent) {
        return stream.fill(0, this.size(val, parent));
      }
    };
    var $d8705cd4022e7dcf$export$89b8e0fa65f6a914 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(length, encoding = "ascii") {
        super();
        this.length = length;
        this.encoding = encoding;
      }
      decode(stream, parent) {
        let length, pos;
        let { encoding } = this;
        if (typeof encoding === "function") encoding = encoding.call(parent, parent) || "ascii";
        let width = $d8705cd4022e7dcf$var$encodingWidth(encoding);
        if (this.length != null) length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        else {
          let buffer;
          ({ buffer, length, pos } = stream);
          while (pos < length - width + 1 && (buffer[pos] !== 0 || width === 2 && buffer[pos + 1] !== 0)) pos += width;
          length = pos - stream.pos;
        }
        const string = stream.readString(length, encoding);
        if (this.length == null && stream.pos < stream.length) stream.pos += width;
        return string;
      }
      size(val, parent) {
        if (val === void 0 || val === null) return $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, parent);
        let { encoding } = this;
        if (typeof encoding === "function") encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || "ascii";
        if (encoding === "utf16be") encoding = "utf16le";
        let size = $d8705cd4022e7dcf$var$byteLength(val, encoding);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) size += this.length.size();
        if (this.length == null) size += $d8705cd4022e7dcf$var$encodingWidth(encoding);
        return size;
      }
      encode(stream, val, parent) {
        let { encoding } = this;
        if (typeof encoding === "function") encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || "ascii";
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) this.length.encode(stream, $d8705cd4022e7dcf$var$byteLength(val, encoding));
        stream.writeString(val, encoding);
        if (this.length == null) return $d8705cd4022e7dcf$var$encodingWidth(encoding) == 2 ? stream.writeUInt16LE(0) : stream.writeUInt8(0);
      }
    };
    function $d8705cd4022e7dcf$var$encodingWidth(encoding) {
      switch (encoding) {
        case "ascii":
        case "utf8":
          return 1;
        case "utf16le":
        case "utf16-le":
        case "utf-16be":
        case "utf-16le":
        case "utf16be":
        case "utf16-be":
        case "ucs2":
          return 2;
        default:
          return 1;
      }
    }
    function $d8705cd4022e7dcf$var$byteLength(string, encoding) {
      switch (encoding) {
        case "ascii":
          return string.length;
        case "utf8":
          let len = 0;
          for (let i2 = 0; i2 < string.length; i2++) {
            let c = string.charCodeAt(i2);
            if (c >= 55296 && c <= 56319 && i2 < string.length - 1) {
              let c2 = string.charCodeAt(++i2);
              if ((c2 & 64512) === 56320) c = ((c & 1023) << 10) + (c2 & 1023) + 65536;
              else
                i2--;
            }
            if ((c & 4294967168) === 0) len++;
            else if ((c & 4294965248) === 0) len += 2;
            else if ((c & 4294901760) === 0) len += 3;
            else if ((c & 4292870144) === 0) len += 4;
          }
          return len;
        case "utf16le":
        case "utf16-le":
        case "utf16be":
        case "utf16-be":
        case "ucs2":
          return string.length * 2;
        default:
          throw new Error("Unknown encoding " + encoding);
      }
    }
    var $aa8b66bae6abe658$export$eabc71f011df675a = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(fields = {}) {
        super();
        this.fields = fields;
      }
      decode(stream, parent, length = 0) {
        const res = this._setup(stream, parent, length);
        this._parseFields(stream, res, this.fields);
        if (this.process != null) this.process.call(res, stream);
        return res;
      }
      _setup(stream, parent, length) {
        const res = {};
        Object.defineProperties(res, {
          parent: {
            value: parent
          },
          _startOffset: {
            value: stream.pos
          },
          _currentOffset: {
            value: 0,
            writable: true
          },
          _length: {
            value: length
          }
        });
        return res;
      }
      _parseFields(stream, res, fields) {
        for (let key in fields) {
          var val;
          const type = fields[key];
          if (typeof type === "function") val = type.call(res, res);
          else val = type.decode(stream, res);
          if (val !== void 0) {
            if (val instanceof $4559ecf940edc78d$export$41705b1d644e0f14) Object.defineProperty(res, key, val);
            else res[key] = val;
          }
          res._currentOffset = stream.pos - res._startOffset;
        }
      }
      size(val, parent, includePointers = true) {
        if (val == null) val = {};
        const ctx = {
          parent,
          val,
          pointerSize: 0
        };
        if (this.preEncode != null) this.preEncode.call(val);
        let size = 0;
        for (let key in this.fields) {
          const type = this.fields[key];
          if (type.size != null) size += type.size(val[key], ctx);
        }
        if (includePointers) size += ctx.pointerSize;
        return size;
      }
      encode(stream, val, parent) {
        let type;
        if (this.preEncode != null) this.preEncode.call(val, stream);
        const ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent,
          val,
          pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
        for (let key in this.fields) {
          type = this.fields[key];
          if (type.encode != null) type.encode(stream, val[key], ctx);
        }
        let i2 = 0;
        while (i2 < ctx.pointers.length) {
          const ptr = ctx.pointers[i2++];
          ptr.type.encode(stream, ptr.val, ptr.parent);
        }
      }
    };
    var $fcb208a95f6d048b$var$getPath = (object, pathArray) => {
      return pathArray.reduce((prevObj, key) => prevObj && prevObj[key], object);
    };
    var $fcb208a95f6d048b$export$95a8b60f4da7dec8 = class _$fcb208a95f6d048b$export$95a8b60f4da7dec8 extends (0, $aa8b66bae6abe658$export$eabc71f011df675a) {
      constructor(type, versions = {}) {
        super();
        this.type = type;
        this.versions = versions;
        if (typeof type === "string") this.versionPath = type.split(".");
      }
      decode(stream, parent, length = 0) {
        const res = this._setup(stream, parent, length);
        if (typeof this.type === "string") res.version = $fcb208a95f6d048b$var$getPath(parent, this.versionPath);
        else res.version = this.type.decode(stream);
        if (this.versions.header) this._parseFields(stream, res, this.versions.header);
        const fields = this.versions[res.version];
        if (fields == null) throw new Error(`Unknown version ${res.version}`);
        if (fields instanceof _$fcb208a95f6d048b$export$95a8b60f4da7dec8) return fields.decode(stream, parent);
        this._parseFields(stream, res, fields);
        if (this.process != null) this.process.call(res, stream);
        return res;
      }
      size(val, parent, includePointers = true) {
        let key, type;
        if (!val) throw new Error("Not a fixed size");
        if (this.preEncode != null) this.preEncode.call(val);
        const ctx = {
          parent,
          val,
          pointerSize: 0
        };
        let size = 0;
        if (typeof this.type !== "string") size += this.type.size(val.version, ctx);
        if (this.versions.header) for (key in this.versions.header) {
          type = this.versions.header[key];
          if (type.size != null) size += type.size(val[key], ctx);
        }
        const fields = this.versions[val.version];
        if (fields == null) throw new Error(`Unknown version ${val.version}`);
        for (key in fields) {
          type = fields[key];
          if (type.size != null) size += type.size(val[key], ctx);
        }
        if (includePointers) size += ctx.pointerSize;
        return size;
      }
      encode(stream, val, parent) {
        let key, type;
        if (this.preEncode != null) this.preEncode.call(val, stream);
        const ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent,
          val,
          pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
        if (typeof this.type !== "string") this.type.encode(stream, val.version);
        if (this.versions.header) for (key in this.versions.header) {
          type = this.versions.header[key];
          if (type.encode != null) type.encode(stream, val[key], ctx);
        }
        const fields = this.versions[val.version];
        for (key in fields) {
          type = fields[key];
          if (type.encode != null) type.encode(stream, val[key], ctx);
        }
        let i2 = 0;
        while (i2 < ctx.pointers.length) {
          const ptr = ctx.pointers[i2++];
          ptr.type.encode(stream, ptr.val, ptr.parent);
        }
      }
    };
    var $92184962f8f0d5e2$exports = {};
    $parcel$export($92184962f8f0d5e2$exports, "Pointer", () => $92184962f8f0d5e2$export$b56007f12edf0c17);
    $parcel$export($92184962f8f0d5e2$exports, "VoidPointer", () => $92184962f8f0d5e2$export$df5cb1f3d04f5a0f);
    var $92184962f8f0d5e2$export$b56007f12edf0c17 = class extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
      constructor(offsetType, type, options = {}) {
        super();
        this.offsetType = offsetType;
        this.type = type;
        this.options = options;
        if (this.type === "void") this.type = null;
        if (this.options.type == null) this.options.type = "local";
        if (this.options.allowNull == null) this.options.allowNull = true;
        if (this.options.nullValue == null) this.options.nullValue = 0;
        if (this.options.lazy == null) this.options.lazy = false;
        if (this.options.relativeTo) {
          if (typeof this.options.relativeTo !== "function") throw new Error("relativeTo option must be a function");
          this.relativeToGetter = options.relativeTo;
        }
      }
      decode(stream, ctx) {
        const offset = this.offsetType.decode(stream, ctx);
        if (offset === this.options.nullValue && this.options.allowNull) return null;
        let relative;
        switch (this.options.type) {
          case "local":
            relative = ctx._startOffset;
            break;
          case "immediate":
            relative = stream.pos - this.offsetType.size();
            break;
          case "parent":
            relative = ctx.parent._startOffset;
            break;
          default:
            var c = ctx;
            while (c.parent) c = c.parent;
            relative = c._startOffset || 0;
        }
        if (this.options.relativeTo) relative += this.relativeToGetter(ctx);
        const ptr = offset + relative;
        if (this.type != null) {
          let val = null;
          const decodeValue = () => {
            if (val != null) return val;
            const { pos } = stream;
            stream.pos = ptr;
            val = this.type.decode(stream, ctx);
            stream.pos = pos;
            return val;
          };
          if (this.options.lazy) return new $4559ecf940edc78d$export$41705b1d644e0f14({
            get: decodeValue
          });
          return decodeValue();
        } else return ptr;
      }
      size(val, ctx) {
        const parent = ctx;
        switch (this.options.type) {
          case "local":
          case "immediate":
            break;
          case "parent":
            ctx = ctx.parent;
            break;
          default:
            while (ctx.parent) ctx = ctx.parent;
        }
        let { type } = this;
        if (type == null) {
          if (!(val instanceof $92184962f8f0d5e2$export$df5cb1f3d04f5a0f)) throw new Error("Must be a VoidPointer");
          ({ type } = val);
          val = val.value;
        }
        if (val && ctx) {
          let size = type.size(val, parent);
          ctx.pointerSize += size;
        }
        return this.offsetType.size();
      }
      encode(stream, val, ctx) {
        let relative;
        const parent = ctx;
        if (val == null) {
          this.offsetType.encode(stream, this.options.nullValue);
          return;
        }
        switch (this.options.type) {
          case "local":
            relative = ctx.startOffset;
            break;
          case "immediate":
            relative = stream.pos + this.offsetType.size(val, parent);
            break;
          case "parent":
            ctx = ctx.parent;
            relative = ctx.startOffset;
            break;
          default:
            relative = 0;
            while (ctx.parent) ctx = ctx.parent;
        }
        if (this.options.relativeTo) relative += this.relativeToGetter(parent.val);
        this.offsetType.encode(stream, ctx.pointerOffset - relative);
        let { type } = this;
        if (type == null) {
          if (!(val instanceof $92184962f8f0d5e2$export$df5cb1f3d04f5a0f)) throw new Error("Must be a VoidPointer");
          ({ type } = val);
          val = val.value;
        }
        ctx.pointers.push({
          type,
          val,
          parent
        });
        return ctx.pointerOffset += type.size(val, parent);
      }
    };
    var $92184962f8f0d5e2$export$df5cb1f3d04f5a0f = class {
      constructor(type, value) {
        this.type = type;
        this.value = value;
      }
    };
    $parcel$exportWildcard(module2.exports, $4559ecf940edc78d$exports);
    $parcel$exportWildcard(module2.exports, $af65abf7bf65ac42$exports);
    $parcel$exportWildcard(module2.exports, $92184962f8f0d5e2$exports);
  }
});

// ../backend/node_modules/@swc/helpers/cjs/_define_property.cjs
var require_define_property = __commonJS({
  "../backend/node_modules/@swc/helpers/cjs/_define_property.cjs"(exports2) {
    "use strict";
    function _define_property(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else obj[key] = value;
      return obj;
    }
    exports2._ = _define_property;
  }
});

// ../backend/node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s2, e2) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
        t2[p[i2]] = s2[p[i2]];
    }
  return t2;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r2 = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r2 = Reflect.decorate(decorators, target, key, desc);
  else for (var i2 = decorators.length - 1; i2 >= 0; i2--) if (d = decorators[i2]) r2 = (c < 3 ? d(r2) : c > 3 ? d(target, key, r2) : d(target, key)) || r2;
  return c > 3 && r2 && Object.defineProperty(target, key, r2), r2;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f3) {
    if (f3 !== void 0 && typeof f3 !== "function") throw new TypeError("Function expected");
    return f3;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i2 = decorators.length - 1; i2 >= 0; i2--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f3) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f3 || null));
    };
    var result = (0, decorators[i2])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i2 = 0; i2 < initializers.length; i2++) {
    value = useValue ? initializers[i2].call(thisArg, value) : initializers[i2].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x2) {
  return typeof x2 === "symbol" ? x2 : "".concat(x2);
}
function __setFunctionName(f3, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f3, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1) throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y, t2, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f3) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f3 = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
      if (y = 0, t2) op = [op[0] & 2, t2.value];
      switch (op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t2[1]) {
            _.label = t2[1];
            t2 = op;
            break;
          }
          if (t2 && _.label < t2[2]) {
            _.label = t2[2];
            _.ops.push(op);
            break;
          }
          if (t2[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e2) {
      op = [6, e2];
      y = 0;
    } finally {
      f3 = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m2, o) {
  for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m2, p);
}
function __values(o) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o[s2], i2 = 0;
  if (m2) return m2.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i2 >= o.length) o = void 0;
      return { value: o && o[i2++], done: !o };
    }
  };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2) return o;
  var i2 = m2.call(o), r2, ar = [], e2;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i2.next()).done) ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"])) m2.call(i2);
    } finally {
      if (e2) throw e2.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read(arguments[i2]));
  return ar;
}
function __spreadArrays() {
  for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++) s2 += arguments[i2].length;
  for (var r2 = Array(s2), k = 0, i2 = 0; i2 < il; i2++)
    for (var a = arguments[i2], j = 0, jl = a.length; j < jl; j++, k++)
      r2[k] = a[j];
  return r2;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i2 = 0, l = from.length, ar; i2 < l; i2++) {
    if (ar || !(i2 in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
      ar[i2] = from[i2];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i2, q = [];
  return i2 = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function awaitReturn(f3) {
    return function(v) {
      return Promise.resolve(v).then(f3, reject);
    };
  }
  function verb(n, f3) {
    if (g[n]) {
      i2[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f3) i2[n] = f3(i2[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e2) {
      settle(q[0][3], e2);
    }
  }
  function step(r2) {
    r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q[0][2], r2);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f3, v) {
    if (f3(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i2, p;
  return i2 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i2[Symbol.iterator] = function() {
    return this;
  }, i2;
  function verb(n, f3) {
    i2[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f3 ? f3(v) : v;
    } : f3;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o[Symbol.asyncIterator], i2;
  return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n) {
    i2[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k = ownKeys(mod), i2 = 0; i2 < k.length; i2++) if (k[i2] !== "default") __createBinding(result, mod, k[i2]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f3) {
  if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f3) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e2) {
        return Promise.reject(e2);
      }
    };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e2) {
    env.error = env.hasError ? new _SuppressedError(e2, env.error, "An error was suppressed during disposal.") : e2;
    env.hasError = true;
  }
  var r2, s2 = 0;
  function next() {
    while (r2 = env.stack.pop()) {
      try {
        if (!r2.async && s2 === 1) return s2 = 0, env.stack.push(r2), Promise.resolve().then(next);
        if (r2.dispose) {
          var result = r2.dispose.call(r2.value);
          if (r2.async) return s2 |= 2, Promise.resolve(result).then(next, function(e2) {
            fail(e2);
            return next();
          });
        } else s2 |= 1;
      } catch (e2) {
        fail(e2);
      }
    }
    if (s2 === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
    return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m2, tsx, d, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m2 : d + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path;
}
var extendStatics, __assign, __createBinding, __setModuleDefault, ownKeys, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../backend/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t2) {
        for (var s2, i2 = 1, n = arguments.length; i2 < n; i2++) {
          s2 = arguments[i2];
          for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p)) t2[p] = s2[p];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m2[k];
    });
    __setModuleDefault = Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    };
    ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e2 = new Error(message);
      return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension
    };
  }
});

// ../backend/node_modules/@swc/helpers/cjs/_ts_decorate.cjs
var require_ts_decorate = __commonJS({
  "../backend/node_modules/@swc/helpers/cjs/_ts_decorate.cjs"(exports2) {
    "use strict";
    exports2._ = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)).__decorate;
  }
});

// ../backend/node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "../backend/node_modules/fast-deep-equal/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i2, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a[i2], b[i2])) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i2])) return false;
        for (i2 = length; i2-- !== 0; ) {
          var key = keys[i2];
          if (!equal(a[key], b[key])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// ../backend/node_modules/tiny-inflate/index.js
var require_tiny_inflate = __commonJS({
  "../backend/node_modules/tiny-inflate/index.js"(exports2, module2) {
    var TINF_OK = 0;
    var TINF_DATA_ERROR = -3;
    function Tree() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function Data(source, dest) {
      this.source = source;
      this.sourceIndex = 0;
      this.tag = 0;
      this.bitcount = 0;
      this.dest = dest;
      this.destLen = 0;
      this.ltree = new Tree();
      this.dtree = new Tree();
    }
    var sltree = new Tree();
    var sdtree = new Tree();
    var length_bits = new Uint8Array(30);
    var length_base = new Uint16Array(30);
    var dist_bits = new Uint8Array(30);
    var dist_base = new Uint16Array(30);
    var clcidx = new Uint8Array([
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    ]);
    var code_tree = new Tree();
    var lengths = new Uint8Array(288 + 32);
    function tinf_build_bits_base(bits, base, delta, first) {
      var i2, sum;
      for (i2 = 0; i2 < delta; ++i2) bits[i2] = 0;
      for (i2 = 0; i2 < 30 - delta; ++i2) bits[i2 + delta] = i2 / delta | 0;
      for (sum = first, i2 = 0; i2 < 30; ++i2) {
        base[i2] = sum;
        sum += 1 << bits[i2];
      }
    }
    function tinf_build_fixed_trees(lt, dt) {
      var i2;
      for (i2 = 0; i2 < 7; ++i2) lt.table[i2] = 0;
      lt.table[7] = 24;
      lt.table[8] = 152;
      lt.table[9] = 112;
      for (i2 = 0; i2 < 24; ++i2) lt.trans[i2] = 256 + i2;
      for (i2 = 0; i2 < 144; ++i2) lt.trans[24 + i2] = i2;
      for (i2 = 0; i2 < 8; ++i2) lt.trans[24 + 144 + i2] = 280 + i2;
      for (i2 = 0; i2 < 112; ++i2) lt.trans[24 + 144 + 8 + i2] = 144 + i2;
      for (i2 = 0; i2 < 5; ++i2) dt.table[i2] = 0;
      dt.table[5] = 32;
      for (i2 = 0; i2 < 32; ++i2) dt.trans[i2] = i2;
    }
    var offs = new Uint16Array(16);
    function tinf_build_tree(t2, lengths2, off, num) {
      var i2, sum;
      for (i2 = 0; i2 < 16; ++i2) t2.table[i2] = 0;
      for (i2 = 0; i2 < num; ++i2) t2.table[lengths2[off + i2]]++;
      t2.table[0] = 0;
      for (sum = 0, i2 = 0; i2 < 16; ++i2) {
        offs[i2] = sum;
        sum += t2.table[i2];
      }
      for (i2 = 0; i2 < num; ++i2) {
        if (lengths2[off + i2]) t2.trans[offs[lengths2[off + i2]]++] = i2;
      }
    }
    function tinf_getbit(d) {
      if (!d.bitcount--) {
        d.tag = d.source[d.sourceIndex++];
        d.bitcount = 7;
      }
      var bit = d.tag & 1;
      d.tag >>>= 1;
      return bit;
    }
    function tinf_read_bits(d, num, base) {
      if (!num)
        return base;
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      var val = d.tag & 65535 >>> 16 - num;
      d.tag >>>= num;
      d.bitcount -= num;
      return val + base;
    }
    function tinf_decode_symbol(d, t2) {
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      var sum = 0, cur = 0, len = 0;
      var tag = d.tag;
      do {
        cur = 2 * cur + (tag & 1);
        tag >>>= 1;
        ++len;
        sum += t2.table[len];
        cur -= t2.table[len];
      } while (cur >= 0);
      d.tag = tag;
      d.bitcount -= len;
      return t2.trans[sum + cur];
    }
    function tinf_decode_trees(d, lt, dt) {
      var hlit, hdist, hclen;
      var i2, num, length;
      hlit = tinf_read_bits(d, 5, 257);
      hdist = tinf_read_bits(d, 5, 1);
      hclen = tinf_read_bits(d, 4, 4);
      for (i2 = 0; i2 < 19; ++i2) lengths[i2] = 0;
      for (i2 = 0; i2 < hclen; ++i2) {
        var clen = tinf_read_bits(d, 3, 0);
        lengths[clcidx[i2]] = clen;
      }
      tinf_build_tree(code_tree, lengths, 0, 19);
      for (num = 0; num < hlit + hdist; ) {
        var sym = tinf_decode_symbol(d, code_tree);
        switch (sym) {
          case 16:
            var prev = lengths[num - 1];
            for (length = tinf_read_bits(d, 2, 3); length; --length) {
              lengths[num++] = prev;
            }
            break;
          case 17:
            for (length = tinf_read_bits(d, 3, 3); length; --length) {
              lengths[num++] = 0;
            }
            break;
          case 18:
            for (length = tinf_read_bits(d, 7, 11); length; --length) {
              lengths[num++] = 0;
            }
            break;
          default:
            lengths[num++] = sym;
            break;
        }
      }
      tinf_build_tree(lt, lengths, 0, hlit);
      tinf_build_tree(dt, lengths, hlit, hdist);
    }
    function tinf_inflate_block_data(d, lt, dt) {
      while (1) {
        var sym = tinf_decode_symbol(d, lt);
        if (sym === 256) {
          return TINF_OK;
        }
        if (sym < 256) {
          d.dest[d.destLen++] = sym;
        } else {
          var length, dist, offs2;
          var i2;
          sym -= 257;
          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
          dist = tinf_decode_symbol(d, dt);
          offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
          for (i2 = offs2; i2 < offs2 + length; ++i2) {
            d.dest[d.destLen++] = d.dest[i2];
          }
        }
      }
    }
    function tinf_inflate_uncompressed_block(d) {
      var length, invlength;
      var i2;
      while (d.bitcount > 8) {
        d.sourceIndex--;
        d.bitcount -= 8;
      }
      length = d.source[d.sourceIndex + 1];
      length = 256 * length + d.source[d.sourceIndex];
      invlength = d.source[d.sourceIndex + 3];
      invlength = 256 * invlength + d.source[d.sourceIndex + 2];
      if (length !== (~invlength & 65535))
        return TINF_DATA_ERROR;
      d.sourceIndex += 4;
      for (i2 = length; i2; --i2)
        d.dest[d.destLen++] = d.source[d.sourceIndex++];
      d.bitcount = 0;
      return TINF_OK;
    }
    function tinf_uncompress(source, dest) {
      var d = new Data(source, dest);
      var bfinal, btype, res;
      do {
        bfinal = tinf_getbit(d);
        btype = tinf_read_bits(d, 2, 0);
        switch (btype) {
          case 0:
            res = tinf_inflate_uncompressed_block(d);
            break;
          case 1:
            res = tinf_inflate_block_data(d, sltree, sdtree);
            break;
          case 2:
            tinf_decode_trees(d, d.ltree, d.dtree);
            res = tinf_inflate_block_data(d, d.ltree, d.dtree);
            break;
          default:
            res = TINF_DATA_ERROR;
        }
        if (res !== TINF_OK)
          throw new Error("Data error");
      } while (!bfinal);
      if (d.destLen < d.dest.length) {
        if (typeof d.dest.slice === "function")
          return d.dest.slice(0, d.destLen);
        else
          return d.dest.subarray(0, d.destLen);
      }
      return d.dest;
    }
    tinf_build_fixed_trees(sltree, sdtree);
    tinf_build_bits_base(length_bits, length_base, 4, 3);
    tinf_build_bits_base(dist_bits, dist_base, 2, 1);
    length_bits[28] = 0;
    length_base[28] = 258;
    module2.exports = tinf_uncompress;
  }
});

// ../backend/node_modules/unicode-trie/swap.js
var require_swap = __commonJS({
  "../backend/node_modules/unicode-trie/swap.js"(exports2, module2) {
    var isBigEndian = new Uint8Array(new Uint32Array([305419896]).buffer)[0] === 18;
    var swap = (b, n, m2) => {
      let i2 = b[n];
      b[n] = b[m2];
      b[m2] = i2;
    };
    var swap32 = (array) => {
      const len = array.length;
      for (let i2 = 0; i2 < len; i2 += 4) {
        swap(array, i2, i2 + 3);
        swap(array, i2 + 1, i2 + 2);
      }
    };
    var swap32LE = (array) => {
      if (isBigEndian) {
        swap32(array);
      }
    };
    module2.exports = {
      swap32LE
    };
  }
});

// ../backend/node_modules/unicode-trie/index.js
var require_unicode_trie = __commonJS({
  "../backend/node_modules/unicode-trie/index.js"(exports2, module2) {
    var inflate = require_tiny_inflate();
    var { swap32LE } = require_swap();
    var SHIFT_1 = 6 + 5;
    var SHIFT_2 = 5;
    var SHIFT_1_2 = SHIFT_1 - SHIFT_2;
    var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;
    var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
    var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
    var INDEX_SHIFT = 2;
    var DATA_BLOCK_LENGTH = 1 << SHIFT_2;
    var DATA_MASK = DATA_BLOCK_LENGTH - 1;
    var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;
    var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;
    var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
    var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
    var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;
    var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
    var DATA_GRANULARITY = 1 << INDEX_SHIFT;
    var UnicodeTrie = class {
      constructor(data) {
        const isBuffer = typeof data.readUInt32BE === "function" && typeof data.slice === "function";
        if (isBuffer || data instanceof Uint8Array) {
          let uncompressedLength;
          if (isBuffer) {
            this.highStart = data.readUInt32LE(0);
            this.errorValue = data.readUInt32LE(4);
            uncompressedLength = data.readUInt32LE(8);
            data = data.slice(12);
          } else {
            const view = new DataView(data.buffer);
            this.highStart = view.getUint32(0, true);
            this.errorValue = view.getUint32(4, true);
            uncompressedLength = view.getUint32(8, true);
            data = data.subarray(12);
          }
          data = inflate(data, new Uint8Array(uncompressedLength));
          data = inflate(data, new Uint8Array(uncompressedLength));
          swap32LE(data);
          this.data = new Uint32Array(data.buffer);
        } else {
          ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);
        }
      }
      get(codePoint) {
        let index;
        if (codePoint < 0 || codePoint > 1114111) {
          return this.errorValue;
        }
        if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {
          index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        if (codePoint <= 65535) {
          index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        if (codePoint < this.highStart) {
          index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
          index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
          index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        return this.data[this.data.length - DATA_GRANULARITY];
      }
    };
    module2.exports = UnicodeTrie;
  }
});

// ../backend/node_modules/unicode-properties/dist/main.cjs
var require_main2 = __commonJS({
  "../backend/node_modules/unicode-properties/dist/main.cjs"(exports2, module2) {
    var $c5L0i$base64js = require_base64_js();
    var $c5L0i$unicodetrie = require_unicode_trie();
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    function $parcel$defineInteropFlag(a) {
      Object.defineProperty(a, "__esModule", { value: true, configurable: true });
    }
    function $parcel$export(e2, n, v, s2) {
      Object.defineProperty(e2, n, { get: v, set: s2, enumerable: true, configurable: true });
    }
    $parcel$defineInteropFlag(module2.exports);
    $parcel$export(module2.exports, "getCategory", () => $43d7963e56408b24$export$410364bbb673ddbc);
    $parcel$export(module2.exports, "getCombiningClass", () => $43d7963e56408b24$export$c03b919c6651ed55);
    $parcel$export(module2.exports, "getScript", () => $43d7963e56408b24$export$941569448d136665);
    $parcel$export(module2.exports, "getEastAsianWidth", () => $43d7963e56408b24$export$92f6187db8ca6d26);
    $parcel$export(module2.exports, "getNumericValue", () => $43d7963e56408b24$export$7d1258ebb7625a0d);
    $parcel$export(module2.exports, "isAlphabetic", () => $43d7963e56408b24$export$52c8ea63abd07594);
    $parcel$export(module2.exports, "isDigit", () => $43d7963e56408b24$export$727d9dbc4fbb948f);
    $parcel$export(module2.exports, "isPunctuation", () => $43d7963e56408b24$export$a5b49f4dc6a07d2c);
    $parcel$export(module2.exports, "isLowerCase", () => $43d7963e56408b24$export$7b6804e8df61fcf5);
    $parcel$export(module2.exports, "isUpperCase", () => $43d7963e56408b24$export$aebd617640818cda);
    $parcel$export(module2.exports, "isTitleCase", () => $43d7963e56408b24$export$de8b4ee23b2cf823);
    $parcel$export(module2.exports, "isWhiteSpace", () => $43d7963e56408b24$export$3c52dd84024ae72c);
    $parcel$export(module2.exports, "isBaseForm", () => $43d7963e56408b24$export$a11bdcffe109e74b);
    $parcel$export(module2.exports, "isMark", () => $43d7963e56408b24$export$e33ad6871e762338);
    $parcel$export(module2.exports, "default", () => $43d7963e56408b24$export$2e2bcd8739ae039);
    var $29668e65f2091c2c$exports = {};
    $29668e65f2091c2c$exports = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
    var $43d7963e56408b24$var$trie = new (0, $parcel$interopDefault($c5L0i$unicodetrie))((0, $parcel$interopDefault($c5L0i$base64js)).toByteArray(""));
    var $43d7963e56408b24$var$log2 = Math.log2 || ((n) => Math.log(n) / Math.LN2);
    var $43d7963e56408b24$var$bits = (n) => $43d7963e56408b24$var$log2(n) + 1 | 0;
    var $43d7963e56408b24$var$CATEGORY_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).categories.length - 1);
    var $43d7963e56408b24$var$COMBINING_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).combiningClasses.length - 1);
    var $43d7963e56408b24$var$SCRIPT_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).scripts.length - 1);
    var $43d7963e56408b24$var$EAW_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).eaw.length - 1);
    var $43d7963e56408b24$var$NUMBER_BITS = 10;
    var $43d7963e56408b24$var$CATEGORY_SHIFT = $43d7963e56408b24$var$COMBINING_BITS + $43d7963e56408b24$var$SCRIPT_BITS + $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$COMBINING_SHIFT = $43d7963e56408b24$var$SCRIPT_BITS + $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$SCRIPT_SHIFT = $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$EAW_SHIFT = $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$CATEGORY_MASK = (1 << $43d7963e56408b24$var$CATEGORY_BITS) - 1;
    var $43d7963e56408b24$var$COMBINING_MASK = (1 << $43d7963e56408b24$var$COMBINING_BITS) - 1;
    var $43d7963e56408b24$var$SCRIPT_MASK = (1 << $43d7963e56408b24$var$SCRIPT_BITS) - 1;
    var $43d7963e56408b24$var$EAW_MASK = (1 << $43d7963e56408b24$var$EAW_BITS) - 1;
    var $43d7963e56408b24$var$NUMBER_MASK = (1 << $43d7963e56408b24$var$NUMBER_BITS) - 1;
    function $43d7963e56408b24$export$410364bbb673ddbc(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).categories[val >> $43d7963e56408b24$var$CATEGORY_SHIFT & $43d7963e56408b24$var$CATEGORY_MASK];
    }
    function $43d7963e56408b24$export$c03b919c6651ed55(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).combiningClasses[val >> $43d7963e56408b24$var$COMBINING_SHIFT & $43d7963e56408b24$var$COMBINING_MASK];
    }
    function $43d7963e56408b24$export$941569448d136665(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).scripts[val >> $43d7963e56408b24$var$SCRIPT_SHIFT & $43d7963e56408b24$var$SCRIPT_MASK];
    }
    function $43d7963e56408b24$export$92f6187db8ca6d26(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).eaw[val >> $43d7963e56408b24$var$EAW_SHIFT & $43d7963e56408b24$var$EAW_MASK];
    }
    function $43d7963e56408b24$export$7d1258ebb7625a0d(codePoint) {
      let val = $43d7963e56408b24$var$trie.get(codePoint);
      let num = val & $43d7963e56408b24$var$NUMBER_MASK;
      if (num === 0) return null;
      else if (num <= 50) return num - 1;
      else if (num < 480) {
        const numerator = (num >> 4) - 12;
        const denominator = (num & 15) + 1;
        return numerator / denominator;
      } else if (num < 768) {
        val = (num >> 5) - 14;
        let exp = (num & 31) + 2;
        while (exp > 0) {
          val *= 10;
          exp--;
        }
        return val;
      } else {
        val = (num >> 2) - 191;
        let exp = (num & 3) + 1;
        while (exp > 0) {
          val *= 60;
          exp--;
        }
        return val;
      }
    }
    function $43d7963e56408b24$export$52c8ea63abd07594(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Nl";
    }
    function $43d7963e56408b24$export$727d9dbc4fbb948f(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Nd";
    }
    function $43d7963e56408b24$export$a5b49f4dc6a07d2c(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Pc" || category === "Pd" || category === "Pe" || category === "Pf" || category === "Pi" || category === "Po" || category === "Ps";
    }
    function $43d7963e56408b24$export$7b6804e8df61fcf5(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Ll";
    }
    function $43d7963e56408b24$export$aebd617640818cda(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Lu";
    }
    function $43d7963e56408b24$export$de8b4ee23b2cf823(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Lt";
    }
    function $43d7963e56408b24$export$3c52dd84024ae72c(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Zs" || category === "Zl" || category === "Zp";
    }
    function $43d7963e56408b24$export$a11bdcffe109e74b(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Nd" || category === "No" || category === "Nl" || category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Me" || category === "Mc";
    }
    function $43d7963e56408b24$export$e33ad6871e762338(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Mn" || category === "Me" || category === "Mc";
    }
    var $43d7963e56408b24$export$2e2bcd8739ae039 = {
      getCategory: $43d7963e56408b24$export$410364bbb673ddbc,
      getCombiningClass: $43d7963e56408b24$export$c03b919c6651ed55,
      getScript: $43d7963e56408b24$export$941569448d136665,
      getEastAsianWidth: $43d7963e56408b24$export$92f6187db8ca6d26,
      getNumericValue: $43d7963e56408b24$export$7d1258ebb7625a0d,
      isAlphabetic: $43d7963e56408b24$export$52c8ea63abd07594,
      isDigit: $43d7963e56408b24$export$727d9dbc4fbb948f,
      isPunctuation: $43d7963e56408b24$export$a5b49f4dc6a07d2c,
      isLowerCase: $43d7963e56408b24$export$7b6804e8df61fcf5,
      isUpperCase: $43d7963e56408b24$export$aebd617640818cda,
      isTitleCase: $43d7963e56408b24$export$de8b4ee23b2cf823,
      isWhiteSpace: $43d7963e56408b24$export$3c52dd84024ae72c,
      isBaseForm: $43d7963e56408b24$export$a11bdcffe109e74b,
      isMark: $43d7963e56408b24$export$e33ad6871e762338
    };
  }
});

// ../backend/node_modules/dfa/index.js
var require_dfa = __commonJS({
  "../backend/node_modules/dfa/index.js"(exports2, module2) {
    "use strict";
    var INITIAL_STATE = 1;
    var FAIL_STATE = 0;
    var StateMachine = class {
      constructor(dfa) {
        this.stateTable = dfa.stateTable;
        this.accepting = dfa.accepting;
        this.tags = dfa.tags;
      }
      /**
       * Returns an iterable object that yields pattern matches over the input sequence.
       * Matches are of the form [startIndex, endIndex, tags].
       */
      match(str) {
        var self2 = this;
        return {
          *[Symbol.iterator]() {
            var state = INITIAL_STATE;
            var startRun = null;
            var lastAccepting = null;
            var lastState = null;
            for (var p = 0; p < str.length; p++) {
              var c = str[p];
              lastState = state;
              state = self2.stateTable[state][c];
              if (state === FAIL_STATE) {
                if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
                  yield [startRun, lastAccepting, self2.tags[lastState]];
                }
                state = self2.stateTable[INITIAL_STATE][c];
                startRun = null;
              }
              if (state !== FAIL_STATE && startRun == null) {
                startRun = p;
              }
              if (self2.accepting[state]) {
                lastAccepting = p;
              }
              if (state === FAIL_STATE) {
                state = INITIAL_STATE;
              }
            }
            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
              yield [startRun, lastAccepting, self2.tags[state]];
            }
          }
        };
      }
      /**
       * For each match over the input sequence, action functions matching
       * the tag definitions in the input pattern are called with the startIndex,
       * endIndex, and sub-match sequence.
       */
      apply(str, actions) {
        for (var [start, end, tags] of this.match(str)) {
          for (var tag of tags) {
            if (typeof actions[tag] === "function") {
              actions[tag](start, end, str.slice(start, end + 1));
            }
          }
        }
      }
    };
    module2.exports = StateMachine;
  }
});

// ../backend/node_modules/clone/clone.js
var require_clone = __commonJS({
  "../backend/node_modules/clone/clone.js"(exports2, module2) {
    var clone2 = (function() {
      "use strict";
      function _instanceof(obj, type) {
        return type != null && obj instanceof type;
      }
      var nativeMap;
      try {
        nativeMap = Map;
      } catch (_) {
        nativeMap = function() {
        };
      }
      var nativeSet;
      try {
        nativeSet = Set;
      } catch (_) {
        nativeSet = function() {
        };
      }
      var nativePromise;
      try {
        nativePromise = Promise;
      } catch (_) {
        nativePromise = function() {
        };
      }
      function clone3(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === "object") {
          depth = circular.depth;
          prototype = circular.prototype;
          includeNonEnumerable = circular.includeNonEnumerable;
          circular = circular.circular;
        }
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != "undefined";
        if (typeof circular == "undefined")
          circular = true;
        if (typeof depth == "undefined")
          depth = Infinity;
        function _clone(parent2, depth2) {
          if (parent2 === null)
            return null;
          if (depth2 === 0)
            return parent2;
          var child;
          var proto;
          if (typeof parent2 != "object") {
            return parent2;
          }
          if (_instanceof(parent2, nativeMap)) {
            child = new nativeMap();
          } else if (_instanceof(parent2, nativeSet)) {
            child = new nativeSet();
          } else if (_instanceof(parent2, nativePromise)) {
            child = new nativePromise(function(resolve, reject) {
              parent2.then(function(value) {
                resolve(_clone(value, depth2 - 1));
              }, function(err) {
                reject(_clone(err, depth2 - 1));
              });
            });
          } else if (clone3.__isArray(parent2)) {
            child = [];
          } else if (clone3.__isRegExp(parent2)) {
            child = new RegExp(parent2.source, __getRegExpFlags(parent2));
            if (parent2.lastIndex) child.lastIndex = parent2.lastIndex;
          } else if (clone3.__isDate(parent2)) {
            child = new Date(parent2.getTime());
          } else if (useBuffer && Buffer.isBuffer(parent2)) {
            if (Buffer.allocUnsafe) {
              child = Buffer.allocUnsafe(parent2.length);
            } else {
              child = new Buffer(parent2.length);
            }
            parent2.copy(child);
            return child;
          } else if (_instanceof(parent2, Error)) {
            child = Object.create(parent2);
          } else {
            if (typeof prototype == "undefined") {
              proto = Object.getPrototypeOf(parent2);
              child = Object.create(proto);
            } else {
              child = Object.create(prototype);
              proto = prototype;
            }
          }
          if (circular) {
            var index = allParents.indexOf(parent2);
            if (index != -1) {
              return allChildren[index];
            }
            allParents.push(parent2);
            allChildren.push(child);
          }
          if (_instanceof(parent2, nativeMap)) {
            parent2.forEach(function(value, key) {
              var keyChild = _clone(key, depth2 - 1);
              var valueChild = _clone(value, depth2 - 1);
              child.set(keyChild, valueChild);
            });
          }
          if (_instanceof(parent2, nativeSet)) {
            parent2.forEach(function(value) {
              var entryChild = _clone(value, depth2 - 1);
              child.add(entryChild);
            });
          }
          for (var i2 in parent2) {
            var attrs;
            if (proto) {
              attrs = Object.getOwnPropertyDescriptor(proto, i2);
            }
            if (attrs && attrs.set == null) {
              continue;
            }
            child[i2] = _clone(parent2[i2], depth2 - 1);
          }
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(parent2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              var symbol = symbols[i2];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                continue;
              }
              child[symbol] = _clone(parent2[symbol], depth2 - 1);
              if (!descriptor.enumerable) {
                Object.defineProperty(child, symbol, {
                  enumerable: false
                });
              }
            }
          }
          if (includeNonEnumerable) {
            var allPropertyNames = Object.getOwnPropertyNames(parent2);
            for (var i2 = 0; i2 < allPropertyNames.length; i2++) {
              var propertyName = allPropertyNames[i2];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
              if (descriptor && descriptor.enumerable) {
                continue;
              }
              child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
              Object.defineProperty(child, propertyName, {
                enumerable: false
              });
            }
          }
          return child;
        }
        return _clone(parent, depth);
      }
      clone3.clonePrototype = function clonePrototype(parent) {
        if (parent === null)
          return null;
        var c = function() {
        };
        c.prototype = parent;
        return new c();
      };
      function __objToStr(o) {
        return Object.prototype.toString.call(o);
      }
      clone3.__objToStr = __objToStr;
      function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
      }
      clone3.__isDate = __isDate;
      function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
      }
      clone3.__isArray = __isArray;
      function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
      }
      clone3.__isRegExp = __isRegExp;
      function __getRegExpFlags(re) {
        var flags = "";
        if (re.global) flags += "g";
        if (re.ignoreCase) flags += "i";
        if (re.multiline) flags += "m";
        return flags;
      }
      clone3.__getRegExpFlags = __getRegExpFlags;
      return clone3;
    })();
    if (typeof module2 === "object" && module2.exports) {
      module2.exports = clone2;
    }
  }
});

// ../backend/node_modules/brotli/dec/streams.js
var require_streams2 = __commonJS({
  "../backend/node_modules/brotli/dec/streams.js"(exports2) {
    function BrotliInput(buffer) {
      this.buffer = buffer;
      this.pos = 0;
    }
    BrotliInput.prototype.read = function(buf, i2, count) {
      if (this.pos + count > this.buffer.length) {
        count = this.buffer.length - this.pos;
      }
      for (var p = 0; p < count; p++)
        buf[i2 + p] = this.buffer[this.pos + p];
      this.pos += count;
      return count;
    };
    exports2.BrotliInput = BrotliInput;
    function BrotliOutput(buf) {
      this.buffer = buf;
      this.pos = 0;
    }
    BrotliOutput.prototype.write = function(buf, count) {
      if (this.pos + count > this.buffer.length)
        throw new Error("Output buffer is not large enough");
      this.buffer.set(buf.subarray(0, count), this.pos);
      this.pos += count;
      return count;
    };
    exports2.BrotliOutput = BrotliOutput;
  }
});

// ../backend/node_modules/brotli/dec/bit_reader.js
var require_bit_reader = __commonJS({
  "../backend/node_modules/brotli/dec/bit_reader.js"(exports2, module2) {
    var BROTLI_READ_SIZE = 4096;
    var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
    var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
    var kBitMask = new Uint32Array([
      0,
      1,
      3,
      7,
      15,
      31,
      63,
      127,
      255,
      511,
      1023,
      2047,
      4095,
      8191,
      16383,
      32767,
      65535,
      131071,
      262143,
      524287,
      1048575,
      2097151,
      4194303,
      8388607,
      16777215
    ]);
    function BrotliBitReader(input) {
      this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
      this.input_ = input;
      this.reset();
    }
    BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
    BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;
    BrotliBitReader.prototype.reset = function() {
      this.buf_ptr_ = 0;
      this.val_ = 0;
      this.pos_ = 0;
      this.bit_pos_ = 0;
      this.bit_end_pos_ = 0;
      this.eos_ = 0;
      this.readMoreInput();
      for (var i2 = 0; i2 < 4; i2++) {
        this.val_ |= this.buf_[this.pos_] << 8 * i2;
        ++this.pos_;
      }
      return this.bit_end_pos_ > 0;
    };
    BrotliBitReader.prototype.readMoreInput = function() {
      if (this.bit_end_pos_ > 256) {
        return;
      } else if (this.eos_) {
        if (this.bit_pos_ > this.bit_end_pos_)
          throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
      } else {
        var dst = this.buf_ptr_;
        var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
        if (bytes_read < 0) {
          throw new Error("Unexpected end of input");
        }
        if (bytes_read < BROTLI_READ_SIZE) {
          this.eos_ = 1;
          for (var p = 0; p < 32; p++)
            this.buf_[dst + bytes_read + p] = 0;
        }
        if (dst === 0) {
          for (var p = 0; p < 32; p++)
            this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
          this.buf_ptr_ = BROTLI_READ_SIZE;
        } else {
          this.buf_ptr_ = 0;
        }
        this.bit_end_pos_ += bytes_read << 3;
      }
    };
    BrotliBitReader.prototype.fillBitWindow = function() {
      while (this.bit_pos_ >= 8) {
        this.val_ >>>= 8;
        this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
        ++this.pos_;
        this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
        this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
      }
    };
    BrotliBitReader.prototype.readBits = function(n_bits) {
      if (32 - this.bit_pos_ < n_bits) {
        this.fillBitWindow();
      }
      var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
      this.bit_pos_ += n_bits;
      return val;
    };
    module2.exports = BrotliBitReader;
  }
});

// ../backend/node_modules/brotli/dec/dictionary-data.js
var require_dictionary_data = __commonJS({
  "../backend/node_modules/brotli/dec/dictionary-data.js"(exports2) {
    exports2.dictionary = new Uint8Array([
      116,
      105,
      109,
      101,
      100,
      111,
      119,
      110,
      108,
      105,
      102,
      101,
      108,
      101,
      102,
      116,
      98,
      97,
      99,
      107,
      99,
      111,
      100,
      101,
      100,
      97,
      116,
      97,
      115,
      104,
      111,
      119,
      111,
      110,
      108,
      121,
      115,
      105,
      116,
      101,
      99,
      105,
      116,
      121,
      111,
      112,
      101,
      110,
      106,
      117,
      115,
      116,
      108,
      105,
      107,
      101,
      102,
      114,
      101,
      101,
      119,
      111,
      114,
      107,
      116,
      101,
      120,
      116,
      121,
      101,
      97,
      114,
      111,
      118,
      101,
      114,
      98,
      111,
      100,
      121,
      108,
      111,
      118,
      101,
      102,
      111,
      114,
      109,
      98,
      111,
      111,
      107,
      112,
      108,
      97,
      121,
      108,
      105,
      118,
      101,
      108,
      105,
      110,
      101,
      104,
      101,
      108,
      112,
      104,
      111,
      109,
      101,
      115,
      105,
      100,
      101,
      109,
      111,
      114,
      101,
      119,
      111,
      114,
      100,
      108,
      111,
      110,
      103,
      116,
      104,
      101,
      109,
      118,
      105,
      101,
      119,
      102,
      105,
      110,
      100,
      112,
      97,
      103,
      101,
      100,
      97,
      121,
      115,
      102,
      117,
      108,
      108,
      104,
      101,
      97,
      100,
      116,
      101,
      114,
      109,
      101,
      97,
      99,
      104,
      97,
      114,
      101,
      97,
      102,
      114,
      111,
      109,
      116,
      114,
      117,
      101,
      109,
      97,
      114,
      107,
      97,
      98,
      108,
      101,
      117,
      112,
      111,
      110,
      104,
      105,
      103,
      104,
      100,
      97,
      116,
      101,
      108,
      97,
      110,
      100,
      110,
      101,
      119,
      115,
      101,
      118,
      101,
      110,
      110,
      101,
      120,
      116,
      99,
      97,
      115,
      101,
      98,
      111,
      116,
      104,
      112,
      111,
      115,
      116,
      117,
      115,
      101,
      100,
      109,
      97,
      100,
      101,
      104,
      97,
      110,
      100,
      104,
      101,
      114,
      101,
      119,
      104,
      97,
      116,
      110,
      97,
      109,
      101,
      76,
      105,
      110,
      107,
      98,
      108,
      111,
      103,
      115,
      105,
      122,
      101,
      98,
      97,
      115,
      101,
      104,
      101,
      108,
      100,
      109,
      97,
      107,
      101,
      109,
      97,
      105,
      110,
      117,
      115,
      101,
      114,
      39,
      41,
      32,
      43,
      104,
      111,
      108,
      100,
      101,
      110,
      100,
      115,
      119,
      105,
      116,
      104,
      78,
      101,
      119,
      115,
      114,
      101,
      97,
      100,
      119,
      101,
      114,
      101,
      115,
      105,
      103,
      110,
      116,
      97,
      107,
      101,
      104,
      97,
      118,
      101,
      103,
      97,
      109,
      101,
      115,
      101,
      101,
      110,
      99,
      97,
      108,
      108,
      112,
      97,
      116,
      104,
      119,
      101,
      108,
      108,
      112,
      108,
      117,
      115,
      109,
      101,
      110,
      117,
      102,
      105,
      108,
      109,
      112,
      97,
      114,
      116,
      106,
      111,
      105,
      110,
      116,
      104,
      105,
      115,
      108,
      105,
      115,
      116,
      103,
      111,
      111,
      100,
      110,
      101,
      101,
      100,
      119,
      97,
      121,
      115,
      119,
      101,
      115,
      116,
      106,
      111,
      98,
      115,
      109,
      105,
      110,
      100,
      97,
      108,
      115,
      111,
      108,
      111,
      103,
      111,
      114,
      105,
      99,
      104,
      117,
      115,
      101,
      115,
      108,
      97,
      115,
      116,
      116,
      101,
      97,
      109,
      97,
      114,
      109,
      121,
      102,
      111,
      111,
      100,
      107,
      105,
      110,
      103,
      119,
      105,
      108,
      108,
      101,
      97,
      115,
      116,
      119,
      97,
      114,
      100,
      98,
      101,
      115,
      116,
      102,
      105,
      114,
      101,
      80,
      97,
      103,
      101,
      107,
      110,
      111,
      119,
      97,
      119,
      97,
      121,
      46,
      112,
      110,
      103,
      109,
      111,
      118,
      101,
      116,
      104,
      97,
      110,
      108,
      111,
      97,
      100,
      103,
      105,
      118,
      101,
      115,
      101,
      108,
      102,
      110,
      111,
      116,
      101,
      109,
      117,
      99,
      104,
      102,
      101,
      101,
      100,
      109,
      97,
      110,
      121,
      114,
      111,
      99,
      107,
      105,
      99,
      111,
      110,
      111,
      110,
      99,
      101,
      108,
      111,
      111,
      107,
      104,
      105,
      100,
      101,
      100,
      105,
      101,
      100,
      72,
      111,
      109,
      101,
      114,
      117,
      108,
      101,
      104,
      111,
      115,
      116,
      97,
      106,
      97,
      120,
      105,
      110,
      102,
      111,
      99,
      108,
      117,
      98,
      108,
      97,
      119,
      115,
      108,
      101,
      115,
      115,
      104,
      97,
      108,
      102,
      115,
      111,
      109,
      101,
      115,
      117,
      99,
      104,
      122,
      111,
      110,
      101,
      49,
      48,
      48,
      37,
      111,
      110,
      101,
      115,
      99,
      97,
      114,
      101,
      84,
      105,
      109,
      101,
      114,
      97,
      99,
      101,
      98,
      108,
      117,
      101,
      102,
      111,
      117,
      114,
      119,
      101,
      101,
      107,
      102,
      97,
      99,
      101,
      104,
      111,
      112,
      101,
      103,
      97,
      118,
      101,
      104,
      97,
      114,
      100,
      108,
      111,
      115,
      116,
      119,
      104,
      101,
      110,
      112,
      97,
      114,
      107,
      107,
      101,
      112,
      116,
      112,
      97,
      115,
      115,
      115,
      104,
      105,
      112,
      114,
      111,
      111,
      109,
      72,
      84,
      77,
      76,
      112,
      108,
      97,
      110,
      84,
      121,
      112,
      101,
      100,
      111,
      110,
      101,
      115,
      97,
      118,
      101,
      107,
      101,
      101,
      112,
      102,
      108,
      97,
      103,
      108,
      105,
      110,
      107,
      115,
      111,
      108,
      100,
      102,
      105,
      118,
      101,
      116,
      111,
      111,
      107,
      114,
      97,
      116,
      101,
      116,
      111,
      119,
      110,
      106,
      117,
      109,
      112,
      116,
      104,
      117,
      115,
      100,
      97,
      114,
      107,
      99,
      97,
      114,
      100,
      102,
      105,
      108,
      101,
      102,
      101,
      97,
      114,
      115,
      116,
      97,
      121,
      107,
      105,
      108,
      108,
      116,
      104,
      97,
      116,
      102,
      97,
      108,
      108,
      97,
      117,
      116,
      111,
      101,
      118,
      101,
      114,
      46,
      99,
      111,
      109,
      116,
      97,
      108,
      107,
      115,
      104,
      111,
      112,
      118,
      111,
      116,
      101,
      100,
      101,
      101,
      112,
      109,
      111,
      100,
      101,
      114,
      101,
      115,
      116,
      116,
      117,
      114,
      110,
      98,
      111,
      114,
      110,
      98,
      97,
      110,
      100,
      102,
      101,
      108,
      108,
      114,
      111,
      115,
      101,
      117,
      114,
      108,
      40,
      115,
      107,
      105,
      110,
      114,
      111,
      108,
      101,
      99,
      111,
      109,
      101,
      97,
      99,
      116,
      115,
      97,
      103,
      101,
      115,
      109,
      101,
      101,
      116,
      103,
      111,
      108,
      100,
      46,
      106,
      112,
      103,
      105,
      116,
      101,
      109,
      118,
      97,
      114,
      121,
      102,
      101,
      108,
      116,
      116,
      104,
      101,
      110,
      115,
      101,
      110,
      100,
      100,
      114,
      111,
      112,
      86,
      105,
      101,
      119,
      99,
      111,
      112,
      121,
      49,
      46,
      48,
      34,
      60,
      47,
      97,
      62,
      115,
      116,
      111,
      112,
      101,
      108,
      115,
      101,
      108,
      105,
      101,
      115,
      116,
      111,
      117,
      114,
      112,
      97,
      99,
      107,
      46,
      103,
      105,
      102,
      112,
      97,
      115,
      116,
      99,
      115,
      115,
      63,
      103,
      114,
      97,
      121,
      109,
      101,
      97,
      110,
      38,
      103,
      116,
      59,
      114,
      105,
      100,
      101,
      115,
      104,
      111,
      116,
      108,
      97,
      116,
      101,
      115,
      97,
      105,
      100,
      114,
      111,
      97,
      100,
      118,
      97,
      114,
      32,
      102,
      101,
      101,
      108,
      106,
      111,
      104,
      110,
      114,
      105,
      99,
      107,
      112,
      111,
      114,
      116,
      102,
      97,
      115,
      116,
      39,
      85,
      65,
      45,
      100,
      101,
      97,
      100,
      60,
      47,
      98,
      62,
      112,
      111,
      111,
      114,
      98,
      105,
      108,
      108,
      116,
      121,
      112,
      101,
      85,
      46,
      83,
      46,
      119,
      111,
      111,
      100,
      109,
      117,
      115,
      116,
      50,
      112,
      120,
      59,
      73,
      110,
      102,
      111,
      114,
      97,
      110,
      107,
      119,
      105,
      100,
      101,
      119,
      97,
      110,
      116,
      119,
      97,
      108,
      108,
      108,
      101,
      97,
      100,
      91,
      48,
      93,
      59,
      112,
      97,
      117,
      108,
      119,
      97,
      118,
      101,
      115,
      117,
      114,
      101,
      36,
      40,
      39,
      35,
      119,
      97,
      105,
      116,
      109,
      97,
      115,
      115,
      97,
      114,
      109,
      115,
      103,
      111,
      101,
      115,
      103,
      97,
      105,
      110,
      108,
      97,
      110,
      103,
      112,
      97,
      105,
      100,
      33,
      45,
      45,
      32,
      108,
      111,
      99,
      107,
      117,
      110,
      105,
      116,
      114,
      111,
      111,
      116,
      119,
      97,
      108,
      107,
      102,
      105,
      114,
      109,
      119,
      105,
      102,
      101,
      120,
      109,
      108,
      34,
      115,
      111,
      110,
      103,
      116,
      101,
      115,
      116,
      50,
      48,
      112,
      120,
      107,
      105,
      110,
      100,
      114,
      111,
      119,
      115,
      116,
      111,
      111,
      108,
      102,
      111,
      110,
      116,
      109,
      97,
      105,
      108,
      115,
      97,
      102,
      101,
      115,
      116,
      97,
      114,
      109,
      97,
      112,
      115,
      99,
      111,
      114,
      101,
      114,
      97,
      105,
      110,
      102,
      108,
      111,
      119,
      98,
      97,
      98,
      121,
      115,
      112,
      97,
      110,
      115,
      97,
      121,
      115,
      52,
      112,
      120,
      59,
      54,
      112,
      120,
      59,
      97,
      114,
      116,
      115,
      102,
      111,
      111,
      116,
      114,
      101,
      97,
      108,
      119,
      105,
      107,
      105,
      104,
      101,
      97,
      116,
      115,
      116,
      101,
      112,
      116,
      114,
      105,
      112,
      111,
      114,
      103,
      47,
      108,
      97,
      107,
      101,
      119,
      101,
      97,
      107,
      116,
      111,
      108,
      100,
      70,
      111,
      114,
      109,
      99,
      97,
      115,
      116,
      102,
      97,
      110,
      115,
      98,
      97,
      110,
      107,
      118,
      101,
      114,
      121,
      114,
      117,
      110,
      115,
      106,
      117,
      108,
      121,
      116,
      97,
      115,
      107,
      49,
      112,
      120,
      59,
      103,
      111,
      97,
      108,
      103,
      114,
      101,
      119,
      115,
      108,
      111,
      119,
      101,
      100,
      103,
      101,
      105,
      100,
      61,
      34,
      115,
      101,
      116,
      115,
      53,
      112,
      120,
      59,
      46,
      106,
      115,
      63,
      52,
      48,
      112,
      120,
      105,
      102,
      32,
      40,
      115,
      111,
      111,
      110,
      115,
      101,
      97,
      116,
      110,
      111,
      110,
      101,
      116,
      117,
      98,
      101,
      122,
      101,
      114,
      111,
      115,
      101,
      110,
      116,
      114,
      101,
      101,
      100,
      102,
      97,
      99,
      116,
      105,
      110,
      116,
      111,
      103,
      105,
      102,
      116,
      104,
      97,
      114,
      109,
      49,
      56,
      112,
      120,
      99,
      97,
      109,
      101,
      104,
      105,
      108,
      108,
      98,
      111,
      108,
      100,
      122,
      111,
      111,
      109,
      118,
      111,
      105,
      100,
      101,
      97,
      115,
      121,
      114,
      105,
      110,
      103,
      102,
      105,
      108,
      108,
      112,
      101,
      97,
      107,
      105,
      110,
      105,
      116,
      99,
      111,
      115,
      116,
      51,
      112,
      120,
      59,
      106,
      97,
      99,
      107,
      116,
      97,
      103,
      115,
      98,
      105,
      116,
      115,
      114,
      111,
      108,
      108,
      101,
      100,
      105,
      116,
      107,
      110,
      101,
      119,
      110,
      101,
      97,
      114,
      60,
      33,
      45,
      45,
      103,
      114,
      111,
      119,
      74,
      83,
      79,
      78,
      100,
      117,
      116,
      121,
      78,
      97,
      109,
      101,
      115,
      97,
      108,
      101,
      121,
      111,
      117,
      32,
      108,
      111,
      116,
      115,
      112,
      97,
      105,
      110,
      106,
      97,
      122,
      122,
      99,
      111,
      108,
      100,
      101,
      121,
      101,
      115,
      102,
      105,
      115,
      104,
      119,
      119,
      119,
      46,
      114,
      105,
      115,
      107,
      116,
      97,
      98,
      115,
      112,
      114,
      101,
      118,
      49,
      48,
      112,
      120,
      114,
      105,
      115,
      101,
      50,
      53,
      112,
      120,
      66,
      108,
      117,
      101,
      100,
      105,
      110,
      103,
      51,
      48,
      48,
      44,
      98,
      97,
      108,
      108,
      102,
      111,
      114,
      100,
      101,
      97,
      114,
      110,
      119,
      105,
      108,
      100,
      98,
      111,
      120,
      46,
      102,
      97,
      105,
      114,
      108,
      97,
      99,
      107,
      118,
      101,
      114,
      115,
      112,
      97,
      105,
      114,
      106,
      117,
      110,
      101,
      116,
      101,
      99,
      104,
      105,
      102,
      40,
      33,
      112,
      105,
      99,
      107,
      101,
      118,
      105,
      108,
      36,
      40,
      34,
      35,
      119,
      97,
      114,
      109,
      108,
      111,
      114,
      100,
      100,
      111,
      101,
      115,
      112,
      117,
      108,
      108,
      44,
      48,
      48,
      48,
      105,
      100,
      101,
      97,
      100,
      114,
      97,
      119,
      104,
      117,
      103,
      101,
      115,
      112,
      111,
      116,
      102,
      117,
      110,
      100,
      98,
      117,
      114,
      110,
      104,
      114,
      101,
      102,
      99,
      101,
      108,
      108,
      107,
      101,
      121,
      115,
      116,
      105,
      99,
      107,
      104,
      111,
      117,
      114,
      108,
      111,
      115,
      115,
      102,
      117,
      101,
      108,
      49,
      50,
      112,
      120,
      115,
      117,
      105,
      116,
      100,
      101,
      97,
      108,
      82,
      83,
      83,
      34,
      97,
      103,
      101,
      100,
      103,
      114,
      101,
      121,
      71,
      69,
      84,
      34,
      101,
      97,
      115,
      101,
      97,
      105,
      109,
      115,
      103,
      105,
      114,
      108,
      97,
      105,
      100,
      115,
      56,
      112,
      120,
      59,
      110,
      97,
      118,
      121,
      103,
      114,
      105,
      100,
      116,
      105,
      112,
      115,
      35,
      57,
      57,
      57,
      119,
      97,
      114,
      115,
      108,
      97,
      100,
      121,
      99,
      97,
      114,
      115,
      41,
      59,
      32,
      125,
      112,
      104,
      112,
      63,
      104,
      101,
      108,
      108,
      116,
      97,
      108,
      108,
      119,
      104,
      111,
      109,
      122,
      104,
      58,
      229,
      42,
      47,
      13,
      10,
      32,
      49,
      48,
      48,
      104,
      97,
      108,
      108,
      46,
      10,
      10,
      65,
      55,
      112,
      120,
      59,
      112,
      117,
      115,
      104,
      99,
      104,
      97,
      116,
      48,
      112,
      120,
      59,
      99,
      114,
      101,
      119,
      42,
      47,
      60,
      47,
      104,
      97,
      115,
      104,
      55,
      53,
      112,
      120,
      102,
      108,
      97,
      116,
      114,
      97,
      114,
      101,
      32,
      38,
      38,
      32,
      116,
      101,
      108,
      108,
      99,
      97,
      109,
      112,
      111,
      110,
      116,
      111,
      108,
      97,
      105,
      100,
      109,
      105,
      115,
      115,
      115,
      107,
      105,
      112,
      116,
      101,
      110,
      116,
      102,
      105,
      110,
      101,
      109,
      97,
      108,
      101,
      103,
      101,
      116,
      115,
      112,
      108,
      111,
      116,
      52,
      48,
      48,
      44,
      13,
      10,
      13,
      10,
      99,
      111,
      111,
      108,
      102,
      101,
      101,
      116,
      46,
      112,
      104,
      112,
      60,
      98,
      114,
      62,
      101,
      114,
      105,
      99,
      109,
      111,
      115,
      116,
      103,
      117,
      105,
      100,
      98,
      101,
      108,
      108,
      100,
      101,
      115,
      99,
      104,
      97,
      105,
      114,
      109,
      97,
      116,
      104,
      97,
      116,
      111,
      109,
      47,
      105,
      109,
      103,
      38,
      35,
      56,
      50,
      108,
      117,
      99,
      107,
      99,
      101,
      110,
      116,
      48,
      48,
      48,
      59,
      116,
      105,
      110,
      121,
      103,
      111,
      110,
      101,
      104,
      116,
      109,
      108,
      115,
      101,
      108,
      108,
      100,
      114,
      117,
      103,
      70,
      82,
      69,
      69,
      110,
      111,
      100,
      101,
      110,
      105,
      99,
      107,
      63,
      105,
      100,
      61,
      108,
      111,
      115,
      101,
      110,
      117,
      108,
      108,
      118,
      97,
      115,
      116,
      119,
      105,
      110,
      100,
      82,
      83,
      83,
      32,
      119,
      101,
      97,
      114,
      114,
      101,
      108,
      121,
      98,
      101,
      101,
      110,
      115,
      97,
      109,
      101,
      100,
      117,
      107,
      101,
      110,
      97,
      115,
      97,
      99,
      97,
      112,
      101,
      119,
      105,
      115,
      104,
      103,
      117,
      108,
      102,
      84,
      50,
      51,
      58,
      104,
      105,
      116,
      115,
      115,
      108,
      111,
      116,
      103,
      97,
      116,
      101,
      107,
      105,
      99,
      107,
      98,
      108,
      117,
      114,
      116,
      104,
      101,
      121,
      49,
      53,
      112,
      120,
      39,
      39,
      41,
      59,
      41,
      59,
      34,
      62,
      109,
      115,
      105,
      101,
      119,
      105,
      110,
      115,
      98,
      105,
      114,
      100,
      115,
      111,
      114,
      116,
      98,
      101,
      116,
      97,
      115,
      101,
      101,
      107,
      84,
      49,
      56,
      58,
      111,
      114,
      100,
      115,
      116,
      114,
      101,
      101,
      109,
      97,
      108,
      108,
      54,
      48,
      112,
      120,
      102,
      97,
      114,
      109,
      226,
      128,
      153,
      115,
      98,
      111,
      121,
      115,
      91,
      48,
      93,
      46,
      39,
      41,
      59,
      34,
      80,
      79,
      83,
      84,
      98,
      101,
      97,
      114,
      107,
      105,
      100,
      115,
      41,
      59,
      125,
      125,
      109,
      97,
      114,
      121,
      116,
      101,
      110,
      100,
      40,
      85,
      75,
      41,
      113,
      117,
      97,
      100,
      122,
      104,
      58,
      230,
      45,
      115,
      105,
      122,
      45,
      45,
      45,
      45,
      112,
      114,
      111,
      112,
      39,
      41,
      59,
      13,
      108,
      105,
      102,
      116,
      84,
      49,
      57,
      58,
      118,
      105,
      99,
      101,
      97,
      110,
      100,
      121,
      100,
      101,
      98,
      116,
      62,
      82,
      83,
      83,
      112,
      111,
      111,
      108,
      110,
      101,
      99,
      107,
      98,
      108,
      111,
      119,
      84,
      49,
      54,
      58,
      100,
      111,
      111,
      114,
      101,
      118,
      97,
      108,
      84,
      49,
      55,
      58,
      108,
      101,
      116,
      115,
      102,
      97,
      105,
      108,
      111,
      114,
      97,
      108,
      112,
      111,
      108,
      108,
      110,
      111,
      118,
      97,
      99,
      111,
      108,
      115,
      103,
      101,
      110,
      101,
      32,
      226,
      128,
      148,
      115,
      111,
      102,
      116,
      114,
      111,
      109,
      101,
      116,
      105,
      108,
      108,
      114,
      111,
      115,
      115,
      60,
      104,
      51,
      62,
      112,
      111,
      117,
      114,
      102,
      97,
      100,
      101,
      112,
      105,
      110,
      107,
      60,
      116,
      114,
      62,
      109,
      105,
      110,
      105,
      41,
      124,
      33,
      40,
      109,
      105,
      110,
      101,
      122,
      104,
      58,
      232,
      98,
      97,
      114,
      115,
      104,
      101,
      97,
      114,
      48,
      48,
      41,
      59,
      109,
      105,
      108,
      107,
      32,
      45,
      45,
      62,
      105,
      114,
      111,
      110,
      102,
      114,
      101,
      100,
      100,
      105,
      115,
      107,
      119,
      101,
      110,
      116,
      115,
      111,
      105,
      108,
      112,
      117,
      116,
      115,
      47,
      106,
      115,
      47,
      104,
      111,
      108,
      121,
      84,
      50,
      50,
      58,
      73,
      83,
      66,
      78,
      84,
      50,
      48,
      58,
      97,
      100,
      97,
      109,
      115,
      101,
      101,
      115,
      60,
      104,
      50,
      62,
      106,
      115,
      111,
      110,
      39,
      44,
      32,
      39,
      99,
      111,
      110,
      116,
      84,
      50,
      49,
      58,
      32,
      82,
      83,
      83,
      108,
      111,
      111,
      112,
      97,
      115,
      105,
      97,
      109,
      111,
      111,
      110,
      60,
      47,
      112,
      62,
      115,
      111,
      117,
      108,
      76,
      73,
      78,
      69,
      102,
      111,
      114,
      116,
      99,
      97,
      114,
      116,
      84,
      49,
      52,
      58,
      60,
      104,
      49,
      62,
      56,
      48,
      112,
      120,
      33,
      45,
      45,
      60,
      57,
      112,
      120,
      59,
      84,
      48,
      52,
      58,
      109,
      105,
      107,
      101,
      58,
      52,
      54,
      90,
      110,
      105,
      99,
      101,
      105,
      110,
      99,
      104,
      89,
      111,
      114,
      107,
      114,
      105,
      99,
      101,
      122,
      104,
      58,
      228,
      39,
      41,
      41,
      59,
      112,
      117,
      114,
      101,
      109,
      97,
      103,
      101,
      112,
      97,
      114,
      97,
      116,
      111,
      110,
      101,
      98,
      111,
      110,
      100,
      58,
      51,
      55,
      90,
      95,
      111,
      102,
      95,
      39,
      93,
      41,
      59,
      48,
      48,
      48,
      44,
      122,
      104,
      58,
      231,
      116,
      97,
      110,
      107,
      121,
      97,
      114,
      100,
      98,
      111,
      119,
      108,
      98,
      117,
      115,
      104,
      58,
      53,
      54,
      90,
      74,
      97,
      118,
      97,
      51,
      48,
      112,
      120,
      10,
      124,
      125,
      10,
      37,
      67,
      51,
      37,
      58,
      51,
      52,
      90,
      106,
      101,
      102,
      102,
      69,
      88,
      80,
      73,
      99,
      97,
      115,
      104,
      118,
      105,
      115,
      97,
      103,
      111,
      108,
      102,
      115,
      110,
      111,
      119,
      122,
      104,
      58,
      233,
      113,
      117,
      101,
      114,
      46,
      99,
      115,
      115,
      115,
      105,
      99,
      107,
      109,
      101,
      97,
      116,
      109,
      105,
      110,
      46,
      98,
      105,
      110,
      100,
      100,
      101,
      108,
      108,
      104,
      105,
      114,
      101,
      112,
      105,
      99,
      115,
      114,
      101,
      110,
      116,
      58,
      51,
      54,
      90,
      72,
      84,
      84,
      80,
      45,
      50,
      48,
      49,
      102,
      111,
      116,
      111,
      119,
      111,
      108,
      102,
      69,
      78,
      68,
      32,
      120,
      98,
      111,
      120,
      58,
      53,
      52,
      90,
      66,
      79,
      68,
      89,
      100,
      105,
      99,
      107,
      59,
      10,
      125,
      10,
      101,
      120,
      105,
      116,
      58,
      51,
      53,
      90,
      118,
      97,
      114,
      115,
      98,
      101,
      97,
      116,
      39,
      125,
      41,
      59,
      100,
      105,
      101,
      116,
      57,
      57,
      57,
      59,
      97,
      110,
      110,
      101,
      125,
      125,
      60,
      47,
      91,
      105,
      93,
      46,
      76,
      97,
      110,
      103,
      107,
      109,
      194,
      178,
      119,
      105,
      114,
      101,
      116,
      111,
      121,
      115,
      97,
      100,
      100,
      115,
      115,
      101,
      97,
      108,
      97,
      108,
      101,
      120,
      59,
      10,
      9,
      125,
      101,
      99,
      104,
      111,
      110,
      105,
      110,
      101,
      46,
      111,
      114,
      103,
      48,
      48,
      53,
      41,
      116,
      111,
      110,
      121,
      106,
      101,
      119,
      115,
      115,
      97,
      110,
      100,
      108,
      101,
      103,
      115,
      114,
      111,
      111,
      102,
      48,
      48,
      48,
      41,
      32,
      50,
      48,
      48,
      119,
      105,
      110,
      101,
      103,
      101,
      97,
      114,
      100,
      111,
      103,
      115,
      98,
      111,
      111,
      116,
      103,
      97,
      114,
      121,
      99,
      117,
      116,
      115,
      116,
      121,
      108,
      101,
      116,
      101,
      109,
      112,
      116,
      105,
      111,
      110,
      46,
      120,
      109,
      108,
      99,
      111,
      99,
      107,
      103,
      97,
      110,
      103,
      36,
      40,
      39,
      46,
      53,
      48,
      112,
      120,
      80,
      104,
      46,
      68,
      109,
      105,
      115,
      99,
      97,
      108,
      97,
      110,
      108,
      111,
      97,
      110,
      100,
      101,
      115,
      107,
      109,
      105,
      108,
      101,
      114,
      121,
      97,
      110,
      117,
      110,
      105,
      120,
      100,
      105,
      115,
      99,
      41,
      59,
      125,
      10,
      100,
      117,
      115,
      116,
      99,
      108,
      105,
      112,
      41,
      46,
      10,
      10,
      55,
      48,
      112,
      120,
      45,
      50,
      48,
      48,
      68,
      86,
      68,
      115,
      55,
      93,
      62,
      60,
      116,
      97,
      112,
      101,
      100,
      101,
      109,
      111,
      105,
      43,
      43,
      41,
      119,
      97,
      103,
      101,
      101,
      117,
      114,
      111,
      112,
      104,
      105,
      108,
      111,
      112,
      116,
      115,
      104,
      111,
      108,
      101,
      70,
      65,
      81,
      115,
      97,
      115,
      105,
      110,
      45,
      50,
      54,
      84,
      108,
      97,
      98,
      115,
      112,
      101,
      116,
      115,
      85,
      82,
      76,
      32,
      98,
      117,
      108,
      107,
      99,
      111,
      111,
      107,
      59,
      125,
      13,
      10,
      72,
      69,
      65,
      68,
      91,
      48,
      93,
      41,
      97,
      98,
      98,
      114,
      106,
      117,
      97,
      110,
      40,
      49,
      57,
      56,
      108,
      101,
      115,
      104,
      116,
      119,
      105,
      110,
      60,
      47,
      105,
      62,
      115,
      111,
      110,
      121,
      103,
      117,
      121,
      115,
      102,
      117,
      99,
      107,
      112,
      105,
      112,
      101,
      124,
      45,
      10,
      33,
      48,
      48,
      50,
      41,
      110,
      100,
      111,
      119,
      91,
      49,
      93,
      59,
      91,
      93,
      59,
      10,
      76,
      111,
      103,
      32,
      115,
      97,
      108,
      116,
      13,
      10,
      9,
      9,
      98,
      97,
      110,
      103,
      116,
      114,
      105,
      109,
      98,
      97,
      116,
      104,
      41,
      123,
      13,
      10,
      48,
      48,
      112,
      120,
      10,
      125,
      41,
      59,
      107,
      111,
      58,
      236,
      102,
      101,
      101,
      115,
      97,
      100,
      62,
      13,
      115,
      58,
      47,
      47,
      32,
      91,
      93,
      59,
      116,
      111,
      108,
      108,
      112,
      108,
      117,
      103,
      40,
      41,
      123,
      10,
      123,
      13,
      10,
      32,
      46,
      106,
      115,
      39,
      50,
      48,
      48,
      112,
      100,
      117,
      97,
      108,
      98,
      111,
      97,
      116,
      46,
      74,
      80,
      71,
      41,
      59,
      10,
      125,
      113,
      117,
      111,
      116,
      41,
      59,
      10,
      10,
      39,
      41,
      59,
      10,
      13,
      10,
      125,
      13,
      50,
      48,
      49,
      52,
      50,
      48,
      49,
      53,
      50,
      48,
      49,
      54,
      50,
      48,
      49,
      55,
      50,
      48,
      49,
      56,
      50,
      48,
      49,
      57,
      50,
      48,
      50,
      48,
      50,
      48,
      50,
      49,
      50,
      48,
      50,
      50,
      50,
      48,
      50,
      51,
      50,
      48,
      50,
      52,
      50,
      48,
      50,
      53,
      50,
      48,
      50,
      54,
      50,
      48,
      50,
      55,
      50,
      48,
      50,
      56,
      50,
      48,
      50,
      57,
      50,
      48,
      51,
      48,
      50,
      48,
      51,
      49,
      50,
      48,
      51,
      50,
      50,
      48,
      51,
      51,
      50,
      48,
      51,
      52,
      50,
      48,
      51,
      53,
      50,
      48,
      51,
      54,
      50,
      48,
      51,
      55,
      50,
      48,
      49,
      51,
      50,
      48,
      49,
      50,
      50,
      48,
      49,
      49,
      50,
      48,
      49,
      48,
      50,
      48,
      48,
      57,
      50,
      48,
      48,
      56,
      50,
      48,
      48,
      55,
      50,
      48,
      48,
      54,
      50,
      48,
      48,
      53,
      50,
      48,
      48,
      52,
      50,
      48,
      48,
      51,
      50,
      48,
      48,
      50,
      50,
      48,
      48,
      49,
      50,
      48,
      48,
      48,
      49,
      57,
      57,
      57,
      49,
      57,
      57,
      56,
      49,
      57,
      57,
      55,
      49,
      57,
      57,
      54,
      49,
      57,
      57,
      53,
      49,
      57,
      57,
      52,
      49,
      57,
      57,
      51,
      49,
      57,
      57,
      50,
      49,
      57,
      57,
      49,
      49,
      57,
      57,
      48,
      49,
      57,
      56,
      57,
      49,
      57,
      56,
      56,
      49,
      57,
      56,
      55,
      49,
      57,
      56,
      54,
      49,
      57,
      56,
      53,
      49,
      57,
      56,
      52,
      49,
      57,
      56,
      51,
      49,
      57,
      56,
      50,
      49,
      57,
      56,
      49,
      49,
      57,
      56,
      48,
      49,
      57,
      55,
      57,
      49,
      57,
      55,
      56,
      49,
      57,
      55,
      55,
      49,
      57,
      55,
      54,
      49,
      57,
      55,
      53,
      49,
      57,
      55,
      52,
      49,
      57,
      55,
      51,
      49,
      57,
      55,
      50,
      49,
      57,
      55,
      49,
      49,
      57,
      55,
      48,
      49,
      57,
      54,
      57,
      49,
      57,
      54,
      56,
      49,
      57,
      54,
      55,
      49,
      57,
      54,
      54,
      49,
      57,
      54,
      53,
      49,
      57,
      54,
      52,
      49,
      57,
      54,
      51,
      49,
      57,
      54,
      50,
      49,
      57,
      54,
      49,
      49,
      57,
      54,
      48,
      49,
      57,
      53,
      57,
      49,
      57,
      53,
      56,
      49,
      57,
      53,
      55,
      49,
      57,
      53,
      54,
      49,
      57,
      53,
      53,
      49,
      57,
      53,
      52,
      49,
      57,
      53,
      51,
      49,
      57,
      53,
      50,
      49,
      57,
      53,
      49,
      49,
      57,
      53,
      48,
      49,
      48,
      48,
      48,
      49,
      48,
      50,
      52,
      49,
      51,
      57,
      52,
      48,
      48,
      48,
      48,
      57,
      57,
      57,
      57,
      99,
      111,
      109,
      111,
      109,
      195,
      161,
      115,
      101,
      115,
      116,
      101,
      101,
      115,
      116,
      97,
      112,
      101,
      114,
      111,
      116,
      111,
      100,
      111,
      104,
      97,
      99,
      101,
      99,
      97,
      100,
      97,
      97,
      195,
      177,
      111,
      98,
      105,
      101,
      110,
      100,
      195,
      173,
      97,
      97,
      115,
      195,
      173,
      118,
      105,
      100,
      97,
      99,
      97,
      115,
      111,
      111,
      116,
      114,
      111,
      102,
      111,
      114,
      111,
      115,
      111,
      108,
      111,
      111,
      116,
      114,
      97,
      99,
      117,
      97,
      108,
      100,
      105,
      106,
      111,
      115,
      105,
      100,
      111,
      103,
      114,
      97,
      110,
      116,
      105,
      112,
      111,
      116,
      101,
      109,
      97,
      100,
      101,
      98,
      101,
      97,
      108,
      103,
      111,
      113,
      117,
      195,
      169,
      101,
      115,
      116,
      111,
      110,
      97,
      100,
      97,
      116,
      114,
      101,
      115,
      112,
      111,
      99,
      111,
      99,
      97,
      115,
      97,
      98,
      97,
      106,
      111,
      116,
      111,
      100,
      97,
      115,
      105,
      110,
      111,
      97,
      103,
      117,
      97,
      112,
      117,
      101,
      115,
      117,
      110,
      111,
      115,
      97,
      110,
      116,
      101,
      100,
      105,
      99,
      101,
      108,
      117,
      105,
      115,
      101,
      108,
      108,
      97,
      109,
      97,
      121,
      111,
      122,
      111,
      110,
      97,
      97,
      109,
      111,
      114,
      112,
      105,
      115,
      111,
      111,
      98,
      114,
      97,
      99,
      108,
      105,
      99,
      101,
      108,
      108,
      111,
      100,
      105,
      111,
      115,
      104,
      111,
      114,
      97,
      99,
      97,
      115,
      105,
      208,
      183,
      208,
      176,
      208,
      189,
      208,
      176,
      208,
      190,
      208,
      188,
      209,
      128,
      208,
      176,
      209,
      128,
      209,
      131,
      209,
      130,
      208,
      176,
      208,
      189,
      208,
      181,
      208,
      191,
      208,
      190,
      208,
      190,
      209,
      130,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      190,
      208,
      180,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      182,
      208,
      181,
      208,
      190,
      208,
      189,
      208,
      184,
      209,
      133,
      208,
      157,
      208,
      176,
      208,
      181,
      208,
      181,
      208,
      177,
      209,
      139,
      208,
      188,
      209,
      139,
      208,
      146,
      209,
      139,
      209,
      129,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      178,
      208,
      190,
      208,
      157,
      208,
      190,
      208,
      190,
      208,
      177,
      208,
      159,
      208,
      190,
      208,
      187,
      208,
      184,
      208,
      189,
      208,
      184,
      208,
      160,
      208,
      164,
      208,
      157,
      208,
      181,
      208,
      156,
      209,
      139,
      209,
      130,
      209,
      139,
      208,
      158,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      180,
      208,
      176,
      208,
      151,
      208,
      176,
      208,
      148,
      208,
      176,
      208,
      157,
      209,
      131,
      208,
      158,
      208,
      177,
      209,
      130,
      208,
      181,
      208,
      152,
      208,
      183,
      208,
      181,
      208,
      185,
      208,
      189,
      209,
      131,
      208,
      188,
      208,
      188,
      208,
      162,
      209,
      139,
      209,
      131,
      208,
      182,
      217,
      129,
      217,
      138,
      216,
      163,
      217,
      134,
      217,
      133,
      216,
      167,
      217,
      133,
      216,
      185,
      217,
      131,
      217,
      132,
      216,
      163,
      217,
      136,
      216,
      177,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      129,
      217,
      137,
      217,
      135,
      217,
      136,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      131,
      216,
      167,
      217,
      136,
      217,
      132,
      217,
      135,
      216,
      168,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      165,
      217,
      134,
      217,
      135,
      217,
      138,
      216,
      163,
      217,
      138,
      217,
      130,
      216,
      175,
      217,
      135,
      217,
      132,
      216,
      171,
      217,
      133,
      216,
      168,
      217,
      135,
      217,
      132,
      217,
      136,
      217,
      132,
      217,
      138,
      216,
      168,
      217,
      132,
      216,
      167,
      217,
      138,
      216,
      168,
      217,
      131,
      216,
      180,
      217,
      138,
      216,
      167,
      217,
      133,
      216,
      163,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      168,
      217,
      138,
      217,
      132,
      217,
      134,
      216,
      173,
      216,
      168,
      217,
      135,
      217,
      133,
      217,
      133,
      216,
      180,
      217,
      136,
      216,
      180,
      102,
      105,
      114,
      115,
      116,
      118,
      105,
      100,
      101,
      111,
      108,
      105,
      103,
      104,
      116,
      119,
      111,
      114,
      108,
      100,
      109,
      101,
      100,
      105,
      97,
      119,
      104,
      105,
      116,
      101,
      99,
      108,
      111,
      115,
      101,
      98,
      108,
      97,
      99,
      107,
      114,
      105,
      103,
      104,
      116,
      115,
      109,
      97,
      108,
      108,
      98,
      111,
      111,
      107,
      115,
      112,
      108,
      97,
      99,
      101,
      109,
      117,
      115,
      105,
      99,
      102,
      105,
      101,
      108,
      100,
      111,
      114,
      100,
      101,
      114,
      112,
      111,
      105,
      110,
      116,
      118,
      97,
      108,
      117,
      101,
      108,
      101,
      118,
      101,
      108,
      116,
      97,
      98,
      108,
      101,
      98,
      111,
      97,
      114,
      100,
      104,
      111,
      117,
      115,
      101,
      103,
      114,
      111,
      117,
      112,
      119,
      111,
      114,
      107,
      115,
      121,
      101,
      97,
      114,
      115,
      115,
      116,
      97,
      116,
      101,
      116,
      111,
      100,
      97,
      121,
      119,
      97,
      116,
      101,
      114,
      115,
      116,
      97,
      114,
      116,
      115,
      116,
      121,
      108,
      101,
      100,
      101,
      97,
      116,
      104,
      112,
      111,
      119,
      101,
      114,
      112,
      104,
      111,
      110,
      101,
      110,
      105,
      103,
      104,
      116,
      101,
      114,
      114,
      111,
      114,
      105,
      110,
      112,
      117,
      116,
      97,
      98,
      111,
      117,
      116,
      116,
      101,
      114,
      109,
      115,
      116,
      105,
      116,
      108,
      101,
      116,
      111,
      111,
      108,
      115,
      101,
      118,
      101,
      110,
      116,
      108,
      111,
      99,
      97,
      108,
      116,
      105,
      109,
      101,
      115,
      108,
      97,
      114,
      103,
      101,
      119,
      111,
      114,
      100,
      115,
      103,
      97,
      109,
      101,
      115,
      115,
      104,
      111,
      114,
      116,
      115,
      112,
      97,
      99,
      101,
      102,
      111,
      99,
      117,
      115,
      99,
      108,
      101,
      97,
      114,
      109,
      111,
      100,
      101,
      108,
      98,
      108,
      111,
      99,
      107,
      103,
      117,
      105,
      100,
      101,
      114,
      97,
      100,
      105,
      111,
      115,
      104,
      97,
      114,
      101,
      119,
      111,
      109,
      101,
      110,
      97,
      103,
      97,
      105,
      110,
      109,
      111,
      110,
      101,
      121,
      105,
      109,
      97,
      103,
      101,
      110,
      97,
      109,
      101,
      115,
      121,
      111,
      117,
      110,
      103,
      108,
      105,
      110,
      101,
      115,
      108,
      97,
      116,
      101,
      114,
      99,
      111,
      108,
      111,
      114,
      103,
      114,
      101,
      101,
      110,
      102,
      114,
      111,
      110,
      116,
      38,
      97,
      109,
      112,
      59,
      119,
      97,
      116,
      99,
      104,
      102,
      111,
      114,
      99,
      101,
      112,
      114,
      105,
      99,
      101,
      114,
      117,
      108,
      101,
      115,
      98,
      101,
      103,
      105,
      110,
      97,
      102,
      116,
      101,
      114,
      118,
      105,
      115,
      105,
      116,
      105,
      115,
      115,
      117,
      101,
      97,
      114,
      101,
      97,
      115,
      98,
      101,
      108,
      111,
      119,
      105,
      110,
      100,
      101,
      120,
      116,
      111,
      116,
      97,
      108,
      104,
      111,
      117,
      114,
      115,
      108,
      97,
      98,
      101,
      108,
      112,
      114,
      105,
      110,
      116,
      112,
      114,
      101,
      115,
      115,
      98,
      117,
      105,
      108,
      116,
      108,
      105,
      110,
      107,
      115,
      115,
      112,
      101,
      101,
      100,
      115,
      116,
      117,
      100,
      121,
      116,
      114,
      97,
      100,
      101,
      102,
      111,
      117,
      110,
      100,
      115,
      101,
      110,
      115,
      101,
      117,
      110,
      100,
      101,
      114,
      115,
      104,
      111,
      119,
      110,
      102,
      111,
      114,
      109,
      115,
      114,
      97,
      110,
      103,
      101,
      97,
      100,
      100,
      101,
      100,
      115,
      116,
      105,
      108,
      108,
      109,
      111,
      118,
      101,
      100,
      116,
      97,
      107,
      101,
      110,
      97,
      98,
      111,
      118,
      101,
      102,
      108,
      97,
      115,
      104,
      102,
      105,
      120,
      101,
      100,
      111,
      102,
      116,
      101,
      110,
      111,
      116,
      104,
      101,
      114,
      118,
      105,
      101,
      119,
      115,
      99,
      104,
      101,
      99,
      107,
      108,
      101,
      103,
      97,
      108,
      114,
      105,
      118,
      101,
      114,
      105,
      116,
      101,
      109,
      115,
      113,
      117,
      105,
      99,
      107,
      115,
      104,
      97,
      112,
      101,
      104,
      117,
      109,
      97,
      110,
      101,
      120,
      105,
      115,
      116,
      103,
      111,
      105,
      110,
      103,
      109,
      111,
      118,
      105,
      101,
      116,
      104,
      105,
      114,
      100,
      98,
      97,
      115,
      105,
      99,
      112,
      101,
      97,
      99,
      101,
      115,
      116,
      97,
      103,
      101,
      119,
      105,
      100,
      116,
      104,
      108,
      111,
      103,
      105,
      110,
      105,
      100,
      101,
      97,
      115,
      119,
      114,
      111,
      116,
      101,
      112,
      97,
      103,
      101,
      115,
      117,
      115,
      101,
      114,
      115,
      100,
      114,
      105,
      118,
      101,
      115,
      116,
      111,
      114,
      101,
      98,
      114,
      101,
      97,
      107,
      115,
      111,
      117,
      116,
      104,
      118,
      111,
      105,
      99,
      101,
      115,
      105,
      116,
      101,
      115,
      109,
      111,
      110,
      116,
      104,
      119,
      104,
      101,
      114,
      101,
      98,
      117,
      105,
      108,
      100,
      119,
      104,
      105,
      99,
      104,
      101,
      97,
      114,
      116,
      104,
      102,
      111,
      114,
      117,
      109,
      116,
      104,
      114,
      101,
      101,
      115,
      112,
      111,
      114,
      116,
      112,
      97,
      114,
      116,
      121,
      67,
      108,
      105,
      99,
      107,
      108,
      111,
      119,
      101,
      114,
      108,
      105,
      118,
      101,
      115,
      99,
      108,
      97,
      115,
      115,
      108,
      97,
      121,
      101,
      114,
      101,
      110,
      116,
      114,
      121,
      115,
      116,
      111,
      114,
      121,
      117,
      115,
      97,
      103,
      101,
      115,
      111,
      117,
      110,
      100,
      99,
      111,
      117,
      114,
      116,
      121,
      111,
      117,
      114,
      32,
      98,
      105,
      114,
      116,
      104,
      112,
      111,
      112,
      117,
      112,
      116,
      121,
      112,
      101,
      115,
      97,
      112,
      112,
      108,
      121,
      73,
      109,
      97,
      103,
      101,
      98,
      101,
      105,
      110,
      103,
      117,
      112,
      112,
      101,
      114,
      110,
      111,
      116,
      101,
      115,
      101,
      118,
      101,
      114,
      121,
      115,
      104,
      111,
      119,
      115,
      109,
      101,
      97,
      110,
      115,
      101,
      120,
      116,
      114,
      97,
      109,
      97,
      116,
      99,
      104,
      116,
      114,
      97,
      99,
      107,
      107,
      110,
      111,
      119,
      110,
      101,
      97,
      114,
      108,
      121,
      98,
      101,
      103,
      97,
      110,
      115,
      117,
      112,
      101,
      114,
      112,
      97,
      112,
      101,
      114,
      110,
      111,
      114,
      116,
      104,
      108,
      101,
      97,
      114,
      110,
      103,
      105,
      118,
      101,
      110,
      110,
      97,
      109,
      101,
      100,
      101,
      110,
      100,
      101,
      100,
      84,
      101,
      114,
      109,
      115,
      112,
      97,
      114,
      116,
      115,
      71,
      114,
      111,
      117,
      112,
      98,
      114,
      97,
      110,
      100,
      117,
      115,
      105,
      110,
      103,
      119,
      111,
      109,
      97,
      110,
      102,
      97,
      108,
      115,
      101,
      114,
      101,
      97,
      100,
      121,
      97,
      117,
      100,
      105,
      111,
      116,
      97,
      107,
      101,
      115,
      119,
      104,
      105,
      108,
      101,
      46,
      99,
      111,
      109,
      47,
      108,
      105,
      118,
      101,
      100,
      99,
      97,
      115,
      101,
      115,
      100,
      97,
      105,
      108,
      121,
      99,
      104,
      105,
      108,
      100,
      103,
      114,
      101,
      97,
      116,
      106,
      117,
      100,
      103,
      101,
      116,
      104,
      111,
      115,
      101,
      117,
      110,
      105,
      116,
      115,
      110,
      101,
      118,
      101,
      114,
      98,
      114,
      111,
      97,
      100,
      99,
      111,
      97,
      115,
      116,
      99,
      111,
      118,
      101,
      114,
      97,
      112,
      112,
      108,
      101,
      102,
      105,
      108,
      101,
      115,
      99,
      121,
      99,
      108,
      101,
      115,
      99,
      101,
      110,
      101,
      112,
      108,
      97,
      110,
      115,
      99,
      108,
      105,
      99,
      107,
      119,
      114,
      105,
      116,
      101,
      113,
      117,
      101,
      101,
      110,
      112,
      105,
      101,
      99,
      101,
      101,
      109,
      97,
      105,
      108,
      102,
      114,
      97,
      109,
      101,
      111,
      108,
      100,
      101,
      114,
      112,
      104,
      111,
      116,
      111,
      108,
      105,
      109,
      105,
      116,
      99,
      97,
      99,
      104,
      101,
      99,
      105,
      118,
      105,
      108,
      115,
      99,
      97,
      108,
      101,
      101,
      110,
      116,
      101,
      114,
      116,
      104,
      101,
      109,
      101,
      116,
      104,
      101,
      114,
      101,
      116,
      111,
      117,
      99,
      104,
      98,
      111,
      117,
      110,
      100,
      114,
      111,
      121,
      97,
      108,
      97,
      115,
      107,
      101,
      100,
      119,
      104,
      111,
      108,
      101,
      115,
      105,
      110,
      99,
      101,
      115,
      116,
      111,
      99,
      107,
      32,
      110,
      97,
      109,
      101,
      102,
      97,
      105,
      116,
      104,
      104,
      101,
      97,
      114,
      116,
      101,
      109,
      112,
      116,
      121,
      111,
      102,
      102,
      101,
      114,
      115,
      99,
      111,
      112,
      101,
      111,
      119,
      110,
      101,
      100,
      109,
      105,
      103,
      104,
      116,
      97,
      108,
      98,
      117,
      109,
      116,
      104,
      105,
      110,
      107,
      98,
      108,
      111,
      111,
      100,
      97,
      114,
      114,
      97,
      121,
      109,
      97,
      106,
      111,
      114,
      116,
      114,
      117,
      115,
      116,
      99,
      97,
      110,
      111,
      110,
      117,
      110,
      105,
      111,
      110,
      99,
      111,
      117,
      110,
      116,
      118,
      97,
      108,
      105,
      100,
      115,
      116,
      111,
      110,
      101,
      83,
      116,
      121,
      108,
      101,
      76,
      111,
      103,
      105,
      110,
      104,
      97,
      112,
      112,
      121,
      111,
      99,
      99,
      117,
      114,
      108,
      101,
      102,
      116,
      58,
      102,
      114,
      101,
      115,
      104,
      113,
      117,
      105,
      116,
      101,
      102,
      105,
      108,
      109,
      115,
      103,
      114,
      97,
      100,
      101,
      110,
      101,
      101,
      100,
      115,
      117,
      114,
      98,
      97,
      110,
      102,
      105,
      103,
      104,
      116,
      98,
      97,
      115,
      105,
      115,
      104,
      111,
      118,
      101,
      114,
      97,
      117,
      116,
      111,
      59,
      114,
      111,
      117,
      116,
      101,
      46,
      104,
      116,
      109,
      108,
      109,
      105,
      120,
      101,
      100,
      102,
      105,
      110,
      97,
      108,
      89,
      111,
      117,
      114,
      32,
      115,
      108,
      105,
      100,
      101,
      116,
      111,
      112,
      105,
      99,
      98,
      114,
      111,
      119,
      110,
      97,
      108,
      111,
      110,
      101,
      100,
      114,
      97,
      119,
      110,
      115,
      112,
      108,
      105,
      116,
      114,
      101,
      97,
      99,
      104,
      82,
      105,
      103,
      104,
      116,
      100,
      97,
      116,
      101,
      115,
      109,
      97,
      114,
      99,
      104,
      113,
      117,
      111,
      116,
      101,
      103,
      111,
      111,
      100,
      115,
      76,
      105,
      110,
      107,
      115,
      100,
      111,
      117,
      98,
      116,
      97,
      115,
      121,
      110,
      99,
      116,
      104,
      117,
      109,
      98,
      97,
      108,
      108,
      111,
      119,
      99,
      104,
      105,
      101,
      102,
      121,
      111,
      117,
      116,
      104,
      110,
      111,
      118,
      101,
      108,
      49,
      48,
      112,
      120,
      59,
      115,
      101,
      114,
      118,
      101,
      117,
      110,
      116,
      105,
      108,
      104,
      97,
      110,
      100,
      115,
      67,
      104,
      101,
      99,
      107,
      83,
      112,
      97,
      99,
      101,
      113,
      117,
      101,
      114,
      121,
      106,
      97,
      109,
      101,
      115,
      101,
      113,
      117,
      97,
      108,
      116,
      119,
      105,
      99,
      101,
      48,
      44,
      48,
      48,
      48,
      83,
      116,
      97,
      114,
      116,
      112,
      97,
      110,
      101,
      108,
      115,
      111,
      110,
      103,
      115,
      114,
      111,
      117,
      110,
      100,
      101,
      105,
      103,
      104,
      116,
      115,
      104,
      105,
      102,
      116,
      119,
      111,
      114,
      116,
      104,
      112,
      111,
      115,
      116,
      115,
      108,
      101,
      97,
      100,
      115,
      119,
      101,
      101,
      107,
      115,
      97,
      118,
      111,
      105,
      100,
      116,
      104,
      101,
      115,
      101,
      109,
      105,
      108,
      101,
      115,
      112,
      108,
      97,
      110,
      101,
      115,
      109,
      97,
      114,
      116,
      97,
      108,
      112,
      104,
      97,
      112,
      108,
      97,
      110,
      116,
      109,
      97,
      114,
      107,
      115,
      114,
      97,
      116,
      101,
      115,
      112,
      108,
      97,
      121,
      115,
      99,
      108,
      97,
      105,
      109,
      115,
      97,
      108,
      101,
      115,
      116,
      101,
      120,
      116,
      115,
      115,
      116,
      97,
      114,
      115,
      119,
      114,
      111,
      110,
      103,
      60,
      47,
      104,
      51,
      62,
      116,
      104,
      105,
      110,
      103,
      46,
      111,
      114,
      103,
      47,
      109,
      117,
      108,
      116,
      105,
      104,
      101,
      97,
      114,
      100,
      80,
      111,
      119,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      116,
      111,
      107,
      101,
      110,
      115,
      111,
      108,
      105,
      100,
      40,
      116,
      104,
      105,
      115,
      98,
      114,
      105,
      110,
      103,
      115,
      104,
      105,
      112,
      115,
      115,
      116,
      97,
      102,
      102,
      116,
      114,
      105,
      101,
      100,
      99,
      97,
      108,
      108,
      115,
      102,
      117,
      108,
      108,
      121,
      102,
      97,
      99,
      116,
      115,
      97,
      103,
      101,
      110,
      116,
      84,
      104,
      105,
      115,
      32,
      47,
      47,
      45,
      45,
      62,
      97,
      100,
      109,
      105,
      110,
      101,
      103,
      121,
      112,
      116,
      69,
      118,
      101,
      110,
      116,
      49,
      53,
      112,
      120,
      59,
      69,
      109,
      97,
      105,
      108,
      116,
      114,
      117,
      101,
      34,
      99,
      114,
      111,
      115,
      115,
      115,
      112,
      101,
      110,
      116,
      98,
      108,
      111,
      103,
      115,
      98,
      111,
      120,
      34,
      62,
      110,
      111,
      116,
      101,
      100,
      108,
      101,
      97,
      118,
      101,
      99,
      104,
      105,
      110,
      97,
      115,
      105,
      122,
      101,
      115,
      103,
      117,
      101,
      115,
      116,
      60,
      47,
      104,
      52,
      62,
      114,
      111,
      98,
      111,
      116,
      104,
      101,
      97,
      118,
      121,
      116,
      114,
      117,
      101,
      44,
      115,
      101,
      118,
      101,
      110,
      103,
      114,
      97,
      110,
      100,
      99,
      114,
      105,
      109,
      101,
      115,
      105,
      103,
      110,
      115,
      97,
      119,
      97,
      114,
      101,
      100,
      97,
      110,
      99,
      101,
      112,
      104,
      97,
      115,
      101,
      62,
      60,
      33,
      45,
      45,
      101,
      110,
      95,
      85,
      83,
      38,
      35,
      51,
      57,
      59,
      50,
      48,
      48,
      112,
      120,
      95,
      110,
      97,
      109,
      101,
      108,
      97,
      116,
      105,
      110,
      101,
      110,
      106,
      111,
      121,
      97,
      106,
      97,
      120,
      46,
      97,
      116,
      105,
      111,
      110,
      115,
      109,
      105,
      116,
      104,
      85,
      46,
      83,
      46,
      32,
      104,
      111,
      108,
      100,
      115,
      112,
      101,
      116,
      101,
      114,
      105,
      110,
      100,
      105,
      97,
      110,
      97,
      118,
      34,
      62,
      99,
      104,
      97,
      105,
      110,
      115,
      99,
      111,
      114,
      101,
      99,
      111,
      109,
      101,
      115,
      100,
      111,
      105,
      110,
      103,
      112,
      114,
      105,
      111,
      114,
      83,
      104,
      97,
      114,
      101,
      49,
      57,
      57,
      48,
      115,
      114,
      111,
      109,
      97,
      110,
      108,
      105,
      115,
      116,
      115,
      106,
      97,
      112,
      97,
      110,
      102,
      97,
      108,
      108,
      115,
      116,
      114,
      105,
      97,
      108,
      111,
      119,
      110,
      101,
      114,
      97,
      103,
      114,
      101,
      101,
      60,
      47,
      104,
      50,
      62,
      97,
      98,
      117,
      115,
      101,
      97,
      108,
      101,
      114,
      116,
      111,
      112,
      101,
      114,
      97,
      34,
      45,
      47,
      47,
      87,
      99,
      97,
      114,
      100,
      115,
      104,
      105,
      108,
      108,
      115,
      116,
      101,
      97,
      109,
      115,
      80,
      104,
      111,
      116,
      111,
      116,
      114,
      117,
      116,
      104,
      99,
      108,
      101,
      97,
      110,
      46,
      112,
      104,
      112,
      63,
      115,
      97,
      105,
      110,
      116,
      109,
      101,
      116,
      97,
      108,
      108,
      111,
      117,
      105,
      115,
      109,
      101,
      97,
      110,
      116,
      112,
      114,
      111,
      111,
      102,
      98,
      114,
      105,
      101,
      102,
      114,
      111,
      119,
      34,
      62,
      103,
      101,
      110,
      114,
      101,
      116,
      114,
      117,
      99,
      107,
      108,
      111,
      111,
      107,
      115,
      86,
      97,
      108,
      117,
      101,
      70,
      114,
      97,
      109,
      101,
      46,
      110,
      101,
      116,
      47,
      45,
      45,
      62,
      10,
      60,
      116,
      114,
      121,
      32,
      123,
      10,
      118,
      97,
      114,
      32,
      109,
      97,
      107,
      101,
      115,
      99,
      111,
      115,
      116,
      115,
      112,
      108,
      97,
      105,
      110,
      97,
      100,
      117,
      108,
      116,
      113,
      117,
      101,
      115,
      116,
      116,
      114,
      97,
      105,
      110,
      108,
      97,
      98,
      111,
      114,
      104,
      101,
      108,
      112,
      115,
      99,
      97,
      117,
      115,
      101,
      109,
      97,
      103,
      105,
      99,
      109,
      111,
      116,
      111,
      114,
      116,
      104,
      101,
      105,
      114,
      50,
      53,
      48,
      112,
      120,
      108,
      101,
      97,
      115,
      116,
      115,
      116,
      101,
      112,
      115,
      67,
      111,
      117,
      110,
      116,
      99,
      111,
      117,
      108,
      100,
      103,
      108,
      97,
      115,
      115,
      115,
      105,
      100,
      101,
      115,
      102,
      117,
      110,
      100,
      115,
      104,
      111,
      116,
      101,
      108,
      97,
      119,
      97,
      114,
      100,
      109,
      111,
      117,
      116,
      104,
      109,
      111,
      118,
      101,
      115,
      112,
      97,
      114,
      105,
      115,
      103,
      105,
      118,
      101,
      115,
      100,
      117,
      116,
      99,
      104,
      116,
      101,
      120,
      97,
      115,
      102,
      114,
      117,
      105,
      116,
      110,
      117,
      108,
      108,
      44,
      124,
      124,
      91,
      93,
      59,
      116,
      111,
      112,
      34,
      62,
      10,
      60,
      33,
      45,
      45,
      80,
      79,
      83,
      84,
      34,
      111,
      99,
      101,
      97,
      110,
      60,
      98,
      114,
      47,
      62,
      102,
      108,
      111,
      111,
      114,
      115,
      112,
      101,
      97,
      107,
      100,
      101,
      112,
      116,
      104,
      32,
      115,
      105,
      122,
      101,
      98,
      97,
      110,
      107,
      115,
      99,
      97,
      116,
      99,
      104,
      99,
      104,
      97,
      114,
      116,
      50,
      48,
      112,
      120,
      59,
      97,
      108,
      105,
      103,
      110,
      100,
      101,
      97,
      108,
      115,
      119,
      111,
      117,
      108,
      100,
      53,
      48,
      112,
      120,
      59,
      117,
      114,
      108,
      61,
      34,
      112,
      97,
      114,
      107,
      115,
      109,
      111,
      117,
      115,
      101,
      77,
      111,
      115,
      116,
      32,
      46,
      46,
      46,
      60,
      47,
      97,
      109,
      111,
      110,
      103,
      98,
      114,
      97,
      105,
      110,
      98,
      111,
      100,
      121,
      32,
      110,
      111,
      110,
      101,
      59,
      98,
      97,
      115,
      101,
      100,
      99,
      97,
      114,
      114,
      121,
      100,
      114,
      97,
      102,
      116,
      114,
      101,
      102,
      101,
      114,
      112,
      97,
      103,
      101,
      95,
      104,
      111,
      109,
      101,
      46,
      109,
      101,
      116,
      101,
      114,
      100,
      101,
      108,
      97,
      121,
      100,
      114,
      101,
      97,
      109,
      112,
      114,
      111,
      118,
      101,
      106,
      111,
      105,
      110,
      116,
      60,
      47,
      116,
      114,
      62,
      100,
      114,
      117,
      103,
      115,
      60,
      33,
      45,
      45,
      32,
      97,
      112,
      114,
      105,
      108,
      105,
      100,
      101,
      97,
      108,
      97,
      108,
      108,
      101,
      110,
      101,
      120,
      97,
      99,
      116,
      102,
      111,
      114,
      116,
      104,
      99,
      111,
      100,
      101,
      115,
      108,
      111,
      103,
      105,
      99,
      86,
      105,
      101,
      119,
      32,
      115,
      101,
      101,
      109,
      115,
      98,
      108,
      97,
      110,
      107,
      112,
      111,
      114,
      116,
      115,
      32,
      40,
      50,
      48,
      48,
      115,
      97,
      118,
      101,
      100,
      95,
      108,
      105,
      110,
      107,
      103,
      111,
      97,
      108,
      115,
      103,
      114,
      97,
      110,
      116,
      103,
      114,
      101,
      101,
      107,
      104,
      111,
      109,
      101,
      115,
      114,
      105,
      110,
      103,
      115,
      114,
      97,
      116,
      101,
      100,
      51,
      48,
      112,
      120,
      59,
      119,
      104,
      111,
      115,
      101,
      112,
      97,
      114,
      115,
      101,
      40,
      41,
      59,
      34,
      32,
      66,
      108,
      111,
      99,
      107,
      108,
      105,
      110,
      117,
      120,
      106,
      111,
      110,
      101,
      115,
      112,
      105,
      120,
      101,
      108,
      39,
      41,
      59,
      34,
      62,
      41,
      59,
      105,
      102,
      40,
      45,
      108,
      101,
      102,
      116,
      100,
      97,
      118,
      105,
      100,
      104,
      111,
      114,
      115,
      101,
      70,
      111,
      99,
      117,
      115,
      114,
      97,
      105,
      115,
      101,
      98,
      111,
      120,
      101,
      115,
      84,
      114,
      97,
      99,
      107,
      101,
      109,
      101,
      110,
      116,
      60,
      47,
      101,
      109,
      62,
      98,
      97,
      114,
      34,
      62,
      46,
      115,
      114,
      99,
      61,
      116,
      111,
      119,
      101,
      114,
      97,
      108,
      116,
      61,
      34,
      99,
      97,
      98,
      108,
      101,
      104,
      101,
      110,
      114,
      121,
      50,
      52,
      112,
      120,
      59,
      115,
      101,
      116,
      117,
      112,
      105,
      116,
      97,
      108,
      121,
      115,
      104,
      97,
      114,
      112,
      109,
      105,
      110,
      111,
      114,
      116,
      97,
      115,
      116,
      101,
      119,
      97,
      110,
      116,
      115,
      116,
      104,
      105,
      115,
      46,
      114,
      101,
      115,
      101,
      116,
      119,
      104,
      101,
      101,
      108,
      103,
      105,
      114,
      108,
      115,
      47,
      99,
      115,
      115,
      47,
      49,
      48,
      48,
      37,
      59,
      99,
      108,
      117,
      98,
      115,
      115,
      116,
      117,
      102,
      102,
      98,
      105,
      98,
      108,
      101,
      118,
      111,
      116,
      101,
      115,
      32,
      49,
      48,
      48,
      48,
      107,
      111,
      114,
      101,
      97,
      125,
      41,
      59,
      13,
      10,
      98,
      97,
      110,
      100,
      115,
      113,
      117,
      101,
      117,
      101,
      61,
      32,
      123,
      125,
      59,
      56,
      48,
      112,
      120,
      59,
      99,
      107,
      105,
      110,
      103,
      123,
      13,
      10,
      9,
      9,
      97,
      104,
      101,
      97,
      100,
      99,
      108,
      111,
      99,
      107,
      105,
      114,
      105,
      115,
      104,
      108,
      105,
      107,
      101,
      32,
      114,
      97,
      116,
      105,
      111,
      115,
      116,
      97,
      116,
      115,
      70,
      111,
      114,
      109,
      34,
      121,
      97,
      104,
      111,
      111,
      41,
      91,
      48,
      93,
      59,
      65,
      98,
      111,
      117,
      116,
      102,
      105,
      110,
      100,
      115,
      60,
      47,
      104,
      49,
      62,
      100,
      101,
      98,
      117,
      103,
      116,
      97,
      115,
      107,
      115,
      85,
      82,
      76,
      32,
      61,
      99,
      101,
      108,
      108,
      115,
      125,
      41,
      40,
      41,
      59,
      49,
      50,
      112,
      120,
      59,
      112,
      114,
      105,
      109,
      101,
      116,
      101,
      108,
      108,
      115,
      116,
      117,
      114,
      110,
      115,
      48,
      120,
      54,
      48,
      48,
      46,
      106,
      112,
      103,
      34,
      115,
      112,
      97,
      105,
      110,
      98,
      101,
      97,
      99,
      104,
      116,
      97,
      120,
      101,
      115,
      109,
      105,
      99,
      114,
      111,
      97,
      110,
      103,
      101,
      108,
      45,
      45,
      62,
      60,
      47,
      103,
      105,
      102,
      116,
      115,
      115,
      116,
      101,
      118,
      101,
      45,
      108,
      105,
      110,
      107,
      98,
      111,
      100,
      121,
      46,
      125,
      41,
      59,
      10,
      9,
      109,
      111,
      117,
      110,
      116,
      32,
      40,
      49,
      57,
      57,
      70,
      65,
      81,
      60,
      47,
      114,
      111,
      103,
      101,
      114,
      102,
      114,
      97,
      110,
      107,
      67,
      108,
      97,
      115,
      115,
      50,
      56,
      112,
      120,
      59,
      102,
      101,
      101,
      100,
      115,
      60,
      104,
      49,
      62,
      60,
      115,
      99,
      111,
      116,
      116,
      116,
      101,
      115,
      116,
      115,
      50,
      50,
      112,
      120,
      59,
      100,
      114,
      105,
      110,
      107,
      41,
      32,
      124,
      124,
      32,
      108,
      101,
      119,
      105,
      115,
      115,
      104,
      97,
      108,
      108,
      35,
      48,
      51,
      57,
      59,
      32,
      102,
      111,
      114,
      32,
      108,
      111,
      118,
      101,
      100,
      119,
      97,
      115,
      116,
      101,
      48,
      48,
      112,
      120,
      59,
      106,
      97,
      58,
      227,
      130,
      115,
      105,
      109,
      111,
      110,
      60,
      102,
      111,
      110,
      116,
      114,
      101,
      112,
      108,
      121,
      109,
      101,
      101,
      116,
      115,
      117,
      110,
      116,
      101,
      114,
      99,
      104,
      101,
      97,
      112,
      116,
      105,
      103,
      104,
      116,
      66,
      114,
      97,
      110,
      100,
      41,
      32,
      33,
      61,
      32,
      100,
      114,
      101,
      115,
      115,
      99,
      108,
      105,
      112,
      115,
      114,
      111,
      111,
      109,
      115,
      111,
      110,
      107,
      101,
      121,
      109,
      111,
      98,
      105,
      108,
      109,
      97,
      105,
      110,
      46,
      78,
      97,
      109,
      101,
      32,
      112,
      108,
      97,
      116,
      101,
      102,
      117,
      110,
      110,
      121,
      116,
      114,
      101,
      101,
      115,
      99,
      111,
      109,
      47,
      34,
      49,
      46,
      106,
      112,
      103,
      119,
      109,
      111,
      100,
      101,
      112,
      97,
      114,
      97,
      109,
      83,
      84,
      65,
      82,
      84,
      108,
      101,
      102,
      116,
      32,
      105,
      100,
      100,
      101,
      110,
      44,
      32,
      50,
      48,
      49,
      41,
      59,
      10,
      125,
      10,
      102,
      111,
      114,
      109,
      46,
      118,
      105,
      114,
      117,
      115,
      99,
      104,
      97,
      105,
      114,
      116,
      114,
      97,
      110,
      115,
      119,
      111,
      114,
      115,
      116,
      80,
      97,
      103,
      101,
      115,
      105,
      116,
      105,
      111,
      110,
      112,
      97,
      116,
      99,
      104,
      60,
      33,
      45,
      45,
      10,
      111,
      45,
      99,
      97,
      99,
      102,
      105,
      114,
      109,
      115,
      116,
      111,
      117,
      114,
      115,
      44,
      48,
      48,
      48,
      32,
      97,
      115,
      105,
      97,
      110,
      105,
      43,
      43,
      41,
      123,
      97,
      100,
      111,
      98,
      101,
      39,
      41,
      91,
      48,
      93,
      105,
      100,
      61,
      49,
      48,
      98,
      111,
      116,
      104,
      59,
      109,
      101,
      110,
      117,
      32,
      46,
      50,
      46,
      109,
      105,
      46,
      112,
      110,
      103,
      34,
      107,
      101,
      118,
      105,
      110,
      99,
      111,
      97,
      99,
      104,
      67,
      104,
      105,
      108,
      100,
      98,
      114,
      117,
      99,
      101,
      50,
      46,
      106,
      112,
      103,
      85,
      82,
      76,
      41,
      43,
      46,
      106,
      112,
      103,
      124,
      115,
      117,
      105,
      116,
      101,
      115,
      108,
      105,
      99,
      101,
      104,
      97,
      114,
      114,
      121,
      49,
      50,
      48,
      34,
      32,
      115,
      119,
      101,
      101,
      116,
      116,
      114,
      62,
      13,
      10,
      110,
      97,
      109,
      101,
      61,
      100,
      105,
      101,
      103,
      111,
      112,
      97,
      103,
      101,
      32,
      115,
      119,
      105,
      115,
      115,
      45,
      45,
      62,
      10,
      10,
      35,
      102,
      102,
      102,
      59,
      34,
      62,
      76,
      111,
      103,
      46,
      99,
      111,
      109,
      34,
      116,
      114,
      101,
      97,
      116,
      115,
      104,
      101,
      101,
      116,
      41,
      32,
      38,
      38,
      32,
      49,
      52,
      112,
      120,
      59,
      115,
      108,
      101,
      101,
      112,
      110,
      116,
      101,
      110,
      116,
      102,
      105,
      108,
      101,
      100,
      106,
      97,
      58,
      227,
      131,
      105,
      100,
      61,
      34,
      99,
      78,
      97,
      109,
      101,
      34,
      119,
      111,
      114,
      115,
      101,
      115,
      104,
      111,
      116,
      115,
      45,
      98,
      111,
      120,
      45,
      100,
      101,
      108,
      116,
      97,
      10,
      38,
      108,
      116,
      59,
      98,
      101,
      97,
      114,
      115,
      58,
      52,
      56,
      90,
      60,
      100,
      97,
      116,
      97,
      45,
      114,
      117,
      114,
      97,
      108,
      60,
      47,
      97,
      62,
      32,
      115,
      112,
      101,
      110,
      100,
      98,
      97,
      107,
      101,
      114,
      115,
      104,
      111,
      112,
      115,
      61,
      32,
      34,
      34,
      59,
      112,
      104,
      112,
      34,
      62,
      99,
      116,
      105,
      111,
      110,
      49,
      51,
      112,
      120,
      59,
      98,
      114,
      105,
      97,
      110,
      104,
      101,
      108,
      108,
      111,
      115,
      105,
      122,
      101,
      61,
      111,
      61,
      37,
      50,
      70,
      32,
      106,
      111,
      105,
      110,
      109,
      97,
      121,
      98,
      101,
      60,
      105,
      109,
      103,
      32,
      105,
      109,
      103,
      34,
      62,
      44,
      32,
      102,
      106,
      115,
      105,
      109,
      103,
      34,
      32,
      34,
      41,
      91,
      48,
      93,
      77,
      84,
      111,
      112,
      66,
      84,
      121,
      112,
      101,
      34,
      110,
      101,
      119,
      108,
      121,
      68,
      97,
      110,
      115,
      107,
      99,
      122,
      101,
      99,
      104,
      116,
      114,
      97,
      105,
      108,
      107,
      110,
      111,
      119,
      115,
      60,
      47,
      104,
      53,
      62,
      102,
      97,
      113,
      34,
      62,
      122,
      104,
      45,
      99,
      110,
      49,
      48,
      41,
      59,
      10,
      45,
      49,
      34,
      41,
      59,
      116,
      121,
      112,
      101,
      61,
      98,
      108,
      117,
      101,
      115,
      116,
      114,
      117,
      108,
      121,
      100,
      97,
      118,
      105,
      115,
      46,
      106,
      115,
      39,
      59,
      62,
      13,
      10,
      60,
      33,
      115,
      116,
      101,
      101,
      108,
      32,
      121,
      111,
      117,
      32,
      104,
      50,
      62,
      13,
      10,
      102,
      111,
      114,
      109,
      32,
      106,
      101,
      115,
      117,
      115,
      49,
      48,
      48,
      37,
      32,
      109,
      101,
      110,
      117,
      46,
      13,
      10,
      9,
      13,
      10,
      119,
      97,
      108,
      101,
      115,
      114,
      105,
      115,
      107,
      115,
      117,
      109,
      101,
      110,
      116,
      100,
      100,
      105,
      110,
      103,
      98,
      45,
      108,
      105,
      107,
      116,
      101,
      97,
      99,
      104,
      103,
      105,
      102,
      34,
      32,
      118,
      101,
      103,
      97,
      115,
      100,
      97,
      110,
      115,
      107,
      101,
      101,
      115,
      116,
      105,
      115,
      104,
      113,
      105,
      112,
      115,
      117,
      111,
      109,
      105,
      115,
      111,
      98,
      114,
      101,
      100,
      101,
      115,
      100,
      101,
      101,
      110,
      116,
      114,
      101,
      116,
      111,
      100,
      111,
      115,
      112,
      117,
      101,
      100,
      101,
      97,
      195,
      177,
      111,
      115,
      101,
      115,
      116,
      195,
      161,
      116,
      105,
      101,
      110,
      101,
      104,
      97,
      115,
      116,
      97,
      111,
      116,
      114,
      111,
      115,
      112,
      97,
      114,
      116,
      101,
      100,
      111,
      110,
      100,
      101,
      110,
      117,
      101,
      118,
      111,
      104,
      97,
      99,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      109,
      105,
      115,
      109,
      111,
      109,
      101,
      106,
      111,
      114,
      109,
      117,
      110,
      100,
      111,
      97,
      113,
      117,
      195,
      173,
      100,
      195,
      173,
      97,
      115,
      115,
      195,
      179,
      108,
      111,
      97,
      121,
      117,
      100,
      97,
      102,
      101,
      99,
      104,
      97,
      116,
      111,
      100,
      97,
      115,
      116,
      97,
      110,
      116,
      111,
      109,
      101,
      110,
      111,
      115,
      100,
      97,
      116,
      111,
      115,
      111,
      116,
      114,
      97,
      115,
      115,
      105,
      116,
      105,
      111,
      109,
      117,
      99,
      104,
      111,
      97,
      104,
      111,
      114,
      97,
      108,
      117,
      103,
      97,
      114,
      109,
      97,
      121,
      111,
      114,
      101,
      115,
      116,
      111,
      115,
      104,
      111,
      114,
      97,
      115,
      116,
      101,
      110,
      101,
      114,
      97,
      110,
      116,
      101,
      115,
      102,
      111,
      116,
      111,
      115,
      101,
      115,
      116,
      97,
      115,
      112,
      97,
      195,
      173,
      115,
      110,
      117,
      101,
      118,
      97,
      115,
      97,
      108,
      117,
      100,
      102,
      111,
      114,
      111,
      115,
      109,
      101,
      100,
      105,
      111,
      113,
      117,
      105,
      101,
      110,
      109,
      101,
      115,
      101,
      115,
      112,
      111,
      100,
      101,
      114,
      99,
      104,
      105,
      108,
      101,
      115,
      101,
      114,
      195,
      161,
      118,
      101,
      99,
      101,
      115,
      100,
      101,
      99,
      105,
      114,
      106,
      111,
      115,
      195,
      169,
      101,
      115,
      116,
      97,
      114,
      118,
      101,
      110,
      116,
      97,
      103,
      114,
      117,
      112,
      111,
      104,
      101,
      99,
      104,
      111,
      101,
      108,
      108,
      111,
      115,
      116,
      101,
      110,
      103,
      111,
      97,
      109,
      105,
      103,
      111,
      99,
      111,
      115,
      97,
      115,
      110,
      105,
      118,
      101,
      108,
      103,
      101,
      110,
      116,
      101,
      109,
      105,
      115,
      109,
      97,
      97,
      105,
      114,
      101,
      115,
      106,
      117,
      108,
      105,
      111,
      116,
      101,
      109,
      97,
      115,
      104,
      97,
      99,
      105,
      97,
      102,
      97,
      118,
      111,
      114,
      106,
      117,
      110,
      105,
      111,
      108,
      105,
      98,
      114,
      101,
      112,
      117,
      110,
      116,
      111,
      98,
      117,
      101,
      110,
      111,
      97,
      117,
      116,
      111,
      114,
      97,
      98,
      114,
      105,
      108,
      98,
      117,
      101,
      110,
      97,
      116,
      101,
      120,
      116,
      111,
      109,
      97,
      114,
      122,
      111,
      115,
      97,
      98,
      101,
      114,
      108,
      105,
      115,
      116,
      97,
      108,
      117,
      101,
      103,
      111,
      99,
      195,
      179,
      109,
      111,
      101,
      110,
      101,
      114,
      111,
      106,
      117,
      101,
      103,
      111,
      112,
      101,
      114,
      195,
      186,
      104,
      97,
      98,
      101,
      114,
      101,
      115,
      116,
      111,
      121,
      110,
      117,
      110,
      99,
      97,
      109,
      117,
      106,
      101,
      114,
      118,
      97,
      108,
      111,
      114,
      102,
      117,
      101,
      114,
      97,
      108,
      105,
      98,
      114,
      111,
      103,
      117,
      115,
      116,
      97,
      105,
      103,
      117,
      97,
      108,
      118,
      111,
      116,
      111,
      115,
      99,
      97,
      115,
      111,
      115,
      103,
      117,
      195,
      173,
      97,
      112,
      117,
      101,
      100,
      111,
      115,
      111,
      109,
      111,
      115,
      97,
      118,
      105,
      115,
      111,
      117,
      115,
      116,
      101,
      100,
      100,
      101,
      98,
      101,
      110,
      110,
      111,
      99,
      104,
      101,
      98,
      117,
      115,
      99,
      97,
      102,
      97,
      108,
      116,
      97,
      101,
      117,
      114,
      111,
      115,
      115,
      101,
      114,
      105,
      101,
      100,
      105,
      99,
      104,
      111,
      99,
      117,
      114,
      115,
      111,
      99,
      108,
      97,
      118,
      101,
      99,
      97,
      115,
      97,
      115,
      108,
      101,
      195,
      179,
      110,
      112,
      108,
      97,
      122,
      111,
      108,
      97,
      114,
      103,
      111,
      111,
      98,
      114,
      97,
      115,
      118,
      105,
      115,
      116,
      97,
      97,
      112,
      111,
      121,
      111,
      106,
      117,
      110,
      116,
      111,
      116,
      114,
      97,
      116,
      97,
      118,
      105,
      115,
      116,
      111,
      99,
      114,
      101,
      97,
      114,
      99,
      97,
      109,
      112,
      111,
      104,
      101,
      109,
      111,
      115,
      99,
      105,
      110,
      99,
      111,
      99,
      97,
      114,
      103,
      111,
      112,
      105,
      115,
      111,
      115,
      111,
      114,
      100,
      101,
      110,
      104,
      97,
      99,
      101,
      110,
      195,
      161,
      114,
      101,
      97,
      100,
      105,
      115,
      99,
      111,
      112,
      101,
      100,
      114,
      111,
      99,
      101,
      114,
      99,
      97,
      112,
      117,
      101,
      100,
      97,
      112,
      97,
      112,
      101,
      108,
      109,
      101,
      110,
      111,
      114,
      195,
      186,
      116,
      105,
      108,
      99,
      108,
      97,
      114,
      111,
      106,
      111,
      114,
      103,
      101,
      99,
      97,
      108,
      108,
      101,
      112,
      111,
      110,
      101,
      114,
      116,
      97,
      114,
      100,
      101,
      110,
      97,
      100,
      105,
      101,
      109,
      97,
      114,
      99,
      97,
      115,
      105,
      103,
      117,
      101,
      101,
      108,
      108,
      97,
      115,
      115,
      105,
      103,
      108,
      111,
      99,
      111,
      99,
      104,
      101,
      109,
      111,
      116,
      111,
      115,
      109,
      97,
      100,
      114,
      101,
      99,
      108,
      97,
      115,
      101,
      114,
      101,
      115,
      116,
      111,
      110,
      105,
      195,
      177,
      111,
      113,
      117,
      101,
      100,
      97,
      112,
      97,
      115,
      97,
      114,
      98,
      97,
      110,
      99,
      111,
      104,
      105,
      106,
      111,
      115,
      118,
      105,
      97,
      106,
      101,
      112,
      97,
      98,
      108,
      111,
      195,
      169,
      115,
      116,
      101,
      118,
      105,
      101,
      110,
      101,
      114,
      101,
      105,
      110,
      111,
      100,
      101,
      106,
      97,
      114,
      102,
      111,
      110,
      100,
      111,
      99,
      97,
      110,
      97,
      108,
      110,
      111,
      114,
      116,
      101,
      108,
      101,
      116,
      114,
      97,
      99,
      97,
      117,
      115,
      97,
      116,
      111,
      109,
      97,
      114,
      109,
      97,
      110,
      111,
      115,
      108,
      117,
      110,
      101,
      115,
      97,
      117,
      116,
      111,
      115,
      118,
      105,
      108,
      108,
      97,
      118,
      101,
      110,
      100,
      111,
      112,
      101,
      115,
      97,
      114,
      116,
      105,
      112,
      111,
      115,
      116,
      101,
      110,
      103,
      97,
      109,
      97,
      114,
      99,
      111,
      108,
      108,
      101,
      118,
      97,
      112,
      97,
      100,
      114,
      101,
      117,
      110,
      105,
      100,
      111,
      118,
      97,
      109,
      111,
      115,
      122,
      111,
      110,
      97,
      115,
      97,
      109,
      98,
      111,
      115,
      98,
      97,
      110,
      100,
      97,
      109,
      97,
      114,
      105,
      97,
      97,
      98,
      117,
      115,
      111,
      109,
      117,
      99,
      104,
      97,
      115,
      117,
      98,
      105,
      114,
      114,
      105,
      111,
      106,
      97,
      118,
      105,
      118,
      105,
      114,
      103,
      114,
      97,
      100,
      111,
      99,
      104,
      105,
      99,
      97,
      97,
      108,
      108,
      195,
      173,
      106,
      111,
      118,
      101,
      110,
      100,
      105,
      99,
      104,
      97,
      101,
      115,
      116,
      97,
      110,
      116,
      97,
      108,
      101,
      115,
      115,
      97,
      108,
      105,
      114,
      115,
      117,
      101,
      108,
      111,
      112,
      101,
      115,
      111,
      115,
      102,
      105,
      110,
      101,
      115,
      108,
      108,
      97,
      109,
      97,
      98,
      117,
      115,
      99,
      111,
      195,
      169,
      115,
      116,
      97,
      108,
      108,
      101,
      103,
      97,
      110,
      101,
      103,
      114,
      111,
      112,
      108,
      97,
      122,
      97,
      104,
      117,
      109,
      111,
      114,
      112,
      97,
      103,
      97,
      114,
      106,
      117,
      110,
      116,
      97,
      100,
      111,
      98,
      108,
      101,
      105,
      115,
      108,
      97,
      115,
      98,
      111,
      108,
      115,
      97,
      98,
      97,
      195,
      177,
      111,
      104,
      97,
      98,
      108,
      97,
      108,
      117,
      99,
      104,
      97,
      195,
      129,
      114,
      101,
      97,
      100,
      105,
      99,
      101,
      110,
      106,
      117,
      103,
      97,
      114,
      110,
      111,
      116,
      97,
      115,
      118,
      97,
      108,
      108,
      101,
      97,
      108,
      108,
      195,
      161,
      99,
      97,
      114,
      103,
      97,
      100,
      111,
      108,
      111,
      114,
      97,
      98,
      97,
      106,
      111,
      101,
      115,
      116,
      195,
      169,
      103,
      117,
      115,
      116,
      111,
      109,
      101,
      110,
      116,
      101,
      109,
      97,
      114,
      105,
      111,
      102,
      105,
      114,
      109,
      97,
      99,
      111,
      115,
      116,
      111,
      102,
      105,
      99,
      104,
      97,
      112,
      108,
      97,
      116,
      97,
      104,
      111,
      103,
      97,
      114,
      97,
      114,
      116,
      101,
      115,
      108,
      101,
      121,
      101,
      115,
      97,
      113,
      117,
      101,
      108,
      109,
      117,
      115,
      101,
      111,
      98,
      97,
      115,
      101,
      115,
      112,
      111,
      99,
      111,
      115,
      109,
      105,
      116,
      97,
      100,
      99,
      105,
      101,
      108,
      111,
      99,
      104,
      105,
      99,
      111,
      109,
      105,
      101,
      100,
      111,
      103,
      97,
      110,
      97,
      114,
      115,
      97,
      110,
      116,
      111,
      101,
      116,
      97,
      112,
      97,
      100,
      101,
      98,
      101,
      115,
      112,
      108,
      97,
      121,
      97,
      114,
      101,
      100,
      101,
      115,
      115,
      105,
      101,
      116,
      101,
      99,
      111,
      114,
      116,
      101,
      99,
      111,
      114,
      101,
      97,
      100,
      117,
      100,
      97,
      115,
      100,
      101,
      115,
      101,
      111,
      118,
      105,
      101,
      106,
      111,
      100,
      101,
      115,
      101,
      97,
      97,
      103,
      117,
      97,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      100,
      111,
      109,
      97,
      105,
      110,
      99,
      111,
      109,
      109,
      111,
      110,
      115,
      116,
      97,
      116,
      117,
      115,
      101,
      118,
      101,
      110,
      116,
      115,
      109,
      97,
      115,
      116,
      101,
      114,
      115,
      121,
      115,
      116,
      101,
      109,
      97,
      99,
      116,
      105,
      111,
      110,
      98,
      97,
      110,
      110,
      101,
      114,
      114,
      101,
      109,
      111,
      118,
      101,
      115,
      99,
      114,
      111,
      108,
      108,
      117,
      112,
      100,
      97,
      116,
      101,
      103,
      108,
      111,
      98,
      97,
      108,
      109,
      101,
      100,
      105,
      117,
      109,
      102,
      105,
      108,
      116,
      101,
      114,
      110,
      117,
      109,
      98,
      101,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      112,
      117,
      98,
      108,
      105,
      99,
      115,
      99,
      114,
      101,
      101,
      110,
      99,
      104,
      111,
      111,
      115,
      101,
      110,
      111,
      114,
      109,
      97,
      108,
      116,
      114,
      97,
      118,
      101,
      108,
      105,
      115,
      115,
      117,
      101,
      115,
      115,
      111,
      117,
      114,
      99,
      101,
      116,
      97,
      114,
      103,
      101,
      116,
      115,
      112,
      114,
      105,
      110,
      103,
      109,
      111,
      100,
      117,
      108,
      101,
      109,
      111,
      98,
      105,
      108,
      101,
      115,
      119,
      105,
      116,
      99,
      104,
      112,
      104,
      111,
      116,
      111,
      115,
      98,
      111,
      114,
      100,
      101,
      114,
      114,
      101,
      103,
      105,
      111,
      110,
      105,
      116,
      115,
      101,
      108,
      102,
      115,
      111,
      99,
      105,
      97,
      108,
      97,
      99,
      116,
      105,
      118,
      101,
      99,
      111,
      108,
      117,
      109,
      110,
      114,
      101,
      99,
      111,
      114,
      100,
      102,
      111,
      108,
      108,
      111,
      119,
      116,
      105,
      116,
      108,
      101,
      62,
      101,
      105,
      116,
      104,
      101,
      114,
      108,
      101,
      110,
      103,
      116,
      104,
      102,
      97,
      109,
      105,
      108,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      108,
      97,
      121,
      111,
      117,
      116,
      97,
      117,
      116,
      104,
      111,
      114,
      99,
      114,
      101,
      97,
      116,
      101,
      114,
      101,
      118,
      105,
      101,
      119,
      115,
      117,
      109,
      109,
      101,
      114,
      115,
      101,
      114,
      118,
      101,
      114,
      112,
      108,
      97,
      121,
      101,
      100,
      112,
      108,
      97,
      121,
      101,
      114,
      101,
      120,
      112,
      97,
      110,
      100,
      112,
      111,
      108,
      105,
      99,
      121,
      102,
      111,
      114,
      109,
      97,
      116,
      100,
      111,
      117,
      98,
      108,
      101,
      112,
      111,
      105,
      110,
      116,
      115,
      115,
      101,
      114,
      105,
      101,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      108,
      105,
      118,
      105,
      110,
      103,
      100,
      101,
      115,
      105,
      103,
      110,
      109,
      111,
      110,
      116,
      104,
      115,
      102,
      111,
      114,
      99,
      101,
      115,
      117,
      110,
      105,
      113,
      117,
      101,
      119,
      101,
      105,
      103,
      104,
      116,
      112,
      101,
      111,
      112,
      108,
      101,
      101,
      110,
      101,
      114,
      103,
      121,
      110,
      97,
      116,
      117,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      102,
      105,
      103,
      117,
      114,
      101,
      104,
      97,
      118,
      105,
      110,
      103,
      99,
      117,
      115,
      116,
      111,
      109,
      111,
      102,
      102,
      115,
      101,
      116,
      108,
      101,
      116,
      116,
      101,
      114,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      117,
      98,
      109,
      105,
      116,
      114,
      101,
      110,
      100,
      101,
      114,
      103,
      114,
      111,
      117,
      112,
      115,
      117,
      112,
      108,
      111,
      97,
      100,
      104,
      101,
      97,
      108,
      116,
      104,
      109,
      101,
      116,
      104,
      111,
      100,
      118,
      105,
      100,
      101,
      111,
      115,
      115,
      99,
      104,
      111,
      111,
      108,
      102,
      117,
      116,
      117,
      114,
      101,
      115,
      104,
      97,
      100,
      111,
      119,
      100,
      101,
      98,
      97,
      116,
      101,
      118,
      97,
      108,
      117,
      101,
      115,
      79,
      98,
      106,
      101,
      99,
      116,
      111,
      116,
      104,
      101,
      114,
      115,
      114,
      105,
      103,
      104,
      116,
      115,
      108,
      101,
      97,
      103,
      117,
      101,
      99,
      104,
      114,
      111,
      109,
      101,
      115,
      105,
      109,
      112,
      108,
      101,
      110,
      111,
      116,
      105,
      99,
      101,
      115,
      104,
      97,
      114,
      101,
      100,
      101,
      110,
      100,
      105,
      110,
      103,
      115,
      101,
      97,
      115,
      111,
      110,
      114,
      101,
      112,
      111,
      114,
      116,
      111,
      110,
      108,
      105,
      110,
      101,
      115,
      113,
      117,
      97,
      114,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      105,
      109,
      97,
      103,
      101,
      115,
      101,
      110,
      97,
      98,
      108,
      101,
      109,
      111,
      118,
      105,
      110,
      103,
      108,
      97,
      116,
      101,
      115,
      116,
      119,
      105,
      110,
      116,
      101,
      114,
      70,
      114,
      97,
      110,
      99,
      101,
      112,
      101,
      114,
      105,
      111,
      100,
      115,
      116,
      114,
      111,
      110,
      103,
      114,
      101,
      112,
      101,
      97,
      116,
      76,
      111,
      110,
      100,
      111,
      110,
      100,
      101,
      116,
      97,
      105,
      108,
      102,
      111,
      114,
      109,
      101,
      100,
      100,
      101,
      109,
      97,
      110,
      100,
      115,
      101,
      99,
      117,
      114,
      101,
      112,
      97,
      115,
      115,
      101,
      100,
      116,
      111,
      103,
      103,
      108,
      101,
      112,
      108,
      97,
      99,
      101,
      115,
      100,
      101,
      118,
      105,
      99,
      101,
      115,
      116,
      97,
      116,
      105,
      99,
      99,
      105,
      116,
      105,
      101,
      115,
      115,
      116,
      114,
      101,
      97,
      109,
      121,
      101,
      108,
      108,
      111,
      119,
      97,
      116,
      116,
      97,
      99,
      107,
      115,
      116,
      114,
      101,
      101,
      116,
      102,
      108,
      105,
      103,
      104,
      116,
      104,
      105,
      100,
      100,
      101,
      110,
      105,
      110,
      102,
      111,
      34,
      62,
      111,
      112,
      101,
      110,
      101,
      100,
      117,
      115,
      101,
      102,
      117,
      108,
      118,
      97,
      108,
      108,
      101,
      121,
      99,
      97,
      117,
      115,
      101,
      115,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      101,
      99,
      114,
      101,
      116,
      115,
      101,
      99,
      111,
      110,
      100,
      100,
      97,
      109,
      97,
      103,
      101,
      115,
      112,
      111,
      114,
      116,
      115,
      101,
      120,
      99,
      101,
      112,
      116,
      114,
      97,
      116,
      105,
      110,
      103,
      115,
      105,
      103,
      110,
      101,
      100,
      116,
      104,
      105,
      110,
      103,
      115,
      101,
      102,
      102,
      101,
      99,
      116,
      102,
      105,
      101,
      108,
      100,
      115,
      115,
      116,
      97,
      116,
      101,
      115,
      111,
      102,
      102,
      105,
      99,
      101,
      118,
      105,
      115,
      117,
      97,
      108,
      101,
      100,
      105,
      116,
      111,
      114,
      118,
      111,
      108,
      117,
      109,
      101,
      82,
      101,
      112,
      111,
      114,
      116,
      109,
      117,
      115,
      101,
      117,
      109,
      109,
      111,
      118,
      105,
      101,
      115,
      112,
      97,
      114,
      101,
      110,
      116,
      97,
      99,
      99,
      101,
      115,
      115,
      109,
      111,
      115,
      116,
      108,
      121,
      109,
      111,
      116,
      104,
      101,
      114,
      34,
      32,
      105,
      100,
      61,
      34,
      109,
      97,
      114,
      107,
      101,
      116,
      103,
      114,
      111,
      117,
      110,
      100,
      99,
      104,
      97,
      110,
      99,
      101,
      115,
      117,
      114,
      118,
      101,
      121,
      98,
      101,
      102,
      111,
      114,
      101,
      115,
      121,
      109,
      98,
      111,
      108,
      109,
      111,
      109,
      101,
      110,
      116,
      115,
      112,
      101,
      101,
      99,
      104,
      109,
      111,
      116,
      105,
      111,
      110,
      105,
      110,
      115,
      105,
      100,
      101,
      109,
      97,
      116,
      116,
      101,
      114,
      67,
      101,
      110,
      116,
      101,
      114,
      111,
      98,
      106,
      101,
      99,
      116,
      101,
      120,
      105,
      115,
      116,
      115,
      109,
      105,
      100,
      100,
      108,
      101,
      69,
      117,
      114,
      111,
      112,
      101,
      103,
      114,
      111,
      119,
      116,
      104,
      108,
      101,
      103,
      97,
      99,
      121,
      109,
      97,
      110,
      110,
      101,
      114,
      101,
      110,
      111,
      117,
      103,
      104,
      99,
      97,
      114,
      101,
      101,
      114,
      97,
      110,
      115,
      119,
      101,
      114,
      111,
      114,
      105,
      103,
      105,
      110,
      112,
      111,
      114,
      116,
      97,
      108,
      99,
      108,
      105,
      101,
      110,
      116,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      97,
      110,
      100,
      111,
      109,
      99,
      108,
      111,
      115,
      101,
      100,
      116,
      111,
      112,
      105,
      99,
      115,
      99,
      111,
      109,
      105,
      110,
      103,
      102,
      97,
      116,
      104,
      101,
      114,
      111,
      112,
      116,
      105,
      111,
      110,
      115,
      105,
      109,
      112,
      108,
      121,
      114,
      97,
      105,
      115,
      101,
      100,
      101,
      115,
      99,
      97,
      112,
      101,
      99,
      104,
      111,
      115,
      101,
      110,
      99,
      104,
      117,
      114,
      99,
      104,
      100,
      101,
      102,
      105,
      110,
      101,
      114,
      101,
      97,
      115,
      111,
      110,
      99,
      111,
      114,
      110,
      101,
      114,
      111,
      117,
      116,
      112,
      117,
      116,
      109,
      101,
      109,
      111,
      114,
      121,
      105,
      102,
      114,
      97,
      109,
      101,
      112,
      111,
      108,
      105,
      99,
      101,
      109,
      111,
      100,
      101,
      108,
      115,
      78,
      117,
      109,
      98,
      101,
      114,
      100,
      117,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      101,
      114,
      115,
      115,
      116,
      121,
      108,
      101,
      115,
      107,
      105,
      108,
      108,
      101,
      100,
      108,
      105,
      115,
      116,
      101,
      100,
      99,
      97,
      108,
      108,
      101,
      100,
      115,
      105,
      108,
      118,
      101,
      114,
      109,
      97,
      114,
      103,
      105,
      110,
      100,
      101,
      108,
      101,
      116,
      101,
      98,
      101,
      116,
      116,
      101,
      114,
      98,
      114,
      111,
      119,
      115,
      101,
      108,
      105,
      109,
      105,
      116,
      115,
      71,
      108,
      111,
      98,
      97,
      108,
      115,
      105,
      110,
      103,
      108,
      101,
      119,
      105,
      100,
      103,
      101,
      116,
      99,
      101,
      110,
      116,
      101,
      114,
      98,
      117,
      100,
      103,
      101,
      116,
      110,
      111,
      119,
      114,
      97,
      112,
      99,
      114,
      101,
      100,
      105,
      116,
      99,
      108,
      97,
      105,
      109,
      115,
      101,
      110,
      103,
      105,
      110,
      101,
      115,
      97,
      102,
      101,
      116,
      121,
      99,
      104,
      111,
      105,
      99,
      101,
      115,
      112,
      105,
      114,
      105,
      116,
      45,
      115,
      116,
      121,
      108,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      109,
      97,
      107,
      105,
      110,
      103,
      110,
      101,
      101,
      100,
      101,
      100,
      114,
      117,
      115,
      115,
      105,
      97,
      112,
      108,
      101,
      97,
      115,
      101,
      101,
      120,
      116,
      101,
      110,
      116,
      83,
      99,
      114,
      105,
      112,
      116,
      98,
      114,
      111,
      107,
      101,
      110,
      97,
      108,
      108,
      111,
      119,
      115,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      102,
      97,
      99,
      116,
      111,
      114,
      109,
      101,
      109,
      98,
      101,
      114,
      45,
      98,
      97,
      115,
      101,
      100,
      116,
      104,
      101,
      111,
      114,
      121,
      99,
      111,
      110,
      102,
      105,
      103,
      97,
      114,
      111,
      117,
      110,
      100,
      119,
      111,
      114,
      107,
      101,
      100,
      104,
      101,
      108,
      112,
      101,
      100,
      67,
      104,
      117,
      114,
      99,
      104,
      105,
      109,
      112,
      97,
      99,
      116,
      115,
      104,
      111,
      117,
      108,
      100,
      97,
      108,
      119,
      97,
      121,
      115,
      108,
      111,
      103,
      111,
      34,
      32,
      98,
      111,
      116,
      116,
      111,
      109,
      108,
      105,
      115,
      116,
      34,
      62,
      41,
      123,
      118,
      97,
      114,
      32,
      112,
      114,
      101,
      102,
      105,
      120,
      111,
      114,
      97,
      110,
      103,
      101,
      72,
      101,
      97,
      100,
      101,
      114,
      46,
      112,
      117,
      115,
      104,
      40,
      99,
      111,
      117,
      112,
      108,
      101,
      103,
      97,
      114,
      100,
      101,
      110,
      98,
      114,
      105,
      100,
      103,
      101,
      108,
      97,
      117,
      110,
      99,
      104,
      82,
      101,
      118,
      105,
      101,
      119,
      116,
      97,
      107,
      105,
      110,
      103,
      118,
      105,
      115,
      105,
      111,
      110,
      108,
      105,
      116,
      116,
      108,
      101,
      100,
      97,
      116,
      105,
      110,
      103,
      66,
      117,
      116,
      116,
      111,
      110,
      98,
      101,
      97,
      117,
      116,
      121,
      116,
      104,
      101,
      109,
      101,
      115,
      102,
      111,
      114,
      103,
      111,
      116,
      83,
      101,
      97,
      114,
      99,
      104,
      97,
      110,
      99,
      104,
      111,
      114,
      97,
      108,
      109,
      111,
      115,
      116,
      108,
      111,
      97,
      100,
      101,
      100,
      67,
      104,
      97,
      110,
      103,
      101,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      116,
      114,
      105,
      110,
      103,
      114,
      101,
      108,
      111,
      97,
      100,
      77,
      111,
      98,
      105,
      108,
      101,
      105,
      110,
      99,
      111,
      109,
      101,
      115,
      117,
      112,
      112,
      108,
      121,
      83,
      111,
      117,
      114,
      99,
      101,
      111,
      114,
      100,
      101,
      114,
      115,
      118,
      105,
      101,
      119,
      101,
      100,
      38,
      110,
      98,
      115,
      112,
      59,
      99,
      111,
      117,
      114,
      115,
      101,
      65,
      98,
      111,
      117,
      116,
      32,
      105,
      115,
      108,
      97,
      110,
      100,
      60,
      104,
      116,
      109,
      108,
      32,
      99,
      111,
      111,
      107,
      105,
      101,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      109,
      97,
      122,
      111,
      110,
      109,
      111,
      100,
      101,
      114,
      110,
      97,
      100,
      118,
      105,
      99,
      101,
      105,
      110,
      60,
      47,
      97,
      62,
      58,
      32,
      84,
      104,
      101,
      32,
      100,
      105,
      97,
      108,
      111,
      103,
      104,
      111,
      117,
      115,
      101,
      115,
      66,
      69,
      71,
      73,
      78,
      32,
      77,
      101,
      120,
      105,
      99,
      111,
      115,
      116,
      97,
      114,
      116,
      115,
      99,
      101,
      110,
      116,
      114,
      101,
      104,
      101,
      105,
      103,
      104,
      116,
      97,
      100,
      100,
      105,
      110,
      103,
      73,
      115,
      108,
      97,
      110,
      100,
      97,
      115,
      115,
      101,
      116,
      115,
      69,
      109,
      112,
      105,
      114,
      101,
      83,
      99,
      104,
      111,
      111,
      108,
      101,
      102,
      102,
      111,
      114,
      116,
      100,
      105,
      114,
      101,
      99,
      116,
      110,
      101,
      97,
      114,
      108,
      121,
      109,
      97,
      110,
      117,
      97,
      108,
      83,
      101,
      108,
      101,
      99,
      116,
      46,
      10,
      10,
      79,
      110,
      101,
      106,
      111,
      105,
      110,
      101,
      100,
      109,
      101,
      110,
      117,
      34,
      62,
      80,
      104,
      105,
      108,
      105,
      112,
      97,
      119,
      97,
      114,
      100,
      115,
      104,
      97,
      110,
      100,
      108,
      101,
      105,
      109,
      112,
      111,
      114,
      116,
      79,
      102,
      102,
      105,
      99,
      101,
      114,
      101,
      103,
      97,
      114,
      100,
      115,
      107,
      105,
      108,
      108,
      115,
      110,
      97,
      116,
      105,
      111,
      110,
      83,
      112,
      111,
      114,
      116,
      115,
      100,
      101,
      103,
      114,
      101,
      101,
      119,
      101,
      101,
      107,
      108,
      121,
      32,
      40,
      101,
      46,
      103,
      46,
      98,
      101,
      104,
      105,
      110,
      100,
      100,
      111,
      99,
      116,
      111,
      114,
      108,
      111,
      103,
      103,
      101,
      100,
      117,
      110,
      105,
      116,
      101,
      100,
      60,
      47,
      98,
      62,
      60,
      47,
      98,
      101,
      103,
      105,
      110,
      115,
      112,
      108,
      97,
      110,
      116,
      115,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      114,
      116,
      105,
      115,
      116,
      105,
      115,
      115,
      117,
      101,
      100,
      51,
      48,
      48,
      112,
      120,
      124,
      99,
      97,
      110,
      97,
      100,
      97,
      97,
      103,
      101,
      110,
      99,
      121,
      115,
      99,
      104,
      101,
      109,
      101,
      114,
      101,
      109,
      97,
      105,
      110,
      66,
      114,
      97,
      122,
      105,
      108,
      115,
      97,
      109,
      112,
      108,
      101,
      108,
      111,
      103,
      111,
      34,
      62,
      98,
      101,
      121,
      111,
      110,
      100,
      45,
      115,
      99,
      97,
      108,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      115,
      101,
      114,
      118,
      101,
      100,
      109,
      97,
      114,
      105,
      110,
      101,
      70,
      111,
      111,
      116,
      101,
      114,
      99,
      97,
      109,
      101,
      114,
      97,
      60,
      47,
      104,
      49,
      62,
      10,
      95,
      102,
      111,
      114,
      109,
      34,
      108,
      101,
      97,
      118,
      101,
      115,
      115,
      116,
      114,
      101,
      115,
      115,
      34,
      32,
      47,
      62,
      13,
      10,
      46,
      103,
      105,
      102,
      34,
      32,
      111,
      110,
      108,
      111,
      97,
      100,
      108,
      111,
      97,
      100,
      101,
      114,
      79,
      120,
      102,
      111,
      114,
      100,
      115,
      105,
      115,
      116,
      101,
      114,
      115,
      117,
      114,
      118,
      105,
      118,
      108,
      105,
      115,
      116,
      101,
      110,
      102,
      101,
      109,
      97,
      108,
      101,
      68,
      101,
      115,
      105,
      103,
      110,
      115,
      105,
      122,
      101,
      61,
      34,
      97,
      112,
      112,
      101,
      97,
      108,
      116,
      101,
      120,
      116,
      34,
      62,
      108,
      101,
      118,
      101,
      108,
      115,
      116,
      104,
      97,
      110,
      107,
      115,
      104,
      105,
      103,
      104,
      101,
      114,
      102,
      111,
      114,
      99,
      101,
      100,
      97,
      110,
      105,
      109,
      97,
      108,
      97,
      110,
      121,
      111,
      110,
      101,
      65,
      102,
      114,
      105,
      99,
      97,
      97,
      103,
      114,
      101,
      101,
      100,
      114,
      101,
      99,
      101,
      110,
      116,
      80,
      101,
      111,
      112,
      108,
      101,
      60,
      98,
      114,
      32,
      47,
      62,
      119,
      111,
      110,
      100,
      101,
      114,
      112,
      114,
      105,
      99,
      101,
      115,
      116,
      117,
      114,
      110,
      101,
      100,
      124,
      124,
      32,
      123,
      125,
      59,
      109,
      97,
      105,
      110,
      34,
      62,
      105,
      110,
      108,
      105,
      110,
      101,
      115,
      117,
      110,
      100,
      97,
      121,
      119,
      114,
      97,
      112,
      34,
      62,
      102,
      97,
      105,
      108,
      101,
      100,
      99,
      101,
      110,
      115,
      117,
      115,
      109,
      105,
      110,
      117,
      116,
      101,
      98,
      101,
      97,
      99,
      111,
      110,
      113,
      117,
      111,
      116,
      101,
      115,
      49,
      53,
      48,
      112,
      120,
      124,
      101,
      115,
      116,
      97,
      116,
      101,
      114,
      101,
      109,
      111,
      116,
      101,
      101,
      109,
      97,
      105,
      108,
      34,
      108,
      105,
      110,
      107,
      101,
      100,
      114,
      105,
      103,
      104,
      116,
      59,
      115,
      105,
      103,
      110,
      97,
      108,
      102,
      111,
      114,
      109,
      97,
      108,
      49,
      46,
      104,
      116,
      109,
      108,
      115,
      105,
      103,
      110,
      117,
      112,
      112,
      114,
      105,
      110,
      99,
      101,
      102,
      108,
      111,
      97,
      116,
      58,
      46,
      112,
      110,
      103,
      34,
      32,
      102,
      111,
      114,
      117,
      109,
      46,
      65,
      99,
      99,
      101,
      115,
      115,
      112,
      97,
      112,
      101,
      114,
      115,
      115,
      111,
      117,
      110,
      100,
      115,
      101,
      120,
      116,
      101,
      110,
      100,
      72,
      101,
      105,
      103,
      104,
      116,
      115,
      108,
      105,
      100,
      101,
      114,
      85,
      84,
      70,
      45,
      56,
      34,
      38,
      97,
      109,
      112,
      59,
      32,
      66,
      101,
      102,
      111,
      114,
      101,
      46,
      32,
      87,
      105,
      116,
      104,
      115,
      116,
      117,
      100,
      105,
      111,
      111,
      119,
      110,
      101,
      114,
      115,
      109,
      97,
      110,
      97,
      103,
      101,
      112,
      114,
      111,
      102,
      105,
      116,
      106,
      81,
      117,
      101,
      114,
      121,
      97,
      110,
      110,
      117,
      97,
      108,
      112,
      97,
      114,
      97,
      109,
      115,
      98,
      111,
      117,
      103,
      104,
      116,
      102,
      97,
      109,
      111,
      117,
      115,
      103,
      111,
      111,
      103,
      108,
      101,
      108,
      111,
      110,
      103,
      101,
      114,
      105,
      43,
      43,
      41,
      32,
      123,
      105,
      115,
      114,
      97,
      101,
      108,
      115,
      97,
      121,
      105,
      110,
      103,
      100,
      101,
      99,
      105,
      100,
      101,
      104,
      111,
      109,
      101,
      34,
      62,
      104,
      101,
      97,
      100,
      101,
      114,
      101,
      110,
      115,
      117,
      114,
      101,
      98,
      114,
      97,
      110,
      99,
      104,
      112,
      105,
      101,
      99,
      101,
      115,
      98,
      108,
      111,
      99,
      107,
      59,
      115,
      116,
      97,
      116,
      101,
      100,
      116,
      111,
      112,
      34,
      62,
      60,
      114,
      97,
      99,
      105,
      110,
      103,
      114,
      101,
      115,
      105,
      122,
      101,
      45,
      45,
      38,
      103,
      116,
      59,
      112,
      97,
      99,
      105,
      116,
      121,
      115,
      101,
      120,
      117,
      97,
      108,
      98,
      117,
      114,
      101,
      97,
      117,
      46,
      106,
      112,
      103,
      34,
      32,
      49,
      48,
      44,
      48,
      48,
      48,
      111,
      98,
      116,
      97,
      105,
      110,
      116,
      105,
      116,
      108,
      101,
      115,
      97,
      109,
      111,
      117,
      110,
      116,
      44,
      32,
      73,
      110,
      99,
      46,
      99,
      111,
      109,
      101,
      100,
      121,
      109,
      101,
      110,
      117,
      34,
      32,
      108,
      121,
      114,
      105,
      99,
      115,
      116,
      111,
      100,
      97,
      121,
      46,
      105,
      110,
      100,
      101,
      101,
      100,
      99,
      111,
      117,
      110,
      116,
      121,
      95,
      108,
      111,
      103,
      111,
      46,
      70,
      97,
      109,
      105,
      108,
      121,
      108,
      111,
      111,
      107,
      101,
      100,
      77,
      97,
      114,
      107,
      101,
      116,
      108,
      115,
      101,
      32,
      105,
      102,
      80,
      108,
      97,
      121,
      101,
      114,
      116,
      117,
      114,
      107,
      101,
      121,
      41,
      59,
      118,
      97,
      114,
      32,
      102,
      111,
      114,
      101,
      115,
      116,
      103,
      105,
      118,
      105,
      110,
      103,
      101,
      114,
      114,
      111,
      114,
      115,
      68,
      111,
      109,
      97,
      105,
      110,
      125,
      101,
      108,
      115,
      101,
      123,
      105,
      110,
      115,
      101,
      114,
      116,
      66,
      108,
      111,
      103,
      60,
      47,
      102,
      111,
      111,
      116,
      101,
      114,
      108,
      111,
      103,
      105,
      110,
      46,
      102,
      97,
      115,
      116,
      101,
      114,
      97,
      103,
      101,
      110,
      116,
      115,
      60,
      98,
      111,
      100,
      121,
      32,
      49,
      48,
      112,
      120,
      32,
      48,
      112,
      114,
      97,
      103,
      109,
      97,
      102,
      114,
      105,
      100,
      97,
      121,
      106,
      117,
      110,
      105,
      111,
      114,
      100,
      111,
      108,
      108,
      97,
      114,
      112,
      108,
      97,
      99,
      101,
      100,
      99,
      111,
      118,
      101,
      114,
      115,
      112,
      108,
      117,
      103,
      105,
      110,
      53,
      44,
      48,
      48,
      48,
      32,
      112,
      97,
      103,
      101,
      34,
      62,
      98,
      111,
      115,
      116,
      111,
      110,
      46,
      116,
      101,
      115,
      116,
      40,
      97,
      118,
      97,
      116,
      97,
      114,
      116,
      101,
      115,
      116,
      101,
      100,
      95,
      99,
      111,
      117,
      110,
      116,
      102,
      111,
      114,
      117,
      109,
      115,
      115,
      99,
      104,
      101,
      109,
      97,
      105,
      110,
      100,
      101,
      120,
      44,
      102,
      105,
      108,
      108,
      101,
      100,
      115,
      104,
      97,
      114,
      101,
      115,
      114,
      101,
      97,
      100,
      101,
      114,
      97,
      108,
      101,
      114,
      116,
      40,
      97,
      112,
      112,
      101,
      97,
      114,
      83,
      117,
      98,
      109,
      105,
      116,
      108,
      105,
      110,
      101,
      34,
      62,
      98,
      111,
      100,
      121,
      34,
      62,
      10,
      42,
      32,
      84,
      104,
      101,
      84,
      104,
      111,
      117,
      103,
      104,
      115,
      101,
      101,
      105,
      110,
      103,
      106,
      101,
      114,
      115,
      101,
      121,
      78,
      101,
      119,
      115,
      60,
      47,
      118,
      101,
      114,
      105,
      102,
      121,
      101,
      120,
      112,
      101,
      114,
      116,
      105,
      110,
      106,
      117,
      114,
      121,
      119,
      105,
      100,
      116,
      104,
      61,
      67,
      111,
      111,
      107,
      105,
      101,
      83,
      84,
      65,
      82,
      84,
      32,
      97,
      99,
      114,
      111,
      115,
      115,
      95,
      105,
      109,
      97,
      103,
      101,
      116,
      104,
      114,
      101,
      97,
      100,
      110,
      97,
      116,
      105,
      118,
      101,
      112,
      111,
      99,
      107,
      101,
      116,
      98,
      111,
      120,
      34,
      62,
      10,
      83,
      121,
      115,
      116,
      101,
      109,
      32,
      68,
      97,
      118,
      105,
      100,
      99,
      97,
      110,
      99,
      101,
      114,
      116,
      97,
      98,
      108,
      101,
      115,
      112,
      114,
      111,
      118,
      101,
      100,
      65,
      112,
      114,
      105,
      108,
      32,
      114,
      101,
      97,
      108,
      108,
      121,
      100,
      114,
      105,
      118,
      101,
      114,
      105,
      116,
      101,
      109,
      34,
      62,
      109,
      111,
      114,
      101,
      34,
      62,
      98,
      111,
      97,
      114,
      100,
      115,
      99,
      111,
      108,
      111,
      114,
      115,
      99,
      97,
      109,
      112,
      117,
      115,
      102,
      105,
      114,
      115,
      116,
      32,
      124,
      124,
      32,
      91,
      93,
      59,
      109,
      101,
      100,
      105,
      97,
      46,
      103,
      117,
      105,
      116,
      97,
      114,
      102,
      105,
      110,
      105,
      115,
      104,
      119,
      105,
      100,
      116,
      104,
      58,
      115,
      104,
      111,
      119,
      101,
      100,
      79,
      116,
      104,
      101,
      114,
      32,
      46,
      112,
      104,
      112,
      34,
      32,
      97,
      115,
      115,
      117,
      109,
      101,
      108,
      97,
      121,
      101,
      114,
      115,
      119,
      105,
      108,
      115,
      111,
      110,
      115,
      116,
      111,
      114,
      101,
      115,
      114,
      101,
      108,
      105,
      101,
      102,
      115,
      119,
      101,
      100,
      101,
      110,
      67,
      117,
      115,
      116,
      111,
      109,
      101,
      97,
      115,
      105,
      108,
      121,
      32,
      121,
      111,
      117,
      114,
      32,
      83,
      116,
      114,
      105,
      110,
      103,
      10,
      10,
      87,
      104,
      105,
      108,
      116,
      97,
      121,
      108,
      111,
      114,
      99,
      108,
      101,
      97,
      114,
      58,
      114,
      101,
      115,
      111,
      114,
      116,
      102,
      114,
      101,
      110,
      99,
      104,
      116,
      104,
      111,
      117,
      103,
      104,
      34,
      41,
      32,
      43,
      32,
      34,
      60,
      98,
      111,
      100,
      121,
      62,
      98,
      117,
      121,
      105,
      110,
      103,
      98,
      114,
      97,
      110,
      100,
      115,
      77,
      101,
      109,
      98,
      101,
      114,
      110,
      97,
      109,
      101,
      34,
      62,
      111,
      112,
      112,
      105,
      110,
      103,
      115,
      101,
      99,
      116,
      111,
      114,
      53,
      112,
      120,
      59,
      34,
      62,
      118,
      115,
      112,
      97,
      99,
      101,
      112,
      111,
      115,
      116,
      101,
      114,
      109,
      97,
      106,
      111,
      114,
      32,
      99,
      111,
      102,
      102,
      101,
      101,
      109,
      97,
      114,
      116,
      105,
      110,
      109,
      97,
      116,
      117,
      114,
      101,
      104,
      97,
      112,
      112,
      101,
      110,
      60,
      47,
      110,
      97,
      118,
      62,
      107,
      97,
      110,
      115,
      97,
      115,
      108,
      105,
      110,
      107,
      34,
      62,
      73,
      109,
      97,
      103,
      101,
      115,
      61,
      102,
      97,
      108,
      115,
      101,
      119,
      104,
      105,
      108,
      101,
      32,
      104,
      115,
      112,
      97,
      99,
      101,
      48,
      38,
      97,
      109,
      112,
      59,
      32,
      10,
      10,
      73,
      110,
      32,
      32,
      112,
      111,
      119,
      101,
      114,
      80,
      111,
      108,
      115,
      107,
      105,
      45,
      99,
      111,
      108,
      111,
      114,
      106,
      111,
      114,
      100,
      97,
      110,
      66,
      111,
      116,
      116,
      111,
      109,
      83,
      116,
      97,
      114,
      116,
      32,
      45,
      99,
      111,
      117,
      110,
      116,
      50,
      46,
      104,
      116,
      109,
      108,
      110,
      101,
      119,
      115,
      34,
      62,
      48,
      49,
      46,
      106,
      112,
      103,
      79,
      110,
      108,
      105,
      110,
      101,
      45,
      114,
      105,
      103,
      104,
      116,
      109,
      105,
      108,
      108,
      101,
      114,
      115,
      101,
      110,
      105,
      111,
      114,
      73,
      83,
      66,
      78,
      32,
      48,
      48,
      44,
      48,
      48,
      48,
      32,
      103,
      117,
      105,
      100,
      101,
      115,
      118,
      97,
      108,
      117,
      101,
      41,
      101,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      97,
      105,
      114,
      46,
      120,
      109,
      108,
      34,
      32,
      32,
      114,
      105,
      103,
      104,
      116,
      115,
      46,
      104,
      116,
      109,
      108,
      45,
      98,
      108,
      111,
      99,
      107,
      114,
      101,
      103,
      69,
      120,
      112,
      58,
      104,
      111,
      118,
      101,
      114,
      119,
      105,
      116,
      104,
      105,
      110,
      118,
      105,
      114,
      103,
      105,
      110,
      112,
      104,
      111,
      110,
      101,
      115,
      60,
      47,
      116,
      114,
      62,
      13,
      117,
      115,
      105,
      110,
      103,
      32,
      10,
      9,
      118,
      97,
      114,
      32,
      62,
      39,
      41,
      59,
      10,
      9,
      60,
      47,
      116,
      100,
      62,
      10,
      60,
      47,
      116,
      114,
      62,
      10,
      98,
      97,
      104,
      97,
      115,
      97,
      98,
      114,
      97,
      115,
      105,
      108,
      103,
      97,
      108,
      101,
      103,
      111,
      109,
      97,
      103,
      121,
      97,
      114,
      112,
      111,
      108,
      115,
      107,
      105,
      115,
      114,
      112,
      115,
      107,
      105,
      216,
      177,
      216,
      175,
      217,
      136,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      174,
      128,
      228,
      189,
      147,
      231,
      185,
      129,
      233,
      171,
      148,
      228,
      191,
      161,
      230,
      129,
      175,
      228,
      184,
      173,
      229,
      155,
      189,
      230,
      136,
      145,
      228,
      187,
      172,
      228,
      184,
      128,
      228,
      184,
      170,
      229,
      133,
      172,
      229,
      143,
      184,
      231,
      174,
      161,
      231,
      144,
      134,
      232,
      174,
      186,
      229,
      157,
      155,
      229,
      143,
      175,
      228,
      187,
      165,
      230,
      156,
      141,
      229,
      138,
      161,
      230,
      151,
      182,
      233,
      151,
      180,
      228,
      184,
      170,
      228,
      186,
      186,
      228,
      186,
      167,
      229,
      147,
      129,
      232,
      135,
      170,
      229,
      183,
      177,
      228,
      188,
      129,
      228,
      184,
      154,
      230,
      159,
      165,
      231,
      156,
      139,
      229,
      183,
      165,
      228,
      189,
      156,
      232,
      129,
      148,
      231,
      179,
      187,
      230,
      178,
      161,
      230,
      156,
      137,
      231,
      189,
      145,
      231,
      171,
      153,
      230,
      137,
      128,
      230,
      156,
      137,
      232,
      175,
      132,
      232,
      174,
      186,
      228,
      184,
      173,
      229,
      191,
      131,
      230,
      150,
      135,
      231,
      171,
      160,
      231,
      148,
      168,
      230,
      136,
      183,
      233,
      166,
      150,
      233,
      161,
      181,
      228,
      189,
      156,
      232,
      128,
      133,
      230,
      138,
      128,
      230,
      156,
      175,
      233,
      151,
      174,
      233,
      162,
      152,
      231,
      155,
      184,
      229,
      133,
      179,
      228,
      184,
      139,
      232,
      189,
      189,
      230,
      144,
      156,
      231,
      180,
      162,
      228,
      189,
      191,
      231,
      148,
      168,
      232,
      189,
      175,
      228,
      187,
      182,
      229,
      156,
      168,
      231,
      186,
      191,
      228,
      184,
      187,
      233,
      162,
      152,
      232,
      181,
      132,
      230,
      150,
      153,
      232,
      167,
      134,
      233,
      162,
      145,
      229,
      155,
      158,
      229,
      164,
      141,
      230,
      179,
      168,
      229,
      134,
      140,
      231,
      189,
      145,
      231,
      187,
      156,
      230,
      148,
      182,
      232,
      151,
      143,
      229,
      134,
      133,
      229,
      174,
      185,
      230,
      142,
      168,
      232,
      141,
      144,
      229,
      184,
      130,
      229,
      156,
      186,
      230,
      182,
      136,
      230,
      129,
      175,
      231,
      169,
      186,
      233,
      151,
      180,
      229,
      143,
      145,
      229,
      184,
      131,
      228,
      187,
      128,
      228,
      185,
      136,
      229,
      165,
      189,
      229,
      143,
      139,
      231,
      148,
      159,
      230,
      180,
      187,
      229,
      155,
      190,
      231,
      137,
      135,
      229,
      143,
      145,
      229,
      177,
      149,
      229,
      166,
      130,
      230,
      158,
      156,
      230,
      137,
      139,
      230,
      156,
      186,
      230,
      150,
      176,
      233,
      151,
      187,
      230,
      156,
      128,
      230,
      150,
      176,
      230,
      150,
      185,
      229,
      188,
      143,
      229,
      140,
      151,
      228,
      186,
      172,
      230,
      143,
      144,
      228,
      190,
      155,
      229,
      133,
      179,
      228,
      186,
      142,
      230,
      155,
      180,
      229,
      164,
      154,
      232,
      191,
      153,
      228,
      184,
      170,
      231,
      179,
      187,
      231,
      187,
      159,
      231,
      159,
      165,
      233,
      129,
      147,
      230,
      184,
      184,
      230,
      136,
      143,
      229,
      185,
      191,
      229,
      145,
      138,
      229,
      133,
      182,
      228,
      187,
      150,
      229,
      143,
      145,
      232,
      161,
      168,
      229,
      174,
      137,
      229,
      133,
      168,
      231,
      172,
      172,
      228,
      184,
      128,
      228,
      188,
      154,
      229,
      145,
      152,
      232,
      191,
      155,
      232,
      161,
      140,
      231,
      130,
      185,
      229,
      135,
      187,
      231,
      137,
      136,
      230,
      157,
      131,
      231,
      148,
      181,
      229,
      173,
      144,
      228,
      184,
      150,
      231,
      149,
      140,
      232,
      174,
      190,
      232,
      174,
      161,
      229,
      133,
      141,
      232,
      180,
      185,
      230,
      149,
      153,
      232,
      130,
      178,
      229,
      138,
      160,
      229,
      133,
      165,
      230,
      180,
      187,
      229,
      138,
      168,
      228,
      187,
      150,
      228,
      187,
      172,
      229,
      149,
      134,
      229,
      147,
      129,
      229,
      141,
      154,
      229,
      174,
      162,
      231,
      142,
      176,
      229,
      156,
      168,
      228,
      184,
      138,
      230,
      181,
      183,
      229,
      166,
      130,
      228,
      189,
      149,
      229,
      183,
      178,
      231,
      187,
      143,
      231,
      149,
      153,
      232,
      168,
      128,
      232,
      175,
      166,
      231,
      187,
      134,
      231,
      164,
      190,
      229,
      140,
      186,
      231,
      153,
      187,
      229,
      189,
      149,
      230,
      156,
      172,
      231,
      171,
      153,
      233,
      156,
      128,
      232,
      166,
      129,
      228,
      187,
      183,
      230,
      160,
      188,
      230,
      148,
      175,
      230,
      140,
      129,
      229,
      155,
      189,
      233,
      153,
      133,
      233,
      147,
      190,
      230,
      142,
      165,
      229,
      155,
      189,
      229,
      174,
      182,
      229,
      187,
      186,
      232,
      174,
      190,
      230,
      156,
      139,
      229,
      143,
      139,
      233,
      152,
      133,
      232,
      175,
      187,
      230,
      179,
      149,
      229,
      190,
      139,
      228,
      189,
      141,
      231,
      189,
      174,
      231,
      187,
      143,
      230,
      181,
      142,
      233,
      128,
      137,
      230,
      139,
      169,
      232,
      191,
      153,
      230,
      160,
      183,
      229,
      189,
      147,
      229,
      137,
      141,
      229,
      136,
      134,
      231,
      177,
      187,
      230,
      142,
      146,
      232,
      161,
      140,
      229,
      155,
      160,
      228,
      184,
      186,
      228,
      186,
      164,
      230,
      152,
      147,
      230,
      156,
      128,
      229,
      144,
      142,
      233,
      159,
      179,
      228,
      185,
      144,
      228,
      184,
      141,
      232,
      131,
      189,
      233,
      128,
      154,
      232,
      191,
      135,
      232,
      161,
      140,
      228,
      184,
      154,
      231,
      167,
      145,
      230,
      138,
      128,
      229,
      143,
      175,
      232,
      131,
      189,
      232,
      174,
      190,
      229,
      164,
      135,
      229,
      144,
      136,
      228,
      189,
      156,
      229,
      164,
      167,
      229,
      174,
      182,
      231,
      164,
      190,
      228,
      188,
      154,
      231,
      160,
      148,
      231,
      169,
      182,
      228,
      184,
      147,
      228,
      184,
      154,
      229,
      133,
      168,
      233,
      131,
      168,
      233,
      161,
      185,
      231,
      155,
      174,
      232,
      191,
      153,
      233,
      135,
      140,
      232,
      191,
      152,
      230,
      152,
      175,
      229,
      188,
      128,
      229,
      167,
      139,
      230,
      131,
      133,
      229,
      134,
      181,
      231,
      148,
      181,
      232,
      132,
      145,
      230,
      150,
      135,
      228,
      187,
      182,
      229,
      147,
      129,
      231,
      137,
      140,
      229,
      184,
      174,
      229,
      138,
      169,
      230,
      150,
      135,
      229,
      140,
      150,
      232,
      181,
      132,
      230,
      186,
      144,
      229,
      164,
      167,
      229,
      173,
      166,
      229,
      173,
      166,
      228,
      185,
      160,
      229,
      156,
      176,
      229,
      157,
      128,
      230,
      181,
      143,
      232,
      167,
      136,
      230,
      138,
      149,
      232,
      181,
      132,
      229,
      183,
      165,
      231,
      168,
      139,
      232,
      166,
      129,
      230,
      177,
      130,
      230,
      128,
      142,
      228,
      185,
      136,
      230,
      151,
      182,
      229,
      128,
      153,
      229,
      138,
      159,
      232,
      131,
      189,
      228,
      184,
      187,
      232,
      166,
      129,
      231,
      155,
      174,
      229,
      137,
      141,
      232,
      181,
      132,
      232,
      174,
      175,
      229,
      159,
      142,
      229,
      184,
      130,
      230,
      150,
      185,
      230,
      179,
      149,
      231,
      148,
      181,
      229,
      189,
      177,
      230,
      139,
      155,
      232,
      129,
      152,
      229,
      163,
      176,
      230,
      152,
      142,
      228,
      187,
      187,
      228,
      189,
      149,
      229,
      129,
      165,
      229,
      186,
      183,
      230,
      149,
      176,
      230,
      141,
      174,
      231,
      190,
      142,
      229,
      155,
      189,
      230,
      177,
      189,
      232,
      189,
      166,
      228,
      187,
      139,
      231,
      187,
      141,
      228,
      189,
      134,
      230,
      152,
      175,
      228,
      186,
      164,
      230,
      181,
      129,
      231,
      148,
      159,
      228,
      186,
      167,
      230,
      137,
      128,
      228,
      187,
      165,
      231,
      148,
      181,
      232,
      175,
      157,
      230,
      152,
      190,
      231,
      164,
      186,
      228,
      184,
      128,
      228,
      186,
      155,
      229,
      141,
      149,
      228,
      189,
      141,
      228,
      186,
      186,
      229,
      145,
      152,
      229,
      136,
      134,
      230,
      158,
      144,
      229,
      156,
      176,
      229,
      155,
      190,
      230,
      151,
      133,
      230,
      184,
      184,
      229,
      183,
      165,
      229,
      133,
      183,
      229,
      173,
      166,
      231,
      148,
      159,
      231,
      179,
      187,
      229,
      136,
      151,
      231,
      189,
      145,
      229,
      143,
      139,
      229,
      184,
      150,
      229,
      173,
      144,
      229,
      175,
      134,
      231,
      160,
      129,
      233,
      162,
      145,
      233,
      129,
      147,
      230,
      142,
      167,
      229,
      136,
      182,
      229,
      156,
      176,
      229,
      140,
      186,
      229,
      159,
      186,
      230,
      156,
      172,
      229,
      133,
      168,
      229,
      155,
      189,
      231,
      189,
      145,
      228,
      184,
      138,
      233,
      135,
      141,
      232,
      166,
      129,
      231,
      172,
      172,
      228,
      186,
      140,
      229,
      150,
      156,
      230,
      172,
      162,
      232,
      191,
      155,
      229,
      133,
      165,
      229,
      143,
      139,
      230,
      131,
      133,
      232,
      191,
      153,
      228,
      186,
      155,
      232,
      128,
      131,
      232,
      175,
      149,
      229,
      143,
      145,
      231,
      142,
      176,
      229,
      159,
      185,
      232,
      174,
      173,
      228,
      187,
      165,
      228,
      184,
      138,
      230,
      148,
      191,
      229,
      186,
      156,
      230,
      136,
      144,
      228,
      184,
      186,
      231,
      142,
      175,
      229,
      162,
      131,
      233,
      166,
      153,
      230,
      184,
      175,
      229,
      144,
      140,
      230,
      151,
      182,
      229,
      168,
      177,
      228,
      185,
      144,
      229,
      143,
      145,
      233,
      128,
      129,
      228,
      184,
      128,
      229,
      174,
      154,
      229,
      188,
      128,
      229,
      143,
      145,
      228,
      189,
      156,
      229,
      147,
      129,
      230,
      160,
      135,
      229,
      135,
      134,
      230,
      172,
      162,
      232,
      191,
      142,
      232,
      167,
      163,
      229,
      134,
      179,
      229,
      156,
      176,
      230,
      150,
      185,
      228,
      184,
      128,
      228,
      184,
      139,
      228,
      187,
      165,
      229,
      143,
      138,
      232,
      180,
      163,
      228,
      187,
      187,
      230,
      136,
      150,
      232,
      128,
      133,
      229,
      174,
      162,
      230,
      136,
      183,
      228,
      187,
      163,
      232,
      161,
      168,
      231,
      167,
      175,
      229,
      136,
      134,
      229,
      165,
      179,
      228,
      186,
      186,
      230,
      149,
      176,
      231,
      160,
      129,
      233,
      148,
      128,
      229,
      148,
      174,
      229,
      135,
      186,
      231,
      142,
      176,
      231,
      166,
      187,
      231,
      186,
      191,
      229,
      186,
      148,
      231,
      148,
      168,
      229,
      136,
      151,
      232,
      161,
      168,
      228,
      184,
      141,
      229,
      144,
      140,
      231,
      188,
      150,
      232,
      190,
      145,
      231,
      187,
      159,
      232,
      174,
      161,
      230,
      159,
      165,
      232,
      175,
      162,
      228,
      184,
      141,
      232,
      166,
      129,
      230,
      156,
      137,
      229,
      133,
      179,
      230,
      156,
      186,
      230,
      158,
      132,
      229,
      190,
      136,
      229,
      164,
      154,
      230,
      146,
      173,
      230,
      148,
      190,
      231,
      187,
      132,
      231,
      187,
      135,
      230,
      148,
      191,
      231,
      173,
      150,
      231,
      155,
      180,
      230,
      142,
      165,
      232,
      131,
      189,
      229,
      138,
      155,
      230,
      157,
      165,
      230,
      186,
      144,
      230,
      153,
      130,
      233,
      150,
      147,
      231,
      156,
      139,
      229,
      136,
      176,
      231,
      131,
      173,
      233,
      151,
      168,
      229,
      133,
      179,
      233,
      148,
      174,
      228,
      184,
      147,
      229,
      140,
      186,
      233,
      157,
      158,
      229,
      184,
      184,
      232,
      139,
      177,
      232,
      175,
      173,
      231,
      153,
      190,
      229,
      186,
      166,
      229,
      184,
      140,
      230,
      156,
      155,
      231,
      190,
      142,
      229,
      165,
      179,
      230,
      175,
      148,
      232,
      190,
      131,
      231,
      159,
      165,
      232,
      175,
      134,
      232,
      167,
      132,
      229,
      174,
      154,
      229,
      187,
      186,
      232,
      174,
      174,
      233,
      131,
      168,
      233,
      151,
      168,
      230,
      132,
      143,
      232,
      167,
      129,
      231,
      178,
      190,
      229,
      189,
      169,
      230,
      151,
      165,
      230,
      156,
      172,
      230,
      143,
      144,
      233,
      171,
      152,
      229,
      143,
      145,
      232,
      168,
      128,
      230,
      150,
      185,
      233,
      157,
      162,
      229,
      159,
      186,
      233,
      135,
      145,
      229,
      164,
      132,
      231,
      144,
      134,
      230,
      157,
      131,
      233,
      153,
      144,
      229,
      189,
      177,
      231,
      137,
      135,
      233,
      147,
      182,
      232,
      161,
      140,
      232,
      191,
      152,
      230,
      156,
      137,
      229,
      136,
      134,
      228,
      186,
      171,
      231,
      137,
      169,
      229,
      147,
      129,
      231,
      187,
      143,
      232,
      144,
      165,
      230,
      183,
      187,
      229,
      138,
      160,
      228,
      184,
      147,
      229,
      174,
      182,
      232,
      191,
      153,
      231,
      167,
      141,
      232,
      175,
      157,
      233,
      162,
      152,
      232,
      181,
      183,
      230,
      157,
      165,
      228,
      184,
      154,
      229,
      138,
      161,
      229,
      133,
      172,
      229,
      145,
      138,
      232,
      174,
      176,
      229,
      189,
      149,
      231,
      174,
      128,
      228,
      187,
      139,
      232,
      180,
      168,
      233,
      135,
      143,
      231,
      148,
      183,
      228,
      186,
      186,
      229,
      189,
      177,
      229,
      147,
      141,
      229,
      188,
      149,
      231,
      148,
      168,
      230,
      138,
      165,
      229,
      145,
      138,
      233,
      131,
      168,
      229,
      136,
      134,
      229,
      191,
      171,
      233,
      128,
      159,
      229,
      146,
      168,
      232,
      175,
      162,
      230,
      151,
      182,
      229,
      176,
      154,
      230,
      179,
      168,
      230,
      132,
      143,
      231,
      148,
      179,
      232,
      175,
      183,
      229,
      173,
      166,
      230,
      160,
      161,
      229,
      186,
      148,
      232,
      175,
      165,
      229,
      142,
      134,
      229,
      143,
      178,
      229,
      143,
      170,
      230,
      152,
      175,
      232,
      191,
      148,
      229,
      155,
      158,
      232,
      180,
      173,
      228,
      185,
      176,
      229,
      144,
      141,
      231,
      167,
      176,
      228,
      184,
      186,
      228,
      186,
      134,
      230,
      136,
      144,
      229,
      138,
      159,
      232,
      175,
      180,
      230,
      152,
      142,
      228,
      190,
      155,
      229,
      186,
      148,
      229,
      173,
      169,
      229,
      173,
      144,
      228,
      184,
      147,
      233,
      162,
      152,
      231,
      168,
      139,
      229,
      186,
      143,
      228,
      184,
      128,
      232,
      136,
      172,
      230,
      156,
      131,
      229,
      147,
      161,
      229,
      143,
      170,
      230,
      156,
      137,
      229,
      133,
      182,
      229,
      174,
      131,
      228,
      191,
      157,
      230,
      138,
      164,
      232,
      128,
      140,
      228,
      184,
      148,
      228,
      187,
      138,
      229,
      164,
      169,
      231,
      170,
      151,
      229,
      143,
      163,
      229,
      138,
      168,
      230,
      128,
      129,
      231,
      138,
      182,
      230,
      128,
      129,
      231,
      137,
      185,
      229,
      136,
      171,
      232,
      174,
      164,
      228,
      184,
      186,
      229,
      191,
      133,
      233,
      161,
      187,
      230,
      155,
      180,
      230,
      150,
      176,
      229,
      176,
      143,
      232,
      175,
      180,
      230,
      136,
      145,
      229,
      128,
      145,
      228,
      189,
      156,
      228,
      184,
      186,
      229,
      170,
      146,
      228,
      189,
      147,
      229,
      140,
      133,
      230,
      139,
      172,
      233,
      130,
      163,
      228,
      185,
      136,
      228,
      184,
      128,
      230,
      160,
      183,
      229,
      155,
      189,
      229,
      134,
      133,
      230,
      152,
      175,
      229,
      144,
      166,
      230,
      160,
      185,
      230,
      141,
      174,
      231,
      148,
      181,
      232,
      167,
      134,
      229,
      173,
      166,
      233,
      153,
      162,
      229,
      133,
      183,
      230,
      156,
      137,
      232,
      191,
      135,
      231,
      168,
      139,
      231,
      148,
      177,
      228,
      186,
      142,
      228,
      186,
      186,
      230,
      137,
      141,
      229,
      135,
      186,
      230,
      157,
      165,
      228,
      184,
      141,
      232,
      191,
      135,
      230,
      173,
      163,
      229,
      156,
      168,
      230,
      152,
      142,
      230,
      152,
      159,
      230,
      149,
      133,
      228,
      186,
      139,
      229,
      133,
      179,
      231,
      179,
      187,
      230,
      160,
      135,
      233,
      162,
      152,
      229,
      149,
      134,
      229,
      138,
      161,
      232,
      190,
      147,
      229,
      133,
      165,
      228,
      184,
      128,
      231,
      155,
      180,
      229,
      159,
      186,
      231,
      161,
      128,
      230,
      149,
      153,
      229,
      173,
      166,
      228,
      186,
      134,
      232,
      167,
      163,
      229,
      187,
      186,
      231,
      173,
      145,
      231,
      187,
      147,
      230,
      158,
      156,
      229,
      133,
      168,
      231,
      144,
      131,
      233,
      128,
      154,
      231,
      159,
      165,
      232,
      174,
      161,
      229,
      136,
      146,
      229,
      175,
      185,
      228,
      186,
      142,
      232,
      137,
      186,
      230,
      156,
      175,
      231,
      155,
      184,
      229,
      134,
      140,
      229,
      143,
      145,
      231,
      148,
      159,
      231,
      156,
      159,
      231,
      154,
      132,
      229,
      187,
      186,
      231,
      171,
      139,
      231,
      173,
      137,
      231,
      186,
      167,
      231,
      177,
      187,
      229,
      158,
      139,
      231,
      187,
      143,
      233,
      170,
      140,
      229,
      174,
      158,
      231,
      142,
      176,
      229,
      136,
      182,
      228,
      189,
      156,
      230,
      157,
      165,
      232,
      135,
      170,
      230,
      160,
      135,
      231,
      173,
      190,
      228,
      187,
      165,
      228,
      184,
      139,
      229,
      142,
      159,
      229,
      136,
      155,
      230,
      151,
      160,
      230,
      179,
      149,
      229,
      133,
      182,
      228,
      184,
      173,
      229,
      128,
      139,
      228,
      186,
      186,
      228,
      184,
      128,
      229,
      136,
      135,
      230,
      140,
      135,
      229,
      141,
      151,
      229,
      133,
      179,
      233,
      151,
      173,
      233,
      155,
      134,
      229,
      155,
      162,
      231,
      172,
      172,
      228,
      184,
      137,
      229,
      133,
      179,
      230,
      179,
      168,
      229,
      155,
      160,
      230,
      173,
      164,
      231,
      133,
      167,
      231,
      137,
      135,
      230,
      183,
      177,
      229,
      156,
      179,
      229,
      149,
      134,
      228,
      184,
      154,
      229,
      185,
      191,
      229,
      183,
      158,
      230,
      151,
      165,
      230,
      156,
      159,
      233,
      171,
      152,
      231,
      186,
      167,
      230,
      156,
      128,
      232,
      191,
      145,
      231,
      187,
      188,
      229,
      144,
      136,
      232,
      161,
      168,
      231,
      164,
      186,
      228,
      184,
      147,
      232,
      190,
      145,
      232,
      161,
      140,
      228,
      184,
      186,
      228,
      186,
      164,
      233,
      128,
      154,
      232,
      175,
      132,
      228,
      187,
      183,
      232,
      167,
      137,
      229,
      190,
      151,
      231,
      178,
      190,
      229,
      141,
      142,
      229,
      174,
      182,
      229,
      186,
      173,
      229,
      174,
      140,
      230,
      136,
      144,
      230,
      132,
      159,
      232,
      167,
      137,
      229,
      174,
      137,
      232,
      163,
      133,
      229,
      190,
      151,
      229,
      136,
      176,
      233,
      130,
      174,
      228,
      187,
      182,
      229,
      136,
      182,
      229,
      186,
      166,
      233,
      163,
      159,
      229,
      147,
      129,
      232,
      153,
      189,
      231,
      132,
      182,
      232,
      189,
      172,
      232,
      189,
      189,
      230,
      138,
      165,
      228,
      187,
      183,
      232,
      174,
      176,
      232,
      128,
      133,
      230,
      150,
      185,
      230,
      161,
      136,
      232,
      161,
      140,
      230,
      148,
      191,
      228,
      186,
      186,
      230,
      176,
      145,
      231,
      148,
      168,
      229,
      147,
      129,
      228,
      184,
      156,
      232,
      165,
      191,
      230,
      143,
      144,
      229,
      135,
      186,
      233,
      133,
      146,
      229,
      186,
      151,
      231,
      132,
      182,
      229,
      144,
      142,
      228,
      187,
      152,
      230,
      172,
      190,
      231,
      131,
      173,
      231,
      130,
      185,
      228,
      187,
      165,
      229,
      137,
      141,
      229,
      174,
      140,
      229,
      133,
      168,
      229,
      143,
      145,
      229,
      184,
      150,
      232,
      174,
      190,
      231,
      189,
      174,
      233,
      162,
      134,
      229,
      175,
      188,
      229,
      183,
      165,
      228,
      184,
      154,
      229,
      140,
      187,
      233,
      153,
      162,
      231,
      156,
      139,
      231,
      156,
      139,
      231,
      187,
      143,
      229,
      133,
      184,
      229,
      142,
      159,
      229,
      155,
      160,
      229,
      185,
      179,
      229,
      143,
      176,
      229,
      144,
      132,
      231,
      167,
      141,
      229,
      162,
      158,
      229,
      138,
      160,
      230,
      157,
      144,
      230,
      150,
      153,
      230,
      150,
      176,
      229,
      162,
      158,
      228,
      185,
      139,
      229,
      144,
      142,
      232,
      129,
      140,
      228,
      184,
      154,
      230,
      149,
      136,
      230,
      158,
      156,
      228,
      187,
      138,
      229,
      185,
      180,
      232,
      174,
      186,
      230,
      150,
      135,
      230,
      136,
      145,
      229,
      155,
      189,
      229,
      145,
      138,
      232,
      175,
      137,
      231,
      137,
      136,
      228,
      184,
      187,
      228,
      191,
      174,
      230,
      148,
      185,
      229,
      143,
      130,
      228,
      184,
      142,
      230,
      137,
      147,
      229,
      141,
      176,
      229,
      191,
      171,
      228,
      185,
      144,
      230,
      156,
      186,
      230,
      162,
      176,
      232,
      167,
      130,
      231,
      130,
      185,
      229,
      173,
      152,
      229,
      156,
      168,
      231,
      178,
      190,
      231,
      165,
      158,
      232,
      142,
      183,
      229,
      190,
      151,
      229,
      136,
      169,
      231,
      148,
      168,
      231,
      187,
      167,
      231,
      187,
      173,
      228,
      189,
      160,
      228,
      187,
      172,
      232,
      191,
      153,
      228,
      185,
      136,
      230,
      168,
      161,
      229,
      188,
      143,
      232,
      175,
      173,
      232,
      168,
      128,
      232,
      131,
      189,
      229,
      164,
      159,
      233,
      155,
      133,
      232,
      153,
      142,
      230,
      147,
      141,
      228,
      189,
      156,
      233,
      163,
      142,
      230,
      160,
      188,
      228,
      184,
      128,
      232,
      181,
      183,
      231,
      167,
      145,
      229,
      173,
      166,
      228,
      189,
      147,
      232,
      130,
      178,
      231,
      159,
      173,
      228,
      191,
      161,
      230,
      157,
      161,
      228,
      187,
      182,
      230,
      178,
      187,
      231,
      150,
      151,
      232,
      191,
      144,
      229,
      138,
      168,
      228,
      186,
      167,
      228,
      184,
      154,
      228,
      188,
      154,
      232,
      174,
      174,
      229,
      175,
      188,
      232,
      136,
      170,
      229,
      133,
      136,
      231,
      148,
      159,
      232,
      129,
      148,
      231,
      155,
      159,
      229,
      143,
      175,
      230,
      152,
      175,
      229,
      149,
      143,
      233,
      161,
      140,
      231,
      187,
      147,
      230,
      158,
      132,
      228,
      189,
      156,
      231,
      148,
      168,
      232,
      176,
      131,
      230,
      159,
      165,
      232,
      179,
      135,
      230,
      150,
      153,
      232,
      135,
      170,
      229,
      138,
      168,
      232,
      180,
      159,
      232,
      180,
      163,
      229,
      134,
      156,
      228,
      184,
      154,
      232,
      174,
      191,
      233,
      151,
      174,
      229,
      174,
      158,
      230,
      150,
      189,
      230,
      142,
      165,
      229,
      143,
      151,
      232,
      174,
      168,
      232,
      174,
      186,
      233,
      130,
      163,
      228,
      184,
      170,
      229,
      143,
      141,
      233,
      166,
      136,
      229,
      138,
      160,
      229,
      188,
      186,
      229,
      165,
      179,
      230,
      128,
      167,
      232,
      140,
      131,
      229,
      155,
      180,
      230,
      156,
      141,
      229,
      139,
      153,
      228,
      188,
      145,
      233,
      151,
      178,
      228,
      187,
      138,
      230,
      151,
      165,
      229,
      174,
      162,
      230,
      156,
      141,
      232,
      167,
      128,
      231,
      156,
      139,
      229,
      143,
      130,
      229,
      138,
      160,
      231,
      154,
      132,
      232,
      175,
      157,
      228,
      184,
      128,
      231,
      130,
      185,
      228,
      191,
      157,
      232,
      175,
      129,
      229,
      155,
      190,
      228,
      185,
      166,
      230,
      156,
      137,
      230,
      149,
      136,
      230,
      181,
      139,
      232,
      175,
      149,
      231,
      167,
      187,
      229,
      138,
      168,
      230,
      137,
      141,
      232,
      131,
      189,
      229,
      134,
      179,
      229,
      174,
      154,
      232,
      130,
      161,
      231,
      165,
      168,
      228,
      184,
      141,
      230,
      150,
      173,
      233,
      156,
      128,
      230,
      177,
      130,
      228,
      184,
      141,
      229,
      190,
      151,
      229,
      138,
      158,
      230,
      179,
      149,
      228,
      185,
      139,
      233,
      151,
      180,
      233,
      135,
      135,
      231,
      148,
      168,
      232,
      144,
      165,
      233,
      148,
      128,
      230,
      138,
      149,
      232,
      175,
      137,
      231,
      155,
      174,
      230,
      160,
      135,
      231,
      136,
      177,
      230,
      131,
      133,
      230,
      145,
      132,
      229,
      189,
      177,
      230,
      156,
      137,
      228,
      186,
      155,
      232,
      164,
      135,
      232,
      163,
      189,
      230,
      150,
      135,
      229,
      173,
      166,
      230,
      156,
      186,
      228,
      188,
      154,
      230,
      149,
      176,
      229,
      173,
      151,
      232,
      163,
      133,
      228,
      191,
      174,
      232,
      180,
      173,
      231,
      137,
      169,
      229,
      134,
      156,
      230,
      157,
      145,
      229,
      133,
      168,
      233,
      157,
      162,
      231,
      178,
      190,
      229,
      147,
      129,
      229,
      133,
      182,
      229,
      174,
      158,
      228,
      186,
      139,
      230,
      131,
      133,
      230,
      176,
      180,
      229,
      185,
      179,
      230,
      143,
      144,
      231,
      164,
      186,
      228,
      184,
      138,
      229,
      184,
      130,
      232,
      176,
      162,
      232,
      176,
      162,
      230,
      153,
      174,
      233,
      128,
      154,
      230,
      149,
      153,
      229,
      184,
      136,
      228,
      184,
      138,
      228,
      188,
      160,
      231,
      177,
      187,
      229,
      136,
      171,
      230,
      173,
      140,
      230,
      155,
      178,
      230,
      139,
      165,
      230,
      156,
      137,
      229,
      136,
      155,
      230,
      150,
      176,
      233,
      133,
      141,
      228,
      187,
      182,
      229,
      143,
      170,
      232,
      166,
      129,
      230,
      151,
      182,
      228,
      187,
      163,
      232,
      179,
      135,
      232,
      168,
      138,
      232,
      190,
      190,
      229,
      136,
      176,
      228,
      186,
      186,
      231,
      148,
      159,
      232,
      174,
      162,
      233,
      152,
      133,
      232,
      128,
      129,
      229,
      184,
      136,
      229,
      177,
      149,
      231,
      164,
      186,
      229,
      191,
      131,
      231,
      144,
      134,
      232,
      180,
      180,
      229,
      173,
      144,
      231,
      182,
      178,
      231,
      171,
      153,
      228,
      184,
      187,
      233,
      161,
      140,
      232,
      135,
      170,
      231,
      132,
      182,
      231,
      186,
      167,
      229,
      136,
      171,
      231,
      174,
      128,
      229,
      141,
      149,
      230,
      148,
      185,
      233,
      157,
      169,
      233,
      130,
      163,
      228,
      186,
      155,
      230,
      157,
      165,
      232,
      175,
      180,
      230,
      137,
      147,
      229,
      188,
      128,
      228,
      187,
      163,
      231,
      160,
      129,
      229,
      136,
      160,
      233,
      153,
      164,
      232,
      175,
      129,
      229,
      136,
      184,
      232,
      138,
      130,
      231,
      155,
      174,
      233,
      135,
      141,
      231,
      130,
      185,
      230,
      172,
      161,
      230,
      149,
      184,
      229,
      164,
      154,
      229,
      176,
      145,
      232,
      167,
      132,
      229,
      136,
      146,
      232,
      181,
      132,
      233,
      135,
      145,
      230,
      137,
      190,
      229,
      136,
      176,
      228,
      187,
      165,
      229,
      144,
      142,
      229,
      164,
      167,
      229,
      133,
      168,
      228,
      184,
      187,
      233,
      161,
      181,
      230,
      156,
      128,
      228,
      189,
      179,
      229,
      155,
      158,
      231,
      173,
      148,
      229,
      164,
      169,
      228,
      184,
      139,
      228,
      191,
      157,
      233,
      154,
      156,
      231,
      142,
      176,
      228,
      187,
      163,
      230,
      163,
      128,
      230,
      159,
      165,
      230,
      138,
      149,
      231,
      165,
      168,
      229,
      176,
      143,
      230,
      151,
      182,
      230,
      178,
      146,
      230,
      156,
      137,
      230,
      173,
      163,
      229,
      184,
      184,
      231,
      148,
      154,
      232,
      135,
      179,
      228,
      187,
      163,
      231,
      144,
      134,
      231,
      155,
      174,
      229,
      189,
      149,
      229,
      133,
      172,
      229,
      188,
      128,
      229,
      164,
      141,
      229,
      136,
      182,
      233,
      135,
      145,
      232,
      158,
      141,
      229,
      185,
      184,
      231,
      166,
      143,
      231,
      137,
      136,
      230,
      156,
      172,
      229,
      189,
      162,
      230,
      136,
      144,
      229,
      135,
      134,
      229,
      164,
      135,
      232,
      161,
      140,
      230,
      131,
      133,
      229,
      155,
      158,
      229,
      136,
      176,
      230,
      128,
      157,
      230,
      131,
      179,
      230,
      128,
      142,
      230,
      160,
      183,
      229,
      141,
      143,
      232,
      174,
      174,
      232,
      174,
      164,
      232,
      175,
      129,
      230,
      156,
      128,
      229,
      165,
      189,
      228,
      186,
      167,
      231,
      148,
      159,
      230,
      140,
      137,
      231,
      133,
      167,
      230,
      156,
      141,
      232,
      163,
      133,
      229,
      185,
      191,
      228,
      184,
      156,
      229,
      138,
      168,
      230,
      188,
      171,
      233,
      135,
      135,
      232,
      180,
      173,
      230,
      150,
      176,
      230,
      137,
      139,
      231,
      187,
      132,
      229,
      155,
      190,
      233,
      157,
      162,
      230,
      157,
      191,
      229,
      143,
      130,
      232,
      128,
      131,
      230,
      148,
      191,
      230,
      178,
      187,
      229,
      174,
      185,
      230,
      152,
      147,
      229,
      164,
      169,
      229,
      156,
      176,
      229,
      138,
      170,
      229,
      138,
      155,
      228,
      186,
      186,
      228,
      187,
      172,
      229,
      141,
      135,
      231,
      186,
      167,
      233,
      128,
      159,
      229,
      186,
      166,
      228,
      186,
      186,
      231,
      137,
      169,
      232,
      176,
      131,
      230,
      149,
      180,
      230,
      181,
      129,
      232,
      161,
      140,
      233,
      128,
      160,
      230,
      136,
      144,
      230,
      150,
      135,
      229,
      173,
      151,
      233,
      159,
      169,
      229,
      155,
      189,
      232,
      180,
      184,
      230,
      152,
      147,
      229,
      188,
      128,
      229,
      177,
      149,
      231,
      155,
      184,
      233,
      151,
      156,
      232,
      161,
      168,
      231,
      142,
      176,
      229,
      189,
      177,
      232,
      167,
      134,
      229,
      166,
      130,
      230,
      173,
      164,
      231,
      190,
      142,
      229,
      174,
      185,
      229,
      164,
      167,
      229,
      176,
      143,
      230,
      138,
      165,
      233,
      129,
      147,
      230,
      157,
      161,
      230,
      172,
      190,
      229,
      191,
      131,
      230,
      131,
      133,
      232,
      174,
      184,
      229,
      164,
      154,
      230,
      179,
      149,
      232,
      167,
      132,
      229,
      174,
      182,
      229,
      177,
      133,
      228,
      185,
      166,
      229,
      186,
      151,
      232,
      191,
      158,
      230,
      142,
      165,
      231,
      171,
      139,
      229,
      141,
      179,
      228,
      184,
      190,
      230,
      138,
      165,
      230,
      138,
      128,
      229,
      183,
      167,
      229,
      165,
      165,
      232,
      191,
      144,
      231,
      153,
      187,
      229,
      133,
      165,
      228,
      187,
      165,
      230,
      157,
      165,
      231,
      144,
      134,
      232,
      174,
      186,
      228,
      186,
      139,
      228,
      187,
      182,
      232,
      135,
      170,
      231,
      148,
      177,
      228,
      184,
      173,
      229,
      141,
      142,
      229,
      138,
      158,
      229,
      133,
      172,
      229,
      166,
      136,
      229,
      166,
      136,
      231,
      156,
      159,
      230,
      173,
      163,
      228,
      184,
      141,
      233,
      148,
      153,
      229,
      133,
      168,
      230,
      150,
      135,
      229,
      144,
      136,
      229,
      144,
      140,
      228,
      187,
      183,
      229,
      128,
      188,
      229,
      136,
      171,
      228,
      186,
      186,
      231,
      155,
      145,
      231,
      157,
      163,
      229,
      133,
      183,
      228,
      189,
      147,
      228,
      184,
      150,
      231,
      186,
      170,
      229,
      155,
      162,
      233,
      152,
      159,
      229,
      136,
      155,
      228,
      184,
      154,
      230,
      137,
      191,
      230,
      139,
      133,
      229,
      162,
      158,
      233,
      149,
      191,
      230,
      156,
      137,
      228,
      186,
      186,
      228,
      191,
      157,
      230,
      140,
      129,
      229,
      149,
      134,
      229,
      174,
      182,
      231,
      187,
      180,
      228,
      191,
      174,
      229,
      143,
      176,
      230,
      185,
      190,
      229,
      183,
      166,
      229,
      143,
      179,
      232,
      130,
      161,
      228,
      187,
      189,
      231,
      173,
      148,
      230,
      161,
      136,
      229,
      174,
      158,
      233,
      153,
      133,
      231,
      148,
      181,
      228,
      191,
      161,
      231,
      187,
      143,
      231,
      144,
      134,
      231,
      148,
      159,
      229,
      145,
      189,
      229,
      174,
      163,
      228,
      188,
      160,
      228,
      187,
      187,
      229,
      138,
      161,
      230,
      173,
      163,
      229,
      188,
      143,
      231,
      137,
      185,
      232,
      137,
      178,
      228,
      184,
      139,
      230,
      157,
      165,
      229,
      141,
      143,
      228,
      188,
      154,
      229,
      143,
      170,
      232,
      131,
      189,
      229,
      189,
      147,
      231,
      132,
      182,
      233,
      135,
      141,
      230,
      150,
      176,
      229,
      133,
      167,
      229,
      174,
      185,
      230,
      140,
      135,
      229,
      175,
      188,
      232,
      191,
      144,
      232,
      161,
      140,
      230,
      151,
      165,
      229,
      191,
      151,
      232,
      179,
      163,
      229,
      174,
      182,
      232,
      182,
      133,
      232,
      191,
      135,
      229,
      156,
      159,
      229,
      156,
      176,
      230,
      181,
      153,
      230,
      177,
      159,
      230,
      148,
      175,
      228,
      187,
      152,
      230,
      142,
      168,
      229,
      135,
      186,
      231,
      171,
      153,
      233,
      149,
      191,
      230,
      157,
      173,
      229,
      183,
      158,
      230,
      137,
      167,
      232,
      161,
      140,
      229,
      136,
      182,
      233,
      128,
      160,
      228,
      185,
      139,
      228,
      184,
      128,
      230,
      142,
      168,
      229,
      185,
      191,
      231,
      142,
      176,
      229,
      156,
      186,
      230,
      143,
      143,
      232,
      191,
      176,
      229,
      143,
      152,
      229,
      140,
      150,
      228,
      188,
      160,
      231,
      187,
      159,
      230,
      173,
      140,
      230,
      137,
      139,
      228,
      191,
      157,
      233,
      153,
      169,
      232,
      175,
      190,
      231,
      168,
      139,
      229,
      140,
      187,
      231,
      150,
      151,
      231,
      187,
      143,
      232,
      191,
      135,
      232,
      191,
      135,
      229,
      142,
      187,
      228,
      185,
      139,
      229,
      137,
      141,
      230,
      148,
      182,
      229,
      133,
      165,
      229,
      185,
      180,
      229,
      186,
      166,
      230,
      157,
      130,
      229,
      191,
      151,
      231,
      190,
      142,
      228,
      184,
      189,
      230,
      156,
      128,
      233,
      171,
      152,
      231,
      153,
      187,
      233,
      153,
      134,
      230,
      156,
      170,
      230,
      157,
      165,
      229,
      138,
      160,
      229,
      183,
      165,
      229,
      133,
      141,
      232,
      180,
      163,
      230,
      149,
      153,
      231,
      168,
      139,
      231,
      137,
      136,
      229,
      157,
      151,
      232,
      186,
      171,
      228,
      189,
      147,
      233,
      135,
      141,
      229,
      186,
      134,
      229,
      135,
      186,
      229,
      148,
      174,
      230,
      136,
      144,
      230,
      156,
      172,
      229,
      189,
      162,
      229,
      188,
      143,
      229,
      156,
      159,
      232,
      177,
      134,
      229,
      135,
      186,
      229,
      131,
      185,
      228,
      184,
      156,
      230,
      150,
      185,
      233,
      130,
      174,
      231,
      174,
      177,
      229,
      141,
      151,
      228,
      186,
      172,
      230,
      177,
      130,
      232,
      129,
      140,
      229,
      143,
      150,
      229,
      190,
      151,
      232,
      129,
      140,
      228,
      189,
      141,
      231,
      155,
      184,
      228,
      191,
      161,
      233,
      161,
      181,
      233,
      157,
      162,
      229,
      136,
      134,
      233,
      146,
      159,
      231,
      189,
      145,
      233,
      161,
      181,
      231,
      161,
      174,
      229,
      174,
      154,
      229,
      155,
      190,
      228,
      190,
      139,
      231,
      189,
      145,
      229,
      157,
      128,
      231,
      167,
      175,
      230,
      158,
      129,
      233,
      148,
      153,
      232,
      175,
      175,
      231,
      155,
      174,
      231,
      154,
      132,
      229,
      174,
      157,
      232,
      180,
      157,
      230,
      156,
      186,
      229,
      133,
      179,
      233,
      163,
      142,
      233,
      153,
      169,
      230,
      142,
      136,
      230,
      157,
      131,
      231,
      151,
      133,
      230,
      175,
      146,
      229,
      174,
      160,
      231,
      137,
      169,
      233,
      153,
      164,
      228,
      186,
      134,
      232,
      169,
      149,
      232,
      171,
      150,
      231,
      150,
      190,
      231,
      151,
      133,
      229,
      143,
      138,
      230,
      151,
      182,
      230,
      177,
      130,
      232,
      180,
      173,
      231,
      171,
      153,
      231,
      130,
      185,
      229,
      132,
      191,
      231,
      171,
      165,
      230,
      175,
      143,
      229,
      164,
      169,
      228,
      184,
      173,
      229,
      164,
      174,
      232,
      174,
      164,
      232,
      175,
      134,
      230,
      175,
      143,
      228,
      184,
      170,
      229,
      164,
      169,
      230,
      180,
      165,
      229,
      173,
      151,
      228,
      189,
      147,
      229,
      143,
      176,
      231,
      129,
      163,
      231,
      187,
      180,
      230,
      138,
      164,
      230,
      156,
      172,
      233,
      161,
      181,
      228,
      184,
      170,
      230,
      128,
      167,
      229,
      174,
      152,
      230,
      150,
      185,
      229,
      184,
      184,
      232,
      167,
      129,
      231,
      155,
      184,
      230,
      156,
      186,
      230,
      136,
      152,
      231,
      149,
      165,
      229,
      186,
      148,
      229,
      189,
      147,
      229,
      190,
      139,
      229,
      184,
      136,
      230,
      150,
      185,
      228,
      190,
      191,
      230,
      160,
      161,
      229,
      155,
      173,
      232,
      130,
      161,
      229,
      184,
      130,
      230,
      136,
      191,
      229,
      177,
      139,
      230,
      160,
      143,
      231,
      155,
      174,
      229,
      145,
      152,
      229,
      183,
      165,
      229,
      175,
      188,
      232,
      135,
      180,
      231,
      170,
      129,
      231,
      132,
      182,
      233,
      129,
      147,
      229,
      133,
      183,
      230,
      156,
      172,
      231,
      189,
      145,
      231,
      187,
      147,
      229,
      144,
      136,
      230,
      161,
      163,
      230,
      161,
      136,
      229,
      138,
      179,
      229,
      138,
      168,
      229,
      143,
      166,
      229,
      164,
      150,
      231,
      190,
      142,
      229,
      133,
      131,
      229,
      188,
      149,
      232,
      181,
      183,
      230,
      148,
      185,
      229,
      143,
      152,
      231,
      172,
      172,
      229,
      155,
      155,
      228,
      188,
      154,
      232,
      174,
      161,
      232,
      170,
      170,
      230,
      152,
      142,
      233,
      154,
      144,
      231,
      167,
      129,
      229,
      174,
      157,
      229,
      174,
      157,
      232,
      167,
      132,
      232,
      140,
      131,
      230,
      182,
      136,
      232,
      180,
      185,
      229,
      133,
      177,
      229,
      144,
      140,
      229,
      191,
      152,
      232,
      174,
      176,
      228,
      189,
      147,
      231,
      179,
      187,
      229,
      184,
      166,
      230,
      157,
      165,
      229,
      144,
      141,
      229,
      173,
      151,
      231,
      153,
      188,
      232,
      161,
      168,
      229,
      188,
      128,
      230,
      148,
      190,
      229,
      138,
      160,
      231,
      155,
      159,
      229,
      143,
      151,
      229,
      136,
      176,
      228,
      186,
      140,
      230,
      137,
      139,
      229,
      164,
      167,
      233,
      135,
      143,
      230,
      136,
      144,
      228,
      186,
      186,
      230,
      149,
      176,
      233,
      135,
      143,
      229,
      133,
      177,
      228,
      186,
      171,
      229,
      140,
      186,
      229,
      159,
      159,
      229,
      165,
      179,
      229,
      173,
      169,
      229,
      142,
      159,
      229,
      136,
      153,
      230,
      137,
      128,
      229,
      156,
      168,
      231,
      187,
      147,
      230,
      157,
      159,
      233,
      128,
      154,
      228,
      191,
      161,
      232,
      182,
      133,
      231,
      186,
      167,
      233,
      133,
      141,
      231,
      189,
      174,
      229,
      189,
      147,
      230,
      151,
      182,
      228,
      188,
      152,
      231,
      167,
      128,
      230,
      128,
      167,
      230,
      132,
      159,
      230,
      136,
      191,
      228,
      186,
      167,
      233,
      129,
      138,
      230,
      136,
      178,
      229,
      135,
      186,
      229,
      143,
      163,
      230,
      143,
      144,
      228,
      186,
      164,
      229,
      176,
      177,
      228,
      184,
      154,
      228,
      191,
      157,
      229,
      129,
      165,
      231,
      168,
      139,
      229,
      186,
      166,
      229,
      143,
      130,
      230,
      149,
      176,
      228,
      186,
      139,
      228,
      184,
      154,
      230,
      149,
      180,
      228,
      184,
      170,
      229,
      177,
      177,
      228,
      184,
      156,
      230,
      131,
      133,
      230,
      132,
      159,
      231,
      137,
      185,
      230,
      174,
      138,
      229,
      136,
      134,
      233,
      161,
      158,
      230,
      144,
      156,
      229,
      176,
      139,
      229,
      177,
      158,
      228,
      186,
      142,
      233,
      151,
      168,
      230,
      136,
      183,
      232,
      180,
      162,
      229,
      138,
      161,
      229,
      163,
      176,
      233,
      159,
      179,
      229,
      143,
      138,
      229,
      133,
      182,
      232,
      180,
      162,
      231,
      187,
      143,
      229,
      157,
      154,
      230,
      140,
      129,
      229,
      185,
      178,
      233,
      131,
      168,
      230,
      136,
      144,
      231,
      171,
      139,
      229,
      136,
      169,
      231,
      155,
      138,
      232,
      128,
      131,
      232,
      153,
      145,
      230,
      136,
      144,
      233,
      131,
      189,
      229,
      140,
      133,
      232,
      163,
      133,
      231,
      148,
      168,
      230,
      136,
      182,
      230,
      175,
      148,
      232,
      181,
      155,
      230,
      150,
      135,
      230,
      152,
      142,
      230,
      139,
      155,
      229,
      149,
      134,
      229,
      174,
      140,
      230,
      149,
      180,
      231,
      156,
      159,
      230,
      152,
      175,
      231,
      156,
      188,
      231,
      157,
      155,
      228,
      188,
      153,
      228,
      188,
      180,
      229,
      168,
      129,
      230,
      156,
      155,
      233,
      162,
      134,
      229,
      159,
      159,
      229,
      141,
      171,
      231,
      148,
      159,
      228,
      188,
      152,
      230,
      131,
      160,
      232,
      171,
      150,
      229,
      163,
      135,
      229,
      133,
      172,
      229,
      133,
      177,
      232,
      137,
      175,
      229,
      165,
      189,
      229,
      133,
      133,
      229,
      136,
      134,
      231,
      172,
      166,
      229,
      144,
      136,
      233,
      153,
      132,
      228,
      187,
      182,
      231,
      137,
      185,
      231,
      130,
      185,
      228,
      184,
      141,
      229,
      143,
      175,
      232,
      139,
      177,
      230,
      150,
      135,
      232,
      181,
      132,
      228,
      186,
      167,
      230,
      160,
      185,
      230,
      156,
      172,
      230,
      152,
      142,
      230,
      152,
      190,
      229,
      175,
      134,
      231,
      162,
      188,
      229,
      133,
      172,
      228,
      188,
      151,
      230,
      176,
      145,
      230,
      151,
      143,
      230,
      155,
      180,
      229,
      138,
      160,
      228,
      186,
      171,
      229,
      143,
      151,
      229,
      144,
      140,
      229,
      173,
      166,
      229,
      144,
      175,
      229,
      138,
      168,
      233,
      128,
      130,
      229,
      144,
      136,
      229,
      142,
      159,
      230,
      157,
      165,
      233,
      151,
      174,
      231,
      173,
      148,
      230,
      156,
      172,
      230,
      150,
      135,
      231,
      190,
      142,
      233,
      163,
      159,
      231,
      187,
      191,
      232,
      137,
      178,
      231,
      168,
      179,
      229,
      174,
      154,
      231,
      187,
      136,
      228,
      186,
      142,
      231,
      148,
      159,
      231,
      137,
      169,
      228,
      190,
      155,
      230,
      177,
      130,
      230,
      144,
      156,
      231,
      139,
      144,
      229,
      138,
      155,
      233,
      135,
      143,
      228,
      184,
      165,
      233,
      135,
      141,
      230,
      176,
      184,
      232,
      191,
      156,
      229,
      134,
      153,
      231,
      156,
      159,
      230,
      156,
      137,
      233,
      153,
      144,
      231,
      171,
      158,
      228,
      186,
      137,
      229,
      175,
      185,
      232,
      177,
      161,
      232,
      180,
      185,
      231,
      148,
      168,
      228,
      184,
      141,
      229,
      165,
      189,
      231,
      187,
      157,
      229,
      175,
      185,
      229,
      141,
      129,
      229,
      136,
      134,
      228,
      191,
      131,
      232,
      191,
      155,
      231,
      130,
      185,
      232,
      175,
      132,
      229,
      189,
      177,
      233,
      159,
      179,
      228,
      188,
      152,
      229,
      138,
      191,
      228,
      184,
      141,
      229,
      176,
      145,
      230,
      172,
      163,
      232,
      181,
      143,
      229,
      185,
      182,
      228,
      184,
      148,
      230,
      156,
      137,
      231,
      130,
      185,
      230,
      150,
      185,
      229,
      144,
      145,
      229,
      133,
      168,
      230,
      150,
      176,
      228,
      191,
      161,
      231,
      148,
      168,
      232,
      174,
      190,
      230,
      150,
      189,
      229,
      189,
      162,
      232,
      177,
      161,
      232,
      181,
      132,
      230,
      160,
      188,
      231,
      170,
      129,
      231,
      160,
      180,
      233,
      154,
      143,
      231,
      157,
      128,
      233,
      135,
      141,
      229,
      164,
      167,
      228,
      186,
      142,
      230,
      152,
      175,
      230,
      175,
      149,
      228,
      184,
      154,
      230,
      153,
      186,
      232,
      131,
      189,
      229,
      140,
      150,
      229,
      183,
      165,
      229,
      174,
      140,
      231,
      190,
      142,
      229,
      149,
      134,
      229,
      159,
      142,
      231,
      187,
      159,
      228,
      184,
      128,
      229,
      135,
      186,
      231,
      137,
      136,
      230,
      137,
      147,
      233,
      128,
      160,
      231,
      148,
      162,
      229,
      147,
      129,
      230,
      166,
      130,
      229,
      134,
      181,
      231,
      148,
      168,
      228,
      186,
      142,
      228,
      191,
      157,
      231,
      149,
      153,
      229,
      155,
      160,
      231,
      180,
      160,
      228,
      184,
      173,
      229,
      156,
      139,
      229,
      173,
      152,
      229,
      130,
      168,
      232,
      180,
      180,
      229,
      155,
      190,
      230,
      156,
      128,
      230,
      132,
      155,
      233,
      149,
      191,
      230,
      156,
      159,
      229,
      143,
      163,
      228,
      187,
      183,
      231,
      144,
      134,
      232,
      180,
      162,
      229,
      159,
      186,
      229,
      156,
      176,
      229,
      174,
      137,
      230,
      142,
      146,
      230,
      173,
      166,
      230,
      177,
      137,
      233,
      135,
      140,
      233,
      157,
      162,
      229,
      136,
      155,
      229,
      187,
      186,
      229,
      164,
      169,
      231,
      169,
      186,
      233,
      166,
      150,
      229,
      133,
      136,
      229,
      174,
      140,
      229,
      150,
      132,
      233,
      169,
      177,
      229,
      138,
      168,
      228,
      184,
      139,
      233,
      157,
      162,
      228,
      184,
      141,
      229,
      134,
      141,
      232,
      175,
      154,
      228,
      191,
      161,
      230,
      132,
      143,
      228,
      185,
      137,
      233,
      152,
      179,
      229,
      133,
      137,
      232,
      139,
      177,
      229,
      155,
      189,
      230,
      188,
      130,
      228,
      186,
      174,
      229,
      134,
      155,
      228,
      186,
      139,
      231,
      142,
      169,
      229,
      174,
      182,
      231,
      190,
      164,
      228,
      188,
      151,
      229,
      134,
      156,
      230,
      176,
      145,
      229,
      141,
      179,
      229,
      143,
      175,
      229,
      144,
      141,
      231,
      168,
      177,
      229,
      174,
      182,
      229,
      133,
      183,
      229,
      138,
      168,
      231,
      148,
      187,
      230,
      131,
      179,
      229,
      136,
      176,
      230,
      179,
      168,
      230,
      152,
      142,
      229,
      176,
      143,
      229,
      173,
      166,
      230,
      128,
      167,
      232,
      131,
      189,
      232,
      128,
      131,
      231,
      160,
      148,
      231,
      161,
      172,
      228,
      187,
      182,
      232,
      167,
      130,
      231,
      156,
      139,
      230,
      184,
      133,
      230,
      165,
      154,
      230,
      144,
      158,
      231,
      172,
      145,
      233,
      166,
      150,
      233,
      160,
      129,
      233,
      187,
      132,
      233,
      135,
      145,
      233,
      128,
      130,
      231,
      148,
      168,
      230,
      177,
      159,
      232,
      139,
      143,
      231,
      156,
      159,
      229,
      174,
      158,
      228,
      184,
      187,
      231,
      174,
      161,
      233,
      152,
      182,
      230,
      174,
      181,
      232,
      168,
      187,
      229,
      134,
      138,
      231,
      191,
      187,
      232,
      175,
      145,
      230,
      157,
      131,
      229,
      136,
      169,
      229,
      129,
      154,
      229,
      165,
      189,
      228,
      188,
      188,
      228,
      185,
      142,
      233,
      128,
      154,
      232,
      174,
      175,
      230,
      150,
      189,
      229,
      183,
      165,
      231,
      139,
      128,
      230,
      133,
      139,
      228,
      185,
      159,
      232,
      174,
      184,
      231,
      142,
      175,
      228,
      191,
      157,
      229,
      159,
      185,
      229,
      133,
      187,
      230,
      166,
      130,
      229,
      191,
      181,
      229,
      164,
      167,
      229,
      158,
      139,
      230,
      156,
      186,
      231,
      165,
      168,
      231,
      144,
      134,
      232,
      167,
      163,
      229,
      140,
      191,
      229,
      144,
      141,
      99,
      117,
      97,
      110,
      100,
      111,
      101,
      110,
      118,
      105,
      97,
      114,
      109,
      97,
      100,
      114,
      105,
      100,
      98,
      117,
      115,
      99,
      97,
      114,
      105,
      110,
      105,
      99,
      105,
      111,
      116,
      105,
      101,
      109,
      112,
      111,
      112,
      111,
      114,
      113,
      117,
      101,
      99,
      117,
      101,
      110,
      116,
      97,
      101,
      115,
      116,
      97,
      100,
      111,
      112,
      117,
      101,
      100,
      101,
      110,
      106,
      117,
      101,
      103,
      111,
      115,
      99,
      111,
      110,
      116,
      114,
      97,
      101,
      115,
      116,
      195,
      161,
      110,
      110,
      111,
      109,
      98,
      114,
      101,
      116,
      105,
      101,
      110,
      101,
      110,
      112,
      101,
      114,
      102,
      105,
      108,
      109,
      97,
      110,
      101,
      114,
      97,
      97,
      109,
      105,
      103,
      111,
      115,
      99,
      105,
      117,
      100,
      97,
      100,
      99,
      101,
      110,
      116,
      114,
      111,
      97,
      117,
      110,
      113,
      117,
      101,
      112,
      117,
      101,
      100,
      101,
      115,
      100,
      101,
      110,
      116,
      114,
      111,
      112,
      114,
      105,
      109,
      101,
      114,
      112,
      114,
      101,
      99,
      105,
      111,
      115,
      101,
      103,
      195,
      186,
      110,
      98,
      117,
      101,
      110,
      111,
      115,
      118,
      111,
      108,
      118,
      101,
      114,
      112,
      117,
      110,
      116,
      111,
      115,
      115,
      101,
      109,
      97,
      110,
      97,
      104,
      97,
      98,
      195,
      173,
      97,
      97,
      103,
      111,
      115,
      116,
      111,
      110,
      117,
      101,
      118,
      111,
      115,
      117,
      110,
      105,
      100,
      111,
      115,
      99,
      97,
      114,
      108,
      111,
      115,
      101,
      113,
      117,
      105,
      112,
      111,
      110,
      105,
      195,
      177,
      111,
      115,
      109,
      117,
      99,
      104,
      111,
      115,
      97,
      108,
      103,
      117,
      110,
      97,
      99,
      111,
      114,
      114,
      101,
      111,
      105,
      109,
      97,
      103,
      101,
      110,
      112,
      97,
      114,
      116,
      105,
      114,
      97,
      114,
      114,
      105,
      98,
      97,
      109,
      97,
      114,
      195,
      173,
      97,
      104,
      111,
      109,
      98,
      114,
      101,
      101,
      109,
      112,
      108,
      101,
      111,
      118,
      101,
      114,
      100,
      97,
      100,
      99,
      97,
      109,
      98,
      105,
      111,
      109,
      117,
      99,
      104,
      97,
      115,
      102,
      117,
      101,
      114,
      111,
      110,
      112,
      97,
      115,
      97,
      100,
      111,
      108,
      195,
      173,
      110,
      101,
      97,
      112,
      97,
      114,
      101,
      99,
      101,
      110,
      117,
      101,
      118,
      97,
      115,
      99,
      117,
      114,
      115,
      111,
      115,
      101,
      115,
      116,
      97,
      98,
      97,
      113,
      117,
      105,
      101,
      114,
      111,
      108,
      105,
      98,
      114,
      111,
      115,
      99,
      117,
      97,
      110,
      116,
      111,
      97,
      99,
      99,
      101,
      115,
      111,
      109,
      105,
      103,
      117,
      101,
      108,
      118,
      97,
      114,
      105,
      111,
      115,
      99,
      117,
      97,
      116,
      114,
      111,
      116,
      105,
      101,
      110,
      101,
      115,
      103,
      114,
      117,
      112,
      111,
      115,
      115,
      101,
      114,
      195,
      161,
      110,
      101,
      117,
      114,
      111,
      112,
      97,
      109,
      101,
      100,
      105,
      111,
      115,
      102,
      114,
      101,
      110,
      116,
      101,
      97,
      99,
      101,
      114,
      99,
      97,
      100,
      101,
      109,
      195,
      161,
      115,
      111,
      102,
      101,
      114,
      116,
      97,
      99,
      111,
      99,
      104,
      101,
      115,
      109,
      111,
      100,
      101,
      108,
      111,
      105,
      116,
      97,
      108,
      105,
      97,
      108,
      101,
      116,
      114,
      97,
      115,
      97,
      108,
      103,
      195,
      186,
      110,
      99,
      111,
      109,
      112,
      114,
      97,
      99,
      117,
      97,
      108,
      101,
      115,
      101,
      120,
      105,
      115,
      116,
      101,
      99,
      117,
      101,
      114,
      112,
      111,
      115,
      105,
      101,
      110,
      100,
      111,
      112,
      114,
      101,
      110,
      115,
      97,
      108,
      108,
      101,
      103,
      97,
      114,
      118,
      105,
      97,
      106,
      101,
      115,
      100,
      105,
      110,
      101,
      114,
      111,
      109,
      117,
      114,
      99,
      105,
      97,
      112,
      111,
      100,
      114,
      195,
      161,
      112,
      117,
      101,
      115,
      116,
      111,
      100,
      105,
      97,
      114,
      105,
      111,
      112,
      117,
      101,
      98,
      108,
      111,
      113,
      117,
      105,
      101,
      114,
      101,
      109,
      97,
      110,
      117,
      101,
      108,
      112,
      114,
      111,
      112,
      105,
      111,
      99,
      114,
      105,
      115,
      105,
      115,
      99,
      105,
      101,
      114,
      116,
      111,
      115,
      101,
      103,
      117,
      114,
      111,
      109,
      117,
      101,
      114,
      116,
      101,
      102,
      117,
      101,
      110,
      116,
      101,
      99,
      101,
      114,
      114,
      97,
      114,
      103,
      114,
      97,
      110,
      100,
      101,
      101,
      102,
      101,
      99,
      116,
      111,
      112,
      97,
      114,
      116,
      101,
      115,
      109,
      101,
      100,
      105,
      100,
      97,
      112,
      114,
      111,
      112,
      105,
      97,
      111,
      102,
      114,
      101,
      99,
      101,
      116,
      105,
      101,
      114,
      114,
      97,
      101,
      45,
      109,
      97,
      105,
      108,
      118,
      97,
      114,
      105,
      97,
      115,
      102,
      111,
      114,
      109,
      97,
      115,
      102,
      117,
      116,
      117,
      114,
      111,
      111,
      98,
      106,
      101,
      116,
      111,
      115,
      101,
      103,
      117,
      105,
      114,
      114,
      105,
      101,
      115,
      103,
      111,
      110,
      111,
      114,
      109,
      97,
      115,
      109,
      105,
      115,
      109,
      111,
      115,
      195,
      186,
      110,
      105,
      99,
      111,
      99,
      97,
      109,
      105,
      110,
      111,
      115,
      105,
      116,
      105,
      111,
      115,
      114,
      97,
      122,
      195,
      179,
      110,
      100,
      101,
      98,
      105,
      100,
      111,
      112,
      114,
      117,
      101,
      98,
      97,
      116,
      111,
      108,
      101,
      100,
      111,
      116,
      101,
      110,
      195,
      173,
      97,
      106,
      101,
      115,
      195,
      186,
      115,
      101,
      115,
      112,
      101,
      114,
      111,
      99,
      111,
      99,
      105,
      110,
      97,
      111,
      114,
      105,
      103,
      101,
      110,
      116,
      105,
      101,
      110,
      100,
      97,
      99,
      105,
      101,
      110,
      116,
      111,
      99,
      195,
      161,
      100,
      105,
      122,
      104,
      97,
      98,
      108,
      97,
      114,
      115,
      101,
      114,
      195,
      173,
      97,
      108,
      97,
      116,
      105,
      110,
      97,
      102,
      117,
      101,
      114,
      122,
      97,
      101,
      115,
      116,
      105,
      108,
      111,
      103,
      117,
      101,
      114,
      114,
      97,
      101,
      110,
      116,
      114,
      97,
      114,
      195,
      169,
      120,
      105,
      116,
      111,
      108,
      195,
      179,
      112,
      101,
      122,
      97,
      103,
      101,
      110,
      100,
      97,
      118,
      195,
      173,
      100,
      101,
      111,
      101,
      118,
      105,
      116,
      97,
      114,
      112,
      97,
      103,
      105,
      110,
      97,
      109,
      101,
      116,
      114,
      111,
      115,
      106,
      97,
      118,
      105,
      101,
      114,
      112,
      97,
      100,
      114,
      101,
      115,
      102,
      195,
      161,
      99,
      105,
      108,
      99,
      97,
      98,
      101,
      122,
      97,
      195,
      161,
      114,
      101,
      97,
      115,
      115,
      97,
      108,
      105,
      100,
      97,
      101,
      110,
      118,
      195,
      173,
      111,
      106,
      97,
      112,
      195,
      179,
      110,
      97,
      98,
      117,
      115,
      111,
      115,
      98,
      105,
      101,
      110,
      101,
      115,
      116,
      101,
      120,
      116,
      111,
      115,
      108,
      108,
      101,
      118,
      97,
      114,
      112,
      117,
      101,
      100,
      97,
      110,
      102,
      117,
      101,
      114,
      116,
      101,
      99,
      111,
      109,
      195,
      186,
      110,
      99,
      108,
      97,
      115,
      101,
      115,
      104,
      117,
      109,
      97,
      110,
      111,
      116,
      101,
      110,
      105,
      100,
      111,
      98,
      105,
      108,
      98,
      97,
      111,
      117,
      110,
      105,
      100,
      97,
      100,
      101,
      115,
      116,
      195,
      161,
      115,
      101,
      100,
      105,
      116,
      97,
      114,
      99,
      114,
      101,
      97,
      100,
      111,
      208,
      180,
      208,
      187,
      209,
      143,
      209,
      135,
      209,
      130,
      208,
      190,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      184,
      208,
      187,
      208,
      184,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      181,
      208,
      179,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      184,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      181,
      209,
      137,
      208,
      181,
      209,
      131,
      208,
      182,
      208,
      181,
      208,
      154,
      208,
      176,
      208,
      186,
      208,
      177,
      208,
      181,
      208,
      183,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      190,
      208,
      189,
      208,
      184,
      208,
      146,
      209,
      129,
      208,
      181,
      208,
      191,
      208,
      190,
      208,
      180,
      208,
      173,
      209,
      130,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      135,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      187,
      208,
      181,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      189,
      208,
      176,
      208,
      179,
      208,
      180,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      181,
      208,
      148,
      208,
      187,
      209,
      143,
      208,
      159,
      209,
      128,
      208,
      184,
      208,
      189,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      184,
      209,
      133,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      186,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      178,
      208,
      190,
      209,
      130,
      209,
      130,
      208,
      176,
      208,
      188,
      208,
      161,
      208,
      168,
      208,
      144,
      208,
      188,
      208,
      176,
      209,
      143,
      208,
      167,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      176,
      209,
      129,
      208,
      178,
      208,
      176,
      208,
      188,
      208,
      181,
      208,
      188,
      209,
      131,
      208,
      162,
      208,
      176,
      208,
      186,
      208,
      180,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      176,
      208,
      188,
      209,
      141,
      209,
      130,
      208,
      184,
      209,
      141,
      209,
      130,
      209,
      131,
      208,
      146,
      208,
      176,
      208,
      188,
      209,
      130,
      208,
      181,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      130,
      209,
      131,
      209,
      130,
      208,
      189,
      208,
      176,
      208,
      180,
      208,
      180,
      208,
      189,
      209,
      143,
      208,
      146,
      208,
      190,
      209,
      130,
      209,
      130,
      209,
      128,
      208,
      184,
      208,
      189,
      208,
      181,
      208,
      185,
      208,
      146,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      184,
      208,
      188,
      209,
      129,
      208,
      176,
      208,
      188,
      209,
      130,
      208,
      190,
      209,
      130,
      209,
      128,
      209,
      131,
      208,
      177,
      208,
      158,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      189,
      208,
      181,
      208,
      181,
      208,
      158,
      208,
      158,
      208,
      158,
      208,
      187,
      208,
      184,
      209,
      134,
      209,
      141,
      209,
      130,
      208,
      176,
      208,
      158,
      208,
      189,
      208,
      176,
      208,
      189,
      208,
      181,
      208,
      188,
      208,
      180,
      208,
      190,
      208,
      188,
      208,
      188,
      208,
      190,
      208,
      185,
      208,
      180,
      208,
      178,
      208,
      181,
      208,
      190,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      131,
      208,
      180,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      136,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      148,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      143,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      139,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      164,
      165,
      224,
      164,
      190,
      106,
      97,
      103,
      114,
      97,
      110,
      224,
      164,
      134,
      224,
      164,
      156,
      224,
      164,
      156,
      224,
      165,
      139,
      224,
      164,
      133,
      224,
      164,
      172,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      136,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      135,
      224,
      164,
      168,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      165,
      224,
      165,
      135,
      224,
      164,
      165,
      224,
      165,
      128,
      224,
      164,
      152,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      172,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      136,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      136,
      224,
      164,
      168,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      139,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      172,
      224,
      164,
      174,
      224,
      164,
      136,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      147,
      224,
      164,
      176,
      224,
      164,
      134,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      154,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      164,
      168,
      224,
      164,
      134,
      224,
      164,
      151,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      178,
      224,
      165,
      128,
      216,
      185,
      217,
      132,
      217,
      137,
      216,
      165,
      217,
      132,
      217,
      137,
      217,
      135,
      216,
      176,
      216,
      167,
      216,
      162,
      216,
      174,
      216,
      177,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      137,
      217,
      135,
      216,
      176,
      217,
      135,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      186,
      217,
      138,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      134,
      217,
      136,
      217,
      132,
      216,
      167,
      216,
      168,
      217,
      138,
      217,
      134,
      216,
      185,
      216,
      177,
      216,
      182,
      216,
      176,
      217,
      132,
      217,
      131,
      217,
      135,
      217,
      134,
      216,
      167,
      217,
      138,
      217,
      136,
      217,
      133,
      217,
      130,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      132,
      217,
      138,
      216,
      167,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      134,
      216,
      173,
      216,
      170,
      217,
      137,
      217,
      130,
      216,
      168,
      217,
      132,
      217,
      136,
      216,
      173,
      216,
      169,
      216,
      167,
      216,
      174,
      216,
      177,
      217,
      129,
      217,
      130,
      216,
      183,
      216,
      185,
      216,
      168,
      216,
      175,
      216,
      177,
      217,
      131,
      217,
      134,
      216,
      165,
      216,
      176,
      216,
      167,
      217,
      131,
      217,
      133,
      216,
      167,
      216,
      167,
      216,
      173,
      216,
      175,
      216,
      165,
      217,
      132,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      135,
      216,
      168,
      216,
      185,
      216,
      182,
      217,
      131,
      217,
      138,
      217,
      129,
      216,
      168,
      216,
      173,
      216,
      171,
      217,
      136,
      217,
      133,
      217,
      134,
      217,
      136,
      217,
      135,
      217,
      136,
      216,
      163,
      217,
      134,
      216,
      167,
      216,
      172,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      135,
      216,
      167,
      216,
      179,
      217,
      132,
      217,
      133,
      216,
      185,
      217,
      134,
      216,
      175,
      217,
      132,
      217,
      138,
      216,
      179,
      216,
      185,
      216,
      168,
      216,
      177,
      216,
      181,
      217,
      132,
      217,
      137,
      217,
      133,
      217,
      134,
      216,
      176,
      216,
      168,
      217,
      135,
      216,
      167,
      216,
      163,
      217,
      134,
      217,
      135,
      217,
      133,
      216,
      171,
      217,
      132,
      217,
      131,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      173,
      217,
      138,
      216,
      171,
      217,
      133,
      216,
      181,
      216,
      177,
      216,
      180,
      216,
      177,
      216,
      173,
      216,
      173,
      217,
      136,
      217,
      132,
      217,
      136,
      217,
      129,
      217,
      138,
      216,
      167,
      216,
      176,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      169,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      129,
      216,
      163,
      216,
      168,
      217,
      136,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      163,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      134,
      217,
      135,
      216,
      167,
      217,
      132,
      217,
      138,
      216,
      185,
      216,
      182,
      217,
      136,
      217,
      136,
      217,
      130,
      216,
      175,
      216,
      167,
      216,
      168,
      217,
      134,
      216,
      174,
      217,
      138,
      216,
      177,
      216,
      168,
      217,
      134,
      216,
      170,
      217,
      132,
      217,
      131,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      161,
      217,
      136,
      217,
      135,
      217,
      138,
      216,
      167,
      216,
      168,
      217,
      136,
      217,
      130,
      216,
      181,
      216,
      181,
      217,
      136,
      217,
      133,
      216,
      167,
      216,
      177,
      217,
      130,
      217,
      133,
      216,
      163,
      216,
      173,
      216,
      175,
      217,
      134,
      216,
      173,
      217,
      134,
      216,
      185,
      216,
      175,
      217,
      133,
      216,
      177,
      216,
      163,
      217,
      138,
      216,
      167,
      216,
      173,
      216,
      169,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      175,
      217,
      136,
      217,
      134,
      217,
      138,
      216,
      172,
      216,
      168,
      217,
      133,
      217,
      134,
      217,
      135,
      216,
      170,
      216,
      173,
      216,
      170,
      216,
      172,
      217,
      135,
      216,
      169,
      216,
      179,
      217,
      134,
      216,
      169,
      217,
      138,
      216,
      170,
      217,
      133,
      217,
      131,
      216,
      177,
      216,
      169,
      216,
      186,
      216,
      178,
      216,
      169,
      217,
      134,
      217,
      129,
      216,
      179,
      216,
      168,
      217,
      138,
      216,
      170,
      217,
      132,
      217,
      132,
      217,
      135,
      217,
      132,
      217,
      134,
      216,
      167,
      216,
      170,
      217,
      132,
      217,
      131,
      217,
      130,
      217,
      132,
      216,
      168,
      217,
      132,
      217,
      133,
      216,
      167,
      216,
      185,
      217,
      134,
      217,
      135,
      216,
      163,
      217,
      136,
      217,
      132,
      216,
      180,
      217,
      138,
      216,
      161,
      217,
      134,
      217,
      136,
      216,
      177,
      216,
      163,
      217,
      133,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      131,
      216,
      168,
      217,
      131,
      217,
      132,
      216,
      176,
      216,
      167,
      216,
      170,
      216,
      177,
      216,
      170,
      216,
      168,
      216,
      168,
      216,
      163,
      217,
      134,
      217,
      135,
      217,
      133,
      216,
      179,
      216,
      167,
      217,
      134,
      217,
      131,
      216,
      168,
      217,
      138,
      216,
      185,
      217,
      129,
      217,
      130,
      216,
      175,
      216,
      173,
      216,
      179,
      217,
      134,
      217,
      132,
      217,
      135,
      217,
      133,
      216,
      180,
      216,
      185,
      216,
      177,
      216,
      163,
      217,
      135,
      217,
      132,
      216,
      180,
      217,
      135,
      216,
      177,
      217,
      130,
      216,
      183,
      216,
      177,
      216,
      183,
      217,
      132,
      216,
      168,
      112,
      114,
      111,
      102,
      105,
      108,
      101,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      104,
      105,
      109,
      115,
      101,
      108,
      102,
      100,
      101,
      116,
      97,
      105,
      108,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      115,
      116,
      97,
      114,
      116,
      101,
      100,
      109,
      101,
      115,
      115,
      97,
      103,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      97,
      115,
      104,
      105,
      111,
      110,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      115,
      116,
      111,
      114,
      105,
      101,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      115,
      114,
      117,
      110,
      110,
      105,
      110,
      103,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      119,
      114,
      105,
      116,
      105,
      110,
      103,
      111,
      98,
      106,
      101,
      99,
      116,
      115,
      118,
      105,
      115,
      105,
      98,
      108,
      101,
      119,
      101,
      108,
      99,
      111,
      109,
      101,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      117,
      110,
      107,
      110,
      111,
      119,
      110,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      100,
      121,
      110,
      97,
      109,
      105,
      99,
      98,
      114,
      111,
      119,
      115,
      101,
      114,
      112,
      114,
      105,
      118,
      97,
      99,
      121,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      114,
      101,
      113,
      117,
      101,
      115,
      116,
      114,
      101,
      115,
      101,
      114,
      118,
      101,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      115,
      111,
      112,
      116,
      105,
      111,
      110,
      115,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      99,
      104,
      97,
      110,
      110,
      101,
      108,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      118,
      105,
      115,
      105,
      116,
      101,
      100,
      119,
      101,
      97,
      116,
      104,
      101,
      114,
      99,
      111,
      114,
      114,
      101,
      99,
      116,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      101,
      100,
      105,
      114,
      101,
      99,
      116,
      102,
      111,
      114,
      119,
      97,
      114,
      100,
      121,
      111,
      117,
      32,
      99,
      97,
      110,
      114,
      101,
      109,
      111,
      118,
      101,
      100,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      97,
      114,
      99,
      104,
      105,
      118,
      101,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      114,
      101,
      97,
      100,
      105,
      110,
      103,
      108,
      105,
      98,
      114,
      97,
      114,
      121,
      108,
      105,
      109,
      105,
      116,
      101,
      100,
      109,
      97,
      110,
      97,
      103,
      101,
      114,
      102,
      117,
      114,
      116,
      104,
      101,
      114,
      115,
      117,
      109,
      109,
      97,
      114,
      121,
      109,
      97,
      99,
      104,
      105,
      110,
      101,
      109,
      105,
      110,
      117,
      116,
      101,
      115,
      112,
      114,
      105,
      118,
      97,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      120,
      116,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      111,
      99,
      105,
      101,
      116,
      121,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      101,
      110,
      97,
      98,
      108,
      101,
      100,
      116,
      114,
      105,
      103,
      103,
      101,
      114,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      108,
      111,
      97,
      100,
      105,
      110,
      103,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      102,
      105,
      110,
      97,
      108,
      108,
      121,
      112,
      101,
      114,
      102,
      101,
      99,
      116,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      115,
      121,
      115,
      116,
      101,
      109,
      115,
      107,
      101,
      101,
      112,
      105,
      110,
      103,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      44,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      115,
      117,
      114,
      102,
      97,
      99,
      101,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      120,
      112,
      105,
      114,
      101,
      115,
      114,
      101,
      118,
      105,
      101,
      119,
      115,
      98,
      97,
      108,
      97,
      110,
      99,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      80,
      108,
      101,
      97,
      115,
      101,
      32,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      97,
      118,
      101,
      114,
      97,
      103,
      101,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      118,
      105,
      108,
      108,
      97,
      103,
      101,
      83,
      112,
      97,
      110,
      105,
      115,
      104,
      103,
      97,
      108,
      108,
      101,
      114,
      121,
      100,
      101,
      99,
      108,
      105,
      110,
      101,
      109,
      101,
      101,
      116,
      105,
      110,
      103,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      115,
      112,
      101,
      99,
      105,
      101,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      119,
      114,
      105,
      116,
      101,
      114,
      115,
      99,
      111,
      117,
      110,
      116,
      101,
      114,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      114,
      101,
      112,
      111,
      114,
      116,
      115,
      102,
      105,
      103,
      117,
      114,
      101,
      115,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      111,
      108,
      100,
      105,
      110,
      103,
      100,
      105,
      115,
      112,
      117,
      116,
      101,
      101,
      97,
      114,
      108,
      105,
      101,
      114,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      100,
      105,
      103,
      105,
      116,
      97,
      108,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      65,
      110,
      111,
      116,
      104,
      101,
      114,
      109,
      97,
      114,
      114,
      105,
      101,
      100,
      116,
      114,
      97,
      102,
      102,
      105,
      99,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      99,
      101,
      110,
      116,
      114,
      97,
      108,
      118,
      105,
      99,
      116,
      111,
      114,
      121,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      114,
      101,
      97,
      115,
      111,
      110,
      115,
      115,
      116,
      117,
      100,
      105,
      101,
      115,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      108,
      105,
      115,
      116,
      105,
      110,
      103,
      109,
      117,
      115,
      116,
      32,
      98,
      101,
      115,
      99,
      104,
      111,
      111,
      108,
      115,
      86,
      101,
      114,
      115,
      105,
      111,
      110,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      101,
      112,
      105,
      115,
      111,
      100,
      101,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      103,
      114,
      111,
      119,
      105,
      110,
      103,
      111,
      98,
      118,
      105,
      111,
      117,
      115,
      111,
      118,
      101,
      114,
      108,
      97,
      121,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      117,
      108,
      62,
      13,
      10,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      114,
      101,
      97,
      108,
      105,
      116,
      121,
      115,
      116,
      111,
      114,
      97,
      103,
      101,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      100,
      101,
      115,
      107,
      116,
      111,
      112,
      111,
      102,
      102,
      101,
      114,
      101,
      100,
      112,
      97,
      116,
      116,
      101,
      114,
      110,
      117,
      110,
      117,
      115,
      117,
      97,
      108,
      68,
      105,
      103,
      105,
      116,
      97,
      108,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      87,
      101,
      98,
      115,
      105,
      116,
      101,
      102,
      97,
      105,
      108,
      117,
      114,
      101,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      114,
      101,
      100,
      117,
      99,
      101,
      100,
      65,
      110,
      100,
      114,
      111,
      105,
      100,
      100,
      101,
      99,
      97,
      100,
      101,
      115,
      114,
      101,
      103,
      117,
      108,
      97,
      114,
      32,
      38,
      97,
      109,
      112,
      59,
      32,
      97,
      110,
      105,
      109,
      97,
      108,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      65,
      117,
      116,
      111,
      109,
      97,
      116,
      103,
      101,
      116,
      116,
      105,
      110,
      103,
      109,
      101,
      116,
      104,
      111,
      100,
      115,
      110,
      111,
      116,
      104,
      105,
      110,
      103,
      80,
      111,
      112,
      117,
      108,
      97,
      114,
      99,
      97,
      112,
      116,
      105,
      111,
      110,
      108,
      101,
      116,
      116,
      101,
      114,
      115,
      99,
      97,
      112,
      116,
      117,
      114,
      101,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      108,
      105,
      99,
      101,
      110,
      115,
      101,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      61,
      49,
      38,
      97,
      109,
      112,
      59,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      61,
      32,
      110,
      101,
      119,
      32,
      67,
      101,
      110,
      116,
      114,
      97,
      108,
      117,
      112,
      100,
      97,
      116,
      101,
      100,
      83,
      112,
      101,
      99,
      105,
      97,
      108,
      78,
      101,
      116,
      119,
      111,
      114,
      107,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      119,
      97,
      114,
      110,
      105,
      110,
      103,
      67,
      111,
      108,
      108,
      101,
      103,
      101,
      116,
      111,
      111,
      108,
      98,
      97,
      114,
      114,
      101,
      109,
      97,
      105,
      110,
      115,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      68,
      101,
      117,
      116,
      115,
      99,
      104,
      102,
      105,
      110,
      97,
      110,
      99,
      101,
      119,
      111,
      114,
      107,
      101,
      114,
      115,
      113,
      117,
      105,
      99,
      107,
      108,
      121,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      101,
      120,
      97,
      99,
      116,
      108,
      121,
      115,
      101,
      116,
      116,
      105,
      110,
      103,
      100,
      105,
      115,
      101,
      97,
      115,
      101,
      83,
      111,
      99,
      105,
      101,
      116,
      121,
      119,
      101,
      97,
      112,
      111,
      110,
      115,
      101,
      120,
      104,
      105,
      98,
      105,
      116,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      67,
      111,
      110,
      116,
      114,
      111,
      108,
      99,
      108,
      97,
      115,
      115,
      101,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      111,
      117,
      116,
      108,
      105,
      110,
      101,
      97,
      116,
      116,
      97,
      99,
      107,
      115,
      100,
      101,
      118,
      105,
      99,
      101,
      115,
      40,
      119,
      105,
      110,
      100,
      111,
      119,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      77,
      111,
      98,
      105,
      108,
      101,
      32,
      107,
      105,
      108,
      108,
      105,
      110,
      103,
      115,
      104,
      111,
      119,
      105,
      110,
      103,
      73,
      116,
      97,
      108,
      105,
      97,
      110,
      100,
      114,
      111,
      112,
      112,
      101,
      100,
      104,
      101,
      97,
      118,
      105,
      108,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      115,
      45,
      49,
      39,
      93,
      41,
      59,
      10,
      99,
      111,
      110,
      102,
      105,
      114,
      109,
      67,
      117,
      114,
      114,
      101,
      110,
      116,
      97,
      100,
      118,
      97,
      110,
      99,
      101,
      115,
      104,
      97,
      114,
      105,
      110,
      103,
      111,
      112,
      101,
      110,
      105,
      110,
      103,
      100,
      114,
      97,
      119,
      105,
      110,
      103,
      98,
      105,
      108,
      108,
      105,
      111,
      110,
      111,
      114,
      100,
      101,
      114,
      101,
      100,
      71,
      101,
      114,
      109,
      97,
      110,
      121,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      83,
      99,
      105,
      101,
      110,
      99,
      101,
      99,
      97,
      116,
      97,
      108,
      111,
      103,
      65,
      114,
      116,
      105,
      99,
      108,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      115,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      117,
      110,
      105,
      102,
      111,
      114,
      109,
      106,
      111,
      117,
      114,
      110,
      101,
      121,
      115,
      105,
      100,
      101,
      98,
      97,
      114,
      67,
      104,
      105,
      99,
      97,
      103,
      111,
      104,
      111,
      108,
      105,
      100,
      97,
      121,
      71,
      101,
      110,
      101,
      114,
      97,
      108,
      112,
      97,
      115,
      115,
      97,
      103,
      101,
      44,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      110,
      105,
      109,
      97,
      116,
      101,
      102,
      101,
      101,
      108,
      105,
      110,
      103,
      97,
      114,
      114,
      105,
      118,
      101,
      100,
      112,
      97,
      115,
      115,
      105,
      110,
      103,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      114,
      111,
      117,
      103,
      104,
      108,
      121,
      46,
      10,
      10,
      84,
      104,
      101,
      32,
      98,
      117,
      116,
      32,
      110,
      111,
      116,
      100,
      101,
      110,
      115,
      105,
      116,
      121,
      66,
      114,
      105,
      116,
      97,
      105,
      110,
      67,
      104,
      105,
      110,
      101,
      115,
      101,
      108,
      97,
      99,
      107,
      32,
      111,
      102,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      73,
      114,
      101,
      108,
      97,
      110,
      100,
      34,
      32,
      100,
      97,
      116,
      97,
      45,
      102,
      97,
      99,
      116,
      111,
      114,
      115,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      116,
      104,
      97,
      116,
      32,
      105,
      115,
      76,
      105,
      98,
      114,
      97,
      114,
      121,
      104,
      117,
      115,
      98,
      97,
      110,
      100,
      105,
      110,
      32,
      102,
      97,
      99,
      116,
      97,
      102,
      102,
      97,
      105,
      114,
      115,
      67,
      104,
      97,
      114,
      108,
      101,
      115,
      114,
      97,
      100,
      105,
      99,
      97,
      108,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      102,
      105,
      110,
      100,
      105,
      110,
      103,
      108,
      97,
      110,
      100,
      105,
      110,
      103,
      58,
      108,
      97,
      110,
      103,
      61,
      34,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      112,
      108,
      97,
      110,
      110,
      101,
      100,
      112,
      114,
      101,
      109,
      105,
      117,
      109,
      112,
      97,
      99,
      107,
      97,
      103,
      101,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      69,
      100,
      105,
      116,
      105,
      111,
      110,
      93,
      38,
      113,
      117,
      111,
      116,
      59,
      77,
      101,
      115,
      115,
      97,
      103,
      101,
      110,
      101,
      101,
      100,
      32,
      116,
      111,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      99,
      111,
      109,
      112,
      108,
      101,
      120,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      115,
      109,
      97,
      108,
      108,
      101,
      114,
      45,
      109,
      111,
      98,
      105,
      108,
      101,
      114,
      101,
      99,
      111,
      114,
      100,
      115,
      119,
      97,
      110,
      116,
      32,
      116,
      111,
      107,
      105,
      110,
      100,
      32,
      111,
      102,
      70,
      105,
      114,
      101,
      102,
      111,
      120,
      121,
      111,
      117,
      32,
      97,
      114,
      101,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      115,
      116,
      117,
      100,
      105,
      101,
      100,
      109,
      97,
      120,
      105,
      109,
      117,
      109,
      104,
      101,
      97,
      100,
      105,
      110,
      103,
      114,
      97,
      112,
      105,
      100,
      108,
      121,
      99,
      108,
      105,
      109,
      97,
      116,
      101,
      107,
      105,
      110,
      103,
      100,
      111,
      109,
      101,
      109,
      101,
      114,
      103,
      101,
      100,
      97,
      109,
      111,
      117,
      110,
      116,
      115,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      112,
      105,
      111,
      110,
      101,
      101,
      114,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      100,
      121,
      110,
      97,
      115,
      116,
      121,
      104,
      111,
      119,
      32,
      116,
      111,
      32,
      83,
      117,
      112,
      112,
      111,
      114,
      116,
      114,
      101,
      118,
      101,
      110,
      117,
      101,
      101,
      99,
      111,
      110,
      111,
      109,
      121,
      82,
      101,
      115,
      117,
      108,
      116,
      115,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      115,
      111,
      108,
      100,
      105,
      101,
      114,
      108,
      97,
      114,
      103,
      101,
      108,
      121,
      99,
      97,
      108,
      108,
      105,
      110,
      103,
      46,
      38,
      113,
      117,
      111,
      116,
      59,
      65,
      99,
      99,
      111,
      117,
      110,
      116,
      69,
      100,
      119,
      97,
      114,
      100,
      32,
      115,
      101,
      103,
      109,
      101,
      110,
      116,
      82,
      111,
      98,
      101,
      114,
      116,
      32,
      101,
      102,
      102,
      111,
      114,
      116,
      115,
      80,
      97,
      99,
      105,
      102,
      105,
      99,
      108,
      101,
      97,
      114,
      110,
      101,
      100,
      117,
      112,
      32,
      119,
      105,
      116,
      104,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      119,
      101,
      32,
      104,
      97,
      118,
      101,
      65,
      110,
      103,
      101,
      108,
      101,
      115,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      95,
      115,
      101,
      97,
      114,
      99,
      104,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      97,
      99,
      113,
      117,
      105,
      114,
      101,
      109,
      97,
      115,
      115,
      105,
      118,
      101,
      103,
      114,
      97,
      110,
      116,
      101,
      100,
      58,
      32,
      102,
      97,
      108,
      115,
      101,
      116,
      114,
      101,
      97,
      116,
      101,
      100,
      98,
      105,
      103,
      103,
      101,
      115,
      116,
      98,
      101,
      110,
      101,
      102,
      105,
      116,
      100,
      114,
      105,
      118,
      105,
      110,
      103,
      83,
      116,
      117,
      100,
      105,
      101,
      115,
      109,
      105,
      110,
      105,
      109,
      117,
      109,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      109,
      111,
      114,
      110,
      105,
      110,
      103,
      115,
      101,
      108,
      108,
      105,
      110,
      103,
      105,
      115,
      32,
      117,
      115,
      101,
      100,
      114,
      101,
      118,
      101,
      114,
      115,
      101,
      118,
      97,
      114,
      105,
      97,
      110,
      116,
      32,
      114,
      111,
      108,
      101,
      61,
      34,
      109,
      105,
      115,
      115,
      105,
      110,
      103,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      112,
      114,
      111,
      109,
      111,
      116,
      101,
      115,
      116,
      117,
      100,
      101,
      110,
      116,
      115,
      111,
      109,
      101,
      111,
      110,
      101,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      114,
      101,
      115,
      116,
      111,
      114,
      101,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      101,
      118,
      111,
      108,
      118,
      101,
      100,
      97,
      108,
      108,
      32,
      116,
      104,
      101,
      115,
      105,
      116,
      101,
      109,
      97,
      112,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      119,
      97,
      121,
      32,
      116,
      111,
      32,
      32,
      65,
      117,
      103,
      117,
      115,
      116,
      115,
      121,
      109,
      98,
      111,
      108,
      115,
      67,
      111,
      109,
      112,
      97,
      110,
      121,
      109,
      97,
      116,
      116,
      101,
      114,
      115,
      109,
      117,
      115,
      105,
      99,
      97,
      108,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      115,
      101,
      114,
      118,
      105,
      110,
      103,
      125,
      41,
      40,
      41,
      59,
      13,
      10,
      112,
      97,
      121,
      109,
      101,
      110,
      116,
      116,
      114,
      111,
      117,
      98,
      108,
      101,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      112,
      97,
      114,
      101,
      110,
      116,
      115,
      112,
      108,
      97,
      121,
      101,
      114,
      115,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      109,
      111,
      110,
      105,
      116,
      111,
      114,
      32,
      39,
      39,
      84,
      104,
      101,
      32,
      119,
      105,
      110,
      110,
      105,
      110,
      103,
      101,
      120,
      112,
      108,
      111,
      114,
      101,
      97,
      100,
      97,
      112,
      116,
      101,
      100,
      71,
      97,
      108,
      108,
      101,
      114,
      121,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      101,
      110,
      104,
      97,
      110,
      99,
      101,
      99,
      97,
      114,
      101,
      101,
      114,
      115,
      41,
      46,
      32,
      84,
      104,
      101,
      32,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      83,
      101,
      97,
      114,
      99,
      104,
      32,
      97,
      110,
      99,
      105,
      101,
      110,
      116,
      101,
      120,
      105,
      115,
      116,
      101,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      32,
      104,
      97,
      110,
      100,
      108,
      101,
      114,
      112,
      114,
      105,
      110,
      116,
      101,
      100,
      99,
      111,
      110,
      115,
      111,
      108,
      101,
      69,
      97,
      115,
      116,
      101,
      114,
      110,
      101,
      120,
      112,
      111,
      114,
      116,
      115,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      67,
      104,
      97,
      110,
      110,
      101,
      108,
      105,
      108,
      108,
      101,
      103,
      97,
      108,
      110,
      101,
      117,
      116,
      114,
      97,
      108,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      95,
      104,
      101,
      97,
      100,
      101,
      114,
      115,
      105,
      103,
      110,
      105,
      110,
      103,
      46,
      104,
      116,
      109,
      108,
      34,
      62,
      115,
      101,
      116,
      116,
      108,
      101,
      100,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      99,
      97,
      117,
      115,
      105,
      110,
      103,
      45,
      119,
      101,
      98,
      107,
      105,
      116,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      74,
      117,
      115,
      116,
      105,
      99,
      101,
      99,
      104,
      97,
      112,
      116,
      101,
      114,
      118,
      105,
      99,
      116,
      105,
      109,
      115,
      84,
      104,
      111,
      109,
      97,
      115,
      32,
      109,
      111,
      122,
      105,
      108,
      108,
      97,
      112,
      114,
      111,
      109,
      105,
      115,
      101,
      112,
      97,
      114,
      116,
      105,
      101,
      115,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      58,
      102,
      97,
      108,
      115,
      101,
      44,
      104,
      117,
      110,
      100,
      114,
      101,
      100,
      79,
      108,
      121,
      109,
      112,
      105,
      99,
      95,
      98,
      117,
      116,
      116,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      115,
      114,
      101,
      97,
      99,
      104,
      101,
      100,
      99,
      104,
      114,
      111,
      110,
      105,
      99,
      100,
      101,
      109,
      97,
      110,
      100,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      112,
      114,
      101,
      112,
      97,
      114,
      101,
      110,
      101,
      105,
      116,
      104,
      101,
      114,
      103,
      114,
      101,
      97,
      116,
      108,
      121,
      103,
      114,
      101,
      97,
      116,
      101,
      114,
      111,
      118,
      101,
      114,
      97,
      108,
      108,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      115,
      101,
      97,
      114,
      99,
      104,
      46,
      119,
      111,
      114,
      115,
      104,
      105,
      112,
      102,
      117,
      110,
      100,
      105,
      110,
      103,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      104,
      105,
      103,
      104,
      101,
      115,
      116,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      117,
      116,
      105,
      108,
      105,
      116,
      121,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      67,
      117,
      108,
      116,
      117,
      114,
      101,
      116,
      101,
      115,
      116,
      105,
      110,
      103,
      99,
      108,
      101,
      97,
      114,
      108,
      121,
      101,
      120,
      112,
      111,
      115,
      101,
      100,
      66,
      114,
      111,
      119,
      115,
      101,
      114,
      108,
      105,
      98,
      101,
      114,
      97,
      108,
      125,
      32,
      99,
      97,
      116,
      99,
      104,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      104,
      105,
      100,
      101,
      40,
      41,
      59,
      70,
      108,
      111,
      114,
      105,
      100,
      97,
      97,
      110,
      115,
      119,
      101,
      114,
      115,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      69,
      109,
      112,
      101,
      114,
      111,
      114,
      100,
      101,
      102,
      101,
      110,
      115,
      101,
      115,
      101,
      114,
      105,
      111,
      117,
      115,
      102,
      114,
      101,
      101,
      100,
      111,
      109,
      83,
      101,
      118,
      101,
      114,
      97,
      108,
      45,
      98,
      117,
      116,
      116,
      111,
      110,
      70,
      117,
      114,
      116,
      104,
      101,
      114,
      111,
      117,
      116,
      32,
      111,
      102,
      32,
      33,
      61,
      32,
      110,
      117,
      108,
      108,
      116,
      114,
      97,
      105,
      110,
      101,
      100,
      68,
      101,
      110,
      109,
      97,
      114,
      107,
      118,
      111,
      105,
      100,
      40,
      48,
      41,
      47,
      97,
      108,
      108,
      46,
      106,
      115,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      83,
      116,
      101,
      112,
      104,
      101,
      110,
      10,
      10,
      87,
      104,
      101,
      110,
      32,
      111,
      98,
      115,
      101,
      114,
      118,
      101,
      60,
      47,
      104,
      50,
      62,
      13,
      10,
      77,
      111,
      100,
      101,
      114,
      110,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      115,
      46,
      10,
      10,
      70,
      111,
      114,
      32,
      10,
      10,
      77,
      97,
      110,
      121,
      32,
      97,
      114,
      116,
      105,
      115,
      116,
      115,
      112,
      111,
      119,
      101,
      114,
      101,
      100,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      116,
      121,
      112,
      101,
      32,
      111,
      102,
      109,
      101,
      100,
      105,
      99,
      97,
      108,
      116,
      105,
      99,
      107,
      101,
      116,
      115,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      67,
      111,
      117,
      110,
      99,
      105,
      108,
      119,
      105,
      116,
      110,
      101,
      115,
      115,
      106,
      117,
      115,
      116,
      105,
      99,
      101,
      71,
      101,
      111,
      114,
      103,
      101,
      32,
      66,
      101,
      108,
      103,
      105,
      117,
      109,
      46,
      46,
      46,
      60,
      47,
      97,
      62,
      116,
      119,
      105,
      116,
      116,
      101,
      114,
      110,
      111,
      116,
      97,
      98,
      108,
      121,
      119,
      97,
      105,
      116,
      105,
      110,
      103,
      119,
      97,
      114,
      102,
      97,
      114,
      101,
      32,
      79,
      116,
      104,
      101,
      114,
      32,
      114,
      97,
      110,
      107,
      105,
      110,
      103,
      112,
      104,
      114,
      97,
      115,
      101,
      115,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      115,
      117,
      114,
      118,
      105,
      118,
      101,
      115,
      99,
      104,
      111,
      108,
      97,
      114,
      60,
      47,
      112,
      62,
      13,
      10,
      32,
      67,
      111,
      117,
      110,
      116,
      114,
      121,
      105,
      103,
      110,
      111,
      114,
      101,
      100,
      108,
      111,
      115,
      115,
      32,
      111,
      102,
      106,
      117,
      115,
      116,
      32,
      97,
      115,
      71,
      101,
      111,
      114,
      103,
      105,
      97,
      115,
      116,
      114,
      97,
      110,
      103,
      101,
      60,
      104,
      101,
      97,
      100,
      62,
      60,
      115,
      116,
      111,
      112,
      112,
      101,
      100,
      49,
      39,
      93,
      41,
      59,
      13,
      10,
      105,
      115,
      108,
      97,
      110,
      100,
      115,
      110,
      111,
      116,
      97,
      98,
      108,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      108,
      105,
      115,
      116,
      32,
      111,
      102,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      49,
      48,
      48,
      44,
      48,
      48,
      48,
      60,
      47,
      104,
      51,
      62,
      10,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      98,
      101,
      99,
      111,
      109,
      101,
      115,
      115,
      101,
      108,
      101,
      99,
      116,
      32,
      119,
      101,
      100,
      100,
      105,
      110,
      103,
      48,
      48,
      46,
      104,
      116,
      109,
      108,
      109,
      111,
      110,
      97,
      114,
      99,
      104,
      111,
      102,
      102,
      32,
      116,
      104,
      101,
      116,
      101,
      97,
      99,
      104,
      101,
      114,
      104,
      105,
      103,
      104,
      108,
      121,
      32,
      98,
      105,
      111,
      108,
      111,
      103,
      121,
      108,
      105,
      102,
      101,
      32,
      111,
      102,
      111,
      114,
      32,
      101,
      118,
      101,
      110,
      114,
      105,
      115,
      101,
      32,
      111,
      102,
      38,
      114,
      97,
      113,
      117,
      111,
      59,
      112,
      108,
      117,
      115,
      111,
      110,
      101,
      104,
      117,
      110,
      116,
      105,
      110,
      103,
      40,
      116,
      104,
      111,
      117,
      103,
      104,
      68,
      111,
      117,
      103,
      108,
      97,
      115,
      106,
      111,
      105,
      110,
      105,
      110,
      103,
      99,
      105,
      114,
      99,
      108,
      101,
      115,
      70,
      111,
      114,
      32,
      116,
      104,
      101,
      65,
      110,
      99,
      105,
      101,
      110,
      116,
      86,
      105,
      101,
      116,
      110,
      97,
      109,
      118,
      101,
      104,
      105,
      99,
      108,
      101,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      99,
      114,
      121,
      115,
      116,
      97,
      108,
      118,
      97,
      108,
      117,
      101,
      32,
      61,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      101,
      110,
      106,
      111,
      121,
      101,
      100,
      97,
      32,
      115,
      109,
      97,
      108,
      108,
      97,
      115,
      115,
      117,
      109,
      101,
      100,
      60,
      97,
      32,
      105,
      100,
      61,
      34,
      102,
      111,
      114,
      101,
      105,
      103,
      110,
      32,
      65,
      108,
      108,
      32,
      114,
      105,
      104,
      111,
      119,
      32,
      116,
      104,
      101,
      68,
      105,
      115,
      112,
      108,
      97,
      121,
      114,
      101,
      116,
      105,
      114,
      101,
      100,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      98,
      97,
      116,
      116,
      108,
      101,
      115,
      115,
      101,
      101,
      107,
      105,
      110,
      103,
      99,
      97,
      98,
      105,
      110,
      101,
      116,
      119,
      97,
      115,
      32,
      110,
      111,
      116,
      108,
      111,
      111,
      107,
      32,
      97,
      116,
      99,
      111,
      110,
      100,
      117,
      99,
      116,
      103,
      101,
      116,
      32,
      116,
      104,
      101,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      104,
      97,
      112,
      112,
      101,
      110,
      115,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      97,
      58,
      104,
      111,
      118,
      101,
      114,
      79,
      110,
      108,
      105,
      110,
      101,
      32,
      70,
      114,
      101,
      110,
      99,
      104,
      32,
      108,
      97,
      99,
      107,
      105,
      110,
      103,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      101,
      120,
      116,
      114,
      97,
      99,
      116,
      101,
      110,
      101,
      109,
      105,
      101,
      115,
      101,
      118,
      101,
      110,
      32,
      105,
      102,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      100,
      101,
      99,
      105,
      100,
      101,
      100,
      97,
      114,
      101,
      32,
      110,
      111,
      116,
      47,
      115,
      101,
      97,
      114,
      99,
      104,
      98,
      101,
      108,
      105,
      101,
      102,
      115,
      45,
      105,
      109,
      97,
      103,
      101,
      58,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      115,
      116,
      97,
      116,
      105,
      99,
      46,
      108,
      111,
      103,
      105,
      110,
      34,
      62,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      118,
      105,
      111,
      108,
      101,
      110,
      116,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      102,
      105,
      114,
      115,
      116,
      34,
      62,
      99,
      105,
      114,
      99,
      117,
      105,
      116,
      70,
      105,
      110,
      108,
      97,
      110,
      100,
      99,
      104,
      101,
      109,
      105,
      115,
      116,
      115,
      104,
      101,
      32,
      119,
      97,
      115,
      49,
      48,
      112,
      120,
      59,
      34,
      62,
      97,
      115,
      32,
      115,
      117,
      99,
      104,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      119,
      105,
      108,
      108,
      32,
      98,
      101,
      108,
      105,
      110,
      101,
      32,
      111,
      102,
      97,
      32,
      103,
      114,
      101,
      97,
      116,
      109,
      121,
      115,
      116,
      101,
      114,
      121,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      102,
      97,
      108,
      108,
      105,
      110,
      103,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      114,
      97,
      105,
      108,
      119,
      97,
      121,
      99,
      111,
      108,
      108,
      101,
      103,
      101,
      109,
      111,
      110,
      115,
      116,
      101,
      114,
      100,
      101,
      115,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      119,
      105,
      116,
      104,
      110,
      117,
      99,
      108,
      101,
      97,
      114,
      74,
      101,
      119,
      105,
      115,
      104,
      32,
      112,
      114,
      111,
      116,
      101,
      115,
      116,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      102,
      108,
      111,
      119,
      101,
      114,
      115,
      112,
      114,
      101,
      100,
      105,
      99,
      116,
      114,
      101,
      102,
      111,
      114,
      109,
      115,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      119,
      104,
      111,
      32,
      119,
      97,
      115,
      108,
      101,
      99,
      116,
      117,
      114,
      101,
      105,
      110,
      115,
      116,
      97,
      110,
      116,
      115,
      117,
      105,
      99,
      105,
      100,
      101,
      103,
      101,
      110,
      101,
      114,
      105,
      99,
      112,
      101,
      114,
      105,
      111,
      100,
      115,
      109,
      97,
      114,
      107,
      101,
      116,
      115,
      83,
      111,
      99,
      105,
      97,
      108,
      32,
      102,
      105,
      115,
      104,
      105,
      110,
      103,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      119,
      105,
      110,
      110,
      101,
      114,
      115,
      60,
      98,
      114,
      32,
      47,
      62,
      60,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      78,
      97,
      116,
      117,
      114,
      97,
      108,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      99,
      111,
      111,
      107,
      105,
      101,
      115,
      111,
      117,
      116,
      99,
      111,
      109,
      101,
      114,
      101,
      115,
      111,
      108,
      118,
      101,
      83,
      119,
      101,
      100,
      105,
      115,
      104,
      98,
      114,
      105,
      101,
      102,
      108,
      121,
      80,
      101,
      114,
      115,
      105,
      97,
      110,
      115,
      111,
      32,
      109,
      117,
      99,
      104,
      67,
      101,
      110,
      116,
      117,
      114,
      121,
      100,
      101,
      112,
      105,
      99,
      116,
      115,
      99,
      111,
      108,
      117,
      109,
      110,
      115,
      104,
      111,
      117,
      115,
      105,
      110,
      103,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      110,
      101,
      120,
      116,
      32,
      116,
      111,
      98,
      101,
      97,
      114,
      105,
      110,
      103,
      109,
      97,
      112,
      112,
      105,
      110,
      103,
      114,
      101,
      118,
      105,
      115,
      101,
      100,
      106,
      81,
      117,
      101,
      114,
      121,
      40,
      45,
      119,
      105,
      100,
      116,
      104,
      58,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      116,
      111,
      111,
      108,
      116,
      105,
      112,
      83,
      101,
      99,
      116,
      105,
      111,
      110,
      100,
      101,
      115,
      105,
      103,
      110,
      115,
      84,
      117,
      114,
      107,
      105,
      115,
      104,
      121,
      111,
      117,
      110,
      103,
      101,
      114,
      46,
      109,
      97,
      116,
      99,
      104,
      40,
      125,
      41,
      40,
      41,
      59,
      10,
      10,
      98,
      117,
      114,
      110,
      105,
      110,
      103,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      101,
      103,
      114,
      101,
      101,
      115,
      115,
      111,
      117,
      114,
      99,
      101,
      61,
      82,
      105,
      99,
      104,
      97,
      114,
      100,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      112,
      108,
      97,
      115,
      116,
      105,
      99,
      101,
      110,
      116,
      114,
      105,
      101,
      115,
      60,
      47,
      116,
      114,
      62,
      13,
      10,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      117,
      108,
      32,
      105,
      100,
      61,
      34,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      112,
      104,
      121,
      115,
      105,
      99,
      115,
      102,
      97,
      105,
      108,
      105,
      110,
      103,
      101,
      120,
      101,
      99,
      117,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      115,
      116,
      108,
      105,
      110,
      107,
      32,
      116,
      111,
      68,
      101,
      102,
      97,
      117,
      108,
      116,
      60,
      98,
      114,
      32,
      47,
      62,
      10,
      58,
      32,
      116,
      114,
      117,
      101,
      44,
      99,
      104,
      97,
      114,
      116,
      101,
      114,
      116,
      111,
      117,
      114,
      105,
      115,
      109,
      99,
      108,
      97,
      115,
      115,
      105,
      99,
      112,
      114,
      111,
      99,
      101,
      101,
      100,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      60,
      47,
      104,
      49,
      62,
      13,
      10,
      111,
      110,
      108,
      105,
      110,
      101,
      46,
      63,
      120,
      109,
      108,
      32,
      118,
      101,
      104,
      101,
      108,
      112,
      105,
      110,
      103,
      100,
      105,
      97,
      109,
      111,
      110,
      100,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      97,
      105,
      114,
      108,
      105,
      110,
      101,
      101,
      110,
      100,
      32,
      45,
      45,
      62,
      41,
      46,
      97,
      116,
      116,
      114,
      40,
      114,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      111,
      115,
      116,
      105,
      110,
      103,
      35,
      102,
      102,
      102,
      102,
      102,
      102,
      114,
      101,
      97,
      108,
      105,
      122,
      101,
      86,
      105,
      110,
      99,
      101,
      110,
      116,
      115,
      105,
      103,
      110,
      97,
      108,
      115,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      80,
      114,
      111,
      100,
      117,
      99,
      116,
      100,
      101,
      115,
      112,
      105,
      116,
      101,
      100,
      105,
      118,
      101,
      114,
      115,
      101,
      116,
      101,
      108,
      108,
      105,
      110,
      103,
      80,
      117,
      98,
      108,
      105,
      99,
      32,
      104,
      101,
      108,
      100,
      32,
      105,
      110,
      74,
      111,
      115,
      101,
      112,
      104,
      32,
      116,
      104,
      101,
      97,
      116,
      114,
      101,
      97,
      102,
      102,
      101,
      99,
      116,
      115,
      60,
      115,
      116,
      121,
      108,
      101,
      62,
      97,
      32,
      108,
      97,
      114,
      103,
      101,
      100,
      111,
      101,
      115,
      110,
      39,
      116,
      108,
      97,
      116,
      101,
      114,
      44,
      32,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      99,
      114,
      101,
      97,
      116,
      111,
      114,
      72,
      117,
      110,
      103,
      97,
      114,
      121,
      65,
      105,
      114,
      112,
      111,
      114,
      116,
      115,
      101,
      101,
      32,
      116,
      104,
      101,
      115,
      111,
      32,
      116,
      104,
      97,
      116,
      77,
      105,
      99,
      104,
      97,
      101,
      108,
      83,
      121,
      115,
      116,
      101,
      109,
      115,
      80,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      44,
      32,
      97,
      110,
      100,
      32,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      114,
      97,
      100,
      105,
      110,
      103,
      108,
      101,
      102,
      116,
      34,
      62,
      10,
      112,
      101,
      114,
      115,
      111,
      110,
      115,
      71,
      111,
      108,
      100,
      101,
      110,
      32,
      65,
      102,
      102,
      97,
      105,
      114,
      115,
      103,
      114,
      97,
      109,
      109,
      97,
      114,
      102,
      111,
      114,
      109,
      105,
      110,
      103,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      105,
      100,
      101,
      97,
      32,
      111,
      102,
      99,
      97,
      115,
      101,
      32,
      111,
      102,
      111,
      108,
      100,
      101,
      115,
      116,
      32,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      46,
      115,
      114,
      99,
      32,
      61,
      32,
      99,
      97,
      114,
      116,
      111,
      111,
      110,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      67,
      111,
      109,
      109,
      111,
      110,
      115,
      77,
      117,
      115,
      108,
      105,
      109,
      115,
      87,
      104,
      97,
      116,
      32,
      105,
      115,
      105,
      110,
      32,
      109,
      97,
      110,
      121,
      109,
      97,
      114,
      107,
      105,
      110,
      103,
      114,
      101,
      118,
      101,
      97,
      108,
      115,
      73,
      110,
      100,
      101,
      101,
      100,
      44,
      101,
      113,
      117,
      97,
      108,
      108,
      121,
      47,
      115,
      104,
      111,
      119,
      95,
      97,
      111,
      117,
      116,
      100,
      111,
      111,
      114,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      65,
      117,
      115,
      116,
      114,
      105,
      97,
      103,
      101,
      110,
      101,
      116,
      105,
      99,
      115,
      121,
      115,
      116,
      101,
      109,
      44,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      105,
      116,
      116,
      105,
      110,
      103,
      72,
      101,
      32,
      97,
      108,
      115,
      111,
      73,
      115,
      108,
      97,
      110,
      100,
      115,
      65,
      99,
      97,
      100,
      101,
      109,
      121,
      10,
      9,
      9,
      60,
      33,
      45,
      45,
      68,
      97,
      110,
      105,
      101,
      108,
      32,
      98,
      105,
      110,
      100,
      105,
      110,
      103,
      98,
      108,
      111,
      99,
      107,
      34,
      62,
      105,
      109,
      112,
      111,
      115,
      101,
      100,
      117,
      116,
      105,
      108,
      105,
      122,
      101,
      65,
      98,
      114,
      97,
      104,
      97,
      109,
      40,
      101,
      120,
      99,
      101,
      112,
      116,
      123,
      119,
      105,
      100,
      116,
      104,
      58,
      112,
      117,
      116,
      116,
      105,
      110,
      103,
      41,
      46,
      104,
      116,
      109,
      108,
      40,
      124,
      124,
      32,
      91,
      93,
      59,
      10,
      68,
      65,
      84,
      65,
      91,
      32,
      42,
      107,
      105,
      116,
      99,
      104,
      101,
      110,
      109,
      111,
      117,
      110,
      116,
      101,
      100,
      97,
      99,
      116,
      117,
      97,
      108,
      32,
      100,
      105,
      97,
      108,
      101,
      99,
      116,
      109,
      97,
      105,
      110,
      108,
      121,
      32,
      95,
      98,
      108,
      97,
      110,
      107,
      39,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      101,
      120,
      112,
      101,
      114,
      116,
      115,
      105,
      102,
      40,
      116,
      121,
      112,
      101,
      73,
      116,
      32,
      97,
      108,
      115,
      111,
      38,
      99,
      111,
      112,
      121,
      59,
      32,
      34,
      62,
      84,
      101,
      114,
      109,
      115,
      98,
      111,
      114,
      110,
      32,
      105,
      110,
      79,
      112,
      116,
      105,
      111,
      110,
      115,
      101,
      97,
      115,
      116,
      101,
      114,
      110,
      116,
      97,
      108,
      107,
      105,
      110,
      103,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      103,
      97,
      105,
      110,
      101,
      100,
      32,
      111,
      110,
      103,
      111,
      105,
      110,
      103,
      106,
      117,
      115,
      116,
      105,
      102,
      121,
      99,
      114,
      105,
      116,
      105,
      99,
      115,
      102,
      97,
      99,
      116,
      111,
      114,
      121,
      105,
      116,
      115,
      32,
      111,
      119,
      110,
      97,
      115,
      115,
      97,
      117,
      108,
      116,
      105,
      110,
      118,
      105,
      116,
      101,
      100,
      108,
      97,
      115,
      116,
      105,
      110,
      103,
      104,
      105,
      115,
      32,
      111,
      119,
      110,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      99,
      111,
      110,
      99,
      101,
      114,
      116,
      100,
      105,
      97,
      103,
      114,
      97,
      109,
      100,
      111,
      108,
      108,
      97,
      114,
      115,
      99,
      108,
      117,
      115,
      116,
      101,
      114,
      112,
      104,
      112,
      63,
      105,
      100,
      61,
      97,
      108,
      99,
      111,
      104,
      111,
      108,
      41,
      59,
      125,
      41,
      40,
      41,
      59,
      117,
      115,
      105,
      110,
      103,
      32,
      97,
      62,
      60,
      115,
      112,
      97,
      110,
      62,
      118,
      101,
      115,
      115,
      101,
      108,
      115,
      114,
      101,
      118,
      105,
      118,
      97,
      108,
      65,
      100,
      100,
      114,
      101,
      115,
      115,
      97,
      109,
      97,
      116,
      101,
      117,
      114,
      97,
      110,
      100,
      114,
      111,
      105,
      100,
      97,
      108,
      108,
      101,
      103,
      101,
      100,
      105,
      108,
      108,
      110,
      101,
      115,
      115,
      119,
      97,
      108,
      107,
      105,
      110,
      103,
      99,
      101,
      110,
      116,
      101,
      114,
      115,
      113,
      117,
      97,
      108,
      105,
      102,
      121,
      109,
      97,
      116,
      99,
      104,
      101,
      115,
      117,
      110,
      105,
      102,
      105,
      101,
      100,
      101,
      120,
      116,
      105,
      110,
      99,
      116,
      68,
      101,
      102,
      101,
      110,
      115,
      101,
      100,
      105,
      101,
      100,
      32,
      105,
      110,
      10,
      9,
      60,
      33,
      45,
      45,
      32,
      99,
      117,
      115,
      116,
      111,
      109,
      115,
      108,
      105,
      110,
      107,
      105,
      110,
      103,
      76,
      105,
      116,
      116,
      108,
      101,
      32,
      66,
      111,
      111,
      107,
      32,
      111,
      102,
      101,
      118,
      101,
      110,
      105,
      110,
      103,
      109,
      105,
      110,
      46,
      106,
      115,
      63,
      97,
      114,
      101,
      32,
      116,
      104,
      101,
      107,
      111,
      110,
      116,
      97,
      107,
      116,
      116,
      111,
      100,
      97,
      121,
      39,
      115,
      46,
      104,
      116,
      109,
      108,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      119,
      101,
      97,
      114,
      105,
      110,
      103,
      65,
      108,
      108,
      32,
      82,
      105,
      103,
      59,
      10,
      125,
      41,
      40,
      41,
      59,
      114,
      97,
      105,
      115,
      105,
      110,
      103,
      32,
      65,
      108,
      115,
      111,
      44,
      32,
      99,
      114,
      117,
      99,
      105,
      97,
      108,
      97,
      98,
      111,
      117,
      116,
      34,
      62,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      45,
      45,
      62,
      10,
      60,
      115,
      99,
      102,
      105,
      114,
      101,
      102,
      111,
      120,
      97,
      115,
      32,
      109,
      117,
      99,
      104,
      97,
      112,
      112,
      108,
      105,
      101,
      115,
      105,
      110,
      100,
      101,
      120,
      44,
      32,
      115,
      44,
      32,
      98,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      10,
      13,
      10,
      60,
      33,
      45,
      45,
      116,
      111,
      119,
      97,
      114,
      100,
      115,
      82,
      101,
      99,
      111,
      114,
      100,
      115,
      80,
      114,
      105,
      118,
      97,
      116,
      101,
      70,
      111,
      114,
      101,
      105,
      103,
      110,
      80,
      114,
      101,
      109,
      105,
      101,
      114,
      99,
      104,
      111,
      105,
      99,
      101,
      115,
      86,
      105,
      114,
      116,
      117,
      97,
      108,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      67,
      111,
      109,
      109,
      101,
      110,
      116,
      80,
      111,
      119,
      101,
      114,
      101,
      100,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      112,
      111,
      118,
      101,
      114,
      116,
      121,
      99,
      104,
      97,
      109,
      98,
      101,
      114,
      76,
      105,
      118,
      105,
      110,
      103,
      32,
      118,
      111,
      108,
      117,
      109,
      101,
      115,
      65,
      110,
      116,
      104,
      111,
      110,
      121,
      108,
      111,
      103,
      105,
      110,
      34,
      32,
      82,
      101,
      108,
      97,
      116,
      101,
      100,
      69,
      99,
      111,
      110,
      111,
      109,
      121,
      114,
      101,
      97,
      99,
      104,
      101,
      115,
      99,
      117,
      116,
      116,
      105,
      110,
      103,
      103,
      114,
      97,
      118,
      105,
      116,
      121,
      108,
      105,
      102,
      101,
      32,
      105,
      110,
      67,
      104,
      97,
      112,
      116,
      101,
      114,
      45,
      115,
      104,
      97,
      100,
      111,
      119,
      78,
      111,
      116,
      97,
      98,
      108,
      101,
      60,
      47,
      116,
      100,
      62,
      13,
      10,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      116,
      97,
      100,
      105,
      117,
      109,
      119,
      105,
      100,
      103,
      101,
      116,
      115,
      118,
      97,
      114,
      121,
      105,
      110,
      103,
      116,
      114,
      97,
      118,
      101,
      108,
      115,
      104,
      101,
      108,
      100,
      32,
      98,
      121,
      119,
      104,
      111,
      32,
      97,
      114,
      101,
      119,
      111,
      114,
      107,
      32,
      105,
      110,
      102,
      97,
      99,
      117,
      108,
      116,
      121,
      97,
      110,
      103,
      117,
      108,
      97,
      114,
      119,
      104,
      111,
      32,
      104,
      97,
      100,
      97,
      105,
      114,
      112,
      111,
      114,
      116,
      116,
      111,
      119,
      110,
      32,
      111,
      102,
      10,
      10,
      83,
      111,
      109,
      101,
      32,
      39,
      99,
      108,
      105,
      99,
      107,
      39,
      99,
      104,
      97,
      114,
      103,
      101,
      115,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      105,
      116,
      32,
      119,
      105,
      108,
      108,
      99,
      105,
      116,
      121,
      32,
      111,
      102,
      40,
      116,
      104,
      105,
      115,
      41,
      59,
      65,
      110,
      100,
      114,
      101,
      119,
      32,
      117,
      110,
      105,
      113,
      117,
      101,
      32,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      51,
      48,
      48,
      112,
      120,
      59,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      59,
      114,
      115,
      105,
      111,
      110,
      61,
      34,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      104,
      101,
      114,
      115,
      101,
      108,
      102,
      83,
      116,
      97,
      116,
      105,
      111,
      110,
      70,
      101,
      100,
      101,
      114,
      97,
      108,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      115,
      101,
      110,
      116,
      32,
      116,
      111,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      97,
      99,
      116,
      114,
      101,
      115,
      115,
      99,
      111,
      109,
      101,
      32,
      116,
      111,
      102,
      105,
      110,
      103,
      101,
      114,
      115,
      68,
      117,
      107,
      101,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      44,
      101,
      120,
      112,
      108,
      111,
      105,
      116,
      119,
      104,
      97,
      116,
      32,
      105,
      115,
      104,
      97,
      114,
      109,
      111,
      110,
      121,
      97,
      32,
      109,
      97,
      106,
      111,
      114,
      34,
      58,
      34,
      104,
      116,
      116,
      112,
      105,
      110,
      32,
      104,
      105,
      115,
      32,
      109,
      101,
      110,
      117,
      34,
      62,
      10,
      109,
      111,
      110,
      116,
      104,
      108,
      121,
      111,
      102,
      102,
      105,
      99,
      101,
      114,
      99,
      111,
      117,
      110,
      99,
      105,
      108,
      103,
      97,
      105,
      110,
      105,
      110,
      103,
      101,
      118,
      101,
      110,
      32,
      105,
      110,
      83,
      117,
      109,
      109,
      97,
      114,
      121,
      100,
      97,
      116,
      101,
      32,
      111,
      102,
      108,
      111,
      121,
      97,
      108,
      116,
      121,
      102,
      105,
      116,
      110,
      101,
      115,
      115,
      97,
      110,
      100,
      32,
      119,
      97,
      115,
      101,
      109,
      112,
      101,
      114,
      111,
      114,
      115,
      117,
      112,
      114,
      101,
      109,
      101,
      83,
      101,
      99,
      111,
      110,
      100,
      32,
      104,
      101,
      97,
      114,
      105,
      110,
      103,
      82,
      117,
      115,
      115,
      105,
      97,
      110,
      108,
      111,
      110,
      103,
      101,
      115,
      116,
      65,
      108,
      98,
      101,
      114,
      116,
      97,
      108,
      97,
      116,
      101,
      114,
      97,
      108,
      115,
      101,
      116,
      32,
      111,
      102,
      32,
      115,
      109,
      97,
      108,
      108,
      34,
      62,
      46,
      97,
      112,
      112,
      101,
      110,
      100,
      100,
      111,
      32,
      119,
      105,
      116,
      104,
      102,
      101,
      100,
      101,
      114,
      97,
      108,
      98,
      97,
      110,
      107,
      32,
      111,
      102,
      98,
      101,
      110,
      101,
      97,
      116,
      104,
      68,
      101,
      115,
      112,
      105,
      116,
      101,
      67,
      97,
      112,
      105,
      116,
      97,
      108,
      103,
      114,
      111,
      117,
      110,
      100,
      115,
      41,
      44,
      32,
      97,
      110,
      100,
      32,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      102,
      114,
      111,
      109,
      99,
      108,
      111,
      115,
      105,
      110,
      103,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      73,
      110,
      115,
      116,
      101,
      97,
      100,
      102,
      105,
      102,
      116,
      101,
      101,
      110,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      46,
      121,
      97,
      104,
      111,
      111,
      46,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      102,
      105,
      103,
      104,
      116,
      101,
      114,
      111,
      98,
      115,
      99,
      117,
      114,
      101,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      111,
      114,
      103,
      97,
      110,
      105,
      99,
      61,
      32,
      77,
      97,
      116,
      104,
      46,
      101,
      100,
      105,
      116,
      105,
      110,
      103,
      111,
      110,
      108,
      105,
      110,
      101,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      97,
      32,
      119,
      104,
      111,
      108,
      101,
      111,
      110,
      101,
      114,
      114,
      111,
      114,
      121,
      101,
      97,
      114,
      32,
      111,
      102,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      98,
      97,
      114,
      114,
      105,
      101,
      114,
      119,
      104,
      101,
      110,
      32,
      105,
      116,
      104,
      101,
      97,
      100,
      101,
      114,
      32,
      104,
      111,
      109,
      101,
      32,
      111,
      102,
      114,
      101,
      115,
      117,
      109,
      101,
      100,
      114,
      101,
      110,
      97,
      109,
      101,
      100,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      104,
      101,
      97,
      116,
      105,
      110,
      103,
      114,
      101,
      116,
      97,
      105,
      110,
      115,
      99,
      108,
      111,
      117,
      100,
      102,
      114,
      119,
      97,
      121,
      32,
      111,
      102,
      32,
      77,
      97,
      114,
      99,
      104,
      32,
      49,
      107,
      110,
      111,
      119,
      105,
      110,
      103,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      66,
      101,
      116,
      119,
      101,
      101,
      110,
      108,
      101,
      115,
      115,
      111,
      110,
      115,
      99,
      108,
      111,
      115,
      101,
      115,
      116,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      105,
      110,
      107,
      115,
      34,
      62,
      99,
      114,
      111,
      115,
      115,
      101,
      100,
      69,
      78,
      68,
      32,
      45,
      45,
      62,
      102,
      97,
      109,
      111,
      117,
      115,
      32,
      97,
      119,
      97,
      114,
      100,
      101,
      100,
      76,
      105,
      99,
      101,
      110,
      115,
      101,
      72,
      101,
      97,
      108,
      116,
      104,
      32,
      102,
      97,
      105,
      114,
      108,
      121,
      32,
      119,
      101,
      97,
      108,
      116,
      104,
      121,
      109,
      105,
      110,
      105,
      109,
      97,
      108,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      101,
      108,
      97,
      98,
      101,
      108,
      34,
      62,
      115,
      105,
      110,
      103,
      105,
      110,
      103,
      102,
      97,
      114,
      109,
      101,
      114,
      115,
      66,
      114,
      97,
      115,
      105,
      108,
      41,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      71,
      114,
      101,
      103,
      111,
      114,
      121,
      102,
      111,
      110,
      116,
      32,
      99,
      111,
      112,
      117,
      114,
      115,
      117,
      101,
      100,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      109,
      97,
      107,
      101,
      32,
      117,
      112,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      98,
      111,
      116,
      104,
      32,
      111,
      102,
      98,
      108,
      111,
      99,
      107,
      101,
      100,
      115,
      97,
      119,
      32,
      116,
      104,
      101,
      111,
      102,
      102,
      105,
      99,
      101,
      115,
      99,
      111,
      108,
      111,
      117,
      114,
      115,
      105,
      102,
      40,
      100,
      111,
      99,
      117,
      119,
      104,
      101,
      110,
      32,
      104,
      101,
      101,
      110,
      102,
      111,
      114,
      99,
      101,
      112,
      117,
      115,
      104,
      40,
      102,
      117,
      65,
      117,
      103,
      117,
      115,
      116,
      32,
      85,
      84,
      70,
      45,
      56,
      34,
      62,
      70,
      97,
      110,
      116,
      97,
      115,
      121,
      105,
      110,
      32,
      109,
      111,
      115,
      116,
      105,
      110,
      106,
      117,
      114,
      101,
      100,
      85,
      115,
      117,
      97,
      108,
      108,
      121,
      102,
      97,
      114,
      109,
      105,
      110,
      103,
      99,
      108,
      111,
      115,
      117,
      114,
      101,
      111,
      98,
      106,
      101,
      99,
      116,
      32,
      100,
      101,
      102,
      101,
      110,
      99,
      101,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      77,
      101,
      100,
      105,
      99,
      97,
      108,
      60,
      98,
      111,
      100,
      121,
      62,
      10,
      101,
      118,
      105,
      100,
      101,
      110,
      116,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      107,
      101,
      121,
      67,
      111,
      100,
      101,
      115,
      105,
      120,
      116,
      101,
      101,
      110,
      73,
      115,
      108,
      97,
      109,
      105,
      99,
      35,
      48,
      48,
      48,
      48,
      48,
      48,
      101,
      110,
      116,
      105,
      114,
      101,
      32,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      97,
      99,
      116,
      105,
      118,
      101,
      32,
      40,
      116,
      121,
      112,
      101,
      111,
      102,
      111,
      110,
      101,
      32,
      99,
      97,
      110,
      99,
      111,
      108,
      111,
      114,
      32,
      61,
      115,
      112,
      101,
      97,
      107,
      101,
      114,
      101,
      120,
      116,
      101,
      110,
      100,
      115,
      80,
      104,
      121,
      115,
      105,
      99,
      115,
      116,
      101,
      114,
      114,
      97,
      105,
      110,
      60,
      116,
      98,
      111,
      100,
      121,
      62,
      102,
      117,
      110,
      101,
      114,
      97,
      108,
      118,
      105,
      101,
      119,
      105,
      110,
      103,
      109,
      105,
      100,
      100,
      108,
      101,
      32,
      99,
      114,
      105,
      99,
      107,
      101,
      116,
      112,
      114,
      111,
      112,
      104,
      101,
      116,
      115,
      104,
      105,
      102,
      116,
      101,
      100,
      100,
      111,
      99,
      116,
      111,
      114,
      115,
      82,
      117,
      115,
      115,
      101,
      108,
      108,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      99,
      111,
      109,
      112,
      97,
      99,
      116,
      97,
      108,
      103,
      101,
      98,
      114,
      97,
      115,
      111,
      99,
      105,
      97,
      108,
      45,
      98,
      117,
      108,
      107,
      32,
      111,
      102,
      109,
      97,
      110,
      32,
      97,
      110,
      100,
      60,
      47,
      116,
      100,
      62,
      10,
      32,
      104,
      101,
      32,
      108,
      101,
      102,
      116,
      41,
      46,
      118,
      97,
      108,
      40,
      41,
      102,
      97,
      108,
      115,
      101,
      41,
      59,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      98,
      97,
      110,
      107,
      105,
      110,
      103,
      104,
      111,
      109,
      101,
      32,
      116,
      111,
      110,
      97,
      109,
      105,
      110,
      103,
      32,
      65,
      114,
      105,
      122,
      111,
      110,
      97,
      99,
      114,
      101,
      100,
      105,
      116,
      115,
      41,
      59,
      10,
      125,
      41,
      59,
      10,
      102,
      111,
      117,
      110,
      100,
      101,
      114,
      105,
      110,
      32,
      116,
      117,
      114,
      110,
      67,
      111,
      108,
      108,
      105,
      110,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      66,
      117,
      116,
      32,
      116,
      104,
      101,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      84,
      105,
      116,
      108,
      101,
      34,
      62,
      67,
      97,
      112,
      116,
      97,
      105,
      110,
      115,
      112,
      101,
      108,
      108,
      101,
      100,
      103,
      111,
      100,
      100,
      101,
      115,
      115,
      84,
      97,
      103,
      32,
      45,
      45,
      62,
      65,
      100,
      100,
      105,
      110,
      103,
      58,
      98,
      117,
      116,
      32,
      119,
      97,
      115,
      82,
      101,
      99,
      101,
      110,
      116,
      32,
      112,
      97,
      116,
      105,
      101,
      110,
      116,
      98,
      97,
      99,
      107,
      32,
      105,
      110,
      61,
      102,
      97,
      108,
      115,
      101,
      38,
      76,
      105,
      110,
      99,
      111,
      108,
      110,
      119,
      101,
      32,
      107,
      110,
      111,
      119,
      67,
      111,
      117,
      110,
      116,
      101,
      114,
      74,
      117,
      100,
      97,
      105,
      115,
      109,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      97,
      108,
      116,
      101,
      114,
      101,
      100,
      39,
      93,
      41,
      59,
      10,
      32,
      32,
      104,
      97,
      115,
      32,
      116,
      104,
      101,
      117,
      110,
      99,
      108,
      101,
      97,
      114,
      69,
      118,
      101,
      110,
      116,
      39,
      44,
      98,
      111,
      116,
      104,
      32,
      105,
      110,
      110,
      111,
      116,
      32,
      97,
      108,
      108,
      10,
      10,
      60,
      33,
      45,
      45,
      32,
      112,
      108,
      97,
      99,
      105,
      110,
      103,
      104,
      97,
      114,
      100,
      32,
      116,
      111,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      115,
      111,
      114,
      116,
      32,
      111,
      102,
      99,
      108,
      105,
      101,
      110,
      116,
      115,
      115,
      116,
      114,
      101,
      101,
      116,
      115,
      66,
      101,
      114,
      110,
      97,
      114,
      100,
      97,
      115,
      115,
      101,
      114,
      116,
      115,
      116,
      101,
      110,
      100,
      32,
      116,
      111,
      102,
      97,
      110,
      116,
      97,
      115,
      121,
      100,
      111,
      119,
      110,
      32,
      105,
      110,
      104,
      97,
      114,
      98,
      111,
      117,
      114,
      70,
      114,
      101,
      101,
      100,
      111,
      109,
      106,
      101,
      119,
      101,
      108,
      114,
      121,
      47,
      97,
      98,
      111,
      117,
      116,
      46,
      46,
      115,
      101,
      97,
      114,
      99,
      104,
      108,
      101,
      103,
      101,
      110,
      100,
      115,
      105,
      115,
      32,
      109,
      97,
      100,
      101,
      109,
      111,
      100,
      101,
      114,
      110,
      32,
      111,
      110,
      108,
      121,
      32,
      111,
      110,
      111,
      110,
      108,
      121,
      32,
      116,
      111,
      105,
      109,
      97,
      103,
      101,
      34,
      32,
      108,
      105,
      110,
      101,
      97,
      114,
      32,
      112,
      97,
      105,
      110,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      110,
      111,
      116,
      114,
      97,
      114,
      101,
      108,
      121,
      32,
      97,
      99,
      114,
      111,
      110,
      121,
      109,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      115,
      104,
      111,
      114,
      116,
      101,
      114,
      48,
      48,
      38,
      97,
      109,
      112,
      59,
      97,
      115,
      32,
      109,
      97,
      110,
      121,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      47,
      42,
      32,
      60,
      33,
      91,
      67,
      116,
      105,
      116,
      108,
      101,
      32,
      61,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      108,
      111,
      119,
      101,
      115,
      116,
      32,
      112,
      105,
      99,
      107,
      101,
      100,
      32,
      101,
      115,
      99,
      97,
      112,
      101,
      100,
      117,
      115,
      101,
      115,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      115,
      32,
      80,
      117,
      98,
      108,
      105,
      99,
      77,
      97,
      116,
      116,
      104,
      101,
      119,
      116,
      97,
      99,
      116,
      105,
      99,
      115,
      100,
      97,
      109,
      97,
      103,
      101,
      100,
      119,
      97,
      121,
      32,
      102,
      111,
      114,
      108,
      97,
      119,
      115,
      32,
      111,
      102,
      101,
      97,
      115,
      121,
      32,
      116,
      111,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      116,
      114,
      111,
      110,
      103,
      32,
      32,
      115,
      105,
      109,
      112,
      108,
      101,
      125,
      99,
      97,
      116,
      99,
      104,
      40,
      115,
      101,
      118,
      101,
      110,
      116,
      104,
      105,
      110,
      102,
      111,
      98,
      111,
      120,
      119,
      101,
      110,
      116,
      32,
      116,
      111,
      112,
      97,
      105,
      110,
      116,
      101,
      100,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      73,
      32,
      100,
      111,
      110,
      39,
      116,
      114,
      101,
      116,
      114,
      101,
      97,
      116,
      46,
      32,
      83,
      111,
      109,
      101,
      32,
      119,
      119,
      46,
      34,
      41,
      59,
      10,
      98,
      111,
      109,
      98,
      105,
      110,
      103,
      109,
      97,
      105,
      108,
      116,
      111,
      58,
      109,
      97,
      100,
      101,
      32,
      105,
      110,
      46,
      32,
      77,
      97,
      110,
      121,
      32,
      99,
      97,
      114,
      114,
      105,
      101,
      115,
      124,
      124,
      123,
      125,
      59,
      119,
      105,
      119,
      111,
      114,
      107,
      32,
      111,
      102,
      115,
      121,
      110,
      111,
      110,
      121,
      109,
      100,
      101,
      102,
      101,
      97,
      116,
      115,
      102,
      97,
      118,
      111,
      114,
      101,
      100,
      111,
      112,
      116,
      105,
      99,
      97,
      108,
      112,
      97,
      103,
      101,
      84,
      114,
      97,
      117,
      110,
      108,
      101,
      115,
      115,
      32,
      115,
      101,
      110,
      100,
      105,
      110,
      103,
      108,
      101,
      102,
      116,
      34,
      62,
      60,
      99,
      111,
      109,
      83,
      99,
      111,
      114,
      65,
      108,
      108,
      32,
      116,
      104,
      101,
      106,
      81,
      117,
      101,
      114,
      121,
      46,
      116,
      111,
      117,
      114,
      105,
      115,
      116,
      67,
      108,
      97,
      115,
      115,
      105,
      99,
      102,
      97,
      108,
      115,
      101,
      34,
      32,
      87,
      105,
      108,
      104,
      101,
      108,
      109,
      115,
      117,
      98,
      117,
      114,
      98,
      115,
      103,
      101,
      110,
      117,
      105,
      110,
      101,
      98,
      105,
      115,
      104,
      111,
      112,
      115,
      46,
      115,
      112,
      108,
      105,
      116,
      40,
      103,
      108,
      111,
      98,
      97,
      108,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      98,
      111,
      100,
      121,
      32,
      111,
      102,
      110,
      111,
      109,
      105,
      110,
      97,
      108,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      115,
      101,
      99,
      117,
      108,
      97,
      114,
      108,
      101,
      102,
      116,
      32,
      116,
      111,
      99,
      104,
      105,
      101,
      102,
      108,
      121,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      45,
      98,
      97,
      110,
      110,
      101,
      114,
      60,
      47,
      108,
      105,
      62,
      10,
      10,
      46,
      32,
      87,
      104,
      101,
      110,
      32,
      105,
      110,
      32,
      98,
      111,
      116,
      104,
      100,
      105,
      115,
      109,
      105,
      115,
      115,
      69,
      120,
      112,
      108,
      111,
      114,
      101,
      97,
      108,
      119,
      97,
      121,
      115,
      32,
      118,
      105,
      97,
      32,
      116,
      104,
      101,
      115,
      112,
      97,
      195,
      177,
      111,
      108,
      119,
      101,
      108,
      102,
      97,
      114,
      101,
      114,
      117,
      108,
      105,
      110,
      103,
      32,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      99,
      97,
      112,
      116,
      97,
      105,
      110,
      104,
      105,
      115,
      32,
      115,
      111,
      110,
      114,
      117,
      108,
      101,
      32,
      111,
      102,
      104,
      101,
      32,
      116,
      111,
      111,
      107,
      105,
      116,
      115,
      101,
      108,
      102,
      44,
      61,
      48,
      38,
      97,
      109,
      112,
      59,
      40,
      99,
      97,
      108,
      108,
      101,
      100,
      115,
      97,
      109,
      112,
      108,
      101,
      115,
      116,
      111,
      32,
      109,
      97,
      107,
      101,
      99,
      111,
      109,
      47,
      112,
      97,
      103,
      77,
      97,
      114,
      116,
      105,
      110,
      32,
      75,
      101,
      110,
      110,
      101,
      100,
      121,
      97,
      99,
      99,
      101,
      112,
      116,
      115,
      102,
      117,
      108,
      108,
      32,
      111,
      102,
      104,
      97,
      110,
      100,
      108,
      101,
      100,
      66,
      101,
      115,
      105,
      100,
      101,
      115,
      47,
      47,
      45,
      45,
      62,
      60,
      47,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      116,
      97,
      114,
      103,
      101,
      116,
      115,
      101,
      115,
      115,
      101,
      110,
      99,
      101,
      104,
      105,
      109,
      32,
      116,
      111,
      32,
      105,
      116,
      115,
      32,
      98,
      121,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      46,
      109,
      105,
      110,
      101,
      114,
      97,
      108,
      116,
      111,
      32,
      116,
      97,
      107,
      101,
      119,
      97,
      121,
      115,
      32,
      116,
      111,
      115,
      46,
      111,
      114,
      103,
      47,
      108,
      97,
      100,
      118,
      105,
      115,
      101,
      100,
      112,
      101,
      110,
      97,
      108,
      116,
      121,
      115,
      105,
      109,
      112,
      108,
      101,
      58,
      105,
      102,
      32,
      116,
      104,
      101,
      121,
      76,
      101,
      116,
      116,
      101,
      114,
      115,
      97,
      32,
      115,
      104,
      111,
      114,
      116,
      72,
      101,
      114,
      98,
      101,
      114,
      116,
      115,
      116,
      114,
      105,
      107,
      101,
      115,
      32,
      103,
      114,
      111,
      117,
      112,
      115,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      102,
      108,
      105,
      103,
      104,
      116,
      115,
      111,
      118,
      101,
      114,
      108,
      97,
      112,
      115,
      108,
      111,
      119,
      108,
      121,
      32,
      108,
      101,
      115,
      115,
      101,
      114,
      32,
      115,
      111,
      99,
      105,
      97,
      108,
      32,
      60,
      47,
      112,
      62,
      10,
      9,
      9,
      105,
      116,
      32,
      105,
      110,
      116,
      111,
      114,
      97,
      110,
      107,
      101,
      100,
      32,
      114,
      97,
      116,
      101,
      32,
      111,
      102,
      117,
      108,
      62,
      13,
      10,
      32,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      112,
      97,
      105,
      114,
      32,
      111,
      102,
      109,
      97,
      107,
      101,
      32,
      105,
      116,
      75,
      111,
      110,
      116,
      97,
      107,
      116,
      65,
      110,
      116,
      111,
      110,
      105,
      111,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      114,
      97,
      116,
      105,
      110,
      103,
      115,
      32,
      97,
      99,
      116,
      105,
      118,
      101,
      115,
      116,
      114,
      101,
      97,
      109,
      115,
      116,
      114,
      97,
      112,
      112,
      101,
      100,
      34,
      41,
      46,
      99,
      115,
      115,
      40,
      104,
      111,
      115,
      116,
      105,
      108,
      101,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      108,
      105,
      116,
      116,
      108,
      101,
      32,
      103,
      114,
      111,
      117,
      112,
      115,
      44,
      80,
      105,
      99,
      116,
      117,
      114,
      101,
      45,
      45,
      62,
      13,
      10,
      13,
      10,
      32,
      114,
      111,
      119,
      115,
      61,
      34,
      32,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      110,
      118,
      101,
      114,
      115,
      101,
      60,
      102,
      111,
      111,
      116,
      101,
      114,
      67,
      117,
      115,
      116,
      111,
      109,
      86,
      62,
      60,
      92,
      47,
      115,
      99,
      114,
      115,
      111,
      108,
      118,
      105,
      110,
      103,
      67,
      104,
      97,
      109,
      98,
      101,
      114,
      115,
      108,
      97,
      118,
      101,
      114,
      121,
      119,
      111,
      117,
      110,
      100,
      101,
      100,
      119,
      104,
      101,
      114,
      101,
      97,
      115,
      33,
      61,
      32,
      39,
      117,
      110,
      100,
      102,
      111,
      114,
      32,
      97,
      108,
      108,
      112,
      97,
      114,
      116,
      108,
      121,
      32,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      65,
      114,
      97,
      98,
      105,
      97,
      110,
      98,
      97,
      99,
      107,
      101,
      100,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      117,
      110,
      105,
      116,
      32,
      111,
      102,
      109,
      111,
      98,
      105,
      108,
      101,
      45,
      69,
      117,
      114,
      111,
      112,
      101,
      44,
      105,
      115,
      32,
      104,
      111,
      109,
      101,
      114,
      105,
      115,
      107,
      32,
      111,
      102,
      100,
      101,
      115,
      105,
      114,
      101,
      100,
      67,
      108,
      105,
      110,
      116,
      111,
      110,
      99,
      111,
      115,
      116,
      32,
      111,
      102,
      97,
      103,
      101,
      32,
      111,
      102,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      32,
      110,
      111,
      110,
      101,
      32,
      111,
      102,
      112,
      38,
      113,
      117,
      111,
      116,
      59,
      77,
      105,
      100,
      100,
      108,
      101,
      32,
      101,
      97,
      100,
      39,
      41,
      91,
      48,
      67,
      114,
      105,
      116,
      105,
      99,
      115,
      115,
      116,
      117,
      100,
      105,
      111,
      115,
      62,
      38,
      99,
      111,
      112,
      121,
      59,
      103,
      114,
      111,
      117,
      112,
      34,
      62,
      97,
      115,
      115,
      101,
      109,
      98,
      108,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      119,
      105,
      100,
      103,
      101,
      116,
      46,
      112,
      115,
      58,
      34,
      32,
      63,
      32,
      114,
      101,
      98,
      117,
      105,
      108,
      116,
      98,
      121,
      32,
      115,
      111,
      109,
      101,
      70,
      111,
      114,
      109,
      101,
      114,
      32,
      101,
      100,
      105,
      116,
      111,
      114,
      115,
      100,
      101,
      108,
      97,
      121,
      101,
      100,
      67,
      97,
      110,
      111,
      110,
      105,
      99,
      104,
      97,
      100,
      32,
      116,
      104,
      101,
      112,
      117,
      115,
      104,
      105,
      110,
      103,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      117,
      116,
      32,
      97,
      114,
      101,
      112,
      97,
      114,
      116,
      105,
      97,
      108,
      66,
      97,
      98,
      121,
      108,
      111,
      110,
      98,
      111,
      116,
      116,
      111,
      109,
      32,
      99,
      97,
      114,
      114,
      105,
      101,
      114,
      67,
      111,
      109,
      109,
      97,
      110,
      100,
      105,
      116,
      115,
      32,
      117,
      115,
      101,
      65,
      115,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      117,
      114,
      115,
      101,
      115,
      97,
      32,
      116,
      104,
      105,
      114,
      100,
      100,
      101,
      110,
      111,
      116,
      101,
      115,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      72,
      111,
      117,
      115,
      116,
      111,
      110,
      50,
      48,
      112,
      120,
      59,
      34,
      62,
      97,
      99,
      99,
      117,
      115,
      101,
      100,
      100,
      111,
      117,
      98,
      108,
      101,
      32,
      103,
      111,
      97,
      108,
      32,
      111,
      102,
      70,
      97,
      109,
      111,
      117,
      115,
      32,
      41,
      46,
      98,
      105,
      110,
      100,
      40,
      112,
      114,
      105,
      101,
      115,
      116,
      115,
      32,
      79,
      110,
      108,
      105,
      110,
      101,
      105,
      110,
      32,
      74,
      117,
      108,
      121,
      115,
      116,
      32,
      43,
      32,
      34,
      103,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      100,
      101,
      99,
      105,
      109,
      97,
      108,
      104,
      101,
      108,
      112,
      102,
      117,
      108,
      114,
      101,
      118,
      105,
      118,
      101,
      100,
      105,
      115,
      32,
      118,
      101,
      114,
      121,
      114,
      39,
      43,
      39,
      105,
      112,
      116,
      108,
      111,
      115,
      105,
      110,
      103,
      32,
      102,
      101,
      109,
      97,
      108,
      101,
      115,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      115,
      116,
      114,
      105,
      110,
      103,
      115,
      100,
      97,
      121,
      115,
      32,
      111,
      102,
      97,
      114,
      114,
      105,
      118,
      97,
      108,
      102,
      117,
      116,
      117,
      114,
      101,
      32,
      60,
      111,
      98,
      106,
      101,
      99,
      116,
      102,
      111,
      114,
      99,
      105,
      110,
      103,
      83,
      116,
      114,
      105,
      110,
      103,
      40,
      34,
      32,
      47,
      62,
      10,
      9,
      9,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      101,
      110,
      99,
      111,
      100,
      101,
      100,
      46,
      32,
      32,
      84,
      104,
      101,
      32,
      98,
      97,
      108,
      108,
      111,
      111,
      110,
      100,
      111,
      110,
      101,
      32,
      98,
      121,
      47,
      99,
      111,
      109,
      109,
      111,
      110,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      108,
      97,
      119,
      32,
      111,
      102,
      32,
      73,
      110,
      100,
      105,
      97,
      110,
      97,
      97,
      118,
      111,
      105,
      100,
      101,
      100,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      50,
      112,
      120,
      32,
      51,
      112,
      120,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      97,
      102,
      116,
      101,
      114,
      32,
      97,
      112,
      111,
      108,
      105,
      99,
      121,
      46,
      109,
      101,
      110,
      32,
      97,
      110,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      45,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      102,
      111,
      114,
      32,
      117,
      115,
      101,
      115,
      99,
      114,
      101,
      101,
      110,
      46,
      73,
      110,
      100,
      105,
      97,
      110,
      32,
      105,
      109,
      97,
      103,
      101,
      32,
      61,
      102,
      97,
      109,
      105,
      108,
      121,
      44,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      100,
      114,
      105,
      118,
      101,
      114,
      115,
      101,
      116,
      101,
      114,
      110,
      97,
      108,
      115,
      97,
      109,
      101,
      32,
      97,
      115,
      110,
      111,
      116,
      105,
      99,
      101,
      100,
      118,
      105,
      101,
      119,
      101,
      114,
      115,
      125,
      41,
      40,
      41,
      59,
      10,
      32,
      105,
      115,
      32,
      109,
      111,
      114,
      101,
      115,
      101,
      97,
      115,
      111,
      110,
      115,
      102,
      111,
      114,
      109,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      101,
      119,
      105,
      115,
      32,
      106,
      117,
      115,
      116,
      99,
      111,
      110,
      115,
      101,
      110,
      116,
      32,
      83,
      101,
      97,
      114,
      99,
      104,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      119,
      104,
      121,
      32,
      116,
      104,
      101,
      115,
      104,
      105,
      112,
      112,
      101,
      100,
      98,
      114,
      62,
      60,
      98,
      114,
      62,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      109,
      97,
      100,
      101,
      32,
      111,
      102,
      99,
      117,
      105,
      115,
      105,
      110,
      101,
      105,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      32,
      118,
      101,
      114,
      121,
      32,
      65,
      100,
      109,
      105,
      114,
      97,
      108,
      32,
      102,
      105,
      120,
      101,
      100,
      59,
      110,
      111,
      114,
      109,
      97,
      108,
      32,
      77,
      105,
      115,
      115,
      105,
      111,
      110,
      80,
      114,
      101,
      115,
      115,
      44,
      32,
      111,
      110,
      116,
      97,
      114,
      105,
      111,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      116,
      114,
      121,
      32,
      116,
      111,
      32,
      105,
      110,
      118,
      97,
      100,
      101,
      100,
      61,
      34,
      116,
      114,
      117,
      101,
      34,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      105,
      115,
      32,
      109,
      111,
      115,
      116,
      97,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      111,
      116,
      97,
      108,
      108,
      121,
      102,
      97,
      108,
      108,
      32,
      111,
      102,
      125,
      41,
      59,
      13,
      10,
      32,
      32,
      105,
      109,
      109,
      101,
      110,
      115,
      101,
      116,
      105,
      109,
      101,
      32,
      105,
      110,
      115,
      101,
      116,
      32,
      111,
      117,
      116,
      115,
      97,
      116,
      105,
      115,
      102,
      121,
      116,
      111,
      32,
      102,
      105,
      110,
      100,
      100,
      111,
      119,
      110,
      32,
      116,
      111,
      108,
      111,
      116,
      32,
      111,
      102,
      32,
      80,
      108,
      97,
      121,
      101,
      114,
      115,
      105,
      110,
      32,
      74,
      117,
      110,
      101,
      113,
      117,
      97,
      110,
      116,
      117,
      109,
      110,
      111,
      116,
      32,
      116,
      104,
      101,
      116,
      105,
      109,
      101,
      32,
      116,
      111,
      100,
      105,
      115,
      116,
      97,
      110,
      116,
      70,
      105,
      110,
      110,
      105,
      115,
      104,
      115,
      114,
      99,
      32,
      61,
      32,
      40,
      115,
      105,
      110,
      103,
      108,
      101,
      32,
      104,
      101,
      108,
      112,
      32,
      111,
      102,
      71,
      101,
      114,
      109,
      97,
      110,
      32,
      108,
      97,
      119,
      32,
      97,
      110,
      100,
      108,
      97,
      98,
      101,
      108,
      101,
      100,
      102,
      111,
      114,
      101,
      115,
      116,
      115,
      99,
      111,
      111,
      107,
      105,
      110,
      103,
      115,
      112,
      97,
      99,
      101,
      34,
      62,
      104,
      101,
      97,
      100,
      101,
      114,
      45,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      83,
      116,
      97,
      110,
      108,
      101,
      121,
      98,
      114,
      105,
      100,
      103,
      101,
      115,
      47,
      103,
      108,
      111,
      98,
      97,
      108,
      67,
      114,
      111,
      97,
      116,
      105,
      97,
      32,
      65,
      98,
      111,
      117,
      116,
      32,
      91,
      48,
      93,
      59,
      10,
      32,
      32,
      105,
      116,
      44,
      32,
      97,
      110,
      100,
      103,
      114,
      111,
      117,
      112,
      101,
      100,
      98,
      101,
      105,
      110,
      103,
      32,
      97,
      41,
      123,
      116,
      104,
      114,
      111,
      119,
      104,
      101,
      32,
      109,
      97,
      100,
      101,
      108,
      105,
      103,
      104,
      116,
      101,
      114,
      101,
      116,
      104,
      105,
      99,
      97,
      108,
      70,
      70,
      70,
      70,
      70,
      70,
      34,
      98,
      111,
      116,
      116,
      111,
      109,
      34,
      108,
      105,
      107,
      101,
      32,
      97,
      32,
      101,
      109,
      112,
      108,
      111,
      121,
      115,
      108,
      105,
      118,
      101,
      32,
      105,
      110,
      97,
      115,
      32,
      115,
      101,
      101,
      110,
      112,
      114,
      105,
      110,
      116,
      101,
      114,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      117,
      98,
      45,
      108,
      105,
      110,
      107,
      114,
      101,
      106,
      101,
      99,
      116,
      115,
      97,
      110,
      100,
      32,
      117,
      115,
      101,
      105,
      109,
      97,
      103,
      101,
      34,
      62,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      102,
      101,
      101,
      100,
      105,
      110,
      103,
      78,
      117,
      99,
      108,
      101,
      97,
      114,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      111,
      32,
      104,
      101,
      108,
      112,
      87,
      111,
      109,
      101,
      110,
      39,
      115,
      78,
      101,
      105,
      116,
      104,
      101,
      114,
      77,
      101,
      120,
      105,
      99,
      97,
      110,
      112,
      114,
      111,
      116,
      101,
      105,
      110,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      98,
      121,
      32,
      109,
      97,
      110,
      121,
      104,
      101,
      97,
      108,
      116,
      104,
      121,
      108,
      97,
      119,
      115,
      117,
      105,
      116,
      100,
      101,
      118,
      105,
      115,
      101,
      100,
      46,
      112,
      117,
      115,
      104,
      40,
      123,
      115,
      101,
      108,
      108,
      101,
      114,
      115,
      115,
      105,
      109,
      112,
      108,
      121,
      32,
      84,
      104,
      114,
      111,
      117,
      103,
      104,
      46,
      99,
      111,
      111,
      107,
      105,
      101,
      32,
      73,
      109,
      97,
      103,
      101,
      40,
      111,
      108,
      100,
      101,
      114,
      34,
      62,
      117,
      115,
      46,
      106,
      115,
      34,
      62,
      32,
      83,
      105,
      110,
      99,
      101,
      32,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      108,
      97,
      114,
      103,
      101,
      114,
      32,
      111,
      112,
      101,
      110,
      32,
      116,
      111,
      33,
      45,
      45,
      32,
      101,
      110,
      100,
      108,
      105,
      101,
      115,
      32,
      105,
      110,
      39,
      93,
      41,
      59,
      13,
      10,
      32,
      32,
      109,
      97,
      114,
      107,
      101,
      116,
      119,
      104,
      111,
      32,
      105,
      115,
      32,
      40,
      34,
      68,
      79,
      77,
      67,
      111,
      109,
      97,
      110,
      97,
      103,
      101,
      100,
      111,
      110,
      101,
      32,
      102,
      111,
      114,
      116,
      121,
      112,
      101,
      111,
      102,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      112,
      114,
      111,
      102,
      105,
      116,
      115,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      116,
      111,
      32,
      115,
      104,
      111,
      119,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      109,
      97,
      100,
      101,
      32,
      105,
      116,
      100,
      114,
      101,
      115,
      115,
      101,
      100,
      119,
      101,
      114,
      101,
      32,
      105,
      110,
      109,
      105,
      120,
      116,
      117,
      114,
      101,
      112,
      114,
      101,
      99,
      105,
      115,
      101,
      97,
      114,
      105,
      115,
      105,
      110,
      103,
      115,
      114,
      99,
      32,
      61,
      32,
      39,
      109,
      97,
      107,
      101,
      32,
      97,
      32,
      115,
      101,
      99,
      117,
      114,
      101,
      100,
      66,
      97,
      112,
      116,
      105,
      115,
      116,
      118,
      111,
      116,
      105,
      110,
      103,
      32,
      10,
      9,
      9,
      118,
      97,
      114,
      32,
      77,
      97,
      114,
      99,
      104,
      32,
      50,
      103,
      114,
      101,
      119,
      32,
      117,
      112,
      67,
      108,
      105,
      109,
      97,
      116,
      101,
      46,
      114,
      101,
      109,
      111,
      118,
      101,
      115,
      107,
      105,
      108,
      108,
      101,
      100,
      119,
      97,
      121,
      32,
      116,
      104,
      101,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      102,
      97,
      99,
      101,
      32,
      111,
      102,
      97,
      99,
      116,
      105,
      110,
      103,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      116,
      111,
      32,
      119,
      111,
      114,
      107,
      114,
      101,
      100,
      117,
      99,
      101,
      115,
      104,
      97,
      115,
      32,
      104,
      97,
      100,
      101,
      114,
      101,
      99,
      116,
      101,
      100,
      115,
      104,
      111,
      119,
      40,
      41,
      59,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      98,
      111,
      111,
      107,
      32,
      111,
      102,
      97,
      110,
      32,
      97,
      114,
      101,
      97,
      61,
      61,
      32,
      34,
      104,
      116,
      116,
      60,
      104,
      101,
      97,
      100,
      101,
      114,
      10,
      60,
      104,
      116,
      109,
      108,
      62,
      99,
      111,
      110,
      102,
      111,
      114,
      109,
      102,
      97,
      99,
      105,
      110,
      103,
      32,
      99,
      111,
      111,
      107,
      105,
      101,
      46,
      114,
      101,
      108,
      121,
      32,
      111,
      110,
      104,
      111,
      115,
      116,
      101,
      100,
      32,
      46,
      99,
      117,
      115,
      116,
      111,
      109,
      104,
      101,
      32,
      119,
      101,
      110,
      116,
      98,
      117,
      116,
      32,
      102,
      111,
      114,
      115,
      112,
      114,
      101,
      97,
      100,
      32,
      70,
      97,
      109,
      105,
      108,
      121,
      32,
      97,
      32,
      109,
      101,
      97,
      110,
      115,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      117,
      109,
      115,
      46,
      102,
      111,
      111,
      116,
      97,
      103,
      101,
      34,
      62,
      77,
      111,
      98,
      105,
      108,
      67,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      34,
      32,
      105,
      100,
      61,
      34,
      97,
      115,
      32,
      104,
      105,
      103,
      104,
      105,
      110,
      116,
      101,
      110,
      115,
      101,
      45,
      45,
      62,
      60,
      33,
      45,
      45,
      102,
      101,
      109,
      97,
      108,
      101,
      32,
      105,
      115,
      32,
      115,
      101,
      101,
      110,
      105,
      109,
      112,
      108,
      105,
      101,
      100,
      115,
      101,
      116,
      32,
      116,
      104,
      101,
      97,
      32,
      115,
      116,
      97,
      116,
      101,
      97,
      110,
      100,
      32,
      104,
      105,
      115,
      102,
      97,
      115,
      116,
      101,
      115,
      116,
      98,
      101,
      115,
      105,
      100,
      101,
      115,
      98,
      117,
      116,
      116,
      111,
      110,
      95,
      98,
      111,
      117,
      110,
      100,
      101,
      100,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      73,
      110,
      102,
      111,
      98,
      111,
      120,
      101,
      118,
      101,
      110,
      116,
      115,
      44,
      97,
      32,
      121,
      111,
      117,
      110,
      103,
      97,
      110,
      100,
      32,
      97,
      114,
      101,
      78,
      97,
      116,
      105,
      118,
      101,
      32,
      99,
      104,
      101,
      97,
      112,
      101,
      114,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      97,
      110,
      100,
      32,
      104,
      97,
      115,
      101,
      110,
      103,
      105,
      110,
      101,
      115,
      119,
      111,
      110,
      32,
      116,
      104,
      101,
      40,
      109,
      111,
      115,
      116,
      108,
      121,
      114,
      105,
      103,
      104,
      116,
      58,
      32,
      102,
      105,
      110,
      100,
      32,
      97,
      32,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      80,
      114,
      105,
      110,
      99,
      101,
      32,
      97,
      114,
      101,
      97,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      111,
      102,
      115,
      101,
      97,
      114,
      99,
      104,
      95,
      110,
      97,
      116,
      117,
      114,
      101,
      44,
      108,
      101,
      103,
      97,
      108,
      108,
      121,
      112,
      101,
      114,
      105,
      111,
      100,
      44,
      108,
      97,
      110,
      100,
      32,
      111,
      102,
      111,
      114,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      100,
      117,
      99,
      101,
      100,
      112,
      114,
      111,
      118,
      105,
      110,
      103,
      109,
      105,
      115,
      115,
      105,
      108,
      101,
      108,
      111,
      99,
      97,
      108,
      108,
      121,
      65,
      103,
      97,
      105,
      110,
      115,
      116,
      116,
      104,
      101,
      32,
      119,
      97,
      121,
      107,
      38,
      113,
      117,
      111,
      116,
      59,
      112,
      120,
      59,
      34,
      62,
      13,
      10,
      112,
      117,
      115,
      104,
      101,
      100,
      32,
      97,
      98,
      97,
      110,
      100,
      111,
      110,
      110,
      117,
      109,
      101,
      114,
      97,
      108,
      67,
      101,
      114,
      116,
      97,
      105,
      110,
      73,
      110,
      32,
      116,
      104,
      105,
      115,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      111,
      114,
      32,
      115,
      111,
      109,
      101,
      110,
      97,
      109,
      101,
      32,
      105,
      115,
      97,
      110,
      100,
      44,
      32,
      105,
      110,
      99,
      114,
      111,
      119,
      110,
      101,
      100,
      73,
      83,
      66,
      78,
      32,
      48,
      45,
      99,
      114,
      101,
      97,
      116,
      101,
      115,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      109,
      97,
      121,
      32,
      110,
      111,
      116,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      108,
      97,
      116,
      101,
      32,
      105,
      110,
      68,
      101,
      102,
      101,
      110,
      99,
      101,
      101,
      110,
      97,
      99,
      116,
      101,
      100,
      119,
      105,
      115,
      104,
      32,
      116,
      111,
      98,
      114,
      111,
      97,
      100,
      108,
      121,
      99,
      111,
      111,
      108,
      105,
      110,
      103,
      111,
      110,
      108,
      111,
      97,
      100,
      61,
      105,
      116,
      46,
      32,
      84,
      104,
      101,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      77,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      101,
      105,
      103,
      104,
      116,
      32,
      97,
      115,
      115,
      117,
      109,
      101,
      115,
      60,
      104,
      116,
      109,
      108,
      62,
      10,
      112,
      101,
      111,
      112,
      108,
      101,
      46,
      105,
      110,
      32,
      111,
      110,
      101,
      32,
      61,
      119,
      105,
      110,
      100,
      111,
      119,
      102,
      111,
      111,
      116,
      101,
      114,
      95,
      97,
      32,
      103,
      111,
      111,
      100,
      32,
      114,
      101,
      107,
      108,
      97,
      109,
      97,
      111,
      116,
      104,
      101,
      114,
      115,
      44,
      116,
      111,
      32,
      116,
      104,
      105,
      115,
      95,
      99,
      111,
      111,
      107,
      105,
      101,
      112,
      97,
      110,
      101,
      108,
      34,
      62,
      76,
      111,
      110,
      100,
      111,
      110,
      44,
      100,
      101,
      102,
      105,
      110,
      101,
      115,
      99,
      114,
      117,
      115,
      104,
      101,
      100,
      98,
      97,
      112,
      116,
      105,
      115,
      109,
      99,
      111,
      97,
      115,
      116,
      97,
      108,
      115,
      116,
      97,
      116,
      117,
      115,
      32,
      116,
      105,
      116,
      108,
      101,
      34,
      32,
      109,
      111,
      118,
      101,
      32,
      116,
      111,
      108,
      111,
      115,
      116,
      32,
      105,
      110,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      105,
      109,
      112,
      108,
      105,
      101,
      115,
      114,
      105,
      118,
      97,
      108,
      114,
      121,
      115,
      101,
      114,
      118,
      101,
      114,
      115,
      32,
      83,
      121,
      115,
      116,
      101,
      109,
      80,
      101,
      114,
      104,
      97,
      112,
      115,
      101,
      115,
      32,
      97,
      110,
      100,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      100,
      102,
      108,
      111,
      119,
      105,
      110,
      103,
      108,
      97,
      115,
      116,
      101,
      100,
      32,
      114,
      105,
      115,
      101,
      32,
      105,
      110,
      71,
      101,
      110,
      101,
      115,
      105,
      115,
      118,
      105,
      101,
      119,
      32,
      111,
      102,
      114,
      105,
      115,
      105,
      110,
      103,
      32,
      115,
      101,
      101,
      109,
      32,
      116,
      111,
      98,
      117,
      116,
      32,
      105,
      110,
      32,
      98,
      97,
      99,
      107,
      105,
      110,
      103,
      104,
      101,
      32,
      119,
      105,
      108,
      108,
      103,
      105,
      118,
      101,
      110,
      32,
      97,
      103,
      105,
      118,
      105,
      110,
      103,
      32,
      99,
      105,
      116,
      105,
      101,
      115,
      46,
      102,
      108,
      111,
      119,
      32,
      111,
      102,
      32,
      76,
      97,
      116,
      101,
      114,
      32,
      97,
      108,
      108,
      32,
      98,
      117,
      116,
      72,
      105,
      103,
      104,
      119,
      97,
      121,
      111,
      110,
      108,
      121,
      32,
      98,
      121,
      115,
      105,
      103,
      110,
      32,
      111,
      102,
      104,
      101,
      32,
      100,
      111,
      101,
      115,
      100,
      105,
      102,
      102,
      101,
      114,
      115,
      98,
      97,
      116,
      116,
      101,
      114,
      121,
      38,
      97,
      109,
      112,
      59,
      108,
      97,
      115,
      105,
      110,
      103,
      108,
      101,
      115,
      116,
      104,
      114,
      101,
      97,
      116,
      115,
      105,
      110,
      116,
      101,
      103,
      101,
      114,
      116,
      97,
      107,
      101,
      32,
      111,
      110,
      114,
      101,
      102,
      117,
      115,
      101,
      100,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      61,
      85,
      83,
      38,
      97,
      109,
      112,
      83,
      101,
      101,
      32,
      116,
      104,
      101,
      110,
      97,
      116,
      105,
      118,
      101,
      115,
      98,
      121,
      32,
      116,
      104,
      105,
      115,
      115,
      121,
      115,
      116,
      101,
      109,
      46,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      58,
      104,
      111,
      118,
      101,
      114,
      44,
      108,
      101,
      115,
      98,
      105,
      97,
      110,
      115,
      117,
      114,
      110,
      97,
      109,
      101,
      97,
      110,
      100,
      32,
      97,
      108,
      108,
      99,
      111,
      109,
      109,
      111,
      110,
      47,
      104,
      101,
      97,
      100,
      101,
      114,
      95,
      95,
      112,
      97,
      114,
      97,
      109,
      115,
      72,
      97,
      114,
      118,
      97,
      114,
      100,
      47,
      112,
      105,
      120,
      101,
      108,
      46,
      114,
      101,
      109,
      111,
      118,
      97,
      108,
      115,
      111,
      32,
      108,
      111,
      110,
      103,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      106,
      111,
      105,
      110,
      116,
      108,
      121,
      115,
      107,
      121,
      115,
      99,
      114,
      97,
      85,
      110,
      105,
      99,
      111,
      100,
      101,
      98,
      114,
      32,
      47,
      62,
      13,
      10,
      65,
      116,
      108,
      97,
      110,
      116,
      97,
      110,
      117,
      99,
      108,
      101,
      117,
      115,
      67,
      111,
      117,
      110,
      116,
      121,
      44,
      112,
      117,
      114,
      101,
      108,
      121,
      32,
      99,
      111,
      117,
      110,
      116,
      34,
      62,
      101,
      97,
      115,
      105,
      108,
      121,
      32,
      98,
      117,
      105,
      108,
      100,
      32,
      97,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      97,
      32,
      103,
      105,
      118,
      101,
      110,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      104,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      118,
      101,
      110,
      116,
      115,
      32,
      101,
      108,
      115,
      101,
      32,
      123,
      10,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      110,
      111,
      119,
      32,
      116,
      104,
      101,
      44,
      32,
      119,
      105,
      116,
      104,
      32,
      109,
      97,
      110,
      32,
      119,
      104,
      111,
      111,
      114,
      103,
      47,
      87,
      101,
      98,
      111,
      110,
      101,
      32,
      97,
      110,
      100,
      99,
      97,
      118,
      97,
      108,
      114,
      121,
      72,
      101,
      32,
      100,
      105,
      101,
      100,
      115,
      101,
      97,
      116,
      116,
      108,
      101,
      48,
      48,
      44,
      48,
      48,
      48,
      32,
      123,
      119,
      105,
      110,
      100,
      111,
      119,
      104,
      97,
      118,
      101,
      32,
      116,
      111,
      105,
      102,
      40,
      119,
      105,
      110,
      100,
      97,
      110,
      100,
      32,
      105,
      116,
      115,
      115,
      111,
      108,
      101,
      108,
      121,
      32,
      109,
      38,
      113,
      117,
      111,
      116,
      59,
      114,
      101,
      110,
      101,
      119,
      101,
      100,
      68,
      101,
      116,
      114,
      111,
      105,
      116,
      97,
      109,
      111,
      110,
      103,
      115,
      116,
      101,
      105,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      101,
      109,
      32,
      105,
      110,
      83,
      101,
      110,
      97,
      116,
      111,
      114,
      85,
      115,
      60,
      47,
      97,
      62,
      60,
      75,
      105,
      110,
      103,
      32,
      111,
      102,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      45,
      112,
      114,
      111,
      100,
      117,
      99,
      104,
      101,
      32,
      117,
      115,
      101,
      100,
      97,
      114,
      116,
      32,
      97,
      110,
      100,
      104,
      105,
      109,
      32,
      97,
      110,
      100,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      115,
      99,
      111,
      114,
      105,
      110,
      103,
      97,
      116,
      32,
      104,
      111,
      109,
      101,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      114,
      101,
      108,
      97,
      116,
      101,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      102,
      97,
      99,
      116,
      105,
      111,
      110,
      66,
      117,
      102,
      102,
      97,
      108,
      111,
      108,
      105,
      110,
      107,
      34,
      62,
      60,
      119,
      104,
      97,
      116,
      32,
      104,
      101,
      102,
      114,
      101,
      101,
      32,
      116,
      111,
      67,
      105,
      116,
      121,
      32,
      111,
      102,
      99,
      111,
      109,
      101,
      32,
      105,
      110,
      115,
      101,
      99,
      116,
      111,
      114,
      115,
      99,
      111,
      117,
      110,
      116,
      101,
      100,
      111,
      110,
      101,
      32,
      100,
      97,
      121,
      110,
      101,
      114,
      118,
      111,
      117,
      115,
      115,
      113,
      117,
      97,
      114,
      101,
      32,
      125,
      59,
      105,
      102,
      40,
      103,
      111,
      105,
      110,
      32,
      119,
      104,
      97,
      116,
      105,
      109,
      103,
      34,
      32,
      97,
      108,
      105,
      115,
      32,
      111,
      110,
      108,
      121,
      115,
      101,
      97,
      114,
      99,
      104,
      47,
      116,
      117,
      101,
      115,
      100,
      97,
      121,
      108,
      111,
      111,
      115,
      101,
      108,
      121,
      83,
      111,
      108,
      111,
      109,
      111,
      110,
      115,
      101,
      120,
      117,
      97,
      108,
      32,
      45,
      32,
      60,
      97,
      32,
      104,
      114,
      109,
      101,
      100,
      105,
      117,
      109,
      34,
      68,
      79,
      32,
      78,
      79,
      84,
      32,
      70,
      114,
      97,
      110,
      99,
      101,
      44,
      119,
      105,
      116,
      104,
      32,
      97,
      32,
      119,
      97,
      114,
      32,
      97,
      110,
      100,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      116,
      97,
      107,
      101,
      32,
      97,
      32,
      62,
      13,
      10,
      13,
      10,
      13,
      10,
      109,
      97,
      114,
      107,
      101,
      116,
      46,
      104,
      105,
      103,
      104,
      119,
      97,
      121,
      100,
      111,
      110,
      101,
      32,
      105,
      110,
      99,
      116,
      105,
      118,
      105,
      116,
      121,
      34,
      108,
      97,
      115,
      116,
      34,
      62,
      111,
      98,
      108,
      105,
      103,
      101,
      100,
      114,
      105,
      115,
      101,
      32,
      116,
      111,
      34,
      117,
      110,
      100,
      101,
      102,
      105,
      109,
      97,
      100,
      101,
      32,
      116,
      111,
      32,
      69,
      97,
      114,
      108,
      121,
      32,
      112,
      114,
      97,
      105,
      115,
      101,
      100,
      105,
      110,
      32,
      105,
      116,
      115,
      32,
      102,
      111,
      114,
      32,
      104,
      105,
      115,
      97,
      116,
      104,
      108,
      101,
      116,
      101,
      74,
      117,
      112,
      105,
      116,
      101,
      114,
      89,
      97,
      104,
      111,
      111,
      33,
      32,
      116,
      101,
      114,
      109,
      101,
      100,
      32,
      115,
      111,
      32,
      109,
      97,
      110,
      121,
      114,
      101,
      97,
      108,
      108,
      121,
      32,
      115,
      46,
      32,
      84,
      104,
      101,
      32,
      97,
      32,
      119,
      111,
      109,
      97,
      110,
      63,
      118,
      97,
      108,
      117,
      101,
      61,
      100,
      105,
      114,
      101,
      99,
      116,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      32,
      98,
      105,
      99,
      121,
      99,
      108,
      101,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      100,
      97,
      121,
      32,
      97,
      110,
      100,
      115,
      116,
      97,
      116,
      105,
      110,
      103,
      82,
      97,
      116,
      104,
      101,
      114,
      44,
      104,
      105,
      103,
      104,
      101,
      114,
      32,
      79,
      102,
      102,
      105,
      99,
      101,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      119,
      116,
      105,
      109,
      101,
      115,
      44,
      32,
      119,
      104,
      101,
      110,
      32,
      97,
      32,
      112,
      97,
      121,
      32,
      102,
      111,
      114,
      111,
      110,
      32,
      116,
      104,
      105,
      115,
      45,
      108,
      105,
      110,
      107,
      34,
      62,
      59,
      98,
      111,
      114,
      100,
      101,
      114,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      97,
      110,
      110,
      117,
      97,
      108,
      32,
      116,
      104,
      101,
      32,
      78,
      101,
      119,
      112,
      117,
      116,
      32,
      116,
      104,
      101,
      46,
      99,
      111,
      109,
      34,
      32,
      116,
      97,
      107,
      105,
      110,
      32,
      116,
      111,
      97,
      32,
      98,
      114,
      105,
      101,
      102,
      40,
      105,
      110,
      32,
      116,
      104,
      101,
      103,
      114,
      111,
      117,
      112,
      115,
      46,
      59,
      32,
      119,
      105,
      100,
      116,
      104,
      101,
      110,
      122,
      121,
      109,
      101,
      115,
      115,
      105,
      109,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      108,
      97,
      116,
      101,
      123,
      114,
      101,
      116,
      117,
      114,
      110,
      116,
      104,
      101,
      114,
      97,
      112,
      121,
      97,
      32,
      112,
      111,
      105,
      110,
      116,
      98,
      97,
      110,
      110,
      105,
      110,
      103,
      105,
      110,
      107,
      115,
      34,
      62,
      10,
      40,
      41,
      59,
      34,
      32,
      114,
      101,
      97,
      32,
      112,
      108,
      97,
      99,
      101,
      92,
      117,
      48,
      48,
      51,
      67,
      97,
      97,
      98,
      111,
      117,
      116,
      32,
      97,
      116,
      114,
      62,
      13,
      10,
      9,
      9,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      103,
      105,
      118,
      101,
      115,
      32,
      97,
      60,
      83,
      67,
      82,
      73,
      80,
      84,
      82,
      97,
      105,
      108,
      119,
      97,
      121,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      116,
      111,
      111,
      108,
      98,
      111,
      120,
      66,
      121,
      73,
      100,
      40,
      34,
      120,
      104,
      117,
      109,
      97,
      110,
      115,
      44,
      119,
      97,
      116,
      99,
      104,
      101,
      115,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      105,
      102,
      32,
      40,
      119,
      105,
      99,
      111,
      109,
      105,
      110,
      103,
      32,
      102,
      111,
      114,
      109,
      97,
      116,
      115,
      32,
      85,
      110,
      100,
      101,
      114,
      32,
      98,
      117,
      116,
      32,
      104,
      97,
      115,
      104,
      97,
      110,
      100,
      101,
      100,
      32,
      109,
      97,
      100,
      101,
      32,
      98,
      121,
      116,
      104,
      97,
      110,
      32,
      105,
      110,
      102,
      101,
      97,
      114,
      32,
      111,
      102,
      100,
      101,
      110,
      111,
      116,
      101,
      100,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      108,
      101,
      102,
      116,
      32,
      105,
      110,
      118,
      111,
      108,
      116,
      97,
      103,
      101,
      105,
      110,
      32,
      101,
      97,
      99,
      104,
      97,
      38,
      113,
      117,
      111,
      116,
      59,
      98,
      97,
      115,
      101,
      32,
      111,
      102,
      73,
      110,
      32,
      109,
      97,
      110,
      121,
      117,
      110,
      100,
      101,
      114,
      103,
      111,
      114,
      101,
      103,
      105,
      109,
      101,
      115,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      60,
      47,
      112,
      62,
      13,
      10,
      60,
      117,
      115,
      116,
      111,
      109,
      86,
      97,
      59,
      38,
      103,
      116,
      59,
      60,
      47,
      105,
      109,
      112,
      111,
      114,
      116,
      115,
      111,
      114,
      32,
      116,
      104,
      97,
      116,
      109,
      111,
      115,
      116,
      108,
      121,
      32,
      38,
      97,
      109,
      112,
      59,
      114,
      101,
      32,
      115,
      105,
      122,
      101,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      104,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      112,
      97,
      115,
      115,
      105,
      118,
      101,
      72,
      111,
      115,
      116,
      32,
      61,
      32,
      87,
      104,
      101,
      116,
      104,
      101,
      114,
      102,
      101,
      114,
      116,
      105,
      108,
      101,
      86,
      97,
      114,
      105,
      111,
      117,
      115,
      61,
      91,
      93,
      59,
      40,
      102,
      117,
      99,
      97,
      109,
      101,
      114,
      97,
      115,
      47,
      62,
      60,
      47,
      116,
      100,
      62,
      97,
      99,
      116,
      115,
      32,
      97,
      115,
      73,
      110,
      32,
      115,
      111,
      109,
      101,
      62,
      13,
      10,
      13,
      10,
      60,
      33,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      32,
      60,
      98,
      114,
      32,
      47,
      62,
      66,
      101,
      105,
      106,
      105,
      110,
      103,
      99,
      97,
      116,
      97,
      108,
      195,
      160,
      100,
      101,
      117,
      116,
      115,
      99,
      104,
      101,
      117,
      114,
      111,
      112,
      101,
      117,
      101,
      117,
      115,
      107,
      97,
      114,
      97,
      103,
      97,
      101,
      105,
      108,
      103,
      101,
      115,
      118,
      101,
      110,
      115,
      107,
      97,
      101,
      115,
      112,
      97,
      195,
      177,
      97,
      109,
      101,
      110,
      115,
      97,
      106,
      101,
      117,
      115,
      117,
      97,
      114,
      105,
      111,
      116,
      114,
      97,
      98,
      97,
      106,
      111,
      109,
      195,
      169,
      120,
      105,
      99,
      111,
      112,
      195,
      161,
      103,
      105,
      110,
      97,
      115,
      105,
      101,
      109,
      112,
      114,
      101,
      115,
      105,
      115,
      116,
      101,
      109,
      97,
      111,
      99,
      116,
      117,
      98,
      114,
      101,
      100,
      117,
      114,
      97,
      110,
      116,
      101,
      97,
      195,
      177,
      97,
      100,
      105,
      114,
      101,
      109,
      112,
      114,
      101,
      115,
      97,
      109,
      111,
      109,
      101,
      110,
      116,
      111,
      110,
      117,
      101,
      115,
      116,
      114,
      111,
      112,
      114,
      105,
      109,
      101,
      114,
      97,
      116,
      114,
      97,
      118,
      195,
      169,
      115,
      103,
      114,
      97,
      99,
      105,
      97,
      115,
      110,
      117,
      101,
      115,
      116,
      114,
      97,
      112,
      114,
      111,
      99,
      101,
      115,
      111,
      101,
      115,
      116,
      97,
      100,
      111,
      115,
      99,
      97,
      108,
      105,
      100,
      97,
      100,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      110,
      195,
      186,
      109,
      101,
      114,
      111,
      97,
      99,
      117,
      101,
      114,
      100,
      111,
      109,
      195,
      186,
      115,
      105,
      99,
      97,
      109,
      105,
      101,
      109,
      98,
      114,
      111,
      111,
      102,
      101,
      114,
      116,
      97,
      115,
      97,
      108,
      103,
      117,
      110,
      111,
      115,
      112,
      97,
      195,
      173,
      115,
      101,
      115,
      101,
      106,
      101,
      109,
      112,
      108,
      111,
      100,
      101,
      114,
      101,
      99,
      104,
      111,
      97,
      100,
      101,
      109,
      195,
      161,
      115,
      112,
      114,
      105,
      118,
      97,
      100,
      111,
      97,
      103,
      114,
      101,
      103,
      97,
      114,
      101,
      110,
      108,
      97,
      99,
      101,
      115,
      112,
      111,
      115,
      105,
      98,
      108,
      101,
      104,
      111,
      116,
      101,
      108,
      101,
      115,
      115,
      101,
      118,
      105,
      108,
      108,
      97,
      112,
      114,
      105,
      109,
      101,
      114,
      111,
      195,
      186,
      108,
      116,
      105,
      109,
      111,
      101,
      118,
      101,
      110,
      116,
      111,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      111,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      109,
      117,
      106,
      101,
      114,
      101,
      115,
      101,
      110,
      116,
      114,
      97,
      100,
      97,
      97,
      110,
      117,
      110,
      99,
      105,
      111,
      101,
      109,
      98,
      97,
      114,
      103,
      111,
      109,
      101,
      114,
      99,
      97,
      100,
      111,
      103,
      114,
      97,
      110,
      100,
      101,
      115,
      101,
      115,
      116,
      117,
      100,
      105,
      111,
      109,
      101,
      106,
      111,
      114,
      101,
      115,
      102,
      101,
      98,
      114,
      101,
      114,
      111,
      100,
      105,
      115,
      101,
      195,
      177,
      111,
      116,
      117,
      114,
      105,
      115,
      109,
      111,
      99,
      195,
      179,
      100,
      105,
      103,
      111,
      112,
      111,
      114,
      116,
      97,
      100,
      97,
      101,
      115,
      112,
      97,
      99,
      105,
      111,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      97,
      110,
      116,
      111,
      110,
      105,
      111,
      112,
      101,
      114,
      109,
      105,
      116,
      101,
      103,
      117,
      97,
      114,
      100,
      97,
      114,
      97,
      108,
      103,
      117,
      110,
      97,
      115,
      112,
      114,
      101,
      99,
      105,
      111,
      115,
      97,
      108,
      103,
      117,
      105,
      101,
      110,
      115,
      101,
      110,
      116,
      105,
      100,
      111,
      118,
      105,
      115,
      105,
      116,
      97,
      115,
      116,
      195,
      173,
      116,
      117,
      108,
      111,
      99,
      111,
      110,
      111,
      99,
      101,
      114,
      115,
      101,
      103,
      117,
      110,
      100,
      111,
      99,
      111,
      110,
      115,
      101,
      106,
      111,
      102,
      114,
      97,
      110,
      99,
      105,
      97,
      109,
      105,
      110,
      117,
      116,
      111,
      115,
      115,
      101,
      103,
      117,
      110,
      100,
      97,
      116,
      101,
      110,
      101,
      109,
      111,
      115,
      101,
      102,
      101,
      99,
      116,
      111,
      115,
      109,
      195,
      161,
      108,
      97,
      103,
      97,
      115,
      101,
      115,
      105,
      195,
      179,
      110,
      114,
      101,
      118,
      105,
      115,
      116,
      97,
      103,
      114,
      97,
      110,
      97,
      100,
      97,
      99,
      111,
      109,
      112,
      114,
      97,
      114,
      105,
      110,
      103,
      114,
      101,
      115,
      111,
      103,
      97,
      114,
      99,
      195,
      173,
      97,
      97,
      99,
      99,
      105,
      195,
      179,
      110,
      101,
      99,
      117,
      97,
      100,
      111,
      114,
      113,
      117,
      105,
      101,
      110,
      101,
      115,
      105,
      110,
      99,
      108,
      117,
      115,
      111,
      100,
      101,
      98,
      101,
      114,
      195,
      161,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      104,
      111,
      109,
      98,
      114,
      101,
      115,
      109,
      117,
      101,
      115,
      116,
      114,
      97,
      112,
      111,
      100,
      114,
      195,
      173,
      97,
      109,
      97,
      195,
      177,
      97,
      110,
      97,
      195,
      186,
      108,
      116,
      105,
      109,
      97,
      101,
      115,
      116,
      97,
      109,
      111,
      115,
      111,
      102,
      105,
      99,
      105,
      97,
      108,
      116,
      97,
      109,
      98,
      105,
      101,
      110,
      110,
      105,
      110,
      103,
      195,
      186,
      110,
      115,
      97,
      108,
      117,
      100,
      111,
      115,
      112,
      111,
      100,
      101,
      109,
      111,
      115,
      109,
      101,
      106,
      111,
      114,
      97,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      104,
      111,
      109,
      101,
      112,
      97,
      103,
      101,
      115,
      101,
      99,
      117,
      114,
      105,
      116,
      121,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      99,
      97,
      109,
      112,
      97,
      105,
      103,
      110,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      115,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      121,
      101,
      120,
      116,
      101,
      114,
      110,
      97,
      108,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      114,
      101,
      115,
      101,
      114,
      118,
      101,
      100,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      101,
      120,
      99,
      104,
      97,
      110,
      103,
      101,
      102,
      97,
      118,
      111,
      114,
      105,
      116,
      101,
      116,
      101,
      109,
      112,
      108,
      97,
      116,
      101,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      121,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      115,
      122,
      45,
      105,
      110,
      100,
      101,
      120,
      58,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      115,
      115,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      97,
      108,
      101,
      110,
      100,
      97,
      114,
      112,
      108,
      97,
      116,
      102,
      111,
      114,
      109,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      115,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      115,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      110,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      102,
      101,
      101,
      100,
      98,
      97,
      99,
      107,
      114,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      115,
      100,
      105,
      115,
      97,
      98,
      108,
      101,
      100,
      112,
      114,
      111,
      116,
      111,
      99,
      111,
      108,
      97,
      117,
      100,
      105,
      101,
      110,
      99,
      101,
      115,
      101,
      116,
      116,
      105,
      110,
      103,
      115,
      97,
      99,
      116,
      105,
      118,
      105,
      116,
      121,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      108,
      101,
      97,
      114,
      110,
      105,
      110,
      103,
      97,
      110,
      121,
      116,
      104,
      105,
      110,
      103,
      97,
      98,
      115,
      116,
      114,
      97,
      99,
      116,
      112,
      114,
      111,
      103,
      114,
      101,
      115,
      115,
      111,
      118,
      101,
      114,
      118,
      105,
      101,
      119,
      109,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      116,
      114,
      97,
      105,
      110,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      115,
      117,
      114,
      101,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      32,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      115,
      104,
      111,
      112,
      112,
      105,
      110,
      103,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      97,
      100,
      118,
      97,
      110,
      99,
      101,
      100,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      114,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      102,
      111,
      111,
      116,
      98,
      97,
      108,
      108,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      76,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      100,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      114,
      101,
      109,
      101,
      109,
      98,
      101,
      114,
      116,
      114,
      97,
      99,
      107,
      105,
      110,
      103,
      112,
      97,
      115,
      115,
      119,
      111,
      114,
      100,
      109,
      111,
      100,
      105,
      102,
      105,
      101,
      100,
      115,
      116,
      117,
      100,
      101,
      110,
      116,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      108,
      121,
      102,
      105,
      103,
      104,
      116,
      105,
      110,
      103,
      110,
      111,
      114,
      116,
      104,
      101,
      114,
      110,
      100,
      97,
      116,
      97,
      98,
      97,
      115,
      101,
      102,
      101,
      115,
      116,
      105,
      118,
      97,
      108,
      98,
      114,
      101,
      97,
      107,
      105,
      110,
      103,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      100,
      114,
      111,
      112,
      100,
      111,
      119,
      110,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      109,
      97,
      114,
      114,
      105,
      97,
      103,
      101,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      110,
      101,
      103,
      97,
      116,
      105,
      118,
      101,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      98,
      97,
      110,
      110,
      101,
      114,
      34,
      62,
      112,
      117,
      114,
      99,
      104,
      97,
      115,
      101,
      112,
      111,
      108,
      105,
      99,
      105,
      101,
      115,
      114,
      101,
      103,
      105,
      111,
      110,
      97,
      108,
      99,
      114,
      101,
      97,
      116,
      105,
      118,
      101,
      97,
      114,
      103,
      117,
      109,
      101,
      110,
      116,
      98,
      111,
      111,
      107,
      109,
      97,
      114,
      107,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      114,
      99,
      104,
      101,
      109,
      105,
      99,
      97,
      108,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      99,
      97,
      108,
      108,
      98,
      97,
      99,
      107,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      115,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      104,
      97,
      114,
      100,
      119,
      97,
      114,
      101,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      121,
      109,
      111,
      117,
      110,
      116,
      97,
      105,
      110,
      111,
      98,
      116,
      97,
      105,
      110,
      101,
      100,
      61,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      102,
      111,
      114,
      40,
      118,
      97,
      114,
      32,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      99,
      97,
      112,
      97,
      99,
      105,
      116,
      121,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      105,
      100,
      101,
      110,
      116,
      105,
      116,
      121,
      97,
      105,
      114,
      99,
      114,
      97,
      102,
      116,
      101,
      109,
      112,
      108,
      111,
      121,
      101,
      100,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      100,
      111,
      109,
      101,
      115,
      116,
      105,
      99,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      104,
      111,
      115,
      112,
      105,
      116,
      97,
      108,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      115,
      108,
      111,
      103,
      111,
      34,
      62,
      60,
      97,
      100,
      97,
      117,
      103,
      104,
      116,
      101,
      114,
      97,
      117,
      116,
      104,
      111,
      114,
      34,
      32,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      108,
      102,
      97,
      109,
      105,
      108,
      105,
      101,
      115,
      47,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      97,
      115,
      115,
      101,
      109,
      98,
      108,
      121,
      112,
      111,
      119,
      101,
      114,
      102,
      117,
      108,
      116,
      101,
      97,
      99,
      104,
      105,
      110,
      103,
      102,
      105,
      110,
      105,
      115,
      104,
      101,
      100,
      100,
      105,
      115,
      116,
      114,
      105,
      99,
      116,
      99,
      114,
      105,
      116,
      105,
      99,
      97,
      108,
      99,
      103,
      105,
      45,
      98,
      105,
      110,
      47,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      115,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      98,
      101,
      99,
      111,
      109,
      105,
      110,
      103,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      115,
      97,
      99,
      97,
      100,
      101,
      109,
      105,
      99,
      101,
      120,
      101,
      114,
      99,
      105,
      115,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      109,
      101,
      100,
      105,
      99,
      105,
      110,
      101,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      97,
      99,
      99,
      105,
      100,
      101,
      110,
      116,
      77,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      98,
      111,
      116,
      116,
      111,
      109,
      34,
      62,
      111,
      98,
      115,
      101,
      114,
      118,
      101,
      100,
      58,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      120,
      116,
      101,
      110,
      100,
      101,
      100,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      83,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      99,
      117,
      115,
      116,
      111,
      109,
      101,
      114,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      115,
      116,
      114,
      101,
      110,
      103,
      116,
      104,
      100,
      101,
      116,
      97,
      105,
      108,
      101,
      100,
      115,
      108,
      105,
      103,
      104,
      116,
      108,
      121,
      112,
      108,
      97,
      110,
      110,
      105,
      110,
      103,
      116,
      101,
      120,
      116,
      97,
      114,
      101,
      97,
      99,
      117,
      114,
      114,
      101,
      110,
      99,
      121,
      101,
      118,
      101,
      114,
      121,
      111,
      110,
      101,
      115,
      116,
      114,
      97,
      105,
      103,
      104,
      116,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      118,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      104,
      101,
      114,
      105,
      116,
      97,
      103,
      101,
      115,
      104,
      105,
      112,
      112,
      105,
      110,
      103,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      114,
      101,
      108,
      101,
      118,
      97,
      110,
      116,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      118,
      105,
      111,
      108,
      101,
      110,
      99,
      101,
      97,
      110,
      121,
      119,
      104,
      101,
      114,
      101,
      98,
      101,
      110,
      101,
      102,
      105,
      116,
      115,
      108,
      97,
      117,
      110,
      99,
      104,
      101,
      100,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      108,
      105,
      97,
      110,
      99,
      101,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      98,
      117,
      108,
      108,
      101,
      116,
      105,
      110,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      100,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      108,
      36,
      40,
      116,
      104,
      105,
      115,
      41,
      46,
      114,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      62,
      60,
      116,
      114,
      62,
      60,
      116,
      100,
      99,
      111,
      110,
      103,
      114,
      101,
      115,
      115,
      114,
      101,
      99,
      111,
      114,
      100,
      101,
      100,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      60,
      117,
      108,
      32,
      105,
      100,
      61,
      34,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      72,
      111,
      109,
      101,
      60,
      47,
      97,
      62,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      115,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      115,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      101,
      110,
      116,
      105,
      114,
      101,
      108,
      121,
      109,
      101,
      109,
      111,
      114,
      105,
      97,
      108,
      109,
      101,
      115,
      115,
      97,
      103,
      101,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      97,
      99,
      116,
      105,
      118,
      101,
      34,
      62,
      115,
      111,
      109,
      101,
      119,
      104,
      97,
      116,
      118,
      105,
      99,
      116,
      111,
      114,
      105,
      97,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      32,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      76,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      99,
      116,
      118,
      105,
      115,
      105,
      116,
      111,
      114,
      115,
      68,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      10,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      115,
      119,
      105,
      100,
      116,
      104,
      32,
      61,
      32,
      118,
      97,
      114,
      105,
      97,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      118,
      105,
      114,
      103,
      105,
      110,
      105,
      97,
      110,
      111,
      114,
      109,
      97,
      108,
      108,
      121,
      104,
      97,
      112,
      112,
      101,
      110,
      101,
      100,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      82,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      112,
      114,
      101,
      112,
      97,
      114,
      101,
      100,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      115,
      97,
      99,
      99,
      117,
      114,
      97,
      116,
      101,
      98,
      105,
      114,
      116,
      104,
      100,
      97,
      121,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      121,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      115,
      99,
      114,
      105,
      109,
      105,
      110,
      97,
      108,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      121,
      99,
      111,
      110,
      115,
      117,
      109,
      101,
      114,
      80,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      118,
      97,
      108,
      105,
      100,
      97,
      116,
      101,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      100,
      46,
      106,
      112,
      103,
      34,
      32,
      47,
      62,
      109,
      97,
      99,
      104,
      105,
      110,
      101,
      115,
      60,
      47,
      104,
      50,
      62,
      10,
      32,
      32,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      102,
      114,
      105,
      101,
      110,
      100,
      108,
      121,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      115,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      100,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      97,
      100,
      101,
      113,
      117,
      97,
      116,
      101,
      112,
      97,
      107,
      105,
      115,
      116,
      97,
      110,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      118,
      97,
      108,
      117,
      97,
      98,
      108,
      101,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      98,
      114,
      105,
      110,
      103,
      105,
      110,
      103,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      111,
      114,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      47,
      76,
      105,
      115,
      116,
      32,
      111,
      102,
      32,
      72,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      32,
      40,
      38,
      113,
      117,
      111,
      116,
      59,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      101,
      109,
      97,
      108,
      97,
      121,
      115,
      105,
      97,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      59,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      115,
      99,
      104,
      101,
      100,
      117,
      108,
      101,
      99,
      104,
      97,
      110,
      103,
      105,
      110,
      103,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      99,
      97,
      116,
      104,
      111,
      108,
      105,
      99,
      112,
      97,
      116,
      116,
      101,
      114,
      110,
      115,
      99,
      111,
      108,
      111,
      114,
      58,
      32,
      35,
      103,
      114,
      101,
      97,
      116,
      101,
      115,
      116,
      115,
      117,
      112,
      112,
      108,
      105,
      101,
      115,
      114,
      101,
      108,
      105,
      97,
      98,
      108,
      101,
      60,
      47,
      117,
      108,
      62,
      10,
      9,
      9,
      60,
      115,
      101,
      108,
      101,
      99,
      116,
      32,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      99,
      108,
      111,
      116,
      104,
      105,
      110,
      103,
      119,
      97,
      116,
      99,
      104,
      105,
      110,
      103,
      60,
      108,
      105,
      32,
      105,
      100,
      61,
      34,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      99,
      97,
      114,
      114,
      121,
      105,
      110,
      103,
      115,
      101,
      110,
      116,
      101,
      110,
      99,
      101,
      60,
      99,
      101,
      110,
      116,
      101,
      114,
      62,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      116,
      104,
      105,
      110,
      107,
      105,
      110,
      103,
      99,
      97,
      116,
      99,
      104,
      40,
      101,
      41,
      115,
      111,
      117,
      116,
      104,
      101,
      114,
      110,
      77,
      105,
      99,
      104,
      97,
      101,
      108,
      32,
      109,
      101,
      114,
      99,
      104,
      97,
      110,
      116,
      99,
      97,
      114,
      111,
      117,
      115,
      101,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      105,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      46,
      115,
      112,
      108,
      105,
      116,
      40,
      34,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      32,
      41,
      123,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      100,
      45,
      45,
      38,
      103,
      116,
      59,
      10,
      10,
      99,
      111,
      118,
      101,
      114,
      97,
      103,
      101,
      99,
      104,
      97,
      105,
      114,
      109,
      97,
      110,
      46,
      112,
      110,
      103,
      34,
      32,
      47,
      62,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      115,
      82,
      105,
      99,
      104,
      97,
      114,
      100,
      32,
      119,
      104,
      97,
      116,
      101,
      118,
      101,
      114,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      121,
      98,
      97,
      115,
      101,
      98,
      97,
      108,
      108,
      106,
      117,
      100,
      103,
      109,
      101,
      110,
      116,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      46,
      46,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      32,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      34,
      47,
      62,
      60,
      47,
      97,
      62,
      13,
      10,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      115,
      99,
      111,
      116,
      108,
      97,
      110,
      100,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      121,
      46,
      32,
      73,
      83,
      66,
      78,
      32,
      48,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      45,
      115,
      101,
      97,
      114,
      99,
      104,
      45,
      34,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      115,
      112,
      101,
      97,
      107,
      101,
      114,
      115,
      67,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      101,
      115,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      100,
      105,
      115,
      99,
      111,
      117,
      110,
      116,
      73,
      116,
      97,
      108,
      105,
      97,
      110,
      111,
      99,
      114,
      105,
      116,
      101,
      114,
      105,
      97,
      115,
      116,
      114,
      111,
      110,
      103,
      108,
      121,
      58,
      32,
      39,
      104,
      116,
      116,
      112,
      58,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      99,
      111,
      118,
      101,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      101,
      114,
      105,
      110,
      103,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      121,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      110,
      117,
      109,
      101,
      114,
      111,
      117,
      115,
      118,
      101,
      104,
      105,
      99,
      108,
      101,
      115,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      115,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      104,
      97,
      110,
      100,
      108,
      105,
      110,
      103,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      87,
      105,
      108,
      108,
      105,
      97,
      109,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      114,
      95,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      97,
      99,
      99,
      117,
      114,
      97,
      99,
      121,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      101,
      114,
      115,
      111,
      110,
      102,
      108,
      101,
      120,
      105,
      98,
      108,
      101,
      67,
      97,
      116,
      101,
      103,
      111,
      114,
      121,
      108,
      97,
      119,
      114,
      101,
      110,
      99,
      101,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      108,
      97,
      121,
      111,
      117,
      116,
      61,
      34,
      97,
      112,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      109,
      97,
      120,
      105,
      109,
      117,
      109,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      104,
      97,
      109,
      105,
      108,
      116,
      111,
      110,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      32,
      99,
      97,
      110,
      97,
      100,
      105,
      97,
      110,
      99,
      104,
      97,
      110,
      110,
      101,
      108,
      115,
      47,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      47,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      111,
      112,
      116,
      105,
      111,
      110,
      97,
      108,
      112,
      111,
      114,
      116,
      117,
      103,
      97,
      108,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      105,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      119,
      105,
      114,
      101,
      108,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      116,
      108,
      101,
      100,
      97,
      103,
      101,
      110,
      99,
      105,
      101,
      115,
      83,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      100,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      38,
      104,
      101,
      108,
      108,
      105,
      112,
      59,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      34,
      32,
      115,
      105,
      122,
      101,
      61,
      34,
      112,
      97,
      103,
      101,
      78,
      97,
      109,
      101,
      109,
      105,
      100,
      100,
      108,
      101,
      34,
      32,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      62,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      115,
      105,
      108,
      108,
      105,
      110,
      111,
      105,
      115,
      108,
      105,
      110,
      107,
      115,
      34,
      62,
      10,
      9,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      115,
      97,
      116,
      117,
      114,
      100,
      97,
      121,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      108,
      105,
      116,
      101,
      109,
      112,
      114,
      111,
      112,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      114,
      112,
      114,
      111,
      112,
      111,
      115,
      97,
      108,
      61,
      34,
      102,
      97,
      108,
      115,
      101,
      34,
      69,
      115,
      112,
      97,
      195,
      177,
      111,
      108,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      115,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      101,
      114,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      121,
      109,
      112,
      116,
      111,
      109,
      115,
      111,
      114,
      105,
      101,
      110,
      116,
      101,
      100,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      60,
      112,
      108,
      101,
      97,
      115,
      117,
      114,
      101,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      46,
      108,
      101,
      97,
      118,
      105,
      110,
      103,
      32,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      115,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      46,
      10,
      10,
      83,
      111,
      109,
      101,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      105,
      116,
      97,
      98,
      108,
      101,
      98,
      117,
      108,
      103,
      97,
      114,
      105,
      97,
      46,
      115,
      104,
      111,
      119,
      40,
      41,
      59,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      71,
      101,
      110,
      101,
      114,
      97,
      108,
      32,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      115,
      69,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      119,
      105,
      108,
      108,
      105,
      97,
      109,
      115,
      79,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      34,
      62,
      60,
      115,
      112,
      97,
      110,
      62,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      62,
      111,
      112,
      101,
      114,
      97,
      116,
      111,
      114,
      114,
      101,
      113,
      117,
      101,
      115,
      116,
      115,
      97,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      68,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      114,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      46,
      32,
      10,
      10,
      84,
      104,
      101,
      32,
      121,
      111,
      117,
      114,
      115,
      101,
      108,
      102,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      32,
      109,
      105,
      99,
      104,
      105,
      103,
      97,
      110,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      99,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      112,
      114,
      105,
      111,
      114,
      105,
      116,
      121,
      112,
      114,
      105,
      110,
      116,
      105,
      110,
      103,
      100,
      114,
      105,
      110,
      107,
      105,
      110,
      103,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      121,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      32,
      111,
      102,
      102,
      105,
      99,
      101,
      114,
      115,
      82,
      117,
      115,
      115,
      105,
      97,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      45,
      56,
      56,
      53,
      57,
      45,
      49,
      34,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      114,
      32,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      118,
      105,
      101,
      119,
      112,
      111,
      114,
      116,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      115,
      45,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      112,
      111,
      114,
      116,
      97,
      98,
      108,
      101,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      32,
      101,
      108,
      105,
      103,
      105,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      115,
      97,
      116,
      108,
      97,
      110,
      116,
      105,
      99,
      111,
      110,
      108,
      111,
      97,
      100,
      61,
      34,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      46,
      115,
      117,
      112,
      112,
      108,
      105,
      101,
      100,
      112,
      97,
      121,
      109,
      101,
      110,
      116,
      115,
      103,
      108,
      111,
      115,
      115,
      97,
      114,
      121,
      10,
      10,
      65,
      102,
      116,
      101,
      114,
      32,
      103,
      117,
      105,
      100,
      97,
      110,
      99,
      101,
      60,
      47,
      116,
      100,
      62,
      60,
      116,
      100,
      101,
      110,
      99,
      111,
      100,
      105,
      110,
      103,
      109,
      105,
      100,
      100,
      108,
      101,
      34,
      62,
      99,
      97,
      109,
      101,
      32,
      116,
      111,
      32,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      115,
      115,
      99,
      111,
      116,
      116,
      105,
      115,
      104,
      106,
      111,
      110,
      97,
      116,
      104,
      97,
      110,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      119,
      105,
      100,
      103,
      101,
      116,
      115,
      46,
      99,
      108,
      105,
      110,
      105,
      99,
      97,
      108,
      116,
      104,
      97,
      105,
      108,
      97,
      110,
      100,
      116,
      101,
      97,
      99,
      104,
      101,
      114,
      115,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      9,
      97,
      102,
      102,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      115,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      59,
      116,
      111,
      83,
      116,
      114,
      105,
      110,
      103,
      60,
      47,
      115,
      109,
      97,
      108,
      108,
      62,
      111,
      107,
      108,
      97,
      104,
      111,
      109,
      97,
      119,
      105,
      108,
      108,
      32,
      98,
      101,
      32,
      105,
      110,
      118,
      101,
      115,
      116,
      111,
      114,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      104,
      111,
      108,
      105,
      100,
      97,
      121,
      115,
      82,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      108,
      105,
      99,
      101,
      110,
      115,
      101,
      100,
      32,
      40,
      119,
      104,
      105,
      99,
      104,
      32,
      46,
      32,
      65,
      102,
      116,
      101,
      114,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      118,
      105,
      115,
      105,
      116,
      105,
      110,
      103,
      101,
      120,
      112,
      108,
      111,
      114,
      101,
      114,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      32,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      97,
      110,
      100,
      114,
      111,
      105,
      100,
      34,
      113,
      117,
      105,
      99,
      107,
      108,
      121,
      32,
      109,
      101,
      101,
      116,
      105,
      110,
      103,
      115,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      59,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      59,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      97,
      112,
      112,
      114,
      111,
      118,
      97,
      108,
      44,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      109,
      97,
      103,
      110,
      101,
      116,
      105,
      99,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      104,
      102,
      111,
      114,
      101,
      99,
      97,
      115,
      116,
      46,
      32,
      87,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      117,
      114,
      115,
      100,
      97,
      121,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      101,
      38,
      101,
      97,
      99,
      117,
      116,
      101,
      59,
      104,
      97,
      115,
      67,
      108,
      97,
      115,
      115,
      101,
      118,
      97,
      108,
      117,
      97,
      116,
      101,
      111,
      114,
      100,
      101,
      114,
      105,
      110,
      103,
      101,
      120,
      105,
      115,
      116,
      105,
      110,
      103,
      112,
      97,
      116,
      105,
      101,
      110,
      116,
      115,
      32,
      79,
      110,
      108,
      105,
      110,
      101,
      32,
      99,
      111,
      108,
      111,
      114,
      97,
      100,
      111,
      79,
      112,
      116,
      105,
      111,
      110,
      115,
      34,
      99,
      97,
      109,
      112,
      98,
      101,
      108,
      108,
      60,
      33,
      45,
      45,
      32,
      101,
      110,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      60,
      98,
      114,
      32,
      47,
      62,
      13,
      10,
      95,
      112,
      111,
      112,
      117,
      112,
      115,
      124,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      115,
      44,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      32,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      32,
      97,
      115,
      115,
      105,
      103,
      110,
      101,
      100,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      60,
      98,
      32,
      99,
      108,
      97,
      115,
      115,
      108,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      32,
      67,
      111,
      109,
      112,
      97,
      110,
      121,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      60,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      115,
      109,
      97,
      114,
      115,
      104,
      97,
      108,
      108,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      108,
      121,
      41,
      46,
      10,
      10,
      84,
      104,
      101,
      32,
      116,
      97,
      120,
      111,
      110,
      111,
      109,
      121,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      10,
      34,
      32,
      100,
      97,
      116,
      97,
      45,
      115,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      115,
      99,
      114,
      111,
      108,
      108,
      84,
      111,
      32,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      97,
      116,
      116,
      111,
      114,
      110,
      101,
      121,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      115,
      115,
      112,
      111,
      110,
      115,
      111,
      114,
      115,
      102,
      97,
      110,
      99,
      121,
      98,
      111,
      120,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      32,
      119,
      105,
      108,
      100,
      108,
      105,
      102,
      101,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      61,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      112,
      120,
      59,
      102,
      111,
      110,
      116,
      45,
      32,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      115,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      118,
      97,
      99,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      111,
      109,
      112,
      115,
      111,
      110,
      108,
      105,
      103,
      104,
      116,
      105,
      110,
      103,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      48,
      99,
      104,
      101,
      99,
      107,
      105,
      110,
      103,
      60,
      47,
      116,
      98,
      111,
      100,
      121,
      62,
      60,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      67,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      32,
      60,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      102,
      105,
      110,
      100,
      105,
      110,
      103,
      115,
      114,
      111,
      108,
      101,
      32,
      105,
      110,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      32,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      32,
      101,
      120,
      112,
      111,
      115,
      117,
      114,
      101,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      32,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      99,
      108,
      105,
      99,
      107,
      105,
      110,
      103,
      101,
      110,
      116,
      101,
      114,
      105,
      110,
      103,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      115,
      105,
      110,
      102,
      111,
      114,
      109,
      101,
      100,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      32,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      111,
      110,
      83,
      117,
      98,
      109,
      105,
      116,
      109,
      97,
      114,
      121,
      108,
      97,
      110,
      100,
      99,
      111,
      108,
      108,
      101,
      103,
      101,
      115,
      97,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      108,
      105,
      115,
      116,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      46,
      108,
      111,
      103,
      103,
      101,
      100,
      73,
      110,
      97,
      100,
      118,
      105,
      115,
      111,
      114,
      121,
      115,
      105,
      98,
      108,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      41,
      115,
      46,
      32,
      84,
      104,
      105,
      115,
      32,
      112,
      97,
      99,
      107,
      97,
      103,
      101,
      115,
      99,
      104,
      101,
      99,
      107,
      98,
      111,
      120,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      115,
      112,
      114,
      101,
      103,
      110,
      97,
      110,
      116,
      116,
      111,
      109,
      111,
      114,
      114,
      111,
      119,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      105,
      99,
      111,
      110,
      46,
      112,
      110,
      103,
      106,
      97,
      112,
      97,
      110,
      101,
      115,
      101,
      99,
      111,
      100,
      101,
      98,
      97,
      115,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      62,
      103,
      97,
      109,
      98,
      108,
      105,
      110,
      103,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      44,
      32,
      119,
      104,
      105,
      108,
      101,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      109,
      105,
      115,
      115,
      111,
      117,
      114,
      105,
      115,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      116,
      111,
      112,
      58,
      49,
      112,
      120,
      32,
      46,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      50,
      108,
      97,
      122,
      121,
      108,
      111,
      97,
      100,
      110,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      99,
      114,
      105,
      112,
      116,
      34,
      62,
      10,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      60,
      116,
      114,
      62,
      60,
      116,
      100,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      50,
      47,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      32,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      60,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      40,
      231,
      174,
      128,
      228,
      189,
      147,
      41,
      40,
      231,
      185,
      129,
      233,
      171,
      148,
      41,
      104,
      114,
      118,
      97,
      116,
      115,
      107,
      105,
      105,
      116,
      97,
      108,
      105,
      97,
      110,
      111,
      114,
      111,
      109,
      195,
      162,
      110,
      196,
      131,
      116,
      195,
      188,
      114,
      107,
      195,
      167,
      101,
      216,
      167,
      216,
      177,
      216,
      175,
      217,
      136,
      116,
      97,
      109,
      98,
      105,
      195,
      169,
      110,
      110,
      111,
      116,
      105,
      99,
      105,
      97,
      115,
      109,
      101,
      110,
      115,
      97,
      106,
      101,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      115,
      100,
      101,
      114,
      101,
      99,
      104,
      111,
      115,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      115,
      101,
      114,
      118,
      105,
      99,
      105,
      111,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      111,
      117,
      115,
      117,
      97,
      114,
      105,
      111,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      97,
      103,
      111,
      98,
      105,
      101,
      114,
      110,
      111,
      101,
      109,
      112,
      114,
      101,
      115,
      97,
      115,
      97,
      110,
      117,
      110,
      99,
      105,
      111,
      115,
      118,
      97,
      108,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      108,
      111,
      109,
      98,
      105,
      97,
      100,
      101,
      115,
      112,
      117,
      195,
      169,
      115,
      100,
      101,
      112,
      111,
      114,
      116,
      101,
      115,
      112,
      114,
      111,
      121,
      101,
      99,
      116,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      111,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      111,
      110,
      111,
      115,
      111,
      116,
      114,
      111,
      115,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      109,
      105,
      108,
      108,
      111,
      110,
      101,
      115,
      109,
      101,
      100,
      105,
      97,
      110,
      116,
      101,
      112,
      114,
      101,
      103,
      117,
      110,
      116,
      97,
      97,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      114,
      101,
      99,
      117,
      114,
      115,
      111,
      115,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      97,
      115,
      97,
      110,
      116,
      105,
      97,
      103,
      111,
      110,
      117,
      101,
      115,
      116,
      114,
      111,
      115,
      111,
      112,
      105,
      110,
      105,
      195,
      179,
      110,
      105,
      109,
      112,
      114,
      105,
      109,
      105,
      114,
      109,
      105,
      101,
      110,
      116,
      114,
      97,
      115,
      97,
      109,
      195,
      169,
      114,
      105,
      99,
      97,
      118,
      101,
      110,
      100,
      101,
      100,
      111,
      114,
      115,
      111,
      99,
      105,
      101,
      100,
      97,
      100,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      111,
      114,
      101,
      97,
      108,
      105,
      122,
      97,
      114,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      111,
      112,
      97,
      108,
      97,
      98,
      114,
      97,
      115,
      105,
      110,
      116,
      101,
      114,
      195,
      169,
      115,
      101,
      110,
      116,
      111,
      110,
      99,
      101,
      115,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      109,
      105,
      101,
      109,
      98,
      114,
      111,
      115,
      114,
      101,
      97,
      108,
      105,
      100,
      97,
      100,
      99,
      195,
      179,
      114,
      100,
      111,
      98,
      97,
      122,
      97,
      114,
      97,
      103,
      111,
      122,
      97,
      112,
      195,
      161,
      103,
      105,
      110,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      108,
      101,
      115,
      98,
      108,
      111,
      113,
      117,
      101,
      97,
      114,
      103,
      101,
      115,
      116,
      105,
      195,
      179,
      110,
      97,
      108,
      113,
      117,
      105,
      108,
      101,
      114,
      115,
      105,
      115,
      116,
      101,
      109,
      97,
      115,
      99,
      105,
      101,
      110,
      99,
      105,
      97,
      115,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      111,
      118,
      101,
      114,
      115,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      97,
      101,
      115,
      116,
      117,
      100,
      105,
      111,
      115,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      97,
      111,
      98,
      106,
      101,
      116,
      105,
      118,
      111,
      97,
      108,
      105,
      99,
      97,
      110,
      116,
      101,
      98,
      117,
      115,
      99,
      97,
      100,
      111,
      114,
      99,
      97,
      110,
      116,
      105,
      100,
      97,
      100,
      101,
      110,
      116,
      114,
      97,
      100,
      97,
      115,
      97,
      99,
      99,
      105,
      111,
      110,
      101,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      111,
      115,
      115,
      117,
      112,
      101,
      114,
      105,
      111,
      114,
      109,
      97,
      121,
      111,
      114,
      195,
      173,
      97,
      97,
      108,
      101,
      109,
      97,
      110,
      105,
      97,
      102,
      117,
      110,
      99,
      105,
      195,
      179,
      110,
      195,
      186,
      108,
      116,
      105,
      109,
      111,
      115,
      104,
      97,
      99,
      105,
      101,
      110,
      100,
      111,
      97,
      113,
      117,
      101,
      108,
      108,
      111,
      115,
      101,
      100,
      105,
      99,
      105,
      195,
      179,
      110,
      102,
      101,
      114,
      110,
      97,
      110,
      100,
      111,
      97,
      109,
      98,
      105,
      101,
      110,
      116,
      101,
      102,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      110,
      117,
      101,
      115,
      116,
      114,
      97,
      115,
      99,
      108,
      105,
      101,
      110,
      116,
      101,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      111,
      115,
      98,
      97,
      115,
      116,
      97,
      110,
      116,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      114,
      101,
      112,
      111,
      114,
      116,
      97,
      114,
      99,
      111,
      110,
      103,
      114,
      101,
      115,
      111,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      114,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      111,
      99,
      111,
      110,
      116,
      114,
      97,
      116,
      111,
      106,
      195,
      179,
      118,
      101,
      110,
      101,
      115,
      100,
      105,
      115,
      116,
      114,
      105,
      116,
      111,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      97,
      99,
      111,
      110,
      106,
      117,
      110,
      116,
      111,
      101,
      110,
      101,
      114,
      103,
      195,
      173,
      97,
      116,
      114,
      97,
      98,
      97,
      106,
      97,
      114,
      97,
      115,
      116,
      117,
      114,
      105,
      97,
      115,
      114,
      101,
      99,
      105,
      101,
      110,
      116,
      101,
      117,
      116,
      105,
      108,
      105,
      122,
      97,
      114,
      98,
      111,
      108,
      101,
      116,
      195,
      173,
      110,
      115,
      97,
      108,
      118,
      97,
      100,
      111,
      114,
      99,
      111,
      114,
      114,
      101,
      99,
      116,
      97,
      116,
      114,
      97,
      98,
      97,
      106,
      111,
      115,
      112,
      114,
      105,
      109,
      101,
      114,
      111,
      115,
      110,
      101,
      103,
      111,
      99,
      105,
      111,
      115,
      108,
      105,
      98,
      101,
      114,
      116,
      97,
      100,
      100,
      101,
      116,
      97,
      108,
      108,
      101,
      115,
      112,
      97,
      110,
      116,
      97,
      108,
      108,
      97,
      112,
      114,
      195,
      179,
      120,
      105,
      109,
      111,
      97,
      108,
      109,
      101,
      114,
      195,
      173,
      97,
      97,
      110,
      105,
      109,
      97,
      108,
      101,
      115,
      113,
      117,
      105,
      195,
      169,
      110,
      101,
      115,
      99,
      111,
      114,
      97,
      122,
      195,
      179,
      110,
      115,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      98,
      117,
      115,
      99,
      97,
      110,
      100,
      111,
      111,
      112,
      99,
      105,
      111,
      110,
      101,
      115,
      101,
      120,
      116,
      101,
      114,
      105,
      111,
      114,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      111,
      116,
      111,
      100,
      97,
      118,
      195,
      173,
      97,
      103,
      97,
      108,
      101,
      114,
      195,
      173,
      97,
      101,
      115,
      99,
      114,
      105,
      98,
      105,
      114,
      109,
      101,
      100,
      105,
      99,
      105,
      110,
      97,
      108,
      105,
      99,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      97,
      97,
      115,
      112,
      101,
      99,
      116,
      111,
      115,
      99,
      114,
      195,
      173,
      116,
      105,
      99,
      97,
      100,
      195,
      179,
      108,
      97,
      114,
      101,
      115,
      106,
      117,
      115,
      116,
      105,
      99,
      105,
      97,
      100,
      101,
      98,
      101,
      114,
      195,
      161,
      110,
      112,
      101,
      114,
      195,
      173,
      111,
      100,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      116,
      97,
      109,
      97,
      110,
      116,
      101,
      110,
      101,
      114,
      112,
      101,
      113,
      117,
      101,
      195,
      177,
      111,
      114,
      101,
      99,
      105,
      98,
      105,
      100,
      97,
      116,
      114,
      105,
      98,
      117,
      110,
      97,
      108,
      116,
      101,
      110,
      101,
      114,
      105,
      102,
      101,
      99,
      97,
      110,
      99,
      105,
      195,
      179,
      110,
      99,
      97,
      110,
      97,
      114,
      105,
      97,
      115,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      100,
      105,
      118,
      101,
      114,
      115,
      111,
      115,
      109,
      97,
      108,
      108,
      111,
      114,
      99,
      97,
      114,
      101,
      113,
      117,
      105,
      101,
      114,
      101,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      111,
      100,
      101,
      98,
      101,
      114,
      195,
      173,
      97,
      118,
      105,
      118,
      105,
      101,
      110,
      100,
      97,
      102,
      105,
      110,
      97,
      110,
      122,
      97,
      115,
      97,
      100,
      101,
      108,
      97,
      110,
      116,
      101,
      102,
      117,
      110,
      99,
      105,
      111,
      110,
      97,
      99,
      111,
      110,
      115,
      101,
      106,
      111,
      115,
      100,
      105,
      102,
      195,
      173,
      99,
      105,
      108,
      99,
      105,
      117,
      100,
      97,
      100,
      101,
      115,
      97,
      110,
      116,
      105,
      103,
      117,
      97,
      115,
      97,
      118,
      97,
      110,
      122,
      97,
      100,
      97,
      116,
      195,
      169,
      114,
      109,
      105,
      110,
      111,
      117,
      110,
      105,
      100,
      97,
      100,
      101,
      115,
      115,
      195,
      161,
      110,
      99,
      104,
      101,
      122,
      99,
      97,
      109,
      112,
      97,
      195,
      177,
      97,
      115,
      111,
      102,
      116,
      111,
      110,
      105,
      99,
      114,
      101,
      118,
      105,
      115,
      116,
      97,
      115,
      99,
      111,
      110,
      116,
      105,
      101,
      110,
      101,
      115,
      101,
      99,
      116,
      111,
      114,
      101,
      115,
      109,
      111,
      109,
      101,
      110,
      116,
      111,
      115,
      102,
      97,
      99,
      117,
      108,
      116,
      97,
      100,
      99,
      114,
      195,
      169,
      100,
      105,
      116,
      111,
      100,
      105,
      118,
      101,
      114,
      115,
      97,
      115,
      115,
      117,
      112,
      117,
      101,
      115,
      116,
      111,
      102,
      97,
      99,
      116,
      111,
      114,
      101,
      115,
      115,
      101,
      103,
      117,
      110,
      100,
      111,
      115,
      112,
      101,
      113,
      117,
      101,
      195,
      177,
      97,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      181,
      209,
      129,
      208,
      187,
      208,
      184,
      208,
      181,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      190,
      208,
      177,
      209,
      139,
      209,
      130,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      149,
      209,
      129,
      208,
      187,
      208,
      184,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      143,
      208,
      178,
      209,
      129,
      208,
      181,
      209,
      133,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      185,
      208,
      180,
      208,
      176,
      208,
      182,
      208,
      181,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      184,
      208,
      179,
      208,
      190,
      208,
      180,
      209,
      131,
      208,
      180,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      209,
      130,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      176,
      209,
      129,
      208,
      181,
      208,
      177,
      209,
      143,
      208,
      190,
      208,
      180,
      208,
      184,
      208,
      189,
      209,
      129,
      208,
      181,
      208,
      177,
      208,
      181,
      208,
      189,
      208,
      176,
      208,
      180,
      208,
      190,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      209,
      132,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      189,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      185,
      208,
      184,
      208,
      179,
      209,
      128,
      209,
      139,
      209,
      130,
      208,
      190,
      208,
      182,
      208,
      181,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      188,
      209,
      129,
      208,
      178,
      208,
      190,
      209,
      142,
      208,
      187,
      208,
      184,
      209,
      136,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      184,
      209,
      133,
      208,
      191,
      208,
      190,
      208,
      186,
      208,
      176,
      208,
      180,
      208,
      189,
      208,
      181,
      208,
      185,
      208,
      180,
      208,
      190,
      208,
      188,
      208,
      176,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      176,
      208,
      187,
      208,
      184,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      131,
      209,
      133,
      208,
      190,
      209,
      130,
      209,
      143,
      208,
      180,
      208,
      178,
      209,
      131,
      209,
      133,
      209,
      129,
      208,
      181,
      209,
      130,
      208,
      184,
      208,
      187,
      209,
      142,
      208,
      180,
      208,
      184,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      177,
      209,
      143,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      178,
      208,
      184,
      208,
      180,
      208,
      181,
      209,
      135,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      141,
      209,
      130,
      208,
      184,
      208,
      188,
      209,
      129,
      209,
      135,
      208,
      181,
      209,
      130,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      139,
      209,
      134,
      208,
      181,
      208,
      189,
      209,
      139,
      209,
      129,
      209,
      130,
      208,
      176,
      208,
      187,
      208,
      178,
      208,
      181,
      208,
      180,
      209,
      140,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      181,
      208,
      178,
      208,
      190,
      208,
      180,
      209,
      139,
      209,
      130,
      208,
      181,
      208,
      177,
      208,
      181,
      208,
      178,
      209,
      139,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      176,
      208,
      188,
      208,
      184,
      209,
      130,
      208,
      184,
      208,
      191,
      208,
      176,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      187,
      208,
      184,
      209,
      134,
      208,
      176,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      176,
      208,
      179,
      208,
      190,
      208,
      180,
      209,
      139,
      208,
      183,
      208,
      189,
      208,
      176,
      209,
      142,
      208,
      188,
      208,
      190,
      208,
      179,
      209,
      131,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      185,
      208,
      184,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      186,
      208,
      184,
      208,
      189,
      208,
      190,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      181,
      209,
      129,
      209,
      128,
      208,
      190,
      208,
      186,
      208,
      184,
      209,
      142,
      208,
      189,
      209,
      143,
      208,
      178,
      208,
      181,
      209,
      129,
      209,
      140,
      208,
      149,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      184,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      170,
      217,
      138,
      216,
      172,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      138,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      135,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      162,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      216,
      170,
      216,
      173,
      217,
      131,
      217,
      133,
      216,
      181,
      217,
      129,
      216,
      173,
      216,
      169,
      217,
      131,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      138,
      217,
      138,
      217,
      131,
      217,
      136,
      217,
      134,
      216,
      180,
      216,
      168,
      217,
      131,
      216,
      169,
      217,
      129,
      217,
      138,
      217,
      135,
      216,
      167,
      216,
      168,
      217,
      134,
      216,
      167,
      216,
      170,
      216,
      173,
      217,
      136,
      216,
      167,
      216,
      161,
      216,
      163,
      217,
      131,
      216,
      171,
      216,
      177,
      216,
      174,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      173,
      216,
      168,
      216,
      175,
      217,
      132,
      217,
      138,
      217,
      132,
      216,
      175,
      216,
      177,
      217,
      136,
      216,
      179,
      216,
      167,
      216,
      182,
      216,
      186,
      216,
      183,
      216,
      170,
      217,
      131,
      217,
      136,
      217,
      134,
      217,
      135,
      217,
      134,
      216,
      167,
      217,
      131,
      216,
      179,
      216,
      167,
      216,
      173,
      216,
      169,
      217,
      134,
      216,
      167,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      183,
      216,
      168,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      131,
      216,
      180,
      217,
      131,
      216,
      177,
      216,
      167,
      217,
      138,
      217,
      133,
      217,
      131,
      217,
      134,
      217,
      133,
      217,
      134,
      217,
      135,
      216,
      167,
      216,
      180,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      217,
      134,
      216,
      180,
      217,
      138,
      216,
      183,
      217,
      133,
      216,
      167,
      216,
      176,
      216,
      167,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      134,
      216,
      180,
      216,
      168,
      216,
      167,
      216,
      168,
      216,
      170,
      216,
      185,
      216,
      168,
      216,
      177,
      216,
      177,
      216,
      173,
      217,
      133,
      216,
      169,
      217,
      131,
      216,
      167,
      217,
      129,
      216,
      169,
      217,
      138,
      217,
      130,
      217,
      136,
      217,
      132,
      217,
      133,
      216,
      177,
      217,
      131,
      216,
      178,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      169,
      216,
      163,
      216,
      173,
      217,
      133,
      216,
      175,
      217,
      130,
      217,
      132,
      216,
      168,
      217,
      138,
      217,
      138,
      216,
      185,
      217,
      134,
      217,
      138,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      169,
      216,
      183,
      216,
      177,
      217,
      138,
      217,
      130,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      172,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      174,
      216,
      177,
      217,
      137,
      217,
      133,
      216,
      185,
      217,
      134,
      216,
      167,
      216,
      167,
      216,
      168,
      216,
      173,
      216,
      171,
      216,
      185,
      216,
      177,
      217,
      136,
      216,
      182,
      216,
      168,
      216,
      180,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      179,
      216,
      172,
      217,
      132,
      216,
      168,
      217,
      134,
      216,
      167,
      217,
      134,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      217,
      131,
      217,
      132,
      217,
      138,
      216,
      169,
      216,
      168,
      216,
      175,
      217,
      136,
      217,
      134,
      216,
      163,
      217,
      138,
      216,
      182,
      216,
      167,
      217,
      138,
      217,
      136,
      216,
      172,
      216,
      175,
      217,
      129,
      216,
      177,
      217,
      138,
      217,
      130,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      170,
      216,
      163,
      217,
      129,
      216,
      182,
      217,
      132,
      217,
      133,
      216,
      183,
      216,
      168,
      216,
      174,
      216,
      167,
      217,
      131,
      216,
      171,
      216,
      177,
      216,
      168,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      129,
      216,
      182,
      217,
      132,
      216,
      167,
      216,
      173,
      217,
      132,
      217,
      137,
      217,
      134,
      217,
      129,
      216,
      179,
      217,
      135,
      216,
      163,
      217,
      138,
      216,
      167,
      217,
      133,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      163,
      217,
      134,
      217,
      135,
      216,
      167,
      216,
      175,
      217,
      138,
      217,
      134,
      216,
      167,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      217,
      133,
      216,
      185,
      216,
      177,
      216,
      182,
      216,
      170,
      216,
      185,
      217,
      132,
      217,
      133,
      216,
      175,
      216,
      167,
      216,
      174,
      217,
      132,
      217,
      133,
      217,
      133,
      217,
      131,
      217,
      134,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      2,
      0,
      2,
      0,
      2,
      0,
      2,
      0,
      4,
      0,
      4,
      0,
      4,
      0,
      4,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      7,
      6,
      5,
      4,
      3,
      2,
      1,
      0,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      15,
      14,
      13,
      12,
      11,
      10,
      9,
      8,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      23,
      22,
      21,
      20,
      19,
      18,
      17,
      16,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      31,
      30,
      29,
      28,
      27,
      26,
      25,
      24,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      1,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      3,
      0,
      0,
      0,
      255,
      255,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      255,
      255,
      0,
      1,
      0,
      0,
      0,
      8,
      0,
      8,
      0,
      8,
      0,
      8,
      0,
      0,
      0,
      1,
      0,
      2,
      0,
      3,
      0,
      4,
      0,
      5,
      0,
      6,
      0,
      7,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      101,
      113,
      117,
      105,
      112,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      104,
      105,
      103,
      104,
      108,
      105,
      103,
      104,
      116,
      68,
      84,
      68,
      47,
      120,
      104,
      116,
      109,
      108,
      109,
      97,
      114,
      107,
      101,
      116,
      105,
      110,
      103,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      115,
      111,
      109,
      101,
      116,
      104,
      105,
      110,
      103,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      117,
      98,
      115,
      99,
      114,
      105,
      98,
      101,
      97,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      101,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      60,
      47,
      115,
      101,
      108,
      101,
      99,
      116,
      62,
      65,
      117,
      115,
      116,
      114,
      97,
      108,
      105,
      97,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      105,
      116,
      117,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      121,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      112,
      114,
      105,
      109,
      97,
      114,
      105,
      108,
      121,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      97,
      110,
      111,
      110,
      121,
      109,
      111,
      117,
      115,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      115,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      115,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      112,
      111,
      116,
      101,
      110,
      116,
      105,
      97,
      108,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      114,
      103,
      117,
      109,
      101,
      110,
      116,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      97,
      114,
      121,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      13,
      10,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      97,
      116,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      66,
      105,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      125,
      32,
      101,
      108,
      115,
      101,
      32,
      123,
      10,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      115,
      119,
      104,
      101,
      110,
      32,
      116,
      104,
      101,
      32,
      65,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      116,
      101,
      109,
      112,
      108,
      97,
      116,
      101,
      115,
      100,
      97,
      110,
      103,
      101,
      114,
      111,
      117,
      115,
      115,
      97,
      116,
      101,
      108,
      108,
      105,
      116,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      115,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      112,
      114,
      111,
      116,
      111,
      116,
      121,
      112,
      101,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      38,
      114,
      97,
      113,
      117,
      111,
      59,
      60,
      47,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      98,
      101,
      97,
      117,
      116,
      105,
      102,
      117,
      108,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      101,
      100,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      116,
      117,
      110,
      116,
      105,
      108,
      32,
      116,
      104,
      101,
      116,
      104,
      117,
      109,
      98,
      110,
      97,
      105,
      108,
      78,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      46,
      102,
      111,
      99,
      117,
      115,
      40,
      41,
      59,
      111,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      109,
      105,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      62,
      10,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      108,
      101,
      115,
      115,
      32,
      116,
      104,
      97,
      110,
      101,
      120,
      112,
      101,
      110,
      115,
      105,
      118,
      101,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      102,
      114,
      97,
      109,
      101,
      119,
      111,
      114,
      107,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      121,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      99,
      108,
      97,
      115,
      115,
      78,
      97,
      109,
      101,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      115,
      109,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      101,
      108,
      115,
      101,
      119,
      104,
      101,
      114,
      101,
      65,
      108,
      101,
      120,
      97,
      110,
      100,
      101,
      114,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      115,
      98,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      101,
      100,
      97,
      102,
      102,
      105,
      108,
      105,
      97,
      116,
      101,
      60,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      116,
      114,
      101,
      97,
      116,
      109,
      101,
      110,
      116,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      47,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      46,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      98,
      105,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      70,
      114,
      97,
      110,
      195,
      167,
      97,
      105,
      115,
      72,
      111,
      108,
      108,
      121,
      119,
      111,
      111,
      100,
      101,
      120,
      112,
      97,
      110,
      115,
      105,
      111,
      110,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      115,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      10,
      114,
      101,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      68,
      101,
      99,
      101,
      109,
      98,
      101,
      114,
      32,
      112,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      67,
      97,
      109,
      98,
      114,
      105,
      100,
      103,
      101,
      111,
      112,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      66,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      32,
      99,
      111,
      110,
      102,
      117,
      115,
      105,
      111,
      110,
      62,
      10,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      101,
      100,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      119,
      111,
      114,
      108,
      100,
      119,
      105,
      100,
      101,
      105,
      110,
      116,
      101,
      114,
      102,
      97,
      99,
      101,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      115,
      110,
      101,
      119,
      115,
      112,
      97,
      112,
      101,
      114,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      10,
      109,
      111,
      117,
      110,
      116,
      97,
      105,
      110,
      115,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      32,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      102,
      105,
      110,
      97,
      110,
      99,
      105,
      97,
      108,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      97,
      98,
      97,
      110,
      100,
      111,
      110,
      101,
      100,
      69,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      115,
      101,
      73,
      110,
      116,
      40,
      115,
      116,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      117,
      110,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      78,
      111,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      101,
      100,
      116,
      119,
      111,
      32,
      121,
      101,
      97,
      114,
      115,
      83,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      62,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      100,
      66,
      97,
      116,
      116,
      108,
      101,
      32,
      111,
      102,
      112,
      101,
      114,
      99,
      101,
      105,
      118,
      101,
      100,
      116,
      114,
      121,
      105,
      110,
      103,
      32,
      116,
      111,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      112,
      111,
      114,
      116,
      114,
      97,
      121,
      101,
      100,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      69,
      108,
      105,
      122,
      97,
      98,
      101,
      116,
      104,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      121,
      105,
      110,
      115,
      117,
      114,
      97,
      110,
      99,
      101,
      115,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      59,
      108,
      101,
      103,
      101,
      110,
      100,
      97,
      114,
      121,
      71,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      99,
      97,
      110,
      100,
      105,
      100,
      97,
      116,
      101,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      46,
      105,
      110,
      104,
      101,
      114,
      105,
      116,
      101,
      100,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      117,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      67,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      101,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      115,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      110,
      111,
      32,
      108,
      111,
      110,
      103,
      101,
      114,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      99,
      97,
      110,
      110,
      111,
      116,
      32,
      98,
      101,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      99,
      121,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      59,
      114,
      101,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      121,
      116,
      101,
      99,
      104,
      110,
      105,
      113,
      117,
      101,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      105,
      116,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      117,
      110,
      100,
      101,
      114,
      108,
      105,
      110,
      101,
      116,
      104,
      105,
      115,
      32,
      116,
      105,
      109,
      101,
      116,
      101,
      108,
      101,
      112,
      104,
      111,
      110,
      101,
      105,
      116,
      101,
      109,
      115,
      99,
      111,
      112,
      101,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      115,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      41,
      59,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      70,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      112,
      114,
      111,
      118,
      105,
      100,
      105,
      110,
      103,
      100,
      101,
      109,
      111,
      99,
      114,
      97,
      99,
      121,
      98,
      111,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      115,
      117,
      102,
      102,
      101,
      114,
      105,
      110,
      103,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      115,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      97,
      108,
      115,
      97,
      105,
      100,
      32,
      116,
      104,
      97,
      116,
      105,
      116,
      32,
      109,
      97,
      121,
      32,
      98,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      60,
      47,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      115,
      99,
      104,
      101,
      100,
      117,
      108,
      101,
      100,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      115,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      10,
      115,
      117,
      115,
      112,
      101,
      99,
      116,
      101,
      100,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      32,
      48,
      115,
      112,
      105,
      114,
      105,
      116,
      117,
      97,
      108,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      10,
      109,
      105,
      99,
      114,
      111,
      115,
      111,
      102,
      116,
      103,
      114,
      97,
      100,
      117,
      97,
      108,
      108,
      121,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      101,
      100,
      104,
      101,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      106,
      115,
      104,
      111,
      117,
      115,
      101,
      104,
      111,
      108,
      100,
      99,
      111,
      110,
      102,
      105,
      114,
      109,
      101,
      100,
      112,
      117,
      114,
      99,
      104,
      97,
      115,
      101,
      100,
      108,
      105,
      116,
      101,
      114,
      97,
      108,
      108,
      121,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      117,
      112,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      118,
      97,
      114,
      105,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      109,
      97,
      105,
      110,
      105,
      110,
      103,
      105,
      116,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      99,
      101,
      110,
      116,
      117,
      114,
      105,
      101,
      115,
      74,
      97,
      112,
      97,
      110,
      101,
      115,
      101,
      32,
      97,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      100,
      97,
      108,
      103,
      111,
      114,
      105,
      116,
      104,
      109,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      115,
      114,
      101,
      98,
      101,
      108,
      108,
      105,
      111,
      110,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      101,
      110,
      99,
      111,
      117,
      114,
      97,
      103,
      101,
      114,
      101,
      115,
      105,
      122,
      97,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      105,
      110,
      103,
      115,
      101,
      110,
      115,
      105,
      116,
      105,
      118,
      101,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      112,
      114,
      111,
      118,
      105,
      115,
      105,
      111,
      110,
      40,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      102,
      101,
      97,
      116,
      117,
      114,
      105,
      110,
      103,
      99,
      111,
      110,
      100,
      117,
      99,
      116,
      101,
      100,
      41,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      45,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      32,
      110,
      117,
      109,
      101,
      114,
      111,
      117,
      115,
      32,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      102,
      114,
      97,
      103,
      109,
      101,
      110,
      116,
      115,
      101,
      120,
      99,
      101,
      108,
      108,
      101,
      110,
      116,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      34,
      116,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      110,
      101,
      97,
      114,
      32,
      116,
      104,
      101,
      32,
      65,
      100,
      118,
      97,
      110,
      99,
      101,
      100,
      32,
      115,
      111,
      117,
      114,
      99,
      101,
      32,
      111,
      102,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      72,
      111,
      110,
      103,
      32,
      75,
      111,
      110,
      103,
      32,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      32,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      115,
      109,
      101,
      108,
      101,
      118,
      97,
      116,
      105,
      111,
      110,
      111,
      102,
      102,
      101,
      110,
      115,
      105,
      118,
      101,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      9,
      115,
      112,
      111,
      110,
      115,
      111,
      114,
      101,
      100,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      111,
      114,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      116,
      104,
      111,
      115,
      101,
      32,
      119,
      104,
      111,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      101,
      115,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      115,
      117,
      98,
      109,
      105,
      116,
      116,
      101,
      100,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      99,
      111,
      110,
      118,
      105,
      110,
      99,
      101,
      100,
      112,
      114,
      111,
      109,
      111,
      116,
      105,
      110,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      40,
      99,
      108,
      97,
      115,
      115,
      105,
      99,
      97,
      108,
      99,
      111,
      97,
      108,
      105,
      116,
      105,
      111,
      110,
      104,
      105,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      115,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      45,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      101,
      110,
      111,
      117,
      103,
      104,
      32,
      116,
      111,
      97,
      108,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      101,
      100,
      45,
      45,
      62,
      13,
      10,
      60,
      33,
      45,
      45,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      32,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      101,
      100,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      32,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      60,
      102,
      117,
      114,
      110,
      105,
      116,
      117,
      114,
      101,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      32,
      32,
      111,
      110,
      98,
      108,
      117,
      114,
      61,
      34,
      115,
      117,
      115,
      112,
      101,
      110,
      100,
      101,
      100,
      114,
      101,
      99,
      105,
      112,
      105,
      101,
      110,
      116,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      77,
      111,
      114,
      101,
      111,
      118,
      101,
      114,
      44,
      97,
      98,
      111,
      108,
      105,
      115,
      104,
      101,
      100,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      101,
      100,
      119,
      101,
      114,
      101,
      32,
      109,
      97,
      100,
      101,
      101,
      109,
      111,
      116,
      105,
      111,
      110,
      97,
      108,
      101,
      109,
      101,
      114,
      103,
      101,
      110,
      99,
      121,
      110,
      97,
      114,
      114,
      97,
      116,
      105,
      118,
      101,
      97,
      100,
      118,
      111,
      99,
      97,
      116,
      101,
      115,
      112,
      120,
      59,
      98,
      111,
      114,
      100,
      101,
      114,
      99,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      100,
      100,
      105,
      114,
      61,
      34,
      108,
      116,
      114,
      34,
      101,
      109,
      112,
      108,
      111,
      121,
      101,
      101,
      115,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      46,
      32,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      111,
      114,
      99,
      117,
      115,
      116,
      111,
      109,
      101,
      114,
      115,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      101,
      100,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      97,
      100,
      100,
      67,
      108,
      97,
      115,
      115,
      40,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      97,
      110,
      100,
      32,
      108,
      97,
      116,
      101,
      114,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      110,
      103,
      101,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      101,
      83,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      108,
      121,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      101,
      100,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      114,
      115,
      74,
      101,
      114,
      117,
      115,
      97,
      108,
      101,
      109,
      116,
      104,
      101,
      121,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      109,
      112,
      117,
      116,
      105,
      110,
      103,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      100,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      101,
      115,
      103,
      117,
      97,
      114,
      97,
      110,
      116,
      101,
      101,
      97,
      114,
      98,
      105,
      116,
      114,
      97,
      114,
      121,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      119,
      97,
      110,
      116,
      101,
      100,
      32,
      116,
      111,
      112,
      120,
      59,
      119,
      105,
      100,
      116,
      104,
      58,
      116,
      104,
      101,
      111,
      114,
      121,
      32,
      111,
      102,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      117,
      114,
      87,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      98,
      101,
      103,
      97,
      110,
      32,
      116,
      111,
      32,
      105,
      116,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      109,
      97,
      103,
      110,
      105,
      116,
      117,
      100,
      101,
      109,
      117,
      115,
      116,
      32,
      104,
      97,
      118,
      101,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      68,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      121,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      108,
      121,
      111,
      99,
      99,
      117,
      114,
      114,
      105,
      110,
      103,
      118,
      97,
      114,
      105,
      97,
      98,
      108,
      101,
      115,
      103,
      105,
      118,
      101,
      110,
      32,
      116,
      104,
      101,
      112,
      108,
      97,
      116,
      102,
      111,
      114,
      109,
      46,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      60,
      102,
      97,
      105,
      108,
      101,
      100,
      32,
      116,
      111,
      99,
      111,
      109,
      112,
      111,
      117,
      110,
      100,
      115,
      107,
      105,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      115,
      111,
      99,
      105,
      101,
      116,
      105,
      101,
      115,
      97,
      108,
      111,
      110,
      103,
      115,
      105,
      100,
      101,
      32,
      45,
      45,
      38,
      103,
      116,
      59,
      10,
      10,
      115,
      111,
      117,
      116,
      104,
      119,
      101,
      115,
      116,
      116,
      104,
      101,
      32,
      114,
      105,
      103,
      104,
      116,
      114,
      97,
      100,
      105,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      117,
      110,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      115,
      112,
      111,
      107,
      101,
      110,
      32,
      105,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      101,
      111,
      110,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      101,
      32,
      102,
      114,
      111,
      109,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      121,
      98,
      117,
      114,
      105,
      101,
      100,
      32,
      105,
      110,
      97,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      116,
      104,
      101,
      121,
      32,
      119,
      101,
      114,
      101,
      60,
      47,
      102,
      111,
      110,
      116,
      62,
      60,
      47,
      78,
      111,
      114,
      119,
      101,
      103,
      105,
      97,
      110,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      101,
      100,
      112,
      114,
      111,
      100,
      117,
      99,
      105,
      110,
      103,
      112,
      97,
      115,
      115,
      101,
      110,
      103,
      101,
      114,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      121,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      65,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      101,
      113,
      117,
      97,
      116,
      105,
      111,
      110,
      115,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      46,
      114,
      101,
      103,
      117,
      108,
      97,
      114,
      108,
      121,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      114,
      97,
      98,
      111,
      118,
      101,
      32,
      116,
      104,
      101,
      108,
      105,
      110,
      107,
      101,
      100,
      32,
      116,
      111,
      112,
      104,
      101,
      110,
      111,
      109,
      101,
      110,
      97,
      112,
      101,
      114,
      105,
      111,
      100,
      32,
      111,
      102,
      116,
      111,
      111,
      108,
      116,
      105,
      112,
      34,
      62,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      115,
      112,
      101,
      99,
      116,
      32,
      111,
      102,
      65,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      65,
      105,
      114,
      32,
      70,
      111,
      114,
      99,
      101,
      115,
      121,
      115,
      116,
      101,
      109,
      32,
      111,
      102,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      118,
      101,
      105,
      109,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      105,
      116,
      112,
      97,
      105,
      110,
      116,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      113,
      117,
      101,
      114,
      101,
      100,
      97,
      114,
      101,
      32,
      115,
      116,
      105,
      108,
      108,
      112,
      114,
      111,
      99,
      101,
      100,
      117,
      114,
      101,
      103,
      114,
      111,
      119,
      116,
      104,
      32,
      111,
      102,
      104,
      101,
      97,
      100,
      101,
      100,
      32,
      98,
      121,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      115,
      109,
      111,
      108,
      101,
      99,
      117,
      108,
      101,
      115,
      102,
      114,
      97,
      110,
      99,
      104,
      105,
      115,
      101,
      105,
      110,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      101,
      100,
      99,
      104,
      105,
      108,
      100,
      104,
      111,
      111,
      100,
      97,
      108,
      115,
      111,
      32,
      117,
      115,
      101,
      100,
      100,
      101,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      115,
      105,
      110,
      103,
      97,
      112,
      111,
      114,
      101,
      100,
      101,
      103,
      114,
      101,
      101,
      32,
      111,
      102,
      102,
      97,
      116,
      104,
      101,
      114,
      32,
      111,
      102,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      115,
      60,
      47,
      97,
      62,
      60,
      47,
      112,
      62,
      10,
      99,
      97,
      109,
      101,
      32,
      102,
      114,
      111,
      109,
      119,
      101,
      114,
      101,
      32,
      117,
      115,
      101,
      100,
      110,
      111,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      114,
      101,
      99,
      101,
      105,
      118,
      105,
      110,
      103,
      69,
      120,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      101,
      118,
      101,
      110,
      32,
      109,
      111,
      114,
      101,
      97,
      99,
      99,
      101,
      115,
      115,
      32,
      116,
      111,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      101,
      114,
      80,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      109,
      117,
      115,
      105,
      99,
      105,
      97,
      110,
      115,
      100,
      101,
      108,
      105,
      99,
      105,
      111,
      117,
      115,
      112,
      114,
      105,
      115,
      111,
      110,
      101,
      114,
      115,
      97,
      100,
      118,
      101,
      110,
      116,
      32,
      111,
      102,
      85,
      84,
      70,
      45,
      56,
      34,
      32,
      47,
      62,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      34,
      62,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      83,
      111,
      117,
      116,
      104,
      101,
      114,
      110,
      32,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      115,
      101,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      46,
      32,
      73,
      116,
      32,
      119,
      97,
      115,
      32,
      105,
      110,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      112,
      101,
      114,
      109,
      105,
      116,
      116,
      101,
      100,
      118,
      97,
      108,
      105,
      100,
      97,
      116,
      101,
      46,
      97,
      112,
      112,
      101,
      97,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      115,
      115,
      101,
      114,
      105,
      111,
      117,
      115,
      108,
      121,
      45,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      105,
      110,
      105,
      116,
      105,
      97,
      116,
      101,
      100,
      101,
      120,
      116,
      101,
      110,
      100,
      105,
      110,
      103,
      108,
      111,
      110,
      103,
      45,
      116,
      101,
      114,
      109,
      105,
      110,
      102,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      99,
      104,
      32,
      116,
      104,
      97,
      116,
      103,
      101,
      116,
      67,
      111,
      111,
      107,
      105,
      101,
      109,
      97,
      114,
      107,
      101,
      100,
      32,
      98,
      121,
      60,
      47,
      98,
      117,
      116,
      116,
      111,
      110,
      62,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      98,
      117,
      116,
      32,
      105,
      116,
      32,
      105,
      115,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      115,
      100,
      111,
      119,
      110,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      105,
      110,
      103,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      45,
      45,
      62,
      10,
      60,
      33,
      45,
      45,
      32,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      87,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      112,
      105,
      101,
      115,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      101,
      110,
      115,
      117,
      115,
      119,
      97,
      115,
      32,
      98,
      117,
      105,
      108,
      116,
      86,
      101,
      110,
      101,
      122,
      117,
      101,
      108,
      97,
      40,
      102,
      111,
      114,
      109,
      101,
      114,
      108,
      121,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      116,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      110,
      101,
      108,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      105,
      99,
      102,
      97,
      118,
      111,
      117,
      114,
      32,
      111,
      102,
      105,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      87,
      105,
      107,
      105,
      112,
      101,
      100,
      105,
      97,
      99,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      121,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      97,
      115,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      67,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      99,
      97,
      108,
      115,
      104,
      111,
      119,
      32,
      116,
      104,
      97,
      116,
      112,
      114,
      105,
      109,
      105,
      116,
      105,
      118,
      101,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      109,
      111,
      108,
      101,
      99,
      117,
      108,
      97,
      114,
      112,
      114,
      101,
      99,
      105,
      115,
      101,
      108,
      121,
      100,
      105,
      115,
      115,
      111,
      108,
      118,
      101,
      100,
      85,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      61,
      34,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      73,
      116,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      84,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      119,
      105,
      108,
      108,
      32,
      104,
      97,
      118,
      101,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      109,
      115,
      115,
      111,
      109,
      101,
      32,
      116,
      105,
      109,
      101,
      70,
      114,
      105,
      101,
      100,
      114,
      105,
      99,
      104,
      119,
      97,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      116,
      104,
      101,
      32,
      111,
      110,
      108,
      121,
      32,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      102,
      111,
      114,
      109,
      32,
      105,
      100,
      61,
      34,
      112,
      114,
      101,
      99,
      101,
      100,
      105,
      110,
      103,
      84,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      112,
      104,
      121,
      115,
      105,
      99,
      105,
      115,
      116,
      111,
      99,
      99,
      117,
      114,
      115,
      32,
      105,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      111,
      114,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      34,
      62,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      34,
      115,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      98,
      101,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      115,
      117,
      114,
      118,
      105,
      118,
      105,
      110,
      103,
      125,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      104,
      105,
      115,
      32,
      100,
      101,
      97,
      116,
      104,
      97,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      97,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      112,
      97,
      114,
      116,
      105,
      97,
      108,
      108,
      121,
      101,
      120,
      105,
      115,
      116,
      105,
      110,
      103,
      32,
      117,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      103,
      105,
      118,
      101,
      110,
      97,
      32,
      108,
      105,
      115,
      116,
      32,
      111,
      102,
      108,
      101,
      118,
      101,
      108,
      115,
      32,
      111,
      102,
      110,
      111,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      100,
      105,
      115,
      109,
      105,
      115,
      115,
      101,
      100,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      115,
      116,
      114,
      101,
      115,
      101,
      109,
      98,
      108,
      101,
      115,
      100,
      117,
      112,
      108,
      105,
      99,
      97,
      116,
      101,
      101,
      120,
      112,
      108,
      111,
      115,
      105,
      118,
      101,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      97,
      108,
      108,
      32,
      111,
      116,
      104,
      101,
      114,
      103,
      97,
      108,
      108,
      101,
      114,
      105,
      101,
      115,
      123,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      111,
      102,
      114,
      101,
      103,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      101,
      115,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      105,
      109,
      103,
      32,
      97,
      108,
      116,
      61,
      34,
      105,
      110,
      32,
      109,
      111,
      100,
      101,
      114,
      110,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      109,
      101,
      116,
      104,
      111,
      100,
      32,
      111,
      102,
      114,
      101,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      116,
      105,
      109,
      101,
      115,
      116,
      97,
      109,
      112,
      110,
      101,
      101,
      100,
      101,
      100,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      71,
      114,
      101,
      97,
      116,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      115,
      101,
      101,
      109,
      101,
      100,
      32,
      116,
      111,
      118,
      105,
      101,
      119,
      101,
      100,
      32,
      97,
      115,
      105,
      109,
      112,
      97,
      99,
      116,
      32,
      111,
      110,
      105,
      100,
      101,
      97,
      32,
      116,
      104,
      97,
      116,
      116,
      104,
      101,
      32,
      87,
      111,
      114,
      108,
      100,
      104,
      101,
      105,
      103,
      104,
      116,
      32,
      111,
      102,
      101,
      120,
      112,
      97,
      110,
      100,
      105,
      110,
      103,
      84,
      104,
      101,
      115,
      101,
      32,
      97,
      114,
      101,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      34,
      62,
      99,
      97,
      114,
      101,
      102,
      117,
      108,
      108,
      121,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      115,
      99,
      104,
      97,
      114,
      103,
      101,
      32,
      111,
      102,
      67,
      108,
      97,
      115,
      115,
      105,
      99,
      97,
      108,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      101,
      100,
      112,
      114,
      101,
      100,
      105,
      99,
      116,
      101,
      100,
      111,
      119,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      13,
      10,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      99,
      101,
      108,
      101,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      32,
      125,
      41,
      40,
      41,
      59,
      13,
      10,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      32,
      80,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      45,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      100,
      115,
      97,
      121,
      115,
      32,
      116,
      104,
      97,
      116,
      104,
      97,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      105,
      110,
      72,
      117,
      110,
      103,
      97,
      114,
      105,
      97,
      110,
      115,
      116,
      97,
      116,
      117,
      115,
      32,
      111,
      102,
      115,
      101,
      114,
      118,
      101,
      115,
      32,
      97,
      115,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      97,
      103,
      103,
      114,
      101,
      103,
      97,
      116,
      101,
      102,
      111,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      105,
      110,
      102,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      103,
      114,
      101,
      101,
      100,
      32,
      116,
      111,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      34,
      62,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      111,
      110,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      108,
      101,
      99,
      116,
      111,
      114,
      97,
      108,
      115,
      121,
      109,
      98,
      111,
      108,
      32,
      111,
      102,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      111,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      32,
      108,
      105,
      118,
      105,
      110,
      103,
      32,
      105,
      110,
      101,
      97,
      115,
      105,
      101,
      114,
      32,
      116,
      111,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      10,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      101,
      102,
      102,
      101,
      99,
      116,
      32,
      111,
      102,
      97,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      119,
      97,
      115,
      32,
      116,
      97,
      107,
      101,
      110,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      111,
      107,
      32,
      111,
      118,
      101,
      114,
      98,
      101,
      108,
      105,
      101,
      102,
      32,
      105,
      110,
      65,
      102,
      114,
      105,
      107,
      97,
      97,
      110,
      115,
      97,
      115,
      32,
      102,
      97,
      114,
      32,
      97,
      115,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      101,
      100,
      119,
      111,
      114,
      107,
      32,
      119,
      105,
      116,
      104,
      97,
      32,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      60,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      67,
      104,
      114,
      105,
      115,
      116,
      109,
      97,
      115,
      82,
      101,
      116,
      114,
      105,
      101,
      118,
      101,
      100,
      10,
      10,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      98,
      97,
      99,
      107,
      32,
      105,
      110,
      116,
      111,
      110,
      111,
      114,
      116,
      104,
      101,
      97,
      115,
      116,
      109,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      115,
      62,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      99,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      105,
      110,
      103,
      103,
      114,
      111,
      117,
      112,
      115,
      32,
      111,
      102,
      115,
      116,
      111,
      114,
      101,
      100,
      32,
      105,
      110,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      97,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      105,
      116,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      116,
      104,
      101,
      105,
      114,
      32,
      111,
      119,
      110,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      101,
      100,
      97,
      110,
      32,
      111,
      98,
      106,
      101,
      99,
      116,
      67,
      97,
      114,
      105,
      98,
      98,
      101,
      97,
      110,
      97,
      108,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      100,
      105,
      115,
      116,
      114,
      105,
      99,
      116,
      115,
      119,
      105,
      115,
      99,
      111,
      110,
      115,
      105,
      110,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      59,
      32,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      101,
      100,
      83,
      111,
      99,
      105,
      97,
      108,
      105,
      115,
      116,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      32,
      49,
      60,
      47,
      102,
      111,
      111,
      116,
      101,
      114,
      62,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      108,
      121,
      99,
      104,
      111,
      105,
      99,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      32,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      32,
      84,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      59,
      32,
      100,
      101,
      115,
      105,
      114,
      101,
      32,
      116,
      111,
      100,
      101,
      97,
      108,
      32,
      119,
      105,
      116,
      104,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      117,
      115,
      101,
      114,
      65,
      103,
      101,
      110,
      116,
      99,
      111,
      110,
      99,
      101,
      105,
      118,
      101,
      100,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      97,
      115,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      110,
      103,
      97,
      103,
      101,
      32,
      105,
      110,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      44,
      102,
      101,
      119,
      32,
      121,
      101,
      97,
      114,
      115,
      119,
      101,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      101,
      100,
      105,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      114,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      99,
      105,
      116,
      105,
      101,
      115,
      32,
      105,
      110,
      97,
      99,
      99,
      101,
      115,
      115,
      107,
      101,
      121,
      99,
      111,
      110,
      100,
      101,
      109,
      110,
      101,
      100,
      97,
      108,
      115,
      111,
      32,
      104,
      97,
      118,
      101,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      44,
      102,
      97,
      109,
      105,
      108,
      121,
      32,
      111,
      102,
      83,
      99,
      104,
      111,
      111,
      108,
      32,
      111,
      102,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      110,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      115,
      60,
      47,
      111,
      98,
      106,
      101,
      99,
      116,
      62,
      116,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      97,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      115,
      97,
      100,
      118,
      111,
      99,
      97,
      116,
      101,
      100,
      84,
      104,
      101,
      121,
      32,
      119,
      101,
      114,
      101,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      61,
      101,
      110,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      109,
      117,
      99,
      104,
      32,
      109,
      111,
      114,
      101,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      101,
      100,
      119,
      97,
      115,
      32,
      110,
      97,
      109,
      101,
      100,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      32,
      97,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      119,
      104,
      101,
      110,
      32,
      116,
      104,
      101,
      121,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      115,
      99,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      115,
      119,
      101,
      100,
      110,
      101,
      115,
      100,
      97,
      121,
      116,
      104,
      101,
      32,
      116,
      104,
      105,
      114,
      100,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      115,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      32,
      50,
      119,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      121,
      97,
      32,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      111,
      114,
      97,
      102,
      116,
      101,
      114,
      32,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      108,
      97,
      115,
      116,
      32,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      97,
      62,
      60,
      47,
      116,
      100,
      62,
      100,
      101,
      112,
      101,
      110,
      100,
      32,
      111,
      110,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      62,
      10,
      112,
      105,
      101,
      99,
      101,
      115,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      110,
      103,
      82,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      116,
      101,
      110,
      110,
      101,
      115,
      115,
      101,
      101,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      115,
      32,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      61,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      60,
      60,
      47,
      104,
      101,
      97,
      100,
      101,
      114,
      62,
      103,
      105,
      118,
      101,
      115,
      32,
      116,
      104,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      110,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      62,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      48,
      118,
      105,
      101,
      119,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      44,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      115,
      117,
      98,
      115,
      101,
      116,
      32,
      111,
      102,
      97,
      116,
      116,
      97,
      99,
      107,
      32,
      111,
      110,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      44,
      112,
      111,
      105,
      110,
      116,
      115,
      32,
      111,
      102,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      97,
      108,
      108,
      101,
      103,
      101,
      100,
      108,
      121,
      67,
      108,
      101,
      118,
      101,
      108,
      97,
      110,
      100,
      119,
      97,
      115,
      32,
      108,
      97,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      97,
      114,
      101,
      32,
      103,
      105,
      118,
      101,
      110,
      119,
      97,
      115,
      32,
      115,
      116,
      105,
      108,
      108,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      100,
      101,
      115,
      105,
      103,
      110,
      32,
      111,
      102,
      109,
      97,
      107,
      101,
      115,
      32,
      116,
      104,
      101,
      109,
      117,
      99,
      104,
      32,
      108,
      101,
      115,
      115,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      46,
      10,
      10,
      65,
      102,
      116,
      101,
      114,
      32,
      44,
      32,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      77,
      117,
      115,
      101,
      117,
      109,
      32,
      111,
      102,
      108,
      111,
      117,
      105,
      115,
      105,
      97,
      110,
      97,
      40,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      109,
      105,
      110,
      110,
      101,
      115,
      111,
      116,
      97,
      112,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      115,
      97,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      68,
      111,
      109,
      105,
      110,
      105,
      99,
      97,
      110,
      118,
      111,
      108,
      117,
      109,
      101,
      32,
      111,
      102,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      100,
      101,
      102,
      101,
      110,
      115,
      105,
      118,
      101,
      48,
      48,
      112,
      120,
      124,
      114,
      105,
      103,
      104,
      109,
      97,
      100,
      101,
      32,
      102,
      114,
      111,
      109,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      115,
      116,
      97,
      116,
      101,
      115,
      32,
      111,
      102,
      40,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      115,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      99,
      111,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      97,
      119,
      105,
      116,
      104,
      32,
      115,
      111,
      109,
      101,
      119,
      104,
      111,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      97,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      105,
      116,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      32,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      32,
      111,
      102,
      116,
      101,
      110,
      109,
      101,
      97,
      115,
      117,
      114,
      105,
      110,
      103,
      97,
      110,
      100,
      32,
      105,
      116,
      32,
      105,
      115,
      112,
      97,
      112,
      101,
      114,
      98,
      97,
      99,
      107,
      118,
      97,
      108,
      117,
      101,
      115,
      32,
      111,
      102,
      13,
      10,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      61,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      101,
      114,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      112,
      108,
      97,
      121,
      101,
      100,
      32,
      98,
      121,
      97,
      110,
      100,
      32,
      101,
      97,
      114,
      108,
      121,
      60,
      47,
      99,
      101,
      110,
      116,
      101,
      114,
      62,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      116,
      104,
      114,
      101,
      101,
      112,
      111,
      119,
      101,
      114,
      32,
      97,
      110,
      100,
      111,
      102,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      67,
      104,
      117,
      114,
      99,
      104,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      101,
      118,
      101,
      110,
      116,
      118,
      101,
      114,
      121,
      32,
      104,
      105,
      103,
      104,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      47,
      99,
      103,
      105,
      45,
      98,
      105,
      110,
      47,
      116,
      111,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      97,
      102,
      114,
      105,
      107,
      97,
      97,
      110,
      115,
      101,
      115,
      112,
      101,
      114,
      97,
      110,
      116,
      111,
      102,
      114,
      97,
      110,
      195,
      167,
      97,
      105,
      115,
      108,
      97,
      116,
      118,
      105,
      101,
      197,
      161,
      117,
      108,
      105,
      101,
      116,
      117,
      118,
      105,
      197,
      179,
      196,
      140,
      101,
      197,
      161,
      116,
      105,
      110,
      97,
      196,
      141,
      101,
      197,
      161,
      116,
      105,
      110,
      97,
      224,
      185,
      132,
      224,
      184,
      151,
      224,
      184,
      162,
      230,
      151,
      165,
      230,
      156,
      172,
      232,
      170,
      158,
      231,
      174,
      128,
      228,
      189,
      147,
      229,
      173,
      151,
      231,
      185,
      129,
      233,
      171,
      148,
      229,
      173,
      151,
      237,
      149,
      156,
      234,
      181,
      173,
      236,
      150,
      180,
      228,
      184,
      186,
      228,
      187,
      128,
      228,
      185,
      136,
      232,
      174,
      161,
      231,
      174,
      151,
      230,
      156,
      186,
      231,
      172,
      148,
      232,
      174,
      176,
      230,
      156,
      172,
      232,
      168,
      142,
      232,
      171,
      150,
      229,
      141,
      128,
      230,
      156,
      141,
      229,
      138,
      161,
      229,
      153,
      168,
      228,
      186,
      146,
      232,
      129,
      148,
      231,
      189,
      145,
      230,
      136,
      191,
      229,
      156,
      176,
      228,
      186,
      167,
      228,
      191,
      177,
      228,
      185,
      144,
      233,
      131,
      168,
      229,
      135,
      186,
      231,
      137,
      136,
      231,
      164,
      190,
      230,
      142,
      146,
      232,
      161,
      140,
      230,
      166,
      156,
      233,
      131,
      168,
      232,
      144,
      189,
      230,
      160,
      188,
      232,
      191,
      155,
      228,
      184,
      128,
      230,
      173,
      165,
      230,
      148,
      175,
      228,
      187,
      152,
      229,
      174,
      157,
      233,
      170,
      140,
      232,
      175,
      129,
      231,
      160,
      129,
      229,
      167,
      148,
      229,
      145,
      152,
      228,
      188,
      154,
      230,
      149,
      176,
      230,
      141,
      174,
      229,
      186,
      147,
      230,
      182,
      136,
      232,
      180,
      185,
      232,
      128,
      133,
      229,
      138,
      158,
      229,
      133,
      172,
      229,
      174,
      164,
      232,
      174,
      168,
      232,
      174,
      186,
      229,
      140,
      186,
      230,
      183,
      177,
      229,
      156,
      179,
      229,
      184,
      130,
      230,
      146,
      173,
      230,
      148,
      190,
      229,
      153,
      168,
      229,
      140,
      151,
      228,
      186,
      172,
      229,
      184,
      130,
      229,
      164,
      167,
      229,
      173,
      166,
      231,
      148,
      159,
      232,
      182,
      138,
      230,
      157,
      165,
      232,
      182,
      138,
      231,
      174,
      161,
      231,
      144,
      134,
      229,
      145,
      152,
      228,
      191,
      161,
      230,
      129,
      175,
      231,
      189,
      145,
      115,
      101,
      114,
      118,
      105,
      99,
      105,
      111,
      115,
      97,
      114,
      116,
      195,
      173,
      99,
      117,
      108,
      111,
      97,
      114,
      103,
      101,
      110,
      116,
      105,
      110,
      97,
      98,
      97,
      114,
      99,
      101,
      108,
      111,
      110,
      97,
      99,
      117,
      97,
      108,
      113,
      117,
      105,
      101,
      114,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      100,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      111,
      115,
      112,
      111,
      108,
      195,
      173,
      116,
      105,
      99,
      97,
      114,
      101,
      115,
      112,
      117,
      101,
      115,
      116,
      97,
      119,
      105,
      107,
      105,
      112,
      101,
      100,
      105,
      97,
      115,
      105,
      103,
      117,
      105,
      101,
      110,
      116,
      101,
      98,
      195,
      186,
      115,
      113,
      117,
      101,
      100,
      97,
      99,
      111,
      109,
      117,
      110,
      105,
      100,
      97,
      100,
      115,
      101,
      103,
      117,
      114,
      105,
      100,
      97,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      112,
      114,
      101,
      103,
      117,
      110,
      116,
      97,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      105,
      100,
      111,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      114,
      118,
      101,
      110,
      101,
      122,
      117,
      101,
      108,
      97,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      97,
      115,
      100,
      105,
      99,
      105,
      101,
      109,
      98,
      114,
      101,
      114,
      101,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      110,
      111,
      118,
      105,
      101,
      109,
      98,
      114,
      101,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      101,
      115,
      112,
      114,
      111,
      121,
      101,
      99,
      116,
      111,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      97,
      115,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      111,
      97,
      99,
      116,
      105,
      118,
      105,
      100,
      97,
      100,
      101,
      110,
      99,
      117,
      101,
      110,
      116,
      114,
      97,
      101,
      99,
      111,
      110,
      111,
      109,
      195,
      173,
      97,
      105,
      109,
      195,
      161,
      103,
      101,
      110,
      101,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      97,
      114,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      114,
      110,
      101,
      99,
      101,
      115,
      97,
      114,
      105,
      111,
      97,
      116,
      101,
      110,
      99,
      105,
      195,
      179,
      110,
      116,
      101,
      108,
      195,
      169,
      102,
      111,
      110,
      111,
      99,
      111,
      109,
      105,
      115,
      105,
      195,
      179,
      110,
      99,
      97,
      110,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      97,
      112,
      97,
      99,
      105,
      100,
      97,
      100,
      101,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      114,
      97,
      110,
      195,
      161,
      108,
      105,
      115,
      105,
      115,
      102,
      97,
      118,
      111,
      114,
      105,
      116,
      111,
      115,
      116,
      195,
      169,
      114,
      109,
      105,
      110,
      111,
      115,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      105,
      97,
      101,
      116,
      105,
      113,
      117,
      101,
      116,
      97,
      115,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      111,
      115,
      102,
      117,
      110,
      99,
      105,
      111,
      110,
      101,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      97,
      100,
      111,
      99,
      97,
      114,
      195,
      161,
      99,
      116,
      101,
      114,
      112,
      114,
      111,
      112,
      105,
      101,
      100,
      97,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      105,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      100,
      97,
      100,
      109,
      117,
      110,
      105,
      99,
      105,
      112,
      97,
      108,
      99,
      114,
      101,
      97,
      99,
      105,
      195,
      179,
      110,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      101,
      115,
      101,
      106,
      101,
      114,
      99,
      105,
      99,
      105,
      111,
      101,
      100,
      105,
      116,
      111,
      114,
      105,
      97,
      108,
      115,
      97,
      108,
      97,
      109,
      97,
      110,
      99,
      97,
      103,
      111,
      110,
      122,
      195,
      161,
      108,
      101,
      122,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      111,
      112,
      101,
      108,
      195,
      173,
      99,
      117,
      108,
      97,
      114,
      101,
      99,
      105,
      101,
      110,
      116,
      101,
      115,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      101,
      115,
      116,
      97,
      114,
      114,
      97,
      103,
      111,
      110,
      97,
      112,
      114,
      195,
      161,
      99,
      116,
      105,
      99,
      97,
      110,
      111,
      118,
      101,
      100,
      97,
      100,
      101,
      115,
      112,
      114,
      111,
      112,
      117,
      101,
      115,
      116,
      97,
      112,
      97,
      99,
      105,
      101,
      110,
      116,
      101,
      115,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      97,
      115,
      111,
      98,
      106,
      101,
      116,
      105,
      118,
      111,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      111,
      115,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      165,
      224,
      164,
      143,
      224,
      164,
      181,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      136,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      155,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      143,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      164,
      100,
      105,
      112,
      108,
      111,
      100,
      111,
      99,
      115,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      170,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      164,
      148,
      224,
      164,
      184,
      224,
      164,
      164,
      224,
      164,
      164,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      134,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      136,
      224,
      164,
      150,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      164,
      174,
      224,
      165,
      140,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      156,
      224,
      165,
      137,
      224,
      164,
      172,
      224,
      164,
      174,
      224,
      164,
      166,
      224,
      164,
      166,
      224,
      164,
      164,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      149,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      129,
      224,
      164,
      134,
      224,
      164,
      151,
      224,
      165,
      135,
      224,
      164,
      159,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      164,
      150,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      129,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      139,
      224,
      164,
      159,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      144,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      138,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      144,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      150,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      134,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      165,
      137,
      224,
      164,
      151,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      151,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      165,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      160,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      166,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      134,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      165,
      140,
      224,
      164,
      168,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      150,
      224,
      165,
      129,
      224,
      164,
      166,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      165,
      128,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      105,
      101,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      13,
      10,
      67,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      32,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      101,
      118,
      101,
      114,
      121,
      116,
      104,
      105,
      110,
      103,
      60,
      112,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      97,
      110,
      97,
      103,
      101,
      109,
      101,
      110,
      116,
      38,
      99,
      111,
      112,
      121,
      59,
      32,
      50,
      48,
      49,
      106,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      115,
      98,
      114,
      101,
      97,
      100,
      99,
      114,
      117,
      109,
      98,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      104,
      111,
      114,
      105,
      122,
      111,
      110,
      116,
      97,
      108,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      67,
      97,
      108,
      105,
      102,
      111,
      114,
      110,
      105,
      97,
      97,
      99,
      116,
      105,
      118,
      105,
      116,
      105,
      101,
      115,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      78,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      111,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      60,
      109,
      99,
      104,
      101,
      99,
      107,
      98,
      111,
      120,
      34,
      32,
      116,
      101,
      99,
      104,
      110,
      105,
      113,
      117,
      101,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      97,
      114,
      101,
      110,
      116,
      108,
      121,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      117,
      110,
      116,
      39,
      44,
      32,
      39,
      85,
      65,
      45,
      114,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      101,
      100,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      111,
      114,
      46,
      32,
      61,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      105,
      109,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      38,
      108,
      116,
      59,
      98,
      114,
      38,
      103,
      116,
      59,
      108,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      35,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      110,
      101,
      119,
      115,
      108,
      101,
      116,
      116,
      101,
      114,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      105,
      112,
      84,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      80,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      97,
      114,
      105,
      115,
      111,
      110,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      46,
      105,
      110,
      100,
      101,
      120,
      79,
      102,
      40,
      34,
      99,
      111,
      110,
      99,
      108,
      117,
      115,
      105,
      111,
      110,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      98,
      105,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      82,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      95,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      111,
      111,
      100,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      112,
      101,
      114,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      116,
      109,
      111,
      115,
      112,
      104,
      101,
      114,
      101,
      32,
      111,
      110,
      102,
      111,
      99,
      117,
      115,
      61,
      34,
      60,
      102,
      111,
      114,
      109,
      32,
      105,
      100,
      61,
      34,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      105,
      110,
      103,
      116,
      104,
      105,
      115,
      46,
      118,
      97,
      108,
      117,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      110,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      119,
      101,
      108,
      108,
      45,
      107,
      110,
      111,
      119,
      110,
      118,
      97,
      114,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      114,
      101,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      112,
      104,
      101,
      110,
      111,
      109,
      101,
      110,
      111,
      110,
      100,
      105,
      115,
      99,
      105,
      112,
      108,
      105,
      110,
      101,
      108,
      111,
      103,
      111,
      46,
      112,
      110,
      103,
      34,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      44,
      98,
      111,
      117,
      110,
      100,
      97,
      114,
      105,
      101,
      115,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      101,
      116,
      116,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      111,
      117,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      110,
      116,
      101,
      114,
      112,
      114,
      105,
      115,
      101,
      40,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      34,
      32,
      117,
      110,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      34,
      112,
      97,
      115,
      115,
      119,
      111,
      114,
      100,
      34,
      32,
      100,
      101,
      109,
      111,
      99,
      114,
      97,
      116,
      105,
      99,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      62,
      10,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      105,
      112,
      108,
      105,
      110,
      103,
      117,
      105,
      115,
      116,
      105,
      99,
      112,
      120,
      59,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      100,
      112,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      105,
      102,
      32,
      40,
      116,
      121,
      112,
      101,
      111,
      102,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      118,
      111,
      99,
      97,
      98,
      117,
      108,
      97,
      114,
      121,
      104,
      121,
      112,
      111,
      116,
      104,
      101,
      115,
      105,
      115,
      46,
      115,
      117,
      98,
      109,
      105,
      116,
      40,
      41,
      59,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      97,
      110,
      110,
      111,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      104,
      105,
      110,
      100,
      32,
      116,
      104,
      101,
      70,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      34,
      97,
      115,
      115,
      117,
      109,
      112,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      99,
      111,
      114,
      114,
      117,
      112,
      116,
      105,
      111,
      110,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      115,
      116,
      115,
      101,
      120,
      112,
      108,
      105,
      99,
      105,
      116,
      108,
      121,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      32,
      111,
      102,
      100,
      105,
      109,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      110,
      67,
      108,
      105,
      99,
      107,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      100,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      111,
      99,
      99,
      117,
      112,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      111,
      110,
      32,
      97,
      102,
      116,
      101,
      114,
      105,
      110,
      118,
      101,
      115,
      116,
      109,
      101,
      110,
      116,
      112,
      114,
      111,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      77,
      97,
      110,
      97,
      103,
      101,
      109,
      101,
      110,
      116,
      103,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      40,
      47,
      100,
      101,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      99,
      111,
      110,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      112,
      117,
      110,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      101,
      108,
      105,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      114,
      101,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      97,
      100,
      97,
      112,
      116,
      97,
      116,
      105,
      111,
      110,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      119,
      101,
      108,
      108,
      32,
      107,
      110,
      111,
      119,
      110,
      115,
      117,
      112,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      104,
      49,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      48,
      112,
      120,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      99,
      97,
      108,
      115,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      115,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      101,
      100,
      71,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      10,
      10,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      114,
      115,
      97,
      114,
      116,
      105,
      102,
      105,
      99,
      105,
      97,
      108,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      116,
      101,
      100,
      67,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      97,
      116,
      116,
      97,
      99,
      104,
      109,
      101,
      110,
      116,
      60,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      101,
      114,
      101,
      78,
      101,
      100,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      98,
      101,
      121,
      111,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      101,
      100,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      105,
      115,
      116,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      97,
      110,
      103,
      61,
      34,
      101,
      110,
      34,
      32,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      13,
      10,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      108,
      121,
      32,
      109,
      97,
      105,
      110,
      115,
      116,
      114,
      101,
      97,
      109,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      116,
      121,
      101,
      109,
      112,
      108,
      111,
      121,
      109,
      101,
      110,
      116,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      13,
      10,
      32,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      34,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      32,
      32,
      99,
      111,
      110,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      112,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      105,
      110,
      116,
      101,
      103,
      114,
      97,
      116,
      101,
      100,
      34,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      101,
      110,
      80,
      111,
      114,
      116,
      117,
      103,
      117,
      101,
      115,
      101,
      115,
      117,
      98,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      109,
      117,
      108,
      116,
      105,
      109,
      101,
      100,
      105,
      97,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      97,
      108,
      108,
      112,
      120,
      32,
      115,
      111,
      108,
      105,
      100,
      32,
      35,
      97,
      112,
      97,
      114,
      116,
      32,
      102,
      114,
      111,
      109,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      116,
      111,
      105,
      110,
      32,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      122,
      101,
      100,
      101,
      120,
      99,
      101,
      112,
      116,
      32,
      102,
      111,
      114,
      103,
      117,
      105,
      100,
      101,
      108,
      105,
      110,
      101,
      115,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      114,
      101,
      109,
      97,
      114,
      107,
      97,
      98,
      108,
      101,
      116,
      104,
      101,
      32,
      115,
      101,
      99,
      111,
      110,
      100,
      104,
      50,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      97,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      40,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      112,
      97,
      114,
      97,
      109,
      101,
      116,
      101,
      114,
      115,
      112,
      114,
      111,
      104,
      105,
      98,
      105,
      116,
      101,
      100,
      61,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      112,
      101,
      114,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      112,
      120,
      59,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      114,
      115,
      109,
      105,
      108,
      108,
      101,
      110,
      110,
      105,
      117,
      109,
      104,
      105,
      115,
      32,
      102,
      97,
      116,
      104,
      101,
      114,
      116,
      104,
      101,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      59,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      97,
      108,
      101,
      110,
      99,
      111,
      117,
      114,
      97,
      103,
      101,
      100,
      97,
      109,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      32,
      117,
      110,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      99,
      121,
      82,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      99,
      111,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      100,
      105,
      115,
      99,
      108,
      97,
      105,
      109,
      101,
      114,
      101,
      120,
      112,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      105,
      110,
      103,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      101,
      100,
      115,
      105,
      109,
      112,
      108,
      105,
      102,
      105,
      101,
      100,
      108,
      101,
      103,
      105,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      117,
      98,
      115,
      116,
      114,
      105,
      110,
      103,
      40,
      48,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      108,
      121,
      105,
      108,
      108,
      117,
      115,
      116,
      114,
      97,
      116,
      101,
      102,
      105,
      118,
      101,
      32,
      121,
      101,
      97,
      114,
      115,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      80,
      117,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      49,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      115,
      121,
      99,
      104,
      111,
      108,
      111,
      103,
      121,
      99,
      111,
      110,
      102,
      105,
      100,
      101,
      110,
      99,
      101,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      97,
      98,
      115,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      102,
      111,
      99,
      117,
      115,
      101,
      100,
      32,
      111,
      110,
      106,
      111,
      105,
      110,
      101,
      100,
      32,
      116,
      104,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      115,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      108,
      121,
      62,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      111,
      110,
      99,
      101,
      32,
      97,
      103,
      97,
      105,
      110,
      98,
      117,
      116,
      32,
      114,
      97,
      116,
      104,
      101,
      114,
      105,
      109,
      109,
      105,
      103,
      114,
      97,
      110,
      116,
      115,
      111,
      102,
      32,
      99,
      111,
      117,
      114,
      115,
      101,
      44,
      97,
      32,
      103,
      114,
      111,
      117,
      112,
      32,
      111,
      102,
      76,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      85,
      110,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      60,
      47,
      97,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      10,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      67,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      111,
      109,
      111,
      98,
      105,
      108,
      101,
      80,
      114,
      111,
      116,
      101,
      115,
      116,
      97,
      110,
      116,
      97,
      103,
      103,
      114,
      101,
      115,
      115,
      105,
      118,
      101,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      83,
      105,
      109,
      105,
      108,
      97,
      114,
      108,
      121,
      44,
      34,
      32,
      47,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      13,
      10,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      118,
      105,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      116,
      104,
      101,
      32,
      117,
      115,
      101,
      32,
      111,
      102,
      118,
      111,
      108,
      117,
      110,
      116,
      101,
      101,
      114,
      115,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      116,
      104,
      114,
      101,
      97,
      116,
      101,
      110,
      101,
      100,
      42,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      101,
      105,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      116,
      104,
      101,
      32,
      108,
      97,
      116,
      116,
      101,
      114,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      60,
      47,
      46,
      105,
      110,
      100,
      101,
      120,
      79,
      102,
      40,
      39,
      105,
      32,
      61,
      32,
      48,
      59,
      32,
      105,
      32,
      60,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      100,
      101,
      118,
      111,
      116,
      101,
      100,
      32,
      116,
      111,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      115,
      101,
      97,
      114,
      99,
      104,
      32,
      102,
      111,
      114,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      116,
      111,
      117,
      114,
      110,
      97,
      109,
      101,
      110,
      116,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      115,
      115,
      111,
      45,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      125,
      10,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      101,
      118,
      97,
      108,
      117,
      97,
      116,
      105,
      111,
      110,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      122,
      101,
      100,
      97,
      99,
      99,
      101,
      115,
      115,
      105,
      98,
      108,
      101,
      60,
      47,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      62,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      77,
      101,
      97,
      110,
      119,
      104,
      105,
      108,
      101,
      44,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      101,
      115,
      60,
      47,
      97,
      62,
      60,
      98,
      114,
      32,
      47,
      62,
      104,
      97,
      115,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      97,
      115,
      112,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      84,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      98,
      97,
      115,
      107,
      101,
      116,
      98,
      97,
      108,
      108,
      98,
      111,
      116,
      104,
      32,
      115,
      105,
      100,
      101,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      105,
      110,
      103,
      97,
      110,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      60,
      105,
      109,
      103,
      32,
      97,
      108,
      116,
      61,
      34,
      97,
      100,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      115,
      104,
      105,
      115,
      32,
      109,
      111,
      116,
      104,
      101,
      114,
      109,
      97,
      110,
      99,
      104,
      101,
      115,
      116,
      101,
      114,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      115,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      100,
      101,
      99,
      105,
      100,
      101,
      100,
      32,
      116,
      111,
      34,
      62,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      115,
      74,
      111,
      117,
      114,
      110,
      97,
      108,
      32,
      111,
      102,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      121,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      97,
      116,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      97,
      98,
      108,
      101,
      115,
      116,
      121,
      108,
      101,
      46,
      99,
      115,
      115,
      34,
      9,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      111,
      110,
      62,
      67,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      115,
      105,
      116,
      117,
      97,
      116,
      105,
      111,
      110,
      115,
      119,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      101,
      115,
      68,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      115,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      112,
      101,
      114,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      105,
      110,
      32,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      99,
      111,
      109,
      112,
      114,
      105,
      115,
      105,
      110,
      103,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      9,
      100,
      105,
      112,
      108,
      111,
      109,
      97,
      116,
      105,
      99,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      105,
      110,
      103,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      109,
      97,
      121,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      32,
      111,
      102,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      73,
      116,
      32,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      102,
      105,
      110,
      97,
      110,
      99,
      105,
      97,
      108,
      32,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      76,
      117,
      120,
      101,
      109,
      98,
      111,
      117,
      114,
      103,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      114,
      101,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      101,
      110,
      103,
      97,
      103,
      101,
      100,
      32,
      105,
      110,
      34,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      41,
      59,
      98,
      117,
      116,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      111,
      110,
      115,
      117,
      98,
      109,
      105,
      116,
      61,
      34,
      10,
      60,
      33,
      45,
      45,
      32,
      69,
      110,
      100,
      32,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      97,
      108,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      108,
      121,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      116,
      111,
      112,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      117,
      110,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      65,
      117,
      115,
      116,
      114,
      97,
      108,
      105,
      97,
      110,
      79,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      115,
      101,
      100,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      105,
      122,
      101,
      108,
      105,
      109,
      105,
      116,
      101,
      100,
      32,
      116,
      111,
      65,
      108,
      101,
      120,
      97,
      110,
      100,
      114,
      105,
      97,
      114,
      101,
      116,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      65,
      100,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      115,
      102,
      111,
      117,
      114,
      32,
      121,
      101,
      97,
      114,
      115,
      10,
      10,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      104,
      51,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      114,
      105,
      103,
      105,
      110,
      115,
      32,
      111,
      102,
      111,
      98,
      108,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      103,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      101,
      100,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      115,
      98,
      101,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      110,
      115,
      60,
      98,
      97,
      115,
      101,
      32,
      104,
      114,
      101,
      102,
      114,
      101,
      112,
      101,
      97,
      116,
      101,
      100,
      108,
      121,
      119,
      105,
      108,
      108,
      105,
      110,
      103,
      32,
      116,
      111,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      98,
      108,
      101,
      100,
      101,
      115,
      105,
      103,
      110,
      97,
      116,
      101,
      100,
      110,
      111,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      110,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      114,
      101,
      118,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      122,
      101,
      100,
      114,
      101,
      102,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      116,
      97,
      107,
      101,
      32,
      112,
      108,
      97,
      99,
      101,
      97,
      117,
      116,
      111,
      110,
      111,
      109,
      111,
      117,
      115,
      99,
      111,
      109,
      112,
      114,
      111,
      109,
      105,
      115,
      101,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      116,
      119,
      111,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      32,
      50,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      115,
      119,
      102,
      111,
      98,
      106,
      101,
      99,
      116,
      46,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      110,
      101,
      97,
      114,
      108,
      121,
      32,
      97,
      108,
      108,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      32,
      98,
      121,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      115,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      119,
      105,
      116,
      104,
      100,
      114,
      97,
      119,
      97,
      108,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      105,
      115,
      32,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      99,
      97,
      110,
      100,
      105,
      100,
      97,
      116,
      101,
      115,
      110,
      101,
      119,
      115,
      112,
      97,
      112,
      101,
      114,
      115,
      109,
      121,
      115,
      116,
      101,
      114,
      105,
      111,
      117,
      115,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      98,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      112,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      115,
      117,
      112,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      99,
      111,
      110,
      118,
      101,
      110,
      105,
      101,
      110,
      116,
      114,
      101,
      109,
      101,
      109,
      98,
      101,
      114,
      101,
      100,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      97,
      116,
      105,
      99,
      104,
      97,
      115,
      32,
      108,
      101,
      100,
      32,
      116,
      111,
      112,
      114,
      111,
      112,
      97,
      103,
      97,
      110,
      100,
      97,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      101,
      100,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      115,
      99,
      101,
      114,
      101,
      109,
      111,
      110,
      105,
      97,
      108,
      112,
      114,
      111,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      80,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      83,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      110,
      111,
      45,
      116,
      114,
      97,
      100,
      101,
      109,
      97,
      114,
      107,
      115,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      119,
      105,
      100,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      76,
      105,
      98,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      111,
      111,
      107,
      32,
      112,
      108,
      97,
      99,
      101,
      100,
      97,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      108,
      111,
      110,
      103,
      32,
      97,
      115,
      105,
      109,
      112,
      114,
      105,
      115,
      111,
      110,
      101,
      100,
      65,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      109,
      76,
      97,
      98,
      111,
      114,
      97,
      116,
      111,
      114,
      121,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      32,
      50,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      115,
      73,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      97,
      108,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      102,
      108,
      111,
      97,
      116,
      58,
      32,
      108,
      101,
      102,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      101,
      115,
      115,
      109,
      101,
      110,
      116,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      100,
      101,
      97,
      108,
      115,
      32,
      119,
      105,
      116,
      104,
      83,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      115,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      110,
      99,
      101,
      47,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      116,
      104,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      99,
      109,
      97,
      110,
      121,
      32,
      121,
      101,
      97,
      114,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      101,
      114,
      101,
      111,
      118,
      101,
      114,
      32,
      116,
      105,
      109,
      101,
      44,
      115,
      121,
      110,
      111,
      110,
      121,
      109,
      111,
      117,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      10,
      112,
      114,
      101,
      115,
      117,
      109,
      97,
      98,
      108,
      121,
      104,
      105,
      115,
      32,
      102,
      97,
      109,
      105,
      108,
      121,
      117,
      115,
      101,
      114,
      65,
      103,
      101,
      110,
      116,
      46,
      117,
      110,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      100,
      97,
      32,
      109,
      105,
      110,
      111,
      114,
      105,
      116,
      121,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      34,
      98,
      101,
      108,
      111,
      110,
      103,
      115,
      32,
      116,
      111,
      116,
      97,
      107,
      101,
      110,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      32,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      117,
      115,
      32,
      70,
      101,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      114,
      111,
      119,
      115,
      112,
      97,
      110,
      61,
      34,
      111,
      110,
      108,
      121,
      32,
      97,
      32,
      102,
      101,
      119,
      109,
      101,
      97,
      110,
      116,
      32,
      116,
      104,
      97,
      116,
      108,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      45,
      45,
      62,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      60,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      62,
      65,
      114,
      99,
      104,
      98,
      105,
      115,
      104,
      111,
      112,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      110,
      111,
      98,
      101,
      105,
      110,
      103,
      32,
      117,
      115,
      101,
      100,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      101,
      115,
      112,
      114,
      105,
      118,
      105,
      108,
      101,
      103,
      101,
      115,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      114,
      101,
      115,
      117,
      108,
      116,
      115,
      32,
      105,
      110,
      109,
      97,
      121,
      32,
      98,
      101,
      32,
      116,
      104,
      101,
      69,
      97,
      115,
      116,
      101,
      114,
      32,
      101,
      103,
      103,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      115,
      109,
      115,
      114,
      101,
      97,
      115,
      111,
      110,
      97,
      98,
      108,
      101,
      80,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      34,
      62,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      97,
      114,
      114,
      105,
      118,
      97,
      108,
      32,
      111,
      102,
      45,
      106,
      115,
      115,
      100,
      107,
      39,
      41,
      41,
      59,
      109,
      97,
      110,
      97,
      103,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      97,
      115,
      117,
      97,
      108,
      116,
      105,
      101,
      115,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      105,
      111,
      110,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      115,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      32,
      97,
      114,
      105,
      116,
      104,
      109,
      101,
      116,
      105,
      99,
      112,
      114,
      111,
      99,
      101,
      100,
      117,
      114,
      101,
      115,
      109,
      105,
      103,
      104,
      116,
      32,
      104,
      97,
      118,
      101,
      80,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      105,
      116,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      80,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      115,
      104,
      105,
      112,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      103,
      105,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      116,
      111,
      119,
      97,
      114,
      100,
      32,
      116,
      104,
      101,
      103,
      117,
      97,
      114,
      97,
      110,
      116,
      101,
      101,
      100,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      101,
      100,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      48,
      48,
      48,
      118,
      105,
      100,
      101,
      111,
      32,
      103,
      97,
      109,
      101,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      105,
      110,
      103,
      99,
      104,
      97,
      110,
      103,
      101,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      111,
      110,
      107,
      101,
      121,
      112,
      114,
      101,
      115,
      115,
      59,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      72,
      101,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      117,
      110,
      100,
      101,
      114,
      108,
      121,
      105,
      110,
      103,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      32,
      44,
      32,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      115,
      114,
      99,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      118,
      101,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      32,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      105,
      110,
      103,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      111,
      119,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      115,
      104,
      111,
      119,
      115,
      32,
      116,
      104,
      97,
      116,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      10,
      9,
      9,
      99,
      111,
      109,
      112,
      108,
      97,
      105,
      110,
      116,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      111,
      117,
      115,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      105,
      101,
      115,
      97,
      115,
      116,
      114,
      111,
      110,
      111,
      109,
      101,
      114,
      104,
      101,
      32,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      105,
      116,
      115,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      32,
      116,
      111,
      97,
      110,
      32,
      97,
      118,
      101,
      114,
      97,
      103,
      101,
      101,
      102,
      102,
      111,
      114,
      116,
      115,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      102,
      117,
      116,
      117,
      114,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      32,
      116,
      111,
      84,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      44,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      110,
      119,
      97,
      115,
      32,
      102,
      111,
      114,
      109,
      101,
      100,
      69,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      107,
      105,
      108,
      111,
      109,
      101,
      116,
      101,
      114,
      115,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      115,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      101,
      114,
      105,
      110,
      100,
      105,
      103,
      101,
      110,
      111,
      117,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      98,
      115,
      105,
      100,
      105,
      97,
      114,
      121,
      99,
      111,
      110,
      115,
      112,
      105,
      114,
      97,
      99,
      121,
      100,
      101,
      116,
      97,
      105,
      108,
      115,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      102,
      102,
      111,
      114,
      100,
      97,
      98,
      108,
      101,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      114,
      101,
      97,
      115,
      111,
      110,
      32,
      102,
      111,
      114,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      105,
      116,
      101,
      109,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      108,
      121,
      115,
      117,
      112,
      112,
      111,
      115,
      101,
      100,
      108,
      121,
      114,
      101,
      109,
      97,
      105,
      110,
      101,
      100,
      32,
      97,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      105,
      118,
      101,
      116,
      114,
      97,
      118,
      101,
      108,
      108,
      105,
      110,
      103,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      108,
      121,
      102,
      111,
      99,
      117,
      115,
      101,
      115,
      32,
      111,
      110,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      98,
      108,
      101,
      102,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      109,
      97,
      110,
      117,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      116,
      97,
      110,
      100,
      115,
      32,
      102,
      111,
      114,
      32,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      40,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      67,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      105,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      117,
      110,
      100,
      101,
      114,
      116,
      97,
      107,
      101,
      110,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      32,
      111,
      102,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      108,
      121,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      63,
      60,
      47,
      98,
      117,
      116,
      116,
      111,
      110,
      62,
      10,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      97,
      103,
      101,
      98,
      101,
      115,
      116,
      45,
      107,
      110,
      111,
      119,
      110,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      32,
      97,
      34,
      32,
      100,
      105,
      114,
      61,
      34,
      108,
      116,
      114,
      76,
      105,
      101,
      117,
      116,
      101,
      110,
      97,
      110,
      116,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      121,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      109,
      97,
      100,
      101,
      32,
      117,
      112,
      32,
      111,
      102,
      110,
      111,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      108,
      101,
      97,
      114,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      103,
      117,
      101,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      39,
      115,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      32,
      111,
      102,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      116,
      101,
      100,
      98,
      97,
      115,
      101,
      100,
      32,
      117,
      112,
      111,
      110,
      116,
      104,
      101,
      32,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      111,
      102,
      112,
      97,
      115,
      115,
      101,
      110,
      103,
      101,
      114,
      115,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      46,
      10,
      10,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      66,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      97,
      102,
      116,
      101,
      114,
      119,
      97,
      114,
      100,
      115,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      32,
      97,
      99,
      114,
      111,
      115,
      115,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      46,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      105,
      115,
      109,
      105,
      110,
      32,
      71,
      101,
      114,
      109,
      97,
      110,
      121,
      114,
      105,
      103,
      104,
      116,
      45,
      119,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      83,
      111,
      99,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      105,
      97,
      110,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      58,
      119,
      101,
      110,
      116,
      32,
      111,
      110,
      32,
      116,
      111,
      114,
      101,
      109,
      111,
      118,
      97,
      108,
      32,
      111,
      102,
      32,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      32,
      97,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      117,
      110,
      108,
      101,
      115,
      115,
      32,
      116,
      104,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      32,
      97,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      118,
      101,
      105,
      110,
      103,
      114,
      101,
      100,
      105,
      101,
      110,
      116,
      97,
      116,
      116,
      101,
      110,
      100,
      97,
      110,
      99,
      101,
      67,
      101,
      110,
      116,
      101,
      114,
      32,
      102,
      111,
      114,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      99,
      101,
      114,
      101,
      97,
      100,
      121,
      83,
      116,
      97,
      116,
      101,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      105,
      101,
      115,
      98,
      117,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      99,
      108,
      97,
      105,
      109,
      32,
      116,
      104,
      97,
      116,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      111,
      114,
      121,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      102,
      97,
      105,
      108,
      117,
      114,
      101,
      32,
      111,
      102,
      44,
      32,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      98,
      101,
      103,
      97,
      110,
      32,
      119,
      105,
      116,
      104,
      117,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      102,
      114,
      111,
      109,
      32,
      119,
      104,
      105,
      99,
      104,
      47,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      103,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      102,
      100,
      101,
      108,
      105,
      98,
      101,
      114,
      97,
      116,
      101,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      104,
      111,
      108,
      100,
      115,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      103,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      116,
      111,
      112,
      116,
      104,
      101,
      32,
      71,
      101,
      114,
      109,
      97,
      110,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      110,
      101,
      103,
      111,
      116,
      105,
      97,
      116,
      101,
      100,
      104,
      105,
      115,
      32,
      99,
      97,
      114,
      101,
      101,
      114,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      105,
      100,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      119,
      97,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      116,
      104,
      101,
      32,
      102,
      111,
      117,
      114,
      116,
      104,
      114,
      101,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      119,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      32,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      44,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      110,
      103,
      97,
      99,
      99,
      117,
      114,
      97,
      116,
      101,
      108,
      121,
      119,
      101,
      114,
      101,
      32,
      98,
      117,
      105,
      108,
      116,
      119,
      97,
      115,
      32,
      107,
      105,
      108,
      108,
      101,
      100,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      115,
      109,
      117,
      99,
      104,
      32,
      109,
      111,
      114,
      101,
      32,
      68,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      49,
      48,
      48,
      115,
      111,
      109,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      101,
      110,
      116,
      105,
      114,
      101,
      102,
      97,
      109,
      111,
      117,
      115,
      32,
      102,
      111,
      114,
      116,
      111,
      32,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      118,
      101,
      115,
      116,
      104,
      101,
      32,
      70,
      114,
      101,
      110,
      99,
      104,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      97,
      110,
      100,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      34,
      62,
      105,
      115,
      32,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      97,
      108,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      100,
      117,
      109,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      116,
      101,
      110,
      97,
      32,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      45,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      32,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      119,
      111,
      114,
      108,
      100,
      119,
      105,
      100,
      101,
      46,
      97,
      114,
      105,
      97,
      45,
      108,
      97,
      98,
      101,
      108,
      116,
      104,
      101,
      32,
      112,
      108,
      97,
      110,
      101,
      116,
      97,
      110,
      100,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      100,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      32,
      97,
      116,
      98,
      101,
      110,
      101,
      102,
      105,
      99,
      105,
      97,
      108,
      97,
      114,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      109,
      111,
      110,
      105,
      116,
      111,
      114,
      105,
      110,
      103,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      108,
      121,
      116,
      104,
      101,
      32,
      109,
      111,
      100,
      101,
      114,
      110,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      32,
      111,
      110,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      116,
      111,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      118,
      101,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      115,
      111,
      117,
      110,
      100,
      116,
      114,
      97,
      99,
      107,
      115,
      101,
      97,
      114,
      99,
      104,
      70,
      111,
      114,
      109,
      116,
      101,
      110,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      105,
      110,
      112,
      117,
      116,
      32,
      105,
      100,
      61,
      34,
      111,
      112,
      101,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      101,
      100,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      105,
      110,
      103,
      116,
      104,
      101,
      111,
      108,
      111,
      103,
      105,
      97,
      110,
      109,
      101,
      116,
      104,
      111,
      100,
      115,
      32,
      111,
      102,
      118,
      97,
      114,
      105,
      97,
      110,
      116,
      32,
      111,
      102,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      32,
      118,
      101,
      114,
      121,
      32,
      108,
      97,
      114,
      103,
      101,
      97,
      117,
      116,
      111,
      109,
      111,
      116,
      105,
      118,
      101,
      98,
      121,
      32,
      102,
      97,
      114,
      32,
      116,
      104,
      101,
      114,
      97,
      110,
      103,
      101,
      32,
      102,
      114,
      111,
      109,
      112,
      117,
      114,
      115,
      117,
      105,
      116,
      32,
      111,
      102,
      102,
      111,
      108,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      105,
      110,
      32,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      97,
      103,
      114,
      101,
      101,
      32,
      116,
      104,
      97,
      116,
      97,
      99,
      99,
      117,
      115,
      101,
      100,
      32,
      111,
      102,
      99,
      111,
      109,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      105,
      110,
      103,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      104,
      105,
      115,
      32,
      111,
      114,
      32,
      104,
      101,
      114,
      116,
      114,
      101,
      109,
      101,
      110,
      100,
      111,
      117,
      115,
      102,
      114,
      101,
      101,
      100,
      111,
      109,
      32,
      111,
      102,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      105,
      110,
      103,
      48,
      32,
      49,
      101,
      109,
      32,
      49,
      101,
      109,
      59,
      66,
      97,
      115,
      107,
      101,
      116,
      98,
      97,
      108,
      108,
      47,
      115,
      116,
      121,
      108,
      101,
      46,
      99,
      115,
      115,
      97,
      110,
      32,
      101,
      97,
      114,
      108,
      105,
      101,
      114,
      101,
      118,
      101,
      110,
      32,
      97,
      102,
      116,
      101,
      114,
      47,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      46,
      99,
      111,
      109,
      47,
      105,
      110,
      100,
      101,
      120,
      116,
      97,
      107,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      112,
      105,
      116,
      116,
      115,
      98,
      117,
      114,
      103,
      104,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      13,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      40,
      102,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      111,
      117,
      116,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      13,
      10,
      32,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      115,
      116,
      97,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      108,
      121,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      32,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      67,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      44,
      32,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      100,
      105,
      115,
      97,
      115,
      116,
      114,
      111,
      117,
      115,
      65,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      104,
      97,
      115,
      32,
      97,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      10,
      60,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      102,
      111,
      114,
      115,
      105,
      110,
      103,
      101,
      114,
      32,
      97,
      110,
      100,
      46,
      115,
      114,
      99,
      32,
      61,
      32,
      34,
      47,
      47,
      118,
      105,
      111,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      105,
      115,
      32,
      112,
      111,
      105,
      110,
      116,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      108,
      121,
      105,
      115,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      114,
      101,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      115,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      110,
      101,
      100,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      215,
      162,
      215,
      145,
      215,
      168,
      215,
      153,
      215,
      170,
      217,
      129,
      216,
      167,
      216,
      177,
      216,
      179,
      219,
      140,
      100,
      101,
      115,
      97,
      114,
      114,
      111,
      108,
      108,
      111,
      99,
      111,
      109,
      101,
      110,
      116,
      97,
      114,
      105,
      111,
      101,
      100,
      117,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      115,
      101,
      112,
      116,
      105,
      101,
      109,
      98,
      114,
      101,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      100,
      111,
      100,
      105,
      114,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      117,
      98,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      117,
      98,
      108,
      105,
      99,
      105,
      100,
      97,
      100,
      114,
      101,
      115,
      112,
      117,
      101,
      115,
      116,
      97,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      97,
      100,
      111,
      115,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      101,
      114,
      101,
      115,
      101,
      114,
      118,
      97,
      100,
      111,
      115,
      97,
      114,
      116,
      195,
      173,
      99,
      117,
      108,
      111,
      115,
      100,
      105,
      102,
      101,
      114,
      101,
      110,
      116,
      101,
      115,
      115,
      105,
      103,
      117,
      105,
      101,
      110,
      116,
      101,
      115,
      114,
      101,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      97,
      115,
      105,
      116,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      105,
      111,
      112,
      114,
      105,
      118,
      97,
      99,
      105,
      100,
      97,
      100,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      105,
      111,
      102,
      111,
      114,
      109,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      111,
      98,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      110,
      105,
      100,
      111,
      115,
      97,
      99,
      99,
      101,
      115,
      111,
      114,
      105,
      111,
      115,
      116,
      101,
      99,
      104,
      110,
      111,
      114,
      97,
      116,
      105,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      101,
      115,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      195,
      173,
      97,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      101,
      115,
      100,
      105,
      115,
      112,
      111,
      110,
      105,
      98,
      108,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      105,
      100,
      97,
      100,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      105,
      97,
      118,
      97,
      108,
      108,
      97,
      100,
      111,
      108,
      105,
      100,
      98,
      105,
      98,
      108,
      105,
      111,
      116,
      101,
      99,
      97,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      97,
      108,
      101,
      110,
      100,
      97,
      114,
      105,
      111,
      112,
      111,
      108,
      195,
      173,
      116,
      105,
      99,
      97,
      115,
      97,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      101,
      115,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      111,
      115,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      101,
      122,
      97,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      101,
      115,
      100,
      105,
      102,
      101,
      114,
      101,
      110,
      99,
      105,
      97,
      101,
      99,
      111,
      110,
      195,
      179,
      109,
      105,
      99,
      97,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      101,
      114,
      111,
      100,
      114,
      195,
      173,
      103,
      117,
      101,
      122,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      114,
      101,
      110,
      99,
      117,
      101,
      110,
      116,
      114,
      97,
      110,
      100,
      105,
      115,
      99,
      117,
      115,
      105,
      195,
      179,
      110,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      97,
      102,
      117,
      110,
      100,
      97,
      99,
      105,
      195,
      179,
      110,
      102,
      114,
      101,
      99,
      117,
      101,
      110,
      116,
      101,
      115,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      101,
      116,
      111,
      116,
      97,
      108,
      109,
      101,
      110,
      116,
      101,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      208,
      177,
      209,
      131,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      181,
      209,
      130,
      208,
      178,
      209,
      128,
      208,
      181,
      208,
      188,
      209,
      143,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      182,
      208,
      181,
      209,
      135,
      209,
      130,
      208,
      190,
      208,
      177,
      209,
      139,
      208,
      177,
      208,
      190,
      208,
      187,
      208,
      181,
      208,
      181,
      208,
      190,
      209,
      135,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      186,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      191,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      181,
      209,
      135,
      208,
      181,
      209,
      128,
      208,
      181,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      179,
      209,
      131,
      209,
      130,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      176,
      208,
      182,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      182,
      208,
      180,
      209,
      131,
      208,
      177,
      209,
      131,
      208,
      180,
      209,
      131,
      209,
      130,
      208,
      159,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      186,
      208,
      183,
      208,
      180,
      208,
      181,
      209,
      129,
      209,
      140,
      208,
      178,
      208,
      184,
      208,
      180,
      208,
      181,
      208,
      190,
      209,
      129,
      208,
      178,
      209,
      143,
      208,
      183,
      208,
      184,
      208,
      189,
      209,
      131,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      185,
      208,
      187,
      209,
      142,
      208,
      180,
      208,
      181,
      208,
      185,
      208,
      191,
      208,
      190,
      209,
      128,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      185,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      176,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      181,
      209,
      130,
      208,
      182,
      208,
      184,
      208,
      183,
      208,
      189,
      209,
      140,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      185,
      208,
      187,
      209,
      131,
      209,
      135,
      209,
      136,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      177,
      208,
      190,
      208,
      185,
      208,
      191,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      181,
      208,
      181,
      209,
      135,
      208,
      184,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      181,
      209,
      131,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      179,
      208,
      190,
      208,
      186,
      208,
      190,
      208,
      187,
      208,
      190,
      208,
      189,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      180,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      181,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      191,
      208,
      190,
      209,
      135,
      209,
      130,
      208,
      184,
      208,
      159,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      184,
      208,
      181,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      185,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      184,
      209,
      130,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      184,
      209,
      133,
      209,
      129,
      209,
      128,
      208,
      176,
      208,
      183,
      209,
      131,
      208,
      161,
      208,
      176,
      208,
      189,
      208,
      186,
      209,
      130,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      154,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      186,
      208,
      189,
      208,
      184,
      208,
      179,
      208,
      184,
      209,
      129,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      181,
      208,
      185,
      208,
      189,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      184,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      208,
      188,
      209,
      129,
      208,
      178,
      209,
      143,
      208,
      183,
      209,
      140,
      208,
      187,
      209,
      142,
      208,
      177,
      208,
      190,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      208,
      184,
      208,
      154,
      209,
      128,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      164,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      209,
      128,
      209,
      139,
      208,
      189,
      208,
      186,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      176,
      208,
      187,
      208,
      184,
      208,
      191,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      186,
      209,
      130,
      209,
      139,
      209,
      129,
      209,
      143,
      209,
      135,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      143,
      209,
      134,
      209,
      134,
      208,
      181,
      208,
      189,
      209,
      130,
      209,
      128,
      209,
      130,
      209,
      128,
      209,
      131,
      208,
      180,
      208,
      176,
      209,
      129,
      208,
      176,
      208,
      188,
      209,
      139,
      209,
      133,
      209,
      128,
      209,
      139,
      208,
      189,
      208,
      186,
      208,
      176,
      208,
      157,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      190,
      208,
      178,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      132,
      208,
      184,
      208,
      187,
      209,
      140,
      208,
      188,
      208,
      188,
      208,
      176,
      209,
      128,
      209,
      130,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      186,
      209,
      129,
      209,
      130,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      184,
      209,
      133,
      208,
      188,
      208,
      184,
      208,
      189,
      209,
      131,
      209,
      130,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      184,
      208,
      188,
      208,
      181,
      209,
      142,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      181,
      209,
      128,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      209,
      129,
      208,
      176,
      208,
      188,
      208,
      190,
      208,
      188,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      208,
      186,
      208,
      190,
      208,
      189,
      209,
      134,
      208,
      181,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      188,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      144,
      209,
      128,
      209,
      133,
      208,
      184,
      208,
      178,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      137,
      216,
      165,
      216,
      177,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      217,
      131,
      216,
      170,
      216,
      168,
      217,
      135,
      216,
      167,
      216,
      168,
      216,
      177,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      217,
      138,
      217,
      136,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      182,
      217,
      136,
      216,
      165,
      216,
      182,
      216,
      167,
      217,
      129,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      179,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      170,
      216,
      173,
      217,
      133,
      217,
      138,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      129,
      216,
      167,
      216,
      170,
      217,
      133,
      217,
      132,
      216,
      170,
      217,
      130,
      217,
      137,
      216,
      170,
      216,
      185,
      216,
      175,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      185,
      216,
      177,
      216,
      163,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      170,
      216,
      183,
      217,
      136,
      217,
      138,
      216,
      177,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      131,
      217,
      133,
      216,
      165,
      216,
      177,
      217,
      129,
      216,
      167,
      217,
      130,
      216,
      183,
      217,
      132,
      216,
      168,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      132,
      216,
      186,
      216,
      169,
      216,
      170,
      216,
      177,
      216,
      170,
      217,
      138,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      134,
      216,
      167,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      180,
      217,
      138,
      216,
      174,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      181,
      216,
      181,
      216,
      167,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      135,
      216,
      167,
      216,
      170,
      216,
      173,
      216,
      175,
      217,
      138,
      216,
      171,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      133,
      217,
      132,
      217,
      133,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      169,
      217,
      138,
      217,
      133,
      217,
      131,
      217,
      134,
      217,
      131,
      216,
      167,
      217,
      132,
      216,
      183,
      217,
      129,
      217,
      132,
      217,
      129,
      217,
      138,
      216,
      175,
      217,
      138,
      217,
      136,
      216,
      165,
      216,
      175,
      216,
      167,
      216,
      177,
      216,
      169,
      216,
      170,
      216,
      167,
      216,
      177,
      217,
      138,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      181,
      216,
      173,
      216,
      169,
      216,
      170,
      216,
      179,
      216,
      172,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      136,
      217,
      130,
      216,
      170,
      216,
      185,
      217,
      134,
      216,
      175,
      217,
      133,
      216,
      167,
      217,
      133,
      216,
      175,
      217,
      138,
      217,
      134,
      216,
      169,
      216,
      170,
      216,
      181,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      163,
      216,
      177,
      216,
      180,
      217,
      138,
      217,
      129,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      138,
      217,
      134,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      168,
      217,
      136,
      216,
      167,
      216,
      168,
      216,
      169,
      216,
      163,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      129,
      216,
      177,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      131,
      217,
      132,
      216,
      170,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      137,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      136,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      134,
      216,
      169,
      216,
      172,
      216,
      167,
      217,
      133,
      216,
      185,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      216,
      173,
      217,
      129,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      138,
      217,
      134,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      129,
      216,
      163,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      138,
      216,
      177,
      216,
      177,
      216,
      179,
      216,
      167,
      216,
      166,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      130,
      217,
      132,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      175,
      216,
      168,
      217,
      133,
      217,
      130,
      216,
      167,
      216,
      183,
      216,
      185,
      217,
      133,
      216,
      177,
      216,
      167,
      216,
      179,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      183,
      217,
      130,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      172,
      217,
      132,
      216,
      167,
      216,
      180,
      216,
      170,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      175,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      183,
      217,
      138,
      217,
      131,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      46,
      106,
      112,
      103,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      49,
      112,
      120,
      32,
      115,
      111,
      108,
      105,
      100,
      32,
      35,
      46,
      103,
      105,
      102,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      116,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      116,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      34,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      97,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      105,
      110,
      103,
      46,
      112,
      110,
      103,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      97,
      112,
      112,
      114,
      111,
      112,
      114,
      105,
      97,
      116,
      101,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      105,
      109,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      108,
      121,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      60,
      47,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      116,
      101,
      109,
      112,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      111,
      110,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      118,
      105,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      58,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      48,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      101,
      118,
      101,
      110,
      32,
      116,
      104,
      111,
      117,
      103,
      104,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      109,
      101,
      110,
      116,
      100,
      101,
      115,
      116,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      65,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      115,
      112,
      101,
      114,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      115,
      101,
      116,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      40,
      117,
      114,
      108,
      40,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      115,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      41,
      32,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      46,
      74,
      80,
      71,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      47,
      104,
      101,
      97,
      100,
      62,
      60,
      98,
      111,
      100,
      121,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      59,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      117,
      110,
      100,
      114,
      101,
      100,
      115,
      32,
      111,
      102,
      10,
      10,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      108,
      101,
      97,
      114,
      58,
      98,
      111,
      116,
      104,
      59,
      99,
      111,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      98,
      101,
      108,
      32,
      102,
      111,
      114,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      116,
      111,
      112,
      58,
      78,
      101,
      119,
      32,
      90,
      101,
      97,
      108,
      97,
      110,
      100,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      101,
      100,
      112,
      104,
      111,
      116,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      105,
      110,
      103,
      38,
      108,
      116,
      59,
      115,
      117,
      112,
      38,
      103,
      116,
      59,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      121,
      78,
      101,
      116,
      104,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      109,
      97,
      120,
      108,
      101,
      110,
      103,
      116,
      104,
      61,
      34,
      115,
      119,
      105,
      116,
      122,
      101,
      114,
      108,
      97,
      110,
      100,
      68,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      10,
      10,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      60,
      47,
      116,
      101,
      120,
      116,
      97,
      114,
      101,
      97,
      62,
      116,
      104,
      117,
      110,
      100,
      101,
      114,
      98,
      105,
      114,
      100,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      38,
      97,
      109,
      112,
      59,
      110,
      100,
      97,
      115,
      104,
      59,
      115,
      112,
      101,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      105,
      101,
      115,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      115,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      108,
      108,
      117,
      115,
      116,
      114,
      97,
      116,
      101,
      100,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      105,
      110,
      103,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      105,
      101,
      115,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      105,
      101,
      115,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      54,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      59,
      99,
      97,
      112,
      97,
      98,
      108,
      101,
      32,
      111,
      102,
      32,
      100,
      105,
      115,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      118,
      101,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      32,
      102,
      111,
      114,
      105,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      65,
      102,
      103,
      104,
      97,
      110,
      105,
      115,
      116,
      97,
      110,
      119,
      97,
      115,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      77,
      97,
      116,
      104,
      46,
      102,
      108,
      111,
      111,
      114,
      40,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      99,
      97,
      110,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      111,
      98,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      105,
      110,
      116,
      101,
      110,
      97,
      110,
      99,
      101,
      101,
      110,
      99,
      111,
      117,
      110,
      116,
      101,
      114,
      101,
      100,
      60,
      104,
      50,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      111,
      114,
      101,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      105,
      110,
      118,
      97,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      68,
      101,
      115,
      112,
      105,
      116,
      101,
      32,
      116,
      104,
      101,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      110,
      115,
      112,
      105,
      114,
      97,
      116,
      105,
      111,
      110,
      101,
      120,
      97,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      105,
      100,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      32,
      61,
      32,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      68,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      108,
      121,
      32,
      46,
      115,
      117,
      98,
      115,
      116,
      114,
      105,
      110,
      103,
      40,
      101,
      97,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      116,
      105,
      97,
      108,
      105,
      110,
      116,
      101,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      110,
      121,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      100,
      111,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      77,
      105,
      100,
      100,
      108,
      101,
      32,
      69,
      97,
      115,
      116,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      34,
      32,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      105,
      110,
      32,
      68,
      101,
      99,
      101,
      109,
      98,
      101,
      114,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      109,
      101,
      110,
      116,
      109,
      111,
      115,
      116,
      32,
      102,
      97,
      109,
      111,
      117,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      105,
      116,
      121,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      108,
      105,
      109,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      108,
      121,
      115,
      111,
      118,
      101,
      114,
      101,
      105,
      103,
      110,
      116,
      121,
      45,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      10,
      60,
      116,
      100,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      117,
      110,
      100,
      101,
      114,
      103,
      114,
      111,
      117,
      110,
      100,
      112,
      97,
      114,
      97,
      108,
      108,
      101,
      108,
      32,
      116,
      111,
      100,
      111,
      99,
      116,
      114,
      105,
      110,
      101,
      32,
      111,
      102,
      111,
      99,
      99,
      117,
      112,
      105,
      101,
      100,
      32,
      98,
      121,
      116,
      101,
      114,
      109,
      105,
      110,
      111,
      108,
      111,
      103,
      121,
      82,
      101,
      110,
      97,
      105,
      115,
      115,
      97,
      110,
      99,
      101,
      97,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      102,
      111,
      114,
      101,
      120,
      112,
      108,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      100,
      101,
      99,
      101,
      115,
      115,
      111,
      114,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      60,
      104,
      49,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      121,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      105,
      122,
      101,
      100,
      60,
      47,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      62,
      112,
      114,
      111,
      103,
      114,
      101,
      115,
      115,
      105,
      118,
      101,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      115,
      116,
      97,
      116,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      101,
      110,
      102,
      111,
      114,
      99,
      101,
      109,
      101,
      110,
      116,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      101,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      46,
      112,
      97,
      114,
      101,
      110,
      116,
      78,
      111,
      100,
      101,
      97,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      65,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      101,
      114,
      115,
      116,
      111,
      119,
      97,
      114,
      100,
      115,
      32,
      116,
      104,
      101,
      77,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      40,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      60,
      116,
      100,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      59,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      37,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      60,
      104,
      51,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      32,
      111,
      110,
      99,
      104,
      97,
      110,
      103,
      101,
      61,
      34,
      41,
      46,
      97,
      100,
      100,
      67,
      108,
      97,
      115,
      115,
      40,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      79,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      97,
      117,
      103,
      104,
      116,
      101,
      114,
      32,
      111,
      102,
      97,
      99,
      99,
      101,
      115,
      115,
      111,
      114,
      105,
      101,
      115,
      98,
      114,
      97,
      110,
      99,
      104,
      101,
      115,
      32,
      111,
      102,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      100,
      101,
      99,
      108,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      103,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      105,
      110,
      32,
      111,
      114,
      100,
      101,
      114,
      32,
      116,
      111,
      34,
      62,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      97,
      99,
      114,
      111,
      115,
      115,
      32,
      116,
      104,
      101,
      32,
      111,
      114,
      105,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      101,
      100,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      115,
      101,
      101,
      110,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      97,
      115,
      32,
      97,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      101,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      119,
      97,
      115,
      32,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      33,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      59,
      112,
      120,
      59,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      32,
      99,
      111,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      101,
      100,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      105,
      109,
      109,
      105,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      111,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      60,
      104,
      52,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      98,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      32,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      101,
      60,
      47,
      112,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      99,
      113,
      117,
      105,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      114,
      115,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      100,
      101,
      115,
      105,
      103,
      110,
      97,
      116,
      105,
      111,
      110,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      105,
      110,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      101,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      100,
      109,
      111,
      115,
      116,
      32,
      108,
      105,
      107,
      101,
      108,
      121,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      108,
      121,
      73,
      116,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      105,
      116,
      32,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      99,
      111,
      110,
      116,
      114,
      97,
      114,
      121,
      32,
      116,
      111,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      97,
      110,
      116,
      115,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      99,
      104,
      111,
      108,
      97,
      114,
      115,
      104,
      105,
      112,
      99,
      111,
      110,
      115,
      117,
      109,
      112,
      116,
      105,
      111,
      110,
      105,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      111,
      110,
      101,
      32,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      112,
      120,
      59,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      97,
      32,
      115,
      101,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      114,
      111,
      108,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      108,
      121,
      32,
      100,
      101,
      114,
      105,
      118,
      97,
      116,
      105,
      118,
      101,
      115,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      115,
      99,
      111,
      108,
      111,
      114,
      115,
      99,
      104,
      101,
      109,
      101,
      115,
      116,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      101,
      114,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      101,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      32,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      61,
      34,
      104,
      105,
      103,
      104,
      32,
      115,
      99,
      104,
      111,
      111,
      108,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      32,
      116,
      111,
      99,
      111,
      109,
      102,
      111,
      114,
      116,
      97,
      98,
      108,
      101,
      97,
      100,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      114,
      101,
      101,
      32,
      121,
      101,
      97,
      114,
      115,
      116,
      104,
      101,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      105,
      110,
      32,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      115,
      111,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      119,
      104,
      111,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      32,
      98,
      121,
      60,
      112,
      97,
      114,
      97,
      109,
      32,
      110,
      97,
      109,
      101,
      97,
      102,
      102,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      32,
      116,
      101,
      114,
      109,
      115,
      32,
      111,
      102,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      109,
      101,
      110,
      116,
      73,
      83,
      79,
      45,
      56,
      56,
      53,
      57,
      45,
      49,
      34,
      119,
      97,
      115,
      32,
      98,
      111,
      114,
      110,
      32,
      105,
      110,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      32,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      109,
      101,
      110,
      116,
      105,
      115,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      97,
      110,
      100,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      58,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      109,
      105,
      116,
      116,
      101,
      100,
      47,
      106,
      115,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      105,
      115,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      116,
      104,
      101,
      111,
      114,
      101,
      116,
      105,
      99,
      97,
      108,
      32,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      105,
      116,
      32,
      99,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      98,
      101,
      101,
      110,
      13,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      84,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      105,
      108,
      97,
      116,
      105,
      111,
      110,
      104,
      101,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      98,
      121,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      101,
      114,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      100,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      97,
      109,
      111,
      110,
      103,
      32,
      111,
      116,
      104,
      101,
      114,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      116,
      111,
      116,
      111,
      32,
      115,
      97,
      121,
      32,
      116,
      104,
      97,
      116,
      69,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      105,
      110,
      103,
      97,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      98,
      101,
      108,
      105,
      101,
      102,
      32,
      116,
      104,
      97,
      116,
      112,
      104,
      111,
      116,
      111,
      103,
      114,
      97,
      112,
      104,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      121,
      105,
      110,
      103,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      105,
      108,
      121,
      112,
      114,
      111,
      98,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      116,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      108,
      121,
      108,
      101,
      97,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      112,
      101,
      99,
      116,
      97,
      99,
      117,
      108,
      97,
      114,
      102,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      105,
      116,
      121,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      115,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      115,
      32,
      111,
      110,
      109,
      111,
      115,
      116,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      115,
      104,
      97,
      114,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      115,
      97,
      121,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      102,
      105,
      108,
      108,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      116,
      111,
      105,
      116,
      32,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      34,
      62,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      97,
      115,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      58,
      109,
      101,
      114,
      103,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      32,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      32,
      111,
      117,
      116,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      121,
      118,
      105,
      101,
      119,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      104,
      101,
      32,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      115,
      101,
      116,
      73,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      34,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      105,
      110,
      32,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      110,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      97,
      116,
      116,
      97,
      99,
      104,
      69,
      118,
      101,
      110,
      116,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      116,
      104,
      101,
      32,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      32,
      111,
      117,
      116,
      83,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      32,
      97,
      110,
      100,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      67,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      67,
      104,
      114,
      105,
      115,
      116,
      111,
      112,
      104,
      101,
      114,
      77,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      119,
      114,
      105,
      116,
      105,
      110,
      103,
      115,
      32,
      111,
      102,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      50,
      115,
      105,
      122,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      109,
      105,
      120,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      69,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      118,
      101,
      32,
      111,
      110,
      115,
      117,
      98,
      109,
      105,
      116,
      61,
      34,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      32,
      111,
      102,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      118,
      101,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      111,
      116,
      101,
      110,
      100,
      101,
      110,
      99,
      121,
      32,
      116,
      111,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      101,
      32,
      111,
      102,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      111,
      117,
      108,
      100,
      100,
      101,
      115,
      112,
      105,
      116,
      101,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      32,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      117,
      114,
      101,
      46,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      32,
      97,
      108,
      108,
      101,
      103,
      97,
      116,
      105,
      111,
      110,
      115,
      65,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      119,
      97,
      115,
      32,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      32,
      116,
      111,
      105,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      116,
      121,
      101,
      97,
      114,
      115,
      32,
      108,
      97,
      116,
      101,
      114,
      44,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      105,
      110,
      103,
      80,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      115,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      115,
      97,
      98,
      98,
      114,
      101,
      118,
      105,
      97,
      116,
      101,
      100,
      104,
      105,
      103,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      99,
      108,
      97,
      105,
      109,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      72,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      32,
      104,
      105,
      115,
      32,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      97,
      110,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      114,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      101,
      100,
      32,
      98,
      121,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      116,
      32,
      105,
      115,
      32,
      115,
      116,
      105,
      108,
      108,
      99,
      97,
      110,
      32,
      111,
      110,
      108,
      121,
      32,
      98,
      101,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      115,
      116,
      111,
      71,
      77,
      84,
      83,
      116,
      114,
      105,
      110,
      103,
      65,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      105,
      109,
      103,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      69,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      44,
      119,
      97,
      115,
      32,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      100,
      32,
      105,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      114,
      105,
      110,
      103,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      119,
      104,
      101,
      110,
      32,
      104,
      101,
      32,
      119,
      97,
      115,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      105,
      110,
      103,
      116,
      101,
      114,
      114,
      101,
      115,
      116,
      114,
      105,
      97,
      108,
      77,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      114,
      103,
      117,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      99,
      111,
      110,
      113,
      117,
      101,
      115,
      116,
      32,
      111,
      102,
      119,
      105,
      100,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      32,
      119,
      101,
      114,
      101,
      32,
      107,
      105,
      108,
      108,
      101,
      100,
      115,
      99,
      114,
      101,
      101,
      110,
      32,
      97,
      110,
      100,
      32,
      73,
      110,
      32,
      111,
      114,
      100,
      101,
      114,
      32,
      116,
      111,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      97,
      110,
      116,
      115,
      97,
      114,
      101,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      118,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      109,
      111,
      115,
      116,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      121,
      101,
      97,
      114,
      115,
      32,
      97,
      102,
      116,
      101,
      114,
      116,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      104,
      101,
      32,
      104,
      105,
      103,
      104,
      101,
      115,
      116,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      116,
      104,
      101,
      121,
      32,
      100,
      111,
      32,
      110,
      111,
      116,
      97,
      114,
      103,
      117,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      104,
      111,
      119,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      112,
      114,
      101,
      100,
      111,
      109,
      105,
      110,
      97,
      110,
      116,
      116,
      104,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      105,
      110,
      103,
      115,
      104,
      111,
      114,
      116,
      45,
      108,
      105,
      118,
      101,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      118,
      101,
      114,
      121,
      32,
      108,
      105,
      116,
      116,
      108,
      101,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      100,
      32,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      101,
      100,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      115,
      32,
      111,
      102,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      44,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      116,
      104,
      101,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      51,
      73,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      108,
      97,
      114,
      103,
      101,
      45,
      115,
      99,
      97,
      108,
      101,
      46,
      32,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      116,
      119,
      111,
      32,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      115,
      117,
      98,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      108,
      97,
      114,
      103,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      97,
      110,
      100,
      60,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      13,
      10,
      67,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      97,
      108,
      101,
      108,
      105,
      109,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      119,
      105,
      108,
      108,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      32,
      111,
      102,
      105,
      110,
      32,
      102,
      114,
      111,
      110,
      116,
      32,
      111,
      102,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      110,
      115,
      117,
      114,
      101,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      32,
      97,
      109,
      105,
      115,
      115,
      105,
      115,
      115,
      105,
      112,
      112,
      105,
      112,
      111,
      116,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      111,
      117,
      116,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      119,
      104,
      97,
      116,
      32,
      105,
      115,
      32,
      110,
      111,
      119,
      115,
      105,
      116,
      117,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      84,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      84,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      97,
      116,
      109,
      111,
      115,
      112,
      104,
      101,
      114,
      105,
      99,
      105,
      100,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      101,
      110,
      116,
      101,
      114,
      112,
      114,
      105,
      115,
      101,
      115,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      110,
      103,
      101,
      97,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      109,
      110,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      112,
      97,
      103,
      101,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      63,
      114,
      101,
      109,
      97,
      105,
      110,
      101,
      100,
      32,
      105,
      110,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      101,
      100,
      72,
      101,
      32,
      119,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      119,
      97,
      115,
      32,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      115,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      102,
      97,
      118,
      111,
      114,
      32,
      111,
      102,
      77,
      105,
      110,
      105,
      115,
      116,
      114,
      121,
      32,
      111,
      102,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      105,
      115,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      84,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      122,
      101,
      100,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      97,
      114,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      97,
      110,
      100,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      109,
      97,
      100,
      101,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      115,
      101,
      101,
      109,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      104,
      97,
      116,
      80,
      97,
      108,
      101,
      115,
      116,
      105,
      110,
      105,
      97,
      110,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      105,
      116,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      116,
      111,
      32,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      98,
      117,
      116,
      32,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      99,
      111,
      110,
      115,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      105,
      108,
      121,
      73,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      44,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      115,
      116,
      97,
      107,
      101,
      115,
      32,
      112,
      108,
      97,
      99,
      101,
      115,
      117,
      98,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      105,
      97,
      108,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      108,
      121,
      119,
      97,
      115,
      32,
      108,
      97,
      114,
      103,
      101,
      108,
      121,
      111,
      117,
      116,
      98,
      114,
      101,
      97,
      107,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      112,
      97,
      115,
      116,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      97,
      32,
      120,
      109,
      108,
      110,
      115,
      58,
      111,
      103,
      61,
      34,
      62,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      101,
      120,
      116,
      67,
      111,
      110,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      109,
      97,
      121,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      97,
      102,
      116,
      101,
      114,
      32,
      98,
      101,
      105,
      110,
      103,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      10,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      32,
      97,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      115,
      111,
      109,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      105,
      110,
      115,
      112,
      105,
      114,
      101,
      100,
      32,
      98,
      121,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      32,
      97,
      32,
      116,
      105,
      109,
      101,
      32,
      119,
      104,
      101,
      110,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      97,
      109,
      111,
      110,
      103,
      115,
      116,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      37,
      59,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      44,
      119,
      97,
      115,
      32,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      116,
      111,
      32,
      107,
      101,
      101,
      112,
      32,
      116,
      104,
      101,
      115,
      101,
      116,
      116,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      108,
      105,
      118,
      101,
      32,
      98,
      105,
      114,
      116,
      104,
      115,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      34,
      67,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      99,
      117,
      116,
      97,
      115,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      116,
      111,
      38,
      97,
      109,
      112,
      59,
      116,
      105,
      109,
      101,
      115,
      59,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      102,
      111,
      114,
      97,
      108,
      105,
      103,
      110,
      61,
      114,
      105,
      103,
      104,
      116,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      97,
      108,
      119,
      97,
      121,
      115,
      32,
      98,
      101,
      101,
      110,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      109,
      101,
      110,
      116,
      66,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      116,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      32,
      99,
      111,
      110,
      102,
      105,
      110,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      47,
      62,
      105,
      115,
      32,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      69,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      13,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      67,
      111,
      110,
      118,
      101,
      114,
      115,
      101,
      108,
      121,
      44,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      48,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      105,
      115,
      32,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      32,
      111,
      102,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      105,
      97,
      110,
      115,
      114,
      101,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      101,
      97,
      114,
      108,
      121,
      32,
      97,
      115,
      58,
      110,
      111,
      110,
      101,
      59,
      32,
      111,
      118,
      101,
      114,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      101,
      108,
      108,
      118,
      97,
      108,
      105,
      100,
      105,
      116,
      121,
      32,
      111,
      102,
      100,
      105,
      114,
      101,
      99,
      116,
      108,
      121,
      32,
      116,
      111,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      100,
      111,
      119,
      110,
      119,
      104,
      101,
      114,
      101,
      32,
      105,
      116,
      32,
      105,
      115,
      119,
      104,
      101,
      110,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      97,
      99,
      99,
      111,
      109,
      109,
      111,
      100,
      97,
      116,
      101,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      116,
      101,
      116,
      104,
      101,
      32,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      100,
      101,
      108,
      105,
      99,
      105,
      111,
      117,
      115,
      34,
      62,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      105,
      102,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      97,
      110,
      100,
      32,
      102,
      105,
      110,
      97,
      108,
      108,
      121,
      97,
      32,
      109,
      97,
      116,
      116,
      101,
      114,
      32,
      111,
      102,
      13,
      10,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      102,
      97,
      115,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      102,
      116,
      101,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      116,
      105,
      118,
      101,
      116,
      111,
      32,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      32,
      116,
      104,
      101,
      97,
      119,
      97,
      114,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      101,
      114,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      114,
      101,
      115,
      116,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      32,
      111,
      102,
      116,
      104,
      101,
      105,
      114,
      32,
      102,
      105,
      114,
      115,
      116,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      97,
      108,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      119,
      111,
      114,
      107,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      98,
      101,
      103,
      105,
      110,
      115,
      32,
      119,
      105,
      116,
      104,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      101,
      110,
      116,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      101,
      113,
      117,
      105,
      108,
      105,
      98,
      114,
      105,
      117,
      109,
      97,
      115,
      115,
      117,
      109,
      101,
      32,
      116,
      104,
      97,
      116,
      105,
      115,
      32,
      103,
      105,
      118,
      101,
      110,
      32,
      98,
      121,
      110,
      101,
      101,
      100,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      115,
      116,
      104,
      101,
      32,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      97,
      114,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      111,
      110,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      97,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      116,
      104,
      101,
      111,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      105,
      101,
      115,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      101,
      100,
      103,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      114,
      101,
      110,
      103,
      116,
      104,
      32,
      111,
      102,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      45,
      100,
      97,
      121,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      108,
      121,
      116,
      111,
      32,
      102,
      111,
      114,
      109,
      32,
      116,
      104,
      101,
      98,
      117,
      116,
      32,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      116,
      116,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      111,
      105,
      115,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      114,
      101,
      97,
      115,
      111,
      110,
      115,
      32,
      102,
      111,
      114,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      104,
      101,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      109,
      97,
      100,
      101,
      119,
      97,
      115,
      32,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      119,
      104,
      105,
      99,
      104,
      32,
      109,
      101,
      97,
      110,
      115,
      98,
      117,
      116,
      32,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      111,
      110,
      77,
      111,
      117,
      115,
      101,
      79,
      118,
      101,
      114,
      97,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      99,
      111,
      109,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      116,
      104,
      101,
      32,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      102,
      111,
      114,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      114,
      101,
      100,
      97,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      116,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      109,
      117,
      99,
      104,
      32,
      108,
      97,
      114,
      103,
      101,
      114,
      10,
      9,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      32,
      111,
      102,
      100,
      105,
      114,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      119,
      97,
      115,
      32,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      32,
      111,
      102,
      80,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      108,
      111,
      110,
      103,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      109,
      97,
      110,
      117,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      119,
      97,
      114,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      98,
      121,
      32,
      109,
      101,
      97,
      110,
      115,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      112,
      114,
      111,
      112,
      114,
      105,
      101,
      116,
      97,
      114,
      121,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      116,
      105,
      103,
      105,
      111,
      117,
      115,
      103,
      114,
      97,
      109,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      46,
      116,
      111,
      32,
      109,
      97,
      107,
      101,
      32,
      116,
      104,
      101,
      73,
      116,
      32,
      119,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      105,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      111,
      114,
      115,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      85,
      46,
      83,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      32,
      116,
      104,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      104,
      101,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      102,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      105,
      110,
      32,
      104,
      111,
      110,
      111,
      114,
      32,
      111,
      102,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      32,
      105,
      110,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      97,
      108,
      97,
      110,
      100,
      32,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      107,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      49,
      115,
      116,
      32,
      69,
      97,
      114,
      108,
      32,
      111,
      102,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      32,
      97,
      110,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      108,
      121,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      32,
      32,
      116,
      104,
      101,
      121,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      101,
      120,
      112,
      111,
      115,
      117,
      114,
      101,
      32,
      116,
      111,
      97,
      114,
      101,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      100,
      100,
      70,
      97,
      118,
      111,
      114,
      105,
      116,
      101,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      104,
      105,
      112,
      112,
      97,
      114,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      116,
      111,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      38,
      97,
      109,
      112,
      59,
      109,
      105,
      110,
      117,
      115,
      59,
      97,
      112,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      105,
      110,
      103,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      48,
      34,
      32,
      105,
      110,
      32,
      104,
      105,
      115,
      32,
      98,
      111,
      111,
      107,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      97,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      32,
      116,
      104,
      101,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      101,
      32,
      105,
      110,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      116,
      100,
      62,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      115,
      116,
      116,
      104,
      101,
      32,
      105,
      100,
      101,
      97,
      32,
      111,
      102,
      97,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      119,
      101,
      114,
      101,
      32,
      102,
      111,
      114,
      99,
      101,
      100,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      116,
      110,
      100,
      97,
      121,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      32,
      105,
      110,
      115,
      104,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      32,
      105,
      110,
      105,
      110,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      111,
      102,
      116,
      117,
      114,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      76,
      111,
      114,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      104,
      97,
      115,
      32,
      105,
      116,
      115,
      32,
      111,
      119,
      110,
      69,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      112,
      112,
      114,
      111,
      118,
      97,
      108,
      32,
      111,
      102,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      44,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      114,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      97,
      110,
      100,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      111,
      110,
      114,
      101,
      99,
      111,
      114,
      100,
      101,
      100,
      32,
      105,
      110,
      98,
      108,
      97,
      99,
      107,
      38,
      113,
      117,
      111,
      116,
      59,
      109,
      97,
      121,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      99,
      97,
      110,
      32,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      114,
      101,
      102,
      101,
      114,
      115,
      32,
      116,
      111,
      32,
      97,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      119,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      119,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      32,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      44,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      99,
      105,
      116,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      9,
      9,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      109,
      111,
      114,
      101,
      114,
      97,
      100,
      105,
      111,
      97,
      99,
      116,
      105,
      118,
      101,
      114,
      101,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      97,
      110,
      121,
      104,
      105,
      115,
      32,
      102,
      97,
      116,
      104,
      101,
      114,
      44,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      117,
      108,
      100,
      99,
      111,
      112,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      97,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      115,
      119,
      111,
      114,
      107,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      101,
      114,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      111,
      102,
      32,
      104,
      105,
      115,
      32,
      108,
      105,
      102,
      101,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      100,
      99,
      108,
      105,
      101,
      110,
      116,
      87,
      105,
      100,
      116,
      104,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      76,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      118,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      108,
      121,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      105,
      110,
      104,
      97,
      115,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      102,
      111,
      114,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      116,
      101,
      120,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      32,
      117,
      115,
      101,
      100,
      32,
      102,
      111,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      32,
      116,
      104,
      101,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      32,
      116,
      104,
      101,
      112,
      108,
      97,
      99,
      101,
      32,
      119,
      104,
      101,
      114,
      101,
      119,
      104,
      101,
      114,
      101,
      97,
      115,
      32,
      116,
      104,
      101,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      44,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      104,
      101,
      116,
      104,
      97,
      116,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      104,
      105,
      108,
      100,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      98,
      121,
      119,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      83,
      111,
      109,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      44,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      110,
      101,
      119,
      115,
      108,
      101,
      116,
      116,
      101,
      114,
      115,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      100,
      111,
      119,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      32,
      98,
      121,
      108,
      105,
      118,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      115,
      32,
      116,
      111,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      99,
      105,
      101,
      115,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      110,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      101,
      114,
      115,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      105,
      110,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      105,
      116,
      119,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      71,
      111,
      118,
      101,
      114,
      110,
      111,
      114,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      101,
      99,
      111,
      110,
      111,
      109,
      121,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      109,
      111,
      115,
      116,
      32,
      119,
      105,
      100,
      101,
      108,
      121,
      119,
      111,
      117,
      108,
      100,
      32,
      108,
      97,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      114,
      105,
      115,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      111,
      99,
      99,
      117,
      114,
      115,
      32,
      119,
      104,
      101,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      46,
      116,
      104,
      101,
      32,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      116,
      104,
      101,
      111,
      114,
      121,
      32,
      116,
      104,
      97,
      116,
      105,
      115,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      116,
      104,
      101,
      32,
      99,
      105,
      116,
      121,
      32,
      111,
      102,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      101,
      115,
      101,
      101,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      101,
      110,
      116,
      114,
      97,
      108,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      32,
      111,
      102,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      97,
      114,
      101,
      97,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      108,
      121,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      84,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      110,
      111,
      101,
      120,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      83,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      97,
      108,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      50,
      32,
      124,
      115,
      104,
      111,
      114,
      116,
      32,
      115,
      116,
      111,
      114,
      121,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      116,
      111,
      112,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      99,
      114,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      111,
      102,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      32,
      116,
      111,
      105,
      115,
      32,
      101,
      113,
      117,
      97,
      108,
      32,
      116,
      111,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      111,
      102,
      84,
      104,
      105,
      115,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      109,
      101,
      114,
      99,
      104,
      97,
      110,
      100,
      105,
      115,
      101,
      102,
      111,
      114,
      32,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      110,
      111,
      32,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      105,
      110,
      38,
      113,
      117,
      111,
      116,
      59,
      46,
      32,
      84,
      104,
      101,
      99,
      111,
      109,
      47,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      119,
      104,
      105,
      99,
      104,
      32,
      109,
      97,
      107,
      101,
      115,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      114,
      101,
      109,
      97,
      105,
      110,
      115,
      32,
      116,
      104,
      101,
      108,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      44,
      105,
      115,
      32,
      97,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      116,
      104,
      101,
      32,
      97,
      110,
      99,
      105,
      101,
      110,
      116,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      105,
      110,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      102,
      101,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      98,
      111,
      100,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      32,
      102,
      101,
      119,
      32,
      121,
      101,
      97,
      114,
      115,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      107,
      32,
      111,
      102,
      67,
      97,
      108,
      105,
      102,
      111,
      114,
      110,
      105,
      97,
      44,
      115,
      101,
      114,
      118,
      101,
      100,
      32,
      97,
      115,
      32,
      97,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      46,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      115,
      32,
      111,
      102,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      115,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      105,
      110,
      105,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      9,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      119,
      97,
      115,
      32,
      103,
      114,
      97,
      110,
      116,
      101,
      100,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      97,
      108,
      108,
      121,
      119,
      97,
      115,
      32,
      115,
      101,
      101,
      110,
      32,
      97,
      115,
      97,
      110,
      100,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      32,
      98,
      121,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      115,
      116,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      46,
      67,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      102,
      114,
      111,
      109,
      100,
      105,
      97,
      108,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      116,
      111,
      32,
      114,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      119,
      97,
      115,
      32,
      114,
      101,
      110,
      97,
      109,
      101,
      100,
      97,
      32,
      115,
      111,
      117,
      114,
      99,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      97,
      117,
      110,
      99,
      104,
      101,
      100,
      32,
      105,
      110,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      119,
      101,
      115,
      116,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      110,
      100,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      119,
      111,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      116,
      104,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      97,
      110,
      100,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      44,
      116,
      104,
      97,
      116,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      101,
      110,
      116,
      105,
      116,
      108,
      101,
      100,
      32,
      116,
      111,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      46,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      121,
      32,
      111,
      102,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      97,
      115,
      116,
      111,
      32,
      106,
      111,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      32,
      97,
      110,
      100,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      84,
      104,
      105,
      115,
      32,
      108,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      32,
      116,
      111,
      108,
      97,
      115,
      116,
      73,
      110,
      100,
      101,
      120,
      79,
      102,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      104,
      105,
      115,
      105,
      115,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      116,
      104,
      101,
      32,
      116,
      101,
      114,
      109,
      32,
      105,
      115,
      105,
      115,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      110,
      103,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      84,
      104,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      116,
      104,
      101,
      32,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      44,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      87,
      101,
      115,
      116,
      116,
      104,
      101,
      121,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      115,
      108,
      111,
      118,
      101,
      110,
      196,
      141,
      105,
      110,
      97,
      99,
      111,
      109,
      101,
      110,
      116,
      97,
      114,
      105,
      111,
      115,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      100,
      97,
      100,
      99,
      111,
      110,
      100,
      105,
      99,
      105,
      111,
      110,
      101,
      115,
      97,
      99,
      116,
      105,
      118,
      105,
      100,
      97,
      100,
      101,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      105,
      97,
      116,
      101,
      99,
      110,
      111,
      108,
      111,
      103,
      195,
      173,
      97,
      112,
      114,
      111,
      100,
      117,
      99,
      99,
      105,
      195,
      179,
      110,
      112,
      117,
      110,
      116,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      97,
      112,
      108,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      101,
      195,
      177,
      97,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      195,
      173,
      97,
      115,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      114,
      115,
      101,
      112,
      114,
      111,
      102,
      101,
      115,
      105,
      111,
      110,
      97,
      108,
      116,
      114,
      97,
      116,
      97,
      109,
      105,
      101,
      110,
      116,
      111,
      114,
      101,
      103,
      195,
      173,
      115,
      116,
      114,
      97,
      116,
      101,
      115,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      195,
      173,
      97,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      101,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      101,
      115,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      105,
      97,
      112,
      111,
      115,
      105,
      98,
      105,
      108,
      105,
      100,
      97,
      100,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      97,
      110,
      116,
      101,
      99,
      114,
      101,
      99,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      100,
      97,
      100,
      101,
      115,
      115,
      117,
      115,
      99,
      114,
      105,
      98,
      105,
      114,
      115,
      101,
      97,
      115,
      111,
      99,
      105,
      97,
      99,
      105,
      195,
      179,
      110,
      100,
      105,
      115,
      112,
      111,
      110,
      105,
      98,
      108,
      101,
      115,
      101,
      118,
      97,
      108,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      101,
      115,
      116,
      117,
      100,
      105,
      97,
      110,
      116,
      101,
      115,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      97,
      98,
      108,
      101,
      114,
      101,
      115,
      111,
      108,
      117,
      99,
      105,
      195,
      179,
      110,
      103,
      117,
      97,
      100,
      97,
      108,
      97,
      106,
      97,
      114,
      97,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      100,
      111,
      115,
      111,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      100,
      97,
      100,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      101,
      115,
      102,
      111,
      116,
      111,
      103,
      114,
      97,
      102,
      195,
      173,
      97,
      97,
      117,
      116,
      111,
      114,
      105,
      100,
      97,
      100,
      101,
      115,
      105,
      110,
      103,
      101,
      110,
      105,
      101,
      114,
      195,
      173,
      97,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      101,
      110,
      99,
      105,
      97,
      111,
      112,
      101,
      114,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      101,
      115,
      116,
      97,
      98,
      108,
      101,
      99,
      105,
      100,
      111,
      115,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      109,
      101,
      110,
      116,
      101,
      110,
      97,
      118,
      101,
      103,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      102,
      111,
      114,
      109,
      105,
      100,
      97,
      100,
      108,
      105,
      110,
      101,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      102,
      111,
      110,
      116,
      45,
      102,
      97,
      109,
      105,
      108,
      121,
      58,
      34,
      32,
      58,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      108,
      105,
      110,
      107,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      108,
      108,
      121,
      47,
      47,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      10,
      79,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      48,
      112,
      120,
      59,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      100,
      101,
      118,
      105,
      99,
      101,
      45,
      119,
      105,
      100,
      116,
      104,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      108,
      97,
      98,
      101,
      108,
      32,
      102,
      111,
      114,
      61,
      34,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      34,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      111,
      112,
      101,
      110,
      40,
      32,
      33,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      59,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      99,
      101,
      47,
      47,
      119,
      119,
      119,
      46,
      103,
      111,
      111,
      103,
      108,
      101,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      115,
      99,
      111,
      110,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      118,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      105,
      110,
      116,
      101,
      108,
      108,
      101,
      99,
      116,
      117,
      97,
      108,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      49,
      56,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      97,
      110,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      115,
      97,
      98,
      98,
      114,
      101,
      118,
      105,
      97,
      116,
      105,
      111,
      110,
      60,
      105,
      109,
      103,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      105,
      118,
      105,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      49,
      57,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      101,
      105,
      110,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      100,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      45,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      109,
      111,
      115,
      116,
      32,
      110,
      111,
      116,
      97,
      98,
      108,
      121,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      110,
      111,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      39,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      39,
      41,
      70,
      117,
      114,
      116,
      104,
      101,
      114,
      109,
      111,
      114,
      101,
      44,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      32,
      61,
      32,
      112,
      114,
      105,
      111,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      100,
      114,
      97,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      114,
      101,
      102,
      101,
      114,
      114,
      105,
      110,
      103,
      32,
      116,
      111,
      110,
      101,
      103,
      111,
      116,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      101,
      97,
      100,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      115,
      83,
      111,
      117,
      116,
      104,
      32,
      65,
      102,
      114,
      105,
      99,
      97,
      117,
      110,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      80,
      101,
      110,
      110,
      115,
      121,
      108,
      118,
      97,
      110,
      105,
      97,
      65,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      44,
      60,
      104,
      116,
      109,
      108,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      38,
      108,
      116,
      59,
      47,
      115,
      117,
      112,
      38,
      103,
      116,
      59,
      100,
      101,
      97,
      108,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      112,
      104,
      105,
      108,
      97,
      100,
      101,
      108,
      112,
      104,
      105,
      97,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      108,
      121,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      116,
      111,
      112,
      58,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      97,
      108,
      103,
      101,
      116,
      65,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      105,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      115,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      105,
      101,
      115,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      61,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      115,
      117,
      98,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      108,
      46,
      100,
      116,
      100,
      34,
      62,
      13,
      10,
      60,
      104,
      116,
      103,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      97,
      108,
      67,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      39,
      44,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      108,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      49,
      97,
      32,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      69,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      115,
      114,
      99,
      61,
      34,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      101,
      100,
      97,
      99,
      99,
      111,
      109,
      112,
      108,
      105,
      115,
      104,
      101,
      100,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      105,
      101,
      115,
      68,
      101,
      109,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      115,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      100,
      101,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      32,
      111,
      102,
      115,
      97,
      116,
      105,
      115,
      102,
      97,
      99,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      83,
      41,
      97,
      112,
      112,
      101,
      110,
      100,
      67,
      104,
      105,
      108,
      100,
      40,
      116,
      114,
      97,
      110,
      115,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      115,
      46,
      32,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      99,
      101,
      34,
      32,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      114,
      105,
      103,
      104,
      116,
      59,
      67,
      111,
      109,
      109,
      111,
      110,
      119,
      101,
      97,
      108,
      116,
      104,
      114,
      97,
      110,
      103,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      116,
      104,
      101,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      111,
      110,
      101,
      114,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      101,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      59,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      106,
      117,
      114,
      105,
      115,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      116,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      105,
      109,
      101,
      34,
      62,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      44,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      43,
      99,
      111,
      110,
      118,
      101,
      114,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      32,
      119,
      105,
      116,
      104,
      105,
      115,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      114,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      105,
      110,
      103,
      38,
      108,
      116,
      59,
      109,
      97,
      116,
      104,
      38,
      103,
      116,
      59,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      60,
      105,
      109,
      103,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      34,
      62,
      99,
      111,
      109,
      112,
      101,
      110,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      104,
      97,
      109,
      112,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      97,
      108,
      108,
      34,
      32,
      118,
      105,
      111,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      111,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      114,
      117,
      101,
      59,
      83,
      116,
      114,
      105,
      99,
      116,
      47,
      47,
      69,
      78,
      34,
      32,
      116,
      114,
      97,
      110,
      115,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      116,
      101,
      114,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      118,
      101,
      114,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      105,
      101,
      115,
      67,
      104,
      97,
      109,
      112,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      125,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      105,
      116,
      121,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      80,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      32,
      116,
      104,
      97,
      116,
      119,
      97,
      115,
      32,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      40,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      108,
      97,
      115,
      115,
      40,
      117,
      110,
      101,
      109,
      112,
      108,
      111,
      121,
      109,
      101,
      110,
      116,
      116,
      104,
      101,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      111,
      110,
      103,
      105,
      110,
      103,
      32,
      116,
      111,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      115,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      71,
      117,
      105,
      100,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      111,
      118,
      101,
      114,
      119,
      104,
      101,
      108,
      109,
      105,
      110,
      103,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      101,
      100,
      44,
      10,
      46,
      110,
      111,
      110,
      116,
      111,
      117,
      99,
      104,
      32,
      111,
      98,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      97,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      102,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      32,
      49,
      112,
      120,
      32,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      116,
      114,
      101,
      97,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      48,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      109,
      111,
      100,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      99,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      103,
      114,
      101,
      97,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      74,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      110,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      99,
      101,
      66,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      105,
      110,
      103,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      116,
      100,
      62,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      10,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      97,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      34,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      121,
      32,
      111,
      102,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      32,
      109,
      101,
      116,
      114,
      111,
      112,
      111,
      108,
      105,
      116,
      97,
      110,
      116,
      104,
      101,
      32,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      101,
      34,
      32,
      120,
      109,
      108,
      58,
      108,
      97,
      110,
      103,
      61,
      34,
      100,
      101,
      108,
      105,
      98,
      101,
      114,
      97,
      116,
      101,
      108,
      121,
      97,
      108,
      105,
      103,
      110,
      61,
      99,
      101,
      110,
      116,
      101,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      114,
      101,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      105,
      110,
      74,
      101,
      115,
      117,
      115,
      32,
      67,
      104,
      114,
      105,
      115,
      116,
      80,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      100,
      105,
      115,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      114,
      44,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      105,
      116,
      105,
      101,
      115,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      105,
      115,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      112,
      104,
      97,
      98,
      101,
      116,
      105,
      99,
      97,
      108,
      105,
      115,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      105,
      110,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      32,
      116,
      104,
      101,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      97,
      108,
      108,
      32,
      111,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      9,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      97,
      116,
      105,
      111,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      114,
      104,
      111,
      111,
      100,
      97,
      114,
      109,
      101,
      100,
      32,
      102,
      111,
      114,
      99,
      101,
      115,
      114,
      101,
      100,
      117,
      99,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      115,
      32,
      116,
      111,
      78,
      111,
      110,
      101,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      116,
      101,
      109,
      112,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      115,
      10,
      9,
      9,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      99,
      108,
      111,
      115,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      32,
      105,
      115,
      32,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      40,
      115,
      101,
      101,
      32,
      98,
      101,
      108,
      111,
      119,
      41,
      46,
      34,
      32,
      105,
      100,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      105,
      115,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      116,
      104,
      101,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      9,
      9,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      97,
      99,
      99,
      101,
      108,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      32,
      72,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      70,
      97,
      109,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      115,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      116,
      101,
      114,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      121,
      101,
      97,
      114,
      115,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      118,
      101,
      114,
      121,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      123,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      101,
      120,
      112,
      108,
      111,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      101,
      109,
      101,
      114,
      103,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      65,
      32,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      32,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      100,
      101,
      120,
      112,
      101,
      99,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      62,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      115,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      117,
      114,
      105,
      110,
      103,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      97,
      100,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      9,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      97,
      108,
      83,
      111,
      118,
      105,
      101,
      116,
      32,
      85,
      110,
      105,
      111,
      110,
      97,
      99,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      100,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      110,
      97,
      109,
      101,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      115,
      32,
      116,
      111,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      115,
      73,
      110,
      32,
      102,
      97,
      99,
      116,
      44,
      32,
      116,
      104,
      101,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      97,
      105,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      105,
      116,
      97,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      108,
      111,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      97,
      108,
      99,
      97,
      110,
      99,
      101,
      108,
      66,
      117,
      98,
      98,
      108,
      101,
      32,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      114,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      114,
      101,
      32,
      111,
      114,
      32,
      108,
      101,
      115,
      115,
      105,
      110,
      32,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      73,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      99,
      101,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      112,
      120,
      59,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      114,
      104,
      117,
      109,
      97,
      110,
      32,
      114,
      105,
      103,
      104,
      116,
      115,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      112,
      114,
      111,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      97,
      108,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      32,
      97,
      115,
      116,
      114,
      111,
      110,
      111,
      109,
      105,
      99,
      97,
      108,
      104,
      117,
      109,
      97,
      110,
      32,
      98,
      101,
      105,
      110,
      103,
      115,
      110,
      97,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      114,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      97,
      114,
      101,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      115,
      109,
      97,
      108,
      108,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      97,
      32,
      112,
      101,
      114,
      115,
      111,
      110,
      32,
      119,
      104,
      111,
      101,
      120,
      112,
      97,
      110,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      114,
      103,
      117,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      110,
      111,
      119,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      101,
      97,
      114,
      108,
      121,
      105,
      110,
      116,
      101,
      114,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      83,
      99,
      97,
      110,
      100,
      105,
      110,
      97,
      118,
      105,
      97,
      110,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      78,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      112,
      97,
      103,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      100,
      97,
      110,
      97,
      108,
      111,
      103,
      111,
      117,
      115,
      32,
      116,
      111,
      97,
      114,
      101,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      47,
      117,
      108,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      119,
      97,
      115,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      97,
      110,
      100,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      97,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      119,
      97,
      115,
      32,
      99,
      97,
      112,
      116,
      117,
      114,
      101,
      100,
      110,
      111,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      32,
      116,
      111,
      32,
      62,
      13,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      119,
      101,
      114,
      101,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      109,
      111,
      114,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      117,
      115,
      101,
      100,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      32,
      73,
      109,
      112,
      101,
      114,
      105,
      97,
      108,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      32,
      111,
      102,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      110,
      111,
      114,
      116,
      104,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      116,
      104,
      101,
      32,
      67,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      102,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      105,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      120,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      32,
      105,
      116,
      115,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      105,
      110,
      116,
      111,
      32,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      116,
      104,
      105,
      115,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      97,
      110,
      32,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      116,
      114,
      101,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      115,
      109,
      32,
      111,
      102,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      119,
      104,
      105,
      99,
      104,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      105,
      115,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      73,
      116,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      97,
      110,
      32,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      97,
      99,
      99,
      105,
      100,
      101,
      110,
      116,
      97,
      108,
      108,
      121,
      100,
      105,
      102,
      102,
      101,
      114,
      115,
      32,
      102,
      114,
      111,
      109,
      65,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      101,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      107,
      110,
      111,
      119,
      110,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      110,
      97,
      116,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      105,
      100,
      101,
      110,
      116,
      105,
      99,
      97,
      108,
      32,
      116,
      111,
      115,
      111,
      117,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      97,
      115,
      115,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      120,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      116,
      104,
      101,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      105,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      87,
      111,
      114,
      108,
      100,
      32,
      87,
      97,
      114,
      32,
      73,
      73,
      116,
      101,
      115,
      116,
      105,
      109,
      111,
      110,
      105,
      97,
      108,
      115,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      110,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      32,
      119,
      97,
      115,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      98,
      108,
      121,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      98,
      121,
      116,
      104,
      101,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      67,
      111,
      110,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      100,
      32,
      111,
      102,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      80,
      101,
      111,
      112,
      108,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      111,
      110,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      34,
      119,
      97,
      115,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      118,
      97,
      114,
      105,
      101,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      109,
      112,
      114,
      105,
      115,
      101,
      100,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      117,
      112,
      108,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      32,
      97,
      110,
      100,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      110,
      111,
      110,
      101,
      59,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      98,
      101,
      105,
      110,
      103,
      108,
      97,
      116,
      101,
      114,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      102,
      111,
      114,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      115,
      34,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      119,
      104,
      105,
      99,
      104,
      32,
      97,
      108,
      108,
      111,
      119,
      115,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      32,
      98,
      121,
      97,
      32,
      119,
      105,
      100,
      101,
      32,
      114,
      97,
      110,
      103,
      101,
      111,
      110,
      32,
      98,
      101,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      32,
      111,
      102,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      44,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      119,
      104,
      105,
      108,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      115,
      104,
      121,
      112,
      111,
      116,
      104,
      101,
      116,
      105,
      99,
      97,
      108,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      101,
      114,
      115,
      112,
      111,
      119,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      32,
      105,
      110,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      119,
      101,
      114,
      101,
      32,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      116,
      104,
      101,
      32,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      102,
      111,
      114,
      114,
      101,
      106,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      109,
      112,
      108,
      105,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      118,
      101,
      110,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      119,
      97,
      115,
      32,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      108,
      105,
      110,
      107,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      99,
      104,
      97,
      110,
      103,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      73,
      110,
      100,
      105,
      97,
      110,
      32,
      79,
      99,
      101,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      108,
      97,
      115,
      116,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      121,
      101,
      97,
      114,
      115,
      32,
      98,
      101,
      102,
      111,
      114,
      101,
      84,
      104,
      105,
      115,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      101,
      110,
      116,
      101,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      109,
      101,
      110,
      116,
      115,
      97,
      110,
      32,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      108,
      121,
      118,
      97,
      108,
      117,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      97,
      110,
      32,
      101,
      102,
      102,
      111,
      114,
      116,
      32,
      116,
      111,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      115,
      111,
      117,
      116,
      104,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      62,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      108,
      121,
      116,
      104,
      101,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      99,
      108,
      101,
      97,
      114,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      101,
      120,
      116,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      32,
      97,
      110,
      100,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      97,
      110,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      103,
      105,
      118,
      101,
      110,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      115,
      116,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      101,
      120,
      112,
      101,
      110,
      100,
      105,
      116,
      117,
      114,
      101,
      115,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      10,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      104,
      97,
      116,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      105,
      109,
      97,
      103,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      32,
      116,
      111,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      44,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      115,
      115,
      97,
      115,
      115,
      105,
      110,
      97,
      116,
      101,
      100,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      110,
      111,
      114,
      116,
      104,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      32,
      32,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      116,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      110,
      116,
      115,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      116,
      104,
      101,
      32,
      103,
      114,
      101,
      97,
      116,
      101,
      115,
      116,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      115,
      117,
      112,
      101,
      114,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      32,
      111,
      110,
      105,
      115,
      32,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      101,
      100,
      97,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      105,
      110,
      118,
      101,
      110,
      116,
      101,
      100,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      105,
      110,
      103,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      97,
      116,
      115,
      116,
      117,
      100,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      72,
      117,
      109,
      97,
      110,
      32,
      82,
      105,
      103,
      104,
      116,
      115,
      116,
      101,
      114,
      109,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      32,
      97,
      110,
      100,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      32,
      98,
      121,
      100,
      101,
      102,
      101,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      101,
      114,
      32,
      111,
      102,
      115,
      116,
      97,
      116,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      121,
      101,
      97,
      114,
      115,
      32,
      111,
      102,
      32,
      97,
      103,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      117,
      100,
      121,
      32,
      111,
      102,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      119,
      104,
      101,
      114,
      101,
      32,
      104,
      101,
      32,
      119,
      97,
      115,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      119,
      104,
      105,
      99,
      104,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      104,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      114,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      34,
      62,
      82,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      101,
      113,
      117,
      97,
      108,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      73,
      110,
      32,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      44,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      97,
      110,
      100,
      105,
      115,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      97,
      110,
      100,
      32,
      104,
      105,
      115,
      32,
      119,
      105,
      102,
      101,
      40,
      97,
      108,
      115,
      111,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      62,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      32,
      101,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      115,
      101,
      101,
      109,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      97,
      115,
      32,
      110,
      111,
      97,
      110,
      32,
      101,
      120,
      99,
      101,
      108,
      108,
      101,
      110,
      116,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      98,
      121,
      73,
      110,
      32,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      44,
      98,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      105,
      110,
      103,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      32,
      97,
      110,
      100,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      105,
      110,
      116,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      97,
      108,
      108,
      121,
      115,
      101,
      116,
      84,
      97,
      114,
      103,
      101,
      116,
      105,
      110,
      103,
      97,
      114,
      101,
      32,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      118,
      105,
      99,
      116,
      111,
      114,
      121,
      32,
      111,
      118,
      101,
      114,
      40,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      111,
      117,
      115,
      108,
      121,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      32,
      102,
      111,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      97,
      110,
      32,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      111,
      114,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      97,
      115,
      32,
      102,
      114,
      111,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      115,
      111,
      109,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      104,
      97,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      101,
      114,
      109,
      105,
      116,
      116,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      32,
      116,
      104,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      44,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      108,
      121,
      97,
      114,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      116,
      104,
      101,
      32,
      102,
      105,
      101,
      108,
      100,
      32,
      111,
      102,
      116,
      104,
      105,
      115,
      32,
      116,
      121,
      112,
      101,
      32,
      111,
      102,
      103,
      105,
      118,
      101,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      116,
      105,
      116,
      108,
      101,
      32,
      111,
      102,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      110,
      111,
      114,
      116,
      104,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      105,
      114,
      97,
      114,
      101,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      119,
      97,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      109,
      111,
      114,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      102,
      111,
      114,
      111,
      119,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      121,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      105,
      122,
      101,
      100,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      84,
      101,
      120,
      116,
      119,
      97,
      115,
      32,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      117,
      109,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      101,
      97,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      114,
      105,
      109,
      97,
      114,
      105,
      108,
      121,
      32,
      105,
      110,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      101,
      110,
      115,
      101,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      32,
      102,
      111,
      114,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      32,
      98,
      121,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      116,
      119,
      111,
      119,
      97,
      115,
      32,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      100,
      99,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      83,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      116,
      111,
      32,
      98,
      101,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      49,
      47,
      94,
      92,
      115,
      43,
      124,
      92,
      115,
      43,
      36,
      47,
      103,
      101,
      41,
      123,
      116,
      104,
      114,
      111,
      119,
      32,
      101,
      125,
      59,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      114,
      116,
      32,
      111,
      102,
      116,
      119,
      111,
      32,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      97,
      110,
      100,
      119,
      104,
      111,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      100,
      101,
      97,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      108,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      9,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      111,
      110,
      115,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      75,
      41,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      83,
      41,
      208,
      156,
      208,
      190,
      208,
      189,
      208,
      179,
      208,
      190,
      208,
      187,
      208,
      161,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      184,
      209,
      129,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      184,
      209,
      129,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      190,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      230,
      173,
      163,
      233,
      171,
      148,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      174,
      128,
      228,
      189,
      147,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      185,
      129,
      228,
      189,
      147,
      228,
      184,
      173,
      230,
      150,
      135,
      230,
      156,
      137,
      233,
      153,
      144,
      229,
      133,
      172,
      229,
      143,
      184,
      228,
      186,
      186,
      230,
      176,
      145,
      230,
      148,
      191,
      229,
      186,
      156,
      233,
      152,
      191,
      233,
      135,
      140,
      229,
      183,
      180,
      229,
      183,
      180,
      231,
      164,
      190,
      228,
      188,
      154,
      228,
      184,
      187,
      228,
      185,
      137,
      230,
      147,
      141,
      228,
      189,
      156,
      231,
      179,
      187,
      231,
      187,
      159,
      230,
      148,
      191,
      231,
      173,
      150,
      230,
      179,
      149,
      232,
      167,
      132,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      99,
      105,
      195,
      179,
      110,
      104,
      101,
      114,
      114,
      97,
      109,
      105,
      101,
      110,
      116,
      97,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      195,
      179,
      110,
      105,
      99,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      99,
      105,
      195,
      179,
      110,
      99,
      108,
      97,
      115,
      105,
      102,
      105,
      99,
      97,
      100,
      111,
      115,
      99,
      111,
      110,
      111,
      99,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      97,
      100,
      97,
      115,
      105,
      110,
      102,
      111,
      114,
      109,
      195,
      161,
      116,
      105,
      99,
      97,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      97,
      100,
      111,
      115,
      100,
      101,
      112,
      97,
      114,
      116,
      97,
      109,
      101,
      110,
      116,
      111,
      116,
      114,
      97,
      98,
      97,
      106,
      97,
      100,
      111,
      114,
      101,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      97,
      109,
      101,
      110,
      116,
      101,
      97,
      121,
      117,
      110,
      116,
      97,
      109,
      105,
      101,
      110,
      116,
      111,
      109,
      101,
      114,
      99,
      97,
      100,
      111,
      76,
      105,
      98,
      114,
      101,
      99,
      111,
      110,
      116,
      195,
      161,
      99,
      116,
      101,
      110,
      111,
      115,
      104,
      97,
      98,
      105,
      116,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      117,
      109,
      112,
      108,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      101,
      115,
      100,
      105,
      115,
      112,
      111,
      115,
      105,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      115,
      101,
      99,
      117,
      101,
      110,
      99,
      105,
      97,
      101,
      108,
      101,
      99,
      116,
      114,
      195,
      179,
      110,
      105,
      99,
      97,
      97,
      112,
      108,
      105,
      99,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      100,
      101,
      115,
      99,
      111,
      110,
      101,
      99,
      116,
      97,
      100,
      111,
      105,
      110,
      115,
      116,
      97,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      114,
      101,
      97,
      108,
      105,
      122,
      97,
      99,
      105,
      195,
      179,
      110,
      117,
      116,
      105,
      108,
      105,
      122,
      97,
      99,
      105,
      195,
      179,
      110,
      101,
      110,
      99,
      105,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      101,
      110,
      102,
      101,
      114,
      109,
      101,
      100,
      97,
      100,
      101,
      115,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      111,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      105,
      97,
      115,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      99,
      105,
      195,
      179,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      101,
      115,
      115,
      117,
      98,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      105,
      97,
      209,
      130,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      208,
      184,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      209,
      139,
      208,
      177,
      208,
      190,
      208,
      187,
      209,
      140,
      209,
      136,
      208,
      181,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      184,
      209,
      133,
      209,
      129,
      208,
      187,
      209,
      131,
      209,
      135,
      208,
      176,
      208,
      181,
      209,
      129,
      208,
      181,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      209,
      143,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      208,
      181,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      184,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      178,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      209,
      139,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      209,
      139,
      209,
      128,
      209,
      131,
      208,
      177,
      208,
      187,
      208,
      181,
      208,
      185,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      209,
      139,
      208,
      189,
      208,
      184,
      209,
      135,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      181,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      181,
      208,
      189,
      209,
      131,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      179,
      208,
      184,
      209,
      130,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      209,
      140,
      208,
      158,
      208,
      180,
      208,
      189,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      191,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      209,
      131,
      208,
      176,
      208,
      191,
      209,
      128,
      208,
      181,
      208,
      187,
      209,
      143,
      208,
      178,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      184,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      190,
      208,
      185,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      181,
      209,
      133,
      208,
      190,
      209,
      128,
      208,
      190,
      209,
      136,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      130,
      208,
      184,
      208,
      178,
      209,
      129,
      209,
      129,
      209,
      139,
      208,
      187,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      176,
      208,
      182,
      208,
      180,
      209,
      139,
      208,
      185,
      208,
      178,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      179,
      209,
      128,
      209,
      131,
      208,
      191,
      208,
      191,
      209,
      139,
      208,
      178,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      176,
      209,
      129,
      208,
      186,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      187,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      178,
      209,
      139,
      208,
      185,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      180,
      208,
      181,
      208,
      189,
      209,
      140,
      208,
      179,
      208,
      184,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      190,
      208,
      180,
      208,
      177,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      181,
      209,
      129,
      208,
      190,
      209,
      129,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      188,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      130,
      208,
      186,
      209,
      131,
      208,
      191,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      208,
      176,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      186,
      208,
      176,
      209,
      133,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      176,
      208,
      187,
      208,
      190,
      208,
      160,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      176,
      208,
      162,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      188,
      208,
      178,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      185,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      176,
      208,
      187,
      208,
      176,
      209,
      129,
      208,
      191,
      208,
      184,
      209,
      129,
      208,
      190,
      208,
      186,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      182,
      208,
      177,
      209,
      139,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      191,
      208,
      181,
      209,
      135,
      208,
      176,
      209,
      130,
      208,
      184,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      208,
      184,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      191,
      208,
      190,
      209,
      135,
      208,
      181,
      208,
      188,
      209,
      131,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      209,
      140,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      129,
      209,
      139,
      208,
      187,
      208,
      186,
      208,
      184,
      208,
      177,
      209,
      139,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      209,
      139,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      184,
      208,
      181,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      181,
      208,
      186,
      209,
      130,
      208,
      161,
      208,
      181,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      188,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      184,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      190,
      208,
      189,
      208,
      187,
      208,
      176,
      208,
      185,
      208,
      189,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      178,
      208,
      181,
      209,
      128,
      209,
      129,
      208,
      184,
      209,
      143,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      181,
      209,
      132,
      208,
      184,
      208,
      187,
      209,
      140,
      208,
      188,
      209,
      139,
      209,
      131,
      209,
      128,
      208,
      190,
      208,
      178,
      208,
      189,
      209,
      143,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      184,
      209,
      129,
      208,
      186,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      181,
      208,
      180,
      208,
      181,
      208,
      187,
      209,
      142,
      209,
      143,
      208,
      189,
      208,
      178,
      208,
      176,
      209,
      128,
      209,
      143,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      136,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      184,
      209,
      133,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      185,
      208,
      183,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      184,
      209,
      130,
      208,
      189,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      183,
      209,
      143,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      176,
      208,
      162,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      209,
      140,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      143,
      209,
      134,
      208,
      176,
      208,
      183,
      208,
      176,
      209,
      137,
      208,
      184,
      209,
      130,
      209,
      139,
      208,
      155,
      209,
      131,
      209,
      135,
      209,
      136,
      208,
      184,
      208,
      181,
      224,
      164,
      168,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      161,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      159,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      159,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      184,
      224,
      164,
      172,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      152,
      224,
      164,
      130,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      157,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      159,
      224,
      164,
      178,
      224,
      164,
      182,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      168,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      136,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      165,
      136,
      224,
      164,
      160,
      224,
      164,
      149,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      164,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      166,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      156,
      224,
      164,
      184,
      224,
      165,
      130,
      224,
      164,
      154,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      184,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      165,
      136,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      164,
      156,
      224,
      164,
      168,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      152,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      170,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      151,
      224,
      165,
      130,
      224,
      164,
      151,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      172,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      152,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      136,
      224,
      164,
      159,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      150,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      133,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      156,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      172,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      188,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      134,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      140,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      143,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      149,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      183,
      224,
      164,
      175,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      165,
      130,
      224,
      164,
      185,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      216,
      170,
      216,
      179,
      216,
      170,
      216,
      183,
      217,
      138,
      216,
      185,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      168,
      217,
      136,
      216,
      167,
      216,
      179,
      216,
      183,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      129,
      216,
      173,
      216,
      169,
      217,
      133,
      217,
      136,
      216,
      167,
      216,
      182,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      178,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      168,
      216,
      177,
      217,
      134,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      136,
      217,
      132,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      217,
      130,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      177,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      135,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      138,
      216,
      167,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      130,
      217,
      136,
      217,
      130,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      177,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      167,
      217,
      130,
      217,
      133,
      216,
      173,
      217,
      129,
      217,
      136,
      216,
      184,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      134,
      217,
      138,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      163,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      177,
      216,
      162,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      168,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      179,
      216,
      177,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      132,
      217,
      136,
      217,
      133,
      217,
      133,
      216,
      172,
      217,
      133,
      217,
      136,
      216,
      185,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      173,
      217,
      133,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      134,
      217,
      130,
      216,
      167,
      216,
      183,
      217,
      129,
      217,
      132,
      216,
      179,
      216,
      183,
      217,
      138,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      136,
      217,
      138,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      134,
      217,
      138,
      216,
      167,
      216,
      168,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      138,
      216,
      167,
      216,
      182,
      216,
      170,
      216,
      173,
      217,
      138,
      216,
      167,
      216,
      170,
      217,
      138,
      216,
      168,
      216,
      170,
      217,
      136,
      217,
      130,
      217,
      138,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      136,
      217,
      132,
      217,
      137,
      216,
      167,
      217,
      132,
      216,
      168,
      216,
      177,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      167,
      216,
      168,
      216,
      183,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      174,
      216,
      181,
      217,
      138,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      177,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      132,
      216,
      167,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      173,
      216,
      175,
      217,
      138,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      178,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      132,
      217,
      138,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      167,
      216,
      185,
      216,
      169,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      175,
      216,
      174,
      217,
      136,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      134,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      136,
      216,
      177,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      175,
      216,
      177,
      217,
      136,
      216,
      179,
      216,
      167,
      216,
      179,
      216,
      170,
      216,
      186,
      216,
      177,
      217,
      130,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      168,
      217,
      134,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      184,
      217,
      138,
      217,
      133,
      101,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      32,
      61,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      46,
      106,
      112,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      111,
      110,
      102,
      105,
      103,
      117,
      114,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      110,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      60,
      98,
      111,
      100,
      121,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      77,
      97,
      116,
      104,
      46,
      114,
      97,
      110,
      100,
      111,
      109,
      40,
      41,
      99,
      111,
      110,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      121,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      99,
      105,
      114,
      99,
      117,
      109,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      46,
      97,
      112,
      112,
      101,
      110,
      100,
      67,
      104,
      105,
      108,
      100,
      40,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      101,
      100,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      108,
      101,
      97,
      114,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      77,
      97,
      115,
      115,
      97,
      99,
      104,
      117,
      115,
      101,
      116,
      116,
      115,
      116,
      97,
      98,
      108,
      101,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      112,
      114,
      111,
      110,
      117,
      110,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      35,
      102,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      108,
      101,
      102,
      116,
      58,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      109,
      105,
      115,
      99,
      101,
      108,
      108,
      97,
      110,
      101,
      111,
      117,
      115,
      38,
      108,
      116,
      59,
      47,
      109,
      97,
      116,
      104,
      38,
      103,
      116,
      59,
      112,
      115,
      121,
      99,
      104,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      102,
      111,
      114,
      109,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      97,
      115,
      32,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      83,
      117,
      112,
      114,
      101,
      109,
      101,
      32,
      67,
      111,
      117,
      114,
      116,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      65,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      44,
      78,
      111,
      114,
      116,
      104,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      112,
      120,
      59,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      105,
      101,
      115,
      69,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      46,
      116,
      111,
      76,
      111,
      119,
      101,
      114,
      67,
      97,
      115,
      101,
      40,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      105,
      110,
      103,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      70,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      44,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      105,
      110,
      103,
      32,
      111,
      102,
      34,
      32,
      109,
      97,
      120,
      108,
      101,
      110,
      103,
      116,
      104,
      61,
      34,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      99,
      111,
      110,
      115,
      99,
      105,
      111,
      117,
      115,
      110,
      101,
      115,
      115,
      77,
      101,
      100,
      105,
      116,
      101,
      114,
      114,
      97,
      110,
      101,
      97,
      110,
      101,
      120,
      116,
      114,
      97,
      111,
      114,
      100,
      105,
      110,
      97,
      114,
      121,
      97,
      115,
      115,
      97,
      115,
      115,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      104,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      104,
      101,
      110,
      115,
      105,
      118,
      101,
      114,
      101,
      102,
      101,
      114,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      60,
      47,
      117,
      108,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      105,
      99,
      97,
      108,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      104,
      114,
      101,
      102,
      119,
      97,
      115,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      83,
      97,
      110,
      32,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      99,
      111,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      109,
      97,
      105,
      110,
      115,
      111,
      112,
      104,
      105,
      115,
      116,
      105,
      99,
      97,
      116,
      101,
      100,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      32,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      98,
      111,
      100,
      121,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      115,
      32,
      116,
      104,
      97,
      116,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      115,
      109,
      97,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      40,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      84,
      104,
      105,
      115,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      32,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      99,
      97,
      115,
      101,
      115,
      112,
      97,
      114,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      71,
      114,
      101,
      97,
      116,
      32,
      66,
      114,
      105,
      116,
      97,
      105,
      110,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      32,
      116,
      111,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      61,
      34,
      59,
      32,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      106,
      117,
      115,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      117,
      102,
      102,
      101,
      114,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      108,
      101,
      97,
      100,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      97,
      114,
      101,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      10,
      9,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      32,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      101,
      100,
      32,
      105,
      110,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      114,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      104,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      101,
      110,
      109,
      111,
      115,
      116,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      110,
      103,
      99,
      114,
      101,
      100,
      105,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      60,
      47,
      97,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      46,
      103,
      105,
      102,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      60,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      115,
      114,
      99,
      61,
      34,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      108,
      105,
      110,
      101,
      45,
      98,
      108,
      111,
      99,
      107,
      59,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      119,
      105,
      116,
      104,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      112,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      109,
      111,
      114,
      101,
      32,
      97,
      110,
      100,
      32,
      109,
      111,
      114,
      101,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      112,
      114,
      101,
      100,
      111,
      109,
      105,
      110,
      97,
      110,
      116,
      108,
      121,
      38,
      110,
      98,
      115,
      112,
      59,
      124,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      111,
      114,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      105,
      97,
      108,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      47,
      120,
      45,
      115,
      104,
      111,
      99,
      107,
      119,
      97,
      118,
      101,
      45,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      98,
      121,
      78,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      98,
      108,
      101,
      32,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      108,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      112,
      114,
      111,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      102,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      44,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      97,
      115,
      32,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      105,
      100,
      100,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      32,
      116,
      111,
      32,
      112,
      111,
      105,
      110,
      116,
      32,
      111,
      102,
      32,
      118,
      105,
      101,
      119,
      104,
      111,
      109,
      111,
      115,
      101,
      120,
      117,
      97,
      108,
      105,
      116,
      121,
      97,
      99,
      99,
      101,
      112,
      116,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      114,
      115,
      111,
      114,
      105,
      103,
      105,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      100,
      101,
      110,
      111,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      32,
      35,
      108,
      101,
      110,
      103,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      32,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      62,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      119,
      97,
      115,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      73,
      110,
      100,
      111,
      45,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      118,
      117,
      108,
      110,
      101,
      114,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      112,
      114,
      111,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      99,
      108,
      111,
      115,
      101,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      32,
      67,
      105,
      116,
      121,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      99,
      111,
      117,
      114,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      105,
      97,
      110,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      46,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      108,
      97,
      115,
      115,
      40,
      98,
      114,
      97,
      110,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      116,
      104,
      97,
      116,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      13,
      10,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      32,
      111,
      102,
      32,
      105,
      110,
      116,
      111,
      32,
      97,
      32,
      115,
      105,
      110,
      103,
      108,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      46,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      119,
      104,
      105,
      99,
      104,
      84,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      38,
      97,
      109,
      112,
      59,
      110,
      100,
      97,
      115,
      104,
      59,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      115,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      108,
      121,
      101,
      113,
      117,
      105,
      112,
      112,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      99,
      111,
      110,
      102,
      117,
      115,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      60,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      84,
      104,
      101,
      115,
      101,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      114,
      101,
      103,
      97,
      114,
      100,
      108,
      101,
      115,
      115,
      32,
      111,
      102,
      99,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      116,
      105,
      109,
      101,
      115,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      99,
      99,
      101,
      115,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      32,
      116,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      106,
      113,
      117,
      101,
      114,
      121,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      116,
      119,
      111,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      98,
      101,
      108,
      111,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      114,
      101,
      112,
      108,
      97,
      99,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      32,
      116,
      104,
      101,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      119,
      105,
      100,
      101,
      32,
      114,
      97,
      110,
      103,
      101,
      32,
      111,
      102,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      97,
      116,
      105,
      111,
      110,
      115,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      116,
      121,
      119,
      97,
      115,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      100,
      32,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      101,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      97,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      108,
      121,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      61,
      34,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      115,
      121,
      110,
      99,
      32,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      119,
      105,
      116,
      104,
      115,
      101,
      101,
      109,
      115,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      114,
      32,
      119,
      105,
      116,
      104,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      40,
      41,
      32,
      123,
      116,
      111,
      111,
      107,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      97,
      110,
      100,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      60,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      105,
      110,
      32,
      97,
      110,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      103,
      114,
      101,
      97,
      116,
      32,
      100,
      101,
      97,
      108,
      32,
      111,
      102,
      69,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      108,
      121,
      32,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      121,
      32,
      97,
      108,
      108,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      44,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      115,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      32,
      116,
      111,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      32,
      98,
      121,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      32,
      105,
      115,
      68,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      32,
      111,
      102,
      109,
      111,
      100,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      84,
      104,
      101,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      109,
      97,
      121,
      32,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      58,
      67,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      44,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      115,
      111,
      109,
      101,
      116,
      104,
      97,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      101,
      100,
      32,
      97,
      115,
      98,
      111,
      116,
      116,
      111,
      109,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      40,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      34,
      32,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      98,
      97,
      115,
      105,
      115,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      115,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      114,
      101,
      100,
      117,
      99,
      101,
      32,
      116,
      104,
      101,
      106,
      117,
      114,
      105,
      115,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      117,
      116,
      61,
      34,
      78,
      101,
      119,
      32,
      84,
      101,
      115,
      116,
      97,
      109,
      101,
      110,
      116,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      102,
      105,
      108,
      109,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      45,
      115,
      116,
      114,
      105,
      99,
      116,
      46,
      100,
      116,
      100,
      34,
      62,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      105,
      115,
      99,
      104,
      97,
      110,
      103,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      116,
      104,
      101,
      114,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      117,
      110,
      112,
      114,
      101,
      99,
      101,
      100,
      101,
      110,
      116,
      101,
      100,
      105,
      115,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      105,
      110,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      98,
      111,
      108,
      100,
      59,
      105,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      9,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      114,
      101,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      32,
      119,
      105,
      116,
      104,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      32,
      65,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      97,
      99,
      111,
      110,
      115,
      116,
      101,
      108,
      108,
      97,
      116,
      105,
      111,
      110,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      32,
      102,
      111,
      114,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      97,
      110,
      100,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      121,
      101,
      97,
      114,
      71,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      104,
      97,
      118,
      101,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      121,
      101,
      97,
      114,
      115,
      99,
      111,
      109,
      109,
      105,
      116,
      109,
      101,
      110,
      116,
      32,
      116,
      111,
      9,
      9,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      118,
      105,
      115,
      117,
      97,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      49,
      57,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      44,
      112,
      114,
      97,
      99,
      116,
      105,
      116,
      105,
      111,
      110,
      101,
      114,
      115,
      116,
      104,
      97,
      116,
      32,
      104,
      101,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      110,
      100,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      111,
      99,
      99,
      117,
      112,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      115,
      32,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      97,
      115,
      99,
      101,
      110,
      116,
      114,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      97,
      109,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      62,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      32,
      111,
      102,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      105,
      97,
      116,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      97,
      98,
      111,
      117,
      116,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      32,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      111,
      102,
      32,
      97,
      115,
      83,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      112,
      117,
      116,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      105,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      100,
      32,
      98,
      121,
      114,
      101,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      115,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      99,
      99,
      111,
      109,
      109,
      111,
      100,
      97,
      116,
      105,
      111,
      110,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      108,
      97,
      114,
      103,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      32,
      102,
      111,
      114,
      116,
      104,
      101,
      32,
      115,
      111,
      45,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      32,
      116,
      104,
      101,
      32,
      73,
      110,
      32,
      116,
      104,
      105,
      115,
      32,
      99,
      97,
      115,
      101,
      44,
      119,
      97,
      115,
      32,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      105,
      115,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      114,
      101,
      109,
      97,
      105,
      110,
      105,
      110,
      103,
      101,
      102,
      102,
      101,
      99,
      116,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      32,
      100,
      101,
      97,
      108,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      10,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      97,
      108,
      119,
      97,
      121,
      115,
      97,
      114,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      32,
      111,
      102,
      102,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      99,
      105,
      118,
      105,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      108,
      97,
      110,
      100,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      73,
      110,
      100,
      101,
      120,
      99,
      97,
      110,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      105,
      110,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      47,
      62,
      116,
      104,
      101,
      32,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      77,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      99,
      97,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      116,
      114,
      97,
      99,
      101,
      100,
      105,
      115,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      105,
      115,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      108,
      105,
      118,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      111,
      114,
      101,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      70,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      82,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      105,
      115,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      116,
      104,
      101,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      62,
      115,
      104,
      111,
      114,
      116,
      32,
      115,
      116,
      111,
      114,
      105,
      101,
      115,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      115,
      32,
      116,
      111,
      32,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      107,
      110,
      111,
      119,
      110,
      32,
      102,
      111,
      114,
      32,
      105,
      116,
      115,
      119,
      97,
      115,
      32,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      121,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      98,
      108,
      111,
      99,
      107,
      105,
      115,
      32,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      116,
      104,
      101,
      32,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      97,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      100,
      32,
      97,
      115,
      47,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      97,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      114,
      101,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      100,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      115,
      116,
      97,
      116,
      101,
      114,
      101,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      32,
      116,
      111,
      117,
      110,
      100,
      101,
      114,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      116,
      119,
      111,
      103,
      114,
      97,
      118,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      114,
      101,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      105,
      110,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      115,
      101,
      114,
      118,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      108,
      121,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      108,
      108,
      105,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      119,
      97,
      115,
      32,
      102,
      111,
      114,
      99,
      101,
      100,
      32,
      116,
      111,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      44,
      97,
      110,
      100,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      46,
      97,
      110,
      100,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      108,
      111,
      97,
      100,
      67,
      104,
      97,
      114,
      116,
      98,
      101,
      97,
      116,
      116,
      111,
      32,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      115,
      116,
      97,
      116,
      101,
      115,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      102,
      105,
      114,
      115,
      116,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      32,
      97,
      110,
      100,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      97,
      108,
      98,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      122,
      101,
      100,
      99,
      108,
      101,
      97,
      114,
      73,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      97,
      116,
      105,
      118,
      101,
      70,
      101,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      97,
      32,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      116,
      104,
      101,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      102,
      114,
      101,
      101,
      32,
      115,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      121,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      32,
      97,
      109,
      111,
      114,
      101,
      32,
      112,
      111,
      119,
      101,
      114,
      102,
      117,
      108,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      97,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      109,
      97,
      110,
      121,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      115,
      111,
      109,
      101,
      105,
      115,
      32,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      117,
      110,
      116,
      105,
      108,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      119,
      97,
      115,
      32,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      97,
      114,
      101,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      116,
      104,
      101,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      111,
      102,
      32,
      68,
      79,
      32,
      78,
      79,
      84,
      32,
      65,
      76,
      84,
      69,
      82,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      114,
      101,
      102,
      101,
      114,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      63,
      115,
      111,
      114,
      116,
      61,
      116,
      104,
      97,
      116,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      32,
      102,
      111,
      114,
      104,
      97,
      115,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      117,
      109,
      109,
      101,
      114,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      116,
      105,
      118,
      101,
      108,
      121,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      116,
      104,
      101,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      111,
      115,
      101,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      32,
      111,
      116,
      104,
      101,
      114,
      83,
      111,
      117,
      116,
      104,
      32,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      104,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      101,
      115,
      115,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      97,
      115,
      101,
      59,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      97,
      110,
      100,
      59,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      98,
      97,
      104,
      97,
      115,
      97,
      32,
      77,
      101,
      108,
      97,
      121,
      117,
      110,
      111,
      114,
      115,
      107,
      32,
      98,
      111,
      107,
      109,
      195,
      165,
      108,
      110,
      111,
      114,
      115,
      107,
      32,
      110,
      121,
      110,
      111,
      114,
      115,
      107,
      115,
      108,
      111,
      118,
      101,
      110,
      197,
      161,
      196,
      141,
      105,
      110,
      97,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      99,
      97,
      108,
      105,
      102,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      117,
      110,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      99,
      105,
      195,
      179,
      110,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      105,
      115,
      97,
      109,
      98,
      105,
      103,
      117,
      97,
      116,
      105,
      111,
      110,
      68,
      111,
      109,
      97,
      105,
      110,
      78,
      97,
      109,
      101,
      39,
      44,
      32,
      39,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      109,
      117,
      108,
      116,
      97,
      110,
      101,
      111,
      117,
      115,
      108,
      121,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      60,
      47,
      62,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      102,
      114,
      97,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      62,
      61,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      60,
      102,
      111,
      114,
      109,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      125,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      46,
      115,
      101,
      116,
      65,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      40,
      65,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      61,
      32,
      110,
      101,
      119,
      32,
      65,
      114,
      114,
      97,
      121,
      40,
      41,
      59,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      13,
      10,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      98,
      108,
      111,
      99,
      107,
      59,
      85,
      110,
      102,
      111,
      114,
      116,
      117,
      110,
      97,
      116,
      101,
      108,
      121,
      44,
      34,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      100,
      105,
      118,
      62,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      62,
      61,
      39,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      39,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      44,
      32,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      110,
      32,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      112,
      116,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      10,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      46,
      115,
      116,
      121,
      108,
      101,
      46,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      32,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      98,
      111,
      100,
      121,
      46,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      32,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      112,
      111,
      115,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      45,
      45,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      80,
      114,
      105,
      109,
      101,
      32,
      77,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      115,
      116,
      105,
      99,
      60,
      47,
      97,
      62,
      32,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      116,
      104,
      101,
      32,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      61,
      34,
      116,
      104,
      101,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      97,
      115,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      119,
      97,
      115,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      118,
      101,
      97,
      114,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      10,
      100,
      101,
      112,
      101,
      110,
      100,
      115,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      32,
      105,
      110,
      32,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      32,
      116,
      111,
      32,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      61,
      34,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      99,
      97,
      115,
      101,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      58,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      66,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      45,
      115,
      116,
      114,
      105,
      99,
      116,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      100,
      32,
      98,
      121,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      110,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      105,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      115,
      41,
      59,
      32,
      106,
      115,
      46,
      105,
      100,
      32,
      61,
      32,
      105,
      100,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      82,
      111,
      109,
      97,
      110,
      32,
      67,
      97,
      116,
      104,
      111,
      108,
      105,
      99,
      97,
      110,
      32,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      46,
      103,
      105,
      102,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      116,
      104,
      101,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      100,
      105,
      115,
      99,
      114,
      105,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      114,
      99,
      104,
      97,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      112,
      114,
      105,
      109,
      101,
      32,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      119,
      46,
      97,
      116,
      116,
      97,
      99,
      104,
      69,
      118,
      101,
      110,
      116,
      40,
      60,
      47,
      97,
      62,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      97,
      73,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      34,
      32,
      67,
      122,
      101,
      99,
      104,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      110,
      99,
      101,
      99,
      111,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      46,
      104,
      116,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      40,
      41,
      32,
      123,
      99,
      111,
      109,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      60,
      47,
      97,
      62,
      10,
      60,
      47,
      108,
      105,
      62,
      10,
      60,
      108,
      105,
      118,
      101,
      114,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      40,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      9,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      62,
      102,
      111,
      117,
      110,
      100,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      99,
      97,
      114,
      98,
      111,
      110,
      32,
      100,
      105,
      111,
      120,
      105,
      100,
      101,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      45,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      121,
      32,
      116,
      111,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      84,
      105,
      225,
      186,
      191,
      110,
      103,
      32,
      86,
      105,
      225,
      187,
      135,
      116,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      48,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      119,
      97,
      115,
      32,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      101,
      99,
      99,
      108,
      101,
      115,
      105,
      97,
      115,
      116,
      105,
      99,
      97,
      108,
      116,
      104,
      101,
      114,
      101,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      104,
      97,
      115,
      32,
      110,
      101,
      118,
      101,
      114,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      116,
      105,
      109,
      101,
      105,
      110,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      32,
      116,
      111,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      119,
      97,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      45,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      116,
      111,
      32,
      98,
      101,
      32,
      99,
      111,
      110,
      102,
      117,
      115,
      101,
      100,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      104,
      114,
      101,
      102,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      32,
      111,
      114,
      32,
      110,
      111,
      116,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      109,
      97,
      110,
      121,
      97,
      32,
      115,
      109,
      97,
      108,
      108,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      111,
      116,
      104,
      101,
      114,
      32,
      112,
      97,
      114,
      116,
      115,
      32,
      111,
      102,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      32,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      117,
      116,
      116,
      111,
      110,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      46,
      32,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      65,
      116,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      105,
      116,
      115,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      115,
      32,
      116,
      104,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      105,
      116,
      32,
      105,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      109,
      111,
      114,
      101,
      32,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      111,
      97,
      110,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      32,
      105,
      110,
      104,
      97,
      118,
      101,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      101,
      110,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      115,
      32,
      116,
      111,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      109,
      97,
      110,
      121,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      102,
      111,
      114,
      32,
      109,
      97,
      110,
      121,
      32,
      121,
      101,
      97,
      114,
      115,
      101,
      97,
      114,
      108,
      105,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      112,
      116,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      32,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      121,
      101,
      97,
      114,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      105,
      97,
      108,
      32,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      114,
      103,
      117,
      101,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      97,
      110,
      100,
      97,
      32,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      111,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      111,
      108,
      111,
      114,
      58,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      114,
      101,
      98,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      102,
      111,
      114,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      111,
      110,
      101,
      32,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      67,
      111,
      117,
      110,
      99,
      105,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      69,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      32,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      115,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      97,
      110,
      100,
      32,
      109,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      105,
      116,
      32,
      105,
      115,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      97,
      115,
      112,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      115,
      105,
      110,
      99,
      101,
      32,
      98,
      101,
      101,
      110,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      85,
      110,
      105,
      111,
      110,
      114,
      101,
      109,
      105,
      110,
      105,
      115,
      99,
      101,
      110,
      116,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      86,
      105,
      99,
      101,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      97,
      115,
      115,
      101,
      100,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      109,
      111,
      114,
      101,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      49,
      112,
      120,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      32,
      111,
      102,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      9,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      101,
      109,
      98,
      108,
      97,
      110,
      99,
      101,
      32,
      116,
      111,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      103,
      114,
      111,
      117,
      110,
      100,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      101,
      97,
      110,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      40,
      77,
      97,
      116,
      104,
      46,
      114,
      97,
      110,
      100,
      111,
      109,
      40,
      41,
      109,
      111,
      115,
      116,
      32,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      116,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      67,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      111,
      112,
      108,
      101,
      119,
      101,
      114,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      49,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      32,
      117,
      115,
      101,
      100,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      58,
      98,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      105,
      110,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      32,
      119,
      105,
      116,
      104,
      95,
      105,
      100,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      13,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      111,
      105,
      110,
      116,
      32,
      111,
      117,
      116,
      32,
      116,
      104,
      97,
      116,
      120,
      77,
      76,
      72,
      116,
      116,
      112,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      97,
      110,
      100,
      32,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      118,
      101,
      114,
      121,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      114,
      102,
      97,
      99,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      101,
      105,
      103,
      110,
      32,
      112,
      111,
      108,
      105,
      99,
      121,
      95,
      115,
      101,
      116,
      68,
      111,
      109,
      97,
      105,
      110,
      78,
      97,
      109,
      101,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      105,
      115,
      32,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      111,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      116,
      111,
      32,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      68,
      101,
      99,
      108,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      67,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      111,
      116,
      104,
      101,
      114,
      32,
      102,
      111,
      114,
      109,
      115,
      32,
      111,
      102,
      104,
      101,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      13,
      105,
      102,
      32,
      97,
      110,
      100,
      32,
      111,
      110,
      108,
      121,
      32,
      105,
      102,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      119,
      105,
      116,
      104,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      78,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      116,
      104,
      101,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      65,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      40,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      97,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      116,
      104,
      97,
      110,
      32,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      116,
      104,
      101,
      32,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      59,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      102,
      102,
      102,
      125,
      10,
      46,
      10,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      111,
      102,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      62,
      13,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      99,
      108,
      97,
      105,
      109,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      70,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      32,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      116,
      97,
      107,
      101,
      115,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      97,
      109,
      101,
      110,
      111,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      62,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      32,
      111,
      102,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      105,
      110,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      116,
      104,
      101,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      119,
      97,
      115,
      32,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      111,
      109,
      101,
      116,
      104,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      108,
      121,
      32,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      13,
      10,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      32,
      116,
      111,
      32,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      102,
      111,
      114,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      119,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      109,
      97,
      100,
      101,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      101,
      100,
      32,
      97,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      105,
      115,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      32,
      111,
      102,
      73,
      73,
      44,
      32,
      72,
      111,
      108,
      121,
      32,
      82,
      111,
      109,
      97,
      110,
      105,
      115,
      32,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      104,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      105,
      114,
      32,
      111,
      119,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      116,
      111,
      32,
      101,
      110,
      115,
      117,
      114,
      101,
      32,
      116,
      104,
      97,
      116,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      97,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      47,
      117,
      108,
      62,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      116,
      121,
      112,
      101,
      61,
      34,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      32,
      111,
      117,
      116,
      32,
      98,
      121,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      116,
      32,
      105,
      115,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      105,
      110,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      108,
      121,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      32,
      116,
      111,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      116,
      111,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      116,
      104,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      32,
      32,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      104,
      101,
      32,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      101,
      120,
      116,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      32,
      98,
      121,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      105,
      97,
      110,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      97,
      116,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      105,
      99,
      97,
      108,
      32,
      115,
      114,
      112,
      115,
      107,
      111,
      104,
      114,
      118,
      97,
      116,
      115,
      107,
      105,
      116,
      105,
      225,
      186,
      191,
      110,
      103,
      32,
      86,
      105,
      225,
      187,
      135,
      116,
      208,
      160,
      209,
      131,
      209,
      129,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      185,
      209,
      128,
      209,
      131,
      209,
      129,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      185,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      99,
      105,
      195,
      179,
      110,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      208,
      181,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      208,
      185,
      209,
      135,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      186,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      139,
      208,
      157,
      208,
      190,
      208,
      178,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      209,
      133,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      178,
      209,
      128,
      208,
      181,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      176,
      209,
      143,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      189,
      209,
      143,
      209,
      129,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      163,
      208,
      186,
      209,
      128,
      208,
      176,
      208,
      184,
      208,
      189,
      209,
      139,
      208,
      178,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      209,
      139,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      185,
      209,
      129,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      209,
      140,
      209,
      142,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      190,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      188,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      189,
      209,
      139,
      209,
      131,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      181,
      209,
      130,
      208,
      181,
      209,
      135,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      208,
      147,
      208,
      187,
      208,
      176,
      208,
      178,
      208,
      189,
      208,
      176,
      209,
      143,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      176,
      209,
      128,
      208,
      181,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      161,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      191,
      208,
      190,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      180,
      209,
      131,
      208,
      181,
      209,
      130,
      209,
      129,
      208,
      186,
      208,
      176,
      208,
      183,
      208,
      176,
      209,
      130,
      209,
      140,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      176,
      209,
      128,
      208,
      190,
      208,
      178,
      208,
      186,
      208,
      190,
      208,
      189,
      208,
      181,
      209,
      135,
      208,
      189,
      208,
      190,
      209,
      128,
      208,
      181,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      181,
      208,
      190,
      209,
      128,
      208,
      179,
      208,
      176,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      188,
      208,
      160,
      208,
      181,
      208,
      186,
      208,
      187,
      208,
      176,
      208,
      188,
      208,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      137,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      182,
      217,
      136,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      168,
      216,
      177,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      167,
      217,
      130,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      179,
      216,
      167,
      216,
      166,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      138,
      216,
      167,
      216,
      182,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      181,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      216,
      167,
      217,
      132,
      217,
      134,
      216,
      170,
      216,
      167,
      216,
      166,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      179,
      216,
      172,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      130,
      216,
      179,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      182,
      216,
      186,
      216,
      183,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      138,
      216,
      175,
      217,
      138,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      177,
      216,
      173,
      217,
      138,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      167,
      216,
      177,
      217,
      138,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      170,
      217,
      130,
      217,
      134,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      136,
      216,
      167,
      216,
      183,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      172,
      216,
      170,
      217,
      133,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      138,
      217,
      131,
      217,
      136,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      173,
      216,
      169,
      216,
      185,
      216,
      168,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      136,
      216,
      167,
      216,
      168,
      216,
      183,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      175,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      170,
      216,
      173,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      186,
      216,
      167,
      217,
      134,
      217,
      138,
      99,
      117,
      114,
      115,
      111,
      114,
      58,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      59,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      34,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      47,
      97,
      62,
      32,
      124,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      33,
      100,
      111,
      99,
      116,
      121,
      112,
      101,
      32,
      104,
      116,
      109,
      108,
      62,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      115,
      99,
      114,
      101,
      101,
      110,
      34,
      32,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      47,
      62,
      10,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      115,
      116,
      105,
      99,
      115,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      103,
      101,
      116,
      34,
      32,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      118,
      101,
      115,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      32,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      10,
      32,
      32,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      62,
      60,
      119,
      97,
      115,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      41,
      59,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      34,
      62,
      41,
      46,
      115,
      116,
      121,
      108,
      101,
      46,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      111,
      111,
      107,
      105,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      125,
      98,
      111,
      100,
      121,
      123,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      59,
      69,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      32,
      111,
      102,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      110,
      97,
      109,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      10,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      118,
      101,
      32,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      34,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      111,
      116,
      104,
      101,
      114,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      34,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      73,
      110,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      119,
      111,
      114,
      100,
      115,
      44,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      98,
      108,
      111,
      99,
      107,
      59,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      47,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      121,
      101,
      97,
      114,
      115,
      13,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      105,
      110,
      115,
      112,
      105,
      114,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      32,
      119,
      105,
      116,
      104,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      71,
      101,
      114,
      109,
      97,
      110,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      115,
      116,
      32,
      80,
      97,
      114,
      116,
      121,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      32,
      119,
      105,
      116,
      104,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      116,
      104,
      101,
      32,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      34,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      109,
      97,
      110,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      79,
      114,
      116,
      104,
      111,
      100,
      111,
      120,
      32,
      67,
      104,
      117,
      114,
      99,
      104,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      119,
      97,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      117,
      110,
      116,
      105,
      108,
      32,
      104,
      105,
      115,
      32,
      100,
      101,
      97,
      116,
      104,
      125,
      41,
      40,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      111,
      116,
      104,
      101,
      114,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      78,
      101,
      116,
      104,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      117,
      114,
      108,
      40,
      97,
      114,
      103,
      117,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      78,
      111,
      114,
      116,
      104,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      32,
      116,
      104,
      101,
      32,
      110,
      97,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      97,
      32,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      118,
      101,
      114,
      121,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      105,
      115,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      119,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      105,
      109,
      97,
      103,
      101,
      95,
      99,
      97,
      112,
      116,
      105,
      111,
      110,
      32,
      61,
      97,
      116,
      116,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      32,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      84,
      104,
      105,
      115,
      32,
      109,
      101,
      97,
      110,
      115,
      32,
      116,
      104,
      97,
      116,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      98,
      121,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      112,
      105,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      102,
      111,
      114,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      109,
      111,
      115,
      116,
      32,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      104,
      101,
      110,
      115,
      105,
      118,
      101,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      101,
      114,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      85,
      110,
      115,
      111,
      117,
      114,
      99,
      101,
      100,
      32,
      105,
      109,
      97,
      103,
      101,
      62,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      111,
      112,
      80,
      114,
      111,
      112,
      97,
      103,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      109,
      97,
      103,
      110,
      101,
      116,
      105,
      99,
      101,
      110,
      97,
      98,
      108,
      101,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      73,
      116,
      32,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      118,
      97,
      114,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      105,
      110,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      119,
      97,
      115,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      97,
      116,
      104,
      119,
      105,
      116,
      104,
      32,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      32,
      116,
      111,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      105,
      115,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      105,
      115,
      32,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      228,
      184,
      173,
      230,
      150,
      135,
      32,
      40,
      231,
      174,
      128,
      228,
      189,
      147,
      41,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      97,
      98,
      105,
      108,
      105,
      100,
      97,
      100,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      99,
      105,
      195,
      179,
      110,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      101,
      115,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      101,
      110,
      116,
      101,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      165,
      129,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      150,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      173,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      137,
      224,
      164,
      151,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      131,
      224,
      164,
      183,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      164,
      172,
      224,
      164,
      162,
      224,
      164,
      188,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      150,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      166,
      224,
      165,
      140,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      164,
      164,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      129,
      224,
      164,
      154,
      224,
      164,
      172,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      164,
      191,
      224,
      164,
      155,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      182,
      224,
      165,
      135,
      224,
      164,
      183,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      137,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      176,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      130,
      224,
      164,
      172,
      224,
      164,
      136,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      170,
      224,
      164,
      162,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      150,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      133,
      224,
      164,
      154,
      224,
      165,
      141,
      224,
      164,
      155,
      224,
      164,
      190,
      224,
      164,
      155,
      224,
      165,
      130,
      224,
      164,
      159,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      128,
      224,
      164,
      164,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      143,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      152,
      224,
      164,
      163,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      166,
      224,
      165,
      130,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      136,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      133,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      183,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      129,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      131,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      139,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      164,
      152,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      130,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      165,
      130,
      224,
      164,
      154,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      130,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      165,
      130,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      136,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      114,
      115,
      115,
      43,
      120,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      45,
      116,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      105,
      116,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      116,
      105,
      109,
      101,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      46,
      99,
      108,
      105,
      99,
      107,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      125,
      41,
      40,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      41,
      59,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      32,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      58,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      66,
      97,
      104,
      97,
      115,
      97,
      32,
      73,
      110,
      100,
      111,
      110,
      101,
      115,
      105,
      97,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      116,
      101,
      120,
      116,
      32,
      120,
      109,
      108,
      58,
      115,
      112,
      97,
      99,
      101,
      61,
      46,
      103,
      105,
      102,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      32,
      115,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      47,
      62,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      110,
      103,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      83,
      116,
      97,
      116,
      101,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      108,
      101,
      102,
      116,
      59,
      10,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      44,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      41,
      59,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      59,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      110,
      32,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      34,
      32,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      10,
      32,
      32,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      116,
      104,
      101,
      32,
      49,
      53,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      46,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      68,
      101,
      102,
      97,
      117,
      108,
      116,
      40,
      108,
      97,
      114,
      103,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      66,
      121,
      122,
      97,
      110,
      116,
      105,
      110,
      101,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      46,
      106,
      112,
      103,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      108,
      101,
      102,
      116,
      124,
      118,
      97,
      115,
      116,
      32,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      80,
      114,
      101,
      115,
      115,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      83,
      101,
      99,
      111,
      110,
      100,
      32,
      87,
      111,
      114,
      108,
      100,
      32,
      87,
      97,
      114,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      122,
      101,
      100,
      32,
      98,
      121,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      62,
      100,
      101,
      114,
      105,
      118,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      116,
      104,
      101,
      32,
      97,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      45,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      116,
      104,
      101,
      32,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      68,
      101,
      109,
      111,
      99,
      114,
      97,
      116,
      105,
      99,
      32,
      80,
      97,
      114,
      116,
      121,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      70,
      111,
      114,
      32,
      116,
      104,
      105,
      115,
      32,
      114,
      101,
      97,
      115,
      111,
      110,
      44,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      9,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      115,
      41,
      91,
      48,
      93,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      105,
      99,
      111,
      110,
      34,
      32,
      39,
      32,
      97,
      108,
      116,
      61,
      39,
      39,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      39,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      47,
      112,
      97,
      103,
      101,
      62,
      10,
      32,
      32,
      60,
      112,
      97,
      103,
      101,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      116,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      98,
      97,
      104,
      97,
      115,
      97,
      32,
      73,
      110,
      100,
      111,
      110,
      101,
      115,
      105,
      97,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      115,
      105,
      109,
      112,
      108,
      101,
      41,
      206,
      149,
      206,
      187,
      206,
      187,
      206,
      183,
      206,
      189,
      206,
      185,
      206,
      186,
      206,
      172,
      209,
      133,
      209,
      128,
      208,
      178,
      208,
      176,
      209,
      130,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      186,
      208,
      190,
      208,
      188,
      208,
      191,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      184,
      209,
      143,
      208,
      178,
      208,
      187,
      209,
      143,
      208,
      181,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      148,
      208,
      190,
      208,
      177,
      208,
      176,
      208,
      178,
      208,
      184,
      209,
      130,
      209,
      140,
      209,
      135,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      186,
      208,
      176,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      178,
      208,
      184,
      209,
      130,
      208,
      184,
      209,
      143,
      208,
      152,
      208,
      189,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      158,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      130,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      176,
      208,
      191,
      209,
      128,
      208,
      184,
      208,
      188,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      189,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      179,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      134,
      209,
      139,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      131,
      209,
      129,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      184,
      209,
      143,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      181,
      208,
      188,
      209,
      139,
      208,
      191,
      208,
      190,
      208,
      187,
      209,
      131,
      209,
      135,
      208,
      184,
      209,
      130,
      209,
      140,
      209,
      143,
      208,
      178,
      208,
      187,
      209,
      143,
      209,
      142,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      189,
      208,
      176,
      208,
      184,
      208,
      177,
      208,
      190,
      208,
      187,
      208,
      181,
      208,
      181,
      208,
      186,
      208,
      190,
      208,
      188,
      208,
      191,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      178,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      167,
      216,
      182,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      216,
      170,
      217,
      130,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      217,
      131,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      177,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      131,
      216,
      170,
      217,
      136,
      216,
      168,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      185,
      217,
      136,
      216,
      175,
      217,
      138,
      216,
      169,
      216,
      167,
      216,
      173,
      216,
      181,
      216,
      167,
      216,
      166,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      136,
      216,
      170,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      177,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      165,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      167,
      216,
      170,
      114,
      111,
      98,
      111,
      116,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      62,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      46,
      106,
      112,
      103,
      124,
      114,
      105,
      103,
      104,
      116,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      114,
      111,
      116,
      111,
      99,
      111,
      108,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      115,
      34,
      32,
      47,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      97,
      110,
      100,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      100,
      101,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      59,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      116,
      119,
      101,
      110,
      116,
      105,
      101,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      62,
      10,
      32,
      32,
      60,
      47,
      112,
      97,
      103,
      101,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      32,
      69,
      120,
      112,
      108,
      111,
      114,
      101,
      114,
      97,
      46,
      97,
      115,
      121,
      110,
      99,
      32,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      13,
      10,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      98,
      111,
      117,
      116,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      10,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      65,
      114,
      105,
      97,
      108,
      44,
      32,
      72,
      101,
      108,
      118,
      101,
      116,
      105,
      99,
      97,
      44,
      60,
      47,
      97,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      112,
      97,
      114,
      116,
      105,
      101,
      115,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      60,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      39,
      60,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      10,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      118,
      101,
      97,
      108,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      32,
      115,
      101,
      114,
      105,
      101,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      62,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      99,
      108,
      97,
      105,
      109,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      119,
      119,
      119,
      46,
      109,
      97,
      110,
      105,
      102,
      101,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      80,
      114,
      105,
      109,
      101,
      32,
      77,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      32,
      111,
      102,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      116,
      104,
      114,
      101,
      101,
      45,
      100,
      105,
      109,
      101,
      110,
      115,
      105,
      111,
      110,
      97,
      108,
      67,
      104,
      117,
      114,
      99,
      104,
      32,
      111,
      102,
      32,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      111,
      102,
      32,
      78,
      111,
      114,
      116,
      104,
      32,
      67,
      97,
      114,
      111,
      108,
      105,
      110,
      97,
      115,
      113,
      117,
      97,
      114,
      101,
      32,
      107,
      105,
      108,
      111,
      109,
      101,
      116,
      114,
      101,
      115,
      46,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      80,
      104,
      111,
      110,
      101,
      116,
      105,
      99,
      32,
      65,
      108,
      112,
      104,
      97,
      98,
      101,
      116,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      66,
      101,
      110,
      106,
      97,
      109,
      105,
      110,
      32,
      70,
      114,
      97,
      110,
      107,
      108,
      105,
      110,
      114,
      111,
      108,
      101,
      45,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      32,
      103,
      97,
      109,
      101,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      105,
      110,
      32,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      32,
      71,
      117,
      116,
      101,
      110,
      98,
      101,
      114,
      103,
      114,
      101,
      103,
      97,
      114,
      100,
      108,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      32,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      113,
      117,
      97,
      110,
      116,
      117,
      109,
      32,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      99,
      115,
      78,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      32,
      116,
      104,
      101,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      32,
      121,
      101,
      97,
      114,
      115,
      32,
      97,
      103,
      111,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      13,
      206,
      149,
      206,
      187,
      206,
      187,
      206,
      183,
      206,
      189,
      206,
      185,
      206,
      186,
      206,
      172,
      10,
      116,
      97,
      107,
      101,
      32,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      110,
      100,
      44,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      77,
      105,
      99,
      114,
      111,
      115,
      111,
      102,
      116,
      32,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      110,
      111,
      116,
      97,
      98,
      108,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      116,
      101,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      46,
      114,
      101,
      97,
      99,
      104,
      105,
      110,
      103,
      32,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      105,
      115,
      111,
      108,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      79,
      108,
      100,
      32,
      84,
      101,
      115,
      116,
      97,
      109,
      101,
      110,
      116,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      105,
      110,
      115,
      101,
      114,
      116,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      109,
      101,
      116,
      114,
      111,
      112,
      111,
      108,
      105,
      116,
      97,
      110,
      32,
      97,
      114,
      101,
      97,
      109,
      97,
      107,
      101,
      115,
      32,
      105,
      116,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      97,
      99,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      103,
      117,
      97,
      98,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      10,
      116,
      104,
      101,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      99,
      111,
      105,
      110,
      99,
      105,
      100,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      116,
      119,
      111,
      45,
      116,
      104,
      105,
      114,
      100,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      105,
      115,
      32,
      116,
      105,
      109,
      101,
      44,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      104,
      101,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      110,
      100,
      32,
      109,
      111,
      114,
      101,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      115,
      99,
      105,
      111,
      117,
      115,
      110,
      101,
      115,
      115,
      32,
      97,
      110,
      100,
      102,
      111,
      114,
      109,
      101,
      114,
      108,
      121,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      102,
      105,
      114,
      115,
      116,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      105,
      110,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      59,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      106,
      97,
      120,
      47,
      108,
      105,
      98,
      115,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      47,
      49,
      46,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      32,
      80,
      111,
      108,
      105,
      99,
      121,
      60,
      47,
      97,
      62,
      101,
      40,
      34,
      37,
      51,
      67,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      39,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      79,
      110,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      104,
      97,
      110,
      100,
      44,
      46,
      106,
      112,
      103,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      114,
      105,
      103,
      104,
      116,
      124,
      50,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      110,
      105,
      110,
      101,
      116,
      101,
      101,
      110,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      13,
      10,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      59,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      99,
      101,
      110,
      116,
      101,
      114,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      98,
      111,
      108,
      100,
      59,
      32,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      34,
      32,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      104,
      116,
      109,
      108,
      52,
      47,
      108,
      111,
      111,
      115,
      101,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      116,
      105,
      109,
      101,
      59,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      60,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      111,
      110,
      114,
      101,
      97,
      100,
      121,
      115,
      116,
      97,
      116,
      101,
      99,
      104,
      97,
      110,
      103,
      101,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      32,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      116,
      104,
      101,
      32,
      97,
      32,
      119,
      105,
      100,
      101,
      32,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      32,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      13,
      10,
      60,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      59,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      61,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      119,
      119,
      119,
      46,
      105,
      110,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      105,
      116,
      32,
      105,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      32,
      72,
      97,
      114,
      118,
      97,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      109,
      97,
      105,
      110,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      79,
      120,
      102,
      111,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      34,
      32,
      99,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      102,
      101,
      100,
      101,
      114,
      97,
      108,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      32,
      100,
      101,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      108,
      105,
      103,
      104,
      116,
      108,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      105,
      110,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      116,
      101,
      108,
      101,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      102,
      116,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      116,
      97,
      116,
      105,
      99,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      97,
      32,
      108,
      97,
      114,
      103,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      84,
      101,
      108,
      101,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      116,
      72,
      111,
      108,
      121,
      32,
      82,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      101,
      114,
      111,
      114,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      108,
      121,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      83,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      83,
      116,
      97,
      116,
      101,
      99,
      117,
      108,
      109,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      67,
      73,
      65,
      32,
      87,
      111,
      114,
      108,
      100,
      32,
      70,
      97,
      99,
      116,
      98,
      111,
      111,
      107,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      97,
      110,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      60,
      108,
      105,
      62,
      60,
      101,
      109,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      65,
      116,
      108,
      97,
      110,
      116,
      105,
      99,
      32,
      79,
      99,
      101,
      97,
      110,
      115,
      116,
      114,
      105,
      99,
      116,
      108,
      121,
      32,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      44,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      116,
      121,
      112,
      101,
      115,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      79,
      116,
      116,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      65,
      110,
      32,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      112,
      97,
      114,
      116,
      117,
      114,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      67,
      111,
      110,
      102,
      101,
      100,
      101,
      114,
      97,
      116,
      101,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      105,
      110,
      100,
      105,
      103,
      101,
      110,
      111,
      117,
      115,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      115,
      80,
      114,
      111,
      99,
      101,
      101,
      100,
      105,
      110,
      103,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      111,
      114,
      105,
      101,
      115,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      114,
      101,
      101,
      97,
      100,
      106,
      97,
      99,
      101,
      110,
      116,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      105,
      115,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      100,
      105,
      115,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      108,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      104,
      105,
      115,
      32,
      99,
      111,
      110,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      105,
      101,
      115,
      102,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      68,
      111,
      109,
      105,
      110,
      105,
      99,
      97,
      110,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      32,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      117,
      110,
      100,
      101,
      114,
      32,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      115,
      116,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      32,
      112,
      117,
      98,
      108,
      105,
      99,
      105,
      115,
      32,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      101,
      110,
      116,
      105,
      114,
      101,
      108,
      121,
      112,
      97,
      115,
      115,
      101,
      115,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      97,
      110,
      100,
      32,
      118,
      105,
      100,
      101,
      111,
      71,
      101,
      114,
      109,
      97,
      110,
      105,
      99,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      119,
      97,
      114,
      100,
      115,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      66,
      111,
      97,
      114,
      100,
      32,
      111,
      102,
      32,
      68,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      115,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      124,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      73,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      32,
      116,
      104,
      101,
      77,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      32,
      102,
      111,
      111,
      116,
      110,
      111,
      116,
      101,
      115,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      121,
      101,
      97,
      114,
      115,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      119,
      97,
      115,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      32,
      115,
      116,
      114,
      111,
      110,
      103,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      84,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      44,
      32,
      116,
      104,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      34,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      41,
      59,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      108,
      101,
      102,
      116,
      59,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      48,
      59,
      32,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      85,
      110,
      102,
      111,
      114,
      116,
      117,
      110,
      97,
      116,
      101,
      108,
      121,
      44,
      32,
      116,
      104,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      116,
      104,
      101,
      32,
      109,
      111,
      116,
      105,
      111,
      110,
      32,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      208,
      145,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      177,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      164,
      208,
      181,
      208,
      180,
      208,
      181,
      209,
      128,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      189,
      208,
      181,
      209,
      129,
      208,
      186,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      129,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      179,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      188,
      209,
      139,
      208,
      158,
      209,
      130,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      177,
      208,
      181,
      209,
      129,
      208,
      191,
      208,
      187,
      208,
      176,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      176,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      176,
      208,
      187,
      209,
      139,
      208,
      191,
      208,
      190,
      208,
      183,
      208,
      178,
      208,
      190,
      208,
      187,
      209,
      143,
      208,
      181,
      209,
      130,
      208,
      191,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      180,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      187,
      208,
      184,
      209,
      135,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      180,
      209,
      131,
      208,
      186,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      179,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      188,
      208,
      176,
      208,
      191,
      208,
      190,
      208,
      187,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      142,
      208,
      189,
      208,
      176,
      209,
      133,
      208,
      190,
      208,
      180,
      208,
      184,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      184,
      208,
      183,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      181,
      208,
      189,
      208,
      176,
      209,
      129,
      208,
      181,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      184,
      208,
      183,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      186,
      208,
      176,
      209,
      130,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      208,
      144,
      208,
      187,
      208,
      181,
      208,
      186,
      209,
      129,
      208,
      176,
      208,
      189,
      208,
      180,
      209,
      128,
      224,
      164,
      166,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      133,
      224,
      164,
      178,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      135,
      224,
      164,
      130,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      133,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      182,
      224,
      164,
      168,
      224,
      164,
      166,
      224,
      165,
      129,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      145,
      224,
      164,
      168,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      168,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      188,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      136,
      224,
      164,
      182,
      224,
      164,
      182,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      191,
      224,
      164,
      137,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      185,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      163,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      163,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      161,
      224,
      164,
      172,
      224,
      164,
      154,
      224,
      165,
      141,
      224,
      164,
      154,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      178,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      167,
      224,
      164,
      174,
      224,
      164,
      130,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      164,
      137,
      224,
      164,
      174,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      167,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      174,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      174,
      224,
      165,
      128,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      136,
      224,
      164,
      170,
      224,
      165,
      128,
      224,
      164,
      143,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      165,
      139,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      178,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      150,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      168,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      188,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      150,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      168,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      168,
      224,
      164,
      134,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      165,
      139,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      133,
      216,
      168,
      217,
      138,
      217,
      136,
      216,
      170,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      216,
      167,
      216,
      170,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      178,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      165,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      136,
      216,
      170,
      217,
      136,
      216,
      180,
      217,
      136,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      179,
      216,
      167,
      216,
      168,
      217,
      130,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      185,
      217,
      132,
      217,
      136,
      217,
      133,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      179,
      217,
      132,
      216,
      179,
      217,
      132,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      177,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      131,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      170,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      62,
      60,
      97,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      116,
      101,
      120,
      116,
      47,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      116,
      111,
      32,
      108,
      97,
      115,
      116,
      32,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      98,
      121,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      32,
      35,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      35,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      47,
      47,
      69,
      78,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      101,
      110,
      99,
      111,
      100,
      101,
      85,
      82,
      73,
      67,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      40,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      39,
      60,
      115,
      99,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      32,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      32,
      10,
      13,
      10,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      47,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      60,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      101,
      110,
      99,
      111,
      100,
      105,
      110,
      103,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      63,
      62,
      10,
      119,
      46,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      63,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      109,
      101,
      116,
      97,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      116,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      104,
      101,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      105,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      32,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      73,
      116,
      32,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      116,
      111,
      32,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      103,
      98,
      76,
      105,
      98,
      114,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      67,
      111,
      110,
      103,
      114,
      101,
      115,
      115,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      109,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      65,
      99,
      97,
      100,
      101,
      109,
      121,
      32,
      111,
      102,
      32,
      83,
      99,
      105,
      101,
      110,
      99,
      101,
      115,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      121,
      73,
      100,
      40,
      105,
      100,
      41,
      105,
      110,
      32,
      99,
      111,
      110,
      106,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      41,
      59,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      208,
      145,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      10,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      62,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      32,
      80,
      111,
      108,
      105,
      99,
      121,
      60,
      47,
      97,
      62,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      101,
      110,
      97,
      98,
      108,
      101,
      83,
      105,
      110,
      103,
      108,
      101,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      102,
      108,
      111,
      97,
      116,
      58,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      116,
      97,
      108,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      32,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      44,
      32,
      68,
      46,
      67,
      46,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      97,
      109,
      111,
      110,
      103,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      105,
      110,
      103,
      115,
      44,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      32,
      79,
      120,
      102,
      111,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      109,
      105,
      115,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      102,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      44,
      32,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      67,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      101,
      120,
      112,
      97,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      102,
      102,
      105,
      108,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      114,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      62,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      32,
      73,
      114,
      101,
      108,
      97,
      110,
      100,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      104,
      101,
      97,
      100,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      105,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      70,
      101,
      100,
      101,
      114,
      97,
      108,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      108,
      121,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      78,
      111,
      116,
      101,
      44,
      32,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      97,
      116,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      97,
      116,
      32,
      111,
      102,
      32,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      111,
      114,
      100,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      110,
      116,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      102,
      117,
      114,
      116,
      104,
      101,
      114,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      104,
      105,
      115,
      32,
      121,
      111,
      117,
      110,
      103,
      101,
      114,
      32,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      60,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      88,
      45,
      85,
      65,
      45,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      111,
      102,
      32,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      32,
      67,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      122,
      101,
      100,
      40,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      32,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      112,
      97,
      115,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      114,
      101,
      100,
      105,
      114,
      101,
      99,
      116,
      115,
      32,
      104,
      101,
      114,
      101,
      46,
      32,
      70,
      111,
      114,
      104,
      97,
      118,
      101,
      32,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      32,
      117,
      110,
      100,
      101,
      114,
      37,
      51,
      69,
      37,
      51,
      67,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      37,
      51,
      69,
      34,
      41,
      41,
      59,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      105,
      116,
      101,
      95,
      110,
      97,
      109,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      110,
      111,
      110,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      110,
      111,
      110,
      101,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      88,
      45,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      40,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      104,
      114,
      101,
      102,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      45,
      45,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      47,
      97,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      97,
      108,
      108,
      111,
      119,
      84,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      61,
      34,
      88,
      45,
      85,
      65,
      45,
      67,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      47,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      114,
      101,
      108,
      61,
      34,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      54,
      62,
      60,
      117,
      108,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      32,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      115,
      99,
      114,
      101,
      101,
      110,
      34,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      97,
      108,
      108,
      111,
      119,
      116,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      13,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      62,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      105,
      108,
      121,
      70,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      60,
      104,
      116,
      109,
      108,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      118,
      111,
      105,
      100,
      40,
      48,
      41,
      59,
      34,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      99,
      111,
      109,
      109,
      111,
      110,
      32,
      109,
      105,
      115,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      104,
      105,
      115,
      32,
      108,
      105,
      102,
      101,
      116,
      105,
      109,
      101,
      44,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      32,
      97,
      110,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      100,
      105,
      112,
      108,
      111,
      109,
      97,
      116,
      105,
      99,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      109,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      116,
      104,
      101,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      116,
      111,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      32,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      113,
      117,
      105,
      116,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      109,
      97,
      114,
      107,
      101,
      100,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      100,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      111,
      119,
      97,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      119,
      105,
      116,
      104,
      32,
      118,
      97,
      114,
      121,
      105,
      110,
      103,
      32,
      100,
      101,
      103,
      114,
      101,
      101,
      115,
      104,
      97,
      118,
      101,
      32,
      115,
      112,
      101,
      99,
      117,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      105,
      110,
      116,
      101,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      97,
      98,
      108,
      121,
      32,
      119,
      105,
      116,
      104,
      109,
      111,
      114,
      101,
      32,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      115,
      111,
      99,
      105,
      97,
      108,
      32,
      97,
      110,
      100,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      116,
      104,
      97,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      112,
      101,
      114,
      112,
      101,
      110,
      100,
      105,
      99,
      117,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      102,
      97,
      109,
      105,
      108,
      105,
      101,
      115,
      32,
      114,
      101,
      115,
      105,
      100,
      105,
      110,
      103,
      32,
      105,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      105,
      110,
      103,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      111,
      110,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      115,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      32,
      40,
      69,
      117,
      114,
      111,
      112,
      101,
      117,
      41,
      208,
      163,
      208,
      186,
      209,
      128,
      208,
      176,
      209,
      151,
      208,
      189,
      209,
      129,
      209,
      140,
      208,
      186,
      208,
      176,
      209,
      131,
      208,
      186,
      209,
      128,
      208,
      176,
      209,
      151,
      208,
      189,
      209,
      129,
      209,
      140,
      208,
      186,
      208,
      176,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      208,
      185,
      209,
      129,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      188,
      208,
      176,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      176,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      209,
      131,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      189,
      208,
      181,
      208,
      190,
      208,
      177,
      209,
      133,
      208,
      190,
      208,
      180,
      208,
      184,
      208,
      188,
      208,
      190,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      143,
      208,
      152,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      143,
      208,
      160,
      208,
      181,
      209,
      129,
      208,
      191,
      209,
      131,
      208,
      177,
      208,
      187,
      208,
      184,
      208,
      186,
      208,
      184,
      208,
      186,
      208,
      190,
      208,
      187,
      208,
      184,
      209,
      135,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      190,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      142,
      209,
      130,
      208,
      181,
      209,
      128,
      209,
      128,
      208,
      184,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      208,
      180,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      130,
      208,
      190,
      209,
      135,
      208,
      189,
      208,
      190,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      170,
      217,
      136,
      216,
      167,
      216,
      172,
      216,
      175,
      217,
      136,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      180,
      216,
      170,
      216,
      177,
      216,
      167,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      130,
      216,
      170,
      216,
      177,
      216,
      167,
      216,
      173,
      216,
      167,
      216,
      170,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      85,
      84,
      70,
      45,
      56,
      34,
      32,
      115,
      101,
      116,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      45,
      98,
      108,
      111,
      99,
      107,
      59,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      32,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      10,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      115,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      125,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      80,
      101,
      111,
      112,
      108,
      101,
      39,
      115,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      32,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      117,
      110,
      100,
      101,
      114,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      35,
      118,
      105,
      101,
      119,
      112,
      111,
      114,
      116,
      123,
      109,
      105,
      110,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      111,
      102,
      116,
      101,
      110,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      10,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      10,
      60,
      33,
      45,
      45,
      91,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      65,
      105,
      114,
      112,
      111,
      114,
      116,
      62,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      224,
      184,
      160,
      224,
      184,
      178,
      224,
      184,
      169,
      224,
      184,
      178,
      224,
      185,
      132,
      224,
      184,
      151,
      224,
      184,
      162,
      225,
      131,
      165,
      225,
      131,
      144,
      225,
      131,
      160,
      225,
      131,
      151,
      225,
      131,
      163,
      225,
      131,
      154,
      225,
      131,
      152,
      230,
      173,
      163,
      233,
      171,
      148,
      228,
      184,
      173,
      230,
      150,
      135,
      32,
      40,
      231,
      185,
      129,
      233,
      171,
      148,
      41,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      161,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      158,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      133,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      168,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      129,
      224,
      164,
      154,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      168,
      224,
      164,
      159,
      224,
      164,
      191,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      170,
      224,
      164,
      163,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      159,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      130,
      224,
      164,
      173,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      164,
      171,
      224,
      164,
      188,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      163,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      161,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      114,
      111,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      58,
      117,
      114,
      108,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      46,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      32,
      120,
      109,
      108,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      103,
      101,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      32,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      32,
      47,
      62,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      46,
      99,
      115,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      49,
      46,
      48,
      32,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      47,
      97,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      115,
      112,
      97,
      110,
      32,
      114,
      111,
      108,
      101,
      61,
      34,
      115,
      10,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      74,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      61,
      39,
      43,
      101,
      110,
      99,
      111,
      100,
      101,
      85,
      82,
      73,
      67,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      40,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      10,
      98,
      111,
      100,
      121,
      44,
      32,
      116,
      114,
      44,
      32,
      105,
      110,
      112,
      117,
      116,
      44,
      32,
      116,
      101,
      120,
      116,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      114,
      111,
      98,
      111,
      116,
      115,
      34,
      32,
      99,
      111,
      110,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      62,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      62,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      117,
      101,
      34,
      62,
      194,
      183,
      60,
      114,
      105,
      112,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      108,
      61,
      48,
      59,
      125,
      41,
      40,
      41,
      59,
      10,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      105,
      109,
      97,
      103,
      101,
      58,
      32,
      117,
      114,
      108,
      40,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      9,
      9,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      116,
      111,
      114,
      34,
      32,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      117,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      10,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      114,
      97,
      116,
      111,
      114,
      34,
      32,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      101,
      61,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      32,
      40,
      100,
      111,
      32,
      66,
      114,
      97,
      115,
      105,
      108,
      41,
      208,
      190,
      209,
      128,
      208,
      179,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      183,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      178,
      208,
      190,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      190,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      143,
      209,
      128,
      208,
      181,
      208,
      179,
      208,
      184,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      178,
      208,
      190,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      190,
      208,
      177,
      209,
      143,
      208,
      183,
      208,
      176,
      209,
      130,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      189,
      208,
      176,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      32,
      80,
      85,
      66,
      76,
      73,
      67,
      32,
      34,
      110,
      116,
      45,
      84,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      67,
      111,
      110,
      116,
      101,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      47,
      47,
      69,
      78,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      49,
      46,
      48,
      32,
      84,
      68,
      84,
      68,
      47,
      120,
      104,
      116,
      109,
      108,
      49,
      45,
      116,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      84,
      82,
      47,
      120,
      104,
      116,
      109,
      108,
      49,
      47,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      59,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      101,
      110,
      116,
      78,
      111,
      100,
      101,
      46,
      105,
      110,
      115,
      101,
      114,
      116,
      66,
      101,
      102,
      111,
      114,
      101,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      106,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      41,
      46,
      114,
      101,
      97,
      100,
      121,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      105,
      109,
      97,
      103,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      85,
      65,
      45,
      67,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      10,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      60,
      97,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      97,
      46,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      34,
      104,
      116,
      116,
      112,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      72,
      84,
      77,
      76,
      32,
      52,
      46,
      48,
      49,
      32,
      84,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      41,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      121,
      73,
      100,
      40,
      61,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      100,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      115,
      110,
      105,
      99,
      97,
      108,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      72,
      84,
      77,
      76,
      32,
      52,
      46,
      48,
      49,
      32,
      84,
      114,
      97,
      110,
      115,
      105,
      116,
      60,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      10,
      10,
      60,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      105,
      111,
      110,
      97,
      108,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      45,
      84,
      121,
      112,
      101,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      10,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      60,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      62,
      208,
      180,
      208,
      181,
      209,
      143,
      209,
      130,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      209,
      129,
      208,
      190,
      208,
      190,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      130,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      184,
      208,
      184,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      184,
      208,
      183,
      208,
      178,
      208,
      190,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      176,
      208,
      177,
      208,
      181,
      208,
      183,
      208,
      190,
      208,
      191,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      167,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      165,
      137,
      224,
      164,
      170,
      224,
      165,
      128,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      159,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      158,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      136,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      164,
      224,
      164,
      190
    ]);
    exports2.init = function() {
      return exports2.dictionary;
    };
  }
});

// ../backend/node_modules/brotli/dec/dictionary.js
var require_dictionary = __commonJS({
  "../backend/node_modules/brotli/dec/dictionary.js"(exports2) {
    var data = require_dictionary_data();
    exports2.init = function() {
      exports2.dictionary = data.init();
    };
    exports2.offsetsByLength = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      4096,
      9216,
      21504,
      35840,
      44032,
      53248,
      63488,
      74752,
      87040,
      93696,
      100864,
      104704,
      106752,
      108928,
      113536,
      115968,
      118528,
      119872,
      121280,
      122016
    ]);
    exports2.sizeBitsByLength = new Uint8Array([
      0,
      0,
      0,
      0,
      10,
      10,
      11,
      11,
      10,
      10,
      10,
      10,
      10,
      9,
      9,
      8,
      7,
      7,
      8,
      7,
      7,
      6,
      6,
      5,
      5
    ]);
    exports2.minDictionaryWordLength = 4;
    exports2.maxDictionaryWordLength = 24;
  }
});

// ../backend/node_modules/brotli/dec/huffman.js
var require_huffman = __commonJS({
  "../backend/node_modules/brotli/dec/huffman.js"(exports2) {
    function HuffmanCode(bits, value) {
      this.bits = bits;
      this.value = value;
    }
    exports2.HuffmanCode = HuffmanCode;
    var MAX_LENGTH = 15;
    function GetNextKey(key, len) {
      var step = 1 << len - 1;
      while (key & step) {
        step >>= 1;
      }
      return (key & step - 1) + step;
    }
    function ReplicateValue(table, i2, step, end, code) {
      do {
        end -= step;
        table[i2 + end] = new HuffmanCode(code.bits, code.value);
      } while (end > 0);
    }
    function NextTableBitSize(count, len, root_bits) {
      var left = 1 << len - root_bits;
      while (len < MAX_LENGTH) {
        left -= count[len];
        if (left <= 0) break;
        ++len;
        left <<= 1;
      }
      return len - root_bits;
    }
    exports2.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
      var start_table = table;
      var code;
      var len;
      var symbol;
      var key;
      var step;
      var low;
      var mask;
      var table_bits;
      var table_size;
      var total_size;
      var sorted;
      var count = new Int32Array(MAX_LENGTH + 1);
      var offset = new Int32Array(MAX_LENGTH + 1);
      sorted = new Int32Array(code_lengths_size);
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        count[code_lengths[symbol]]++;
      }
      offset[1] = 0;
      for (len = 1; len < MAX_LENGTH; len++) {
        offset[len + 1] = offset[len] + count[len];
      }
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        if (code_lengths[symbol] !== 0) {
          sorted[offset[code_lengths[symbol]]++] = symbol;
        }
      }
      table_bits = root_bits;
      table_size = 1 << table_bits;
      total_size = table_size;
      if (offset[MAX_LENGTH] === 1) {
        for (key = 0; key < total_size; ++key) {
          root_table[table + key] = new HuffmanCode(0, sorted[0] & 65535);
        }
        return total_size;
      }
      key = 0;
      symbol = 0;
      for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          code = new HuffmanCode(len & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + key, step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      mask = total_size - 1;
      low = -1;
      for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          if ((key & mask) !== low) {
            table += table_size;
            table_bits = NextTableBitSize(count, len, root_bits);
            table_size = 1 << table_bits;
            total_size += table_size;
            low = key & mask;
            root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 255, table - start_table - low & 65535);
          }
          code = new HuffmanCode(len - root_bits & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      return total_size;
    };
  }
});

// ../backend/node_modules/brotli/dec/context.js
var require_context = __commonJS({
  "../backend/node_modules/brotli/dec/context.js"(exports2) {
    exports2.lookup = new Uint8Array([
      /* CONTEXT_UTF8, last byte. */
      /* ASCII range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      4,
      0,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      8,
      12,
      16,
      12,
      12,
      20,
      12,
      16,
      24,
      28,
      12,
      12,
      32,
      12,
      36,
      12,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      32,
      32,
      24,
      40,
      28,
      12,
      12,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      24,
      12,
      28,
      12,
      12,
      12,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      24,
      12,
      28,
      12,
      0,
      /* UTF8 continuation byte range. */
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      /* UTF8 lead byte range. */
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      /* CONTEXT_UTF8 second last byte. */
      /* ASCII range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      1,
      1,
      1,
      1,
      0,
      /* UTF8 continuation byte range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      /* UTF8 lead byte range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      /* CONTEXT_SIGNED, second last byte. */
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
      0,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      56,
      /* CONTEXT_LSB6, last byte. */
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      /* CONTEXT_MSB6, last byte. */
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      7,
      7,
      7,
      7,
      8,
      8,
      8,
      8,
      9,
      9,
      9,
      9,
      10,
      10,
      10,
      10,
      11,
      11,
      11,
      11,
      12,
      12,
      12,
      12,
      13,
      13,
      13,
      13,
      14,
      14,
      14,
      14,
      15,
      15,
      15,
      15,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      22,
      22,
      22,
      22,
      23,
      23,
      23,
      23,
      24,
      24,
      24,
      24,
      25,
      25,
      25,
      25,
      26,
      26,
      26,
      26,
      27,
      27,
      27,
      27,
      28,
      28,
      28,
      28,
      29,
      29,
      29,
      29,
      30,
      30,
      30,
      30,
      31,
      31,
      31,
      31,
      32,
      32,
      32,
      32,
      33,
      33,
      33,
      33,
      34,
      34,
      34,
      34,
      35,
      35,
      35,
      35,
      36,
      36,
      36,
      36,
      37,
      37,
      37,
      37,
      38,
      38,
      38,
      38,
      39,
      39,
      39,
      39,
      40,
      40,
      40,
      40,
      41,
      41,
      41,
      41,
      42,
      42,
      42,
      42,
      43,
      43,
      43,
      43,
      44,
      44,
      44,
      44,
      45,
      45,
      45,
      45,
      46,
      46,
      46,
      46,
      47,
      47,
      47,
      47,
      48,
      48,
      48,
      48,
      49,
      49,
      49,
      49,
      50,
      50,
      50,
      50,
      51,
      51,
      51,
      51,
      52,
      52,
      52,
      52,
      53,
      53,
      53,
      53,
      54,
      54,
      54,
      54,
      55,
      55,
      55,
      55,
      56,
      56,
      56,
      56,
      57,
      57,
      57,
      57,
      58,
      58,
      58,
      58,
      59,
      59,
      59,
      59,
      60,
      60,
      60,
      60,
      61,
      61,
      61,
      61,
      62,
      62,
      62,
      62,
      63,
      63,
      63,
      63,
      /* CONTEXT_{M,L}SB6, second last byte, */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    exports2.lookupOffsets = new Uint16Array([
      /* CONTEXT_LSB6 */
      1024,
      1536,
      /* CONTEXT_MSB6 */
      1280,
      1536,
      /* CONTEXT_UTF8 */
      0,
      256,
      /* CONTEXT_SIGNED */
      768,
      512
    ]);
  }
});

// ../backend/node_modules/brotli/dec/prefix.js
var require_prefix = __commonJS({
  "../backend/node_modules/brotli/dec/prefix.js"(exports2) {
    function PrefixCodeRange(offset, nbits) {
      this.offset = offset;
      this.nbits = nbits;
    }
    exports2.kBlockLengthPrefixCode = [
      new PrefixCodeRange(1, 2),
      new PrefixCodeRange(5, 2),
      new PrefixCodeRange(9, 2),
      new PrefixCodeRange(13, 2),
      new PrefixCodeRange(17, 3),
      new PrefixCodeRange(25, 3),
      new PrefixCodeRange(33, 3),
      new PrefixCodeRange(41, 3),
      new PrefixCodeRange(49, 4),
      new PrefixCodeRange(65, 4),
      new PrefixCodeRange(81, 4),
      new PrefixCodeRange(97, 4),
      new PrefixCodeRange(113, 5),
      new PrefixCodeRange(145, 5),
      new PrefixCodeRange(177, 5),
      new PrefixCodeRange(209, 5),
      new PrefixCodeRange(241, 6),
      new PrefixCodeRange(305, 6),
      new PrefixCodeRange(369, 7),
      new PrefixCodeRange(497, 8),
      new PrefixCodeRange(753, 9),
      new PrefixCodeRange(1265, 10),
      new PrefixCodeRange(2289, 11),
      new PrefixCodeRange(4337, 12),
      new PrefixCodeRange(8433, 13),
      new PrefixCodeRange(16625, 24)
    ];
    exports2.kInsertLengthPrefixCode = [
      new PrefixCodeRange(0, 0),
      new PrefixCodeRange(1, 0),
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 1),
      new PrefixCodeRange(8, 1),
      new PrefixCodeRange(10, 2),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 3),
      new PrefixCodeRange(26, 3),
      new PrefixCodeRange(34, 4),
      new PrefixCodeRange(50, 4),
      new PrefixCodeRange(66, 5),
      new PrefixCodeRange(98, 5),
      new PrefixCodeRange(130, 6),
      new PrefixCodeRange(194, 7),
      new PrefixCodeRange(322, 8),
      new PrefixCodeRange(578, 9),
      new PrefixCodeRange(1090, 10),
      new PrefixCodeRange(2114, 12),
      new PrefixCodeRange(6210, 14),
      new PrefixCodeRange(22594, 24)
    ];
    exports2.kCopyLengthPrefixCode = [
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 0),
      new PrefixCodeRange(7, 0),
      new PrefixCodeRange(8, 0),
      new PrefixCodeRange(9, 0),
      new PrefixCodeRange(10, 1),
      new PrefixCodeRange(12, 1),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 2),
      new PrefixCodeRange(22, 3),
      new PrefixCodeRange(30, 3),
      new PrefixCodeRange(38, 4),
      new PrefixCodeRange(54, 4),
      new PrefixCodeRange(70, 5),
      new PrefixCodeRange(102, 5),
      new PrefixCodeRange(134, 6),
      new PrefixCodeRange(198, 7),
      new PrefixCodeRange(326, 8),
      new PrefixCodeRange(582, 9),
      new PrefixCodeRange(1094, 10),
      new PrefixCodeRange(2118, 24)
    ];
    exports2.kInsertRangeLut = [
      0,
      0,
      8,
      8,
      0,
      16,
      8,
      16,
      16
    ];
    exports2.kCopyRangeLut = [
      0,
      8,
      0,
      8,
      16,
      0,
      16,
      8,
      16
    ];
  }
});

// ../backend/node_modules/brotli/dec/transform.js
var require_transform = __commonJS({
  "../backend/node_modules/brotli/dec/transform.js"(exports2) {
    var BrotliDictionary = require_dictionary();
    var kIdentity = 0;
    var kOmitLast1 = 1;
    var kOmitLast2 = 2;
    var kOmitLast3 = 3;
    var kOmitLast4 = 4;
    var kOmitLast5 = 5;
    var kOmitLast6 = 6;
    var kOmitLast7 = 7;
    var kOmitLast8 = 8;
    var kOmitLast9 = 9;
    var kUppercaseFirst = 10;
    var kUppercaseAll = 11;
    var kOmitFirst1 = 12;
    var kOmitFirst2 = 13;
    var kOmitFirst3 = 14;
    var kOmitFirst4 = 15;
    var kOmitFirst5 = 16;
    var kOmitFirst6 = 17;
    var kOmitFirst7 = 18;
    var kOmitFirst9 = 20;
    function Transform(prefix, transform, suffix) {
      this.prefix = new Uint8Array(prefix.length);
      this.transform = transform;
      this.suffix = new Uint8Array(suffix.length);
      for (var i2 = 0; i2 < prefix.length; i2++)
        this.prefix[i2] = prefix.charCodeAt(i2);
      for (var i2 = 0; i2 < suffix.length; i2++)
        this.suffix[i2] = suffix.charCodeAt(i2);
    }
    var kTransforms = [
      new Transform("", kIdentity, ""),
      new Transform("", kIdentity, " "),
      new Transform(" ", kIdentity, " "),
      new Transform("", kOmitFirst1, ""),
      new Transform("", kUppercaseFirst, " "),
      new Transform("", kIdentity, " the "),
      new Transform(" ", kIdentity, ""),
      new Transform("s ", kIdentity, " "),
      new Transform("", kIdentity, " of "),
      new Transform("", kUppercaseFirst, ""),
      new Transform("", kIdentity, " and "),
      new Transform("", kOmitFirst2, ""),
      new Transform("", kOmitLast1, ""),
      new Transform(", ", kIdentity, " "),
      new Transform("", kIdentity, ", "),
      new Transform(" ", kUppercaseFirst, " "),
      new Transform("", kIdentity, " in "),
      new Transform("", kIdentity, " to "),
      new Transform("e ", kIdentity, " "),
      new Transform("", kIdentity, '"'),
      new Transform("", kIdentity, "."),
      new Transform("", kIdentity, '">'),
      new Transform("", kIdentity, "\n"),
      new Transform("", kOmitLast3, ""),
      new Transform("", kIdentity, "]"),
      new Transform("", kIdentity, " for "),
      new Transform("", kOmitFirst3, ""),
      new Transform("", kOmitLast2, ""),
      new Transform("", kIdentity, " a "),
      new Transform("", kIdentity, " that "),
      new Transform(" ", kUppercaseFirst, ""),
      new Transform("", kIdentity, ". "),
      new Transform(".", kIdentity, ""),
      new Transform(" ", kIdentity, ", "),
      new Transform("", kOmitFirst4, ""),
      new Transform("", kIdentity, " with "),
      new Transform("", kIdentity, "'"),
      new Transform("", kIdentity, " from "),
      new Transform("", kIdentity, " by "),
      new Transform("", kOmitFirst5, ""),
      new Transform("", kOmitFirst6, ""),
      new Transform(" the ", kIdentity, ""),
      new Transform("", kOmitLast4, ""),
      new Transform("", kIdentity, ". The "),
      new Transform("", kUppercaseAll, ""),
      new Transform("", kIdentity, " on "),
      new Transform("", kIdentity, " as "),
      new Transform("", kIdentity, " is "),
      new Transform("", kOmitLast7, ""),
      new Transform("", kOmitLast1, "ing "),
      new Transform("", kIdentity, "\n	"),
      new Transform("", kIdentity, ":"),
      new Transform(" ", kIdentity, ". "),
      new Transform("", kIdentity, "ed "),
      new Transform("", kOmitFirst9, ""),
      new Transform("", kOmitFirst7, ""),
      new Transform("", kOmitLast6, ""),
      new Transform("", kIdentity, "("),
      new Transform("", kUppercaseFirst, ", "),
      new Transform("", kOmitLast8, ""),
      new Transform("", kIdentity, " at "),
      new Transform("", kIdentity, "ly "),
      new Transform(" the ", kIdentity, " of "),
      new Transform("", kOmitLast5, ""),
      new Transform("", kOmitLast9, ""),
      new Transform(" ", kUppercaseFirst, ", "),
      new Transform("", kUppercaseFirst, '"'),
      new Transform(".", kIdentity, "("),
      new Transform("", kUppercaseAll, " "),
      new Transform("", kUppercaseFirst, '">'),
      new Transform("", kIdentity, '="'),
      new Transform(" ", kIdentity, "."),
      new Transform(".com/", kIdentity, ""),
      new Transform(" the ", kIdentity, " of the "),
      new Transform("", kUppercaseFirst, "'"),
      new Transform("", kIdentity, ". This "),
      new Transform("", kIdentity, ","),
      new Transform(".", kIdentity, " "),
      new Transform("", kUppercaseFirst, "("),
      new Transform("", kUppercaseFirst, "."),
      new Transform("", kIdentity, " not "),
      new Transform(" ", kIdentity, '="'),
      new Transform("", kIdentity, "er "),
      new Transform(" ", kUppercaseAll, " "),
      new Transform("", kIdentity, "al "),
      new Transform(" ", kUppercaseAll, ""),
      new Transform("", kIdentity, "='"),
      new Transform("", kUppercaseAll, '"'),
      new Transform("", kUppercaseFirst, ". "),
      new Transform(" ", kIdentity, "("),
      new Transform("", kIdentity, "ful "),
      new Transform(" ", kUppercaseFirst, ". "),
      new Transform("", kIdentity, "ive "),
      new Transform("", kIdentity, "less "),
      new Transform("", kUppercaseAll, "'"),
      new Transform("", kIdentity, "est "),
      new Transform(" ", kUppercaseFirst, "."),
      new Transform("", kUppercaseAll, '">'),
      new Transform(" ", kIdentity, "='"),
      new Transform("", kUppercaseFirst, ","),
      new Transform("", kIdentity, "ize "),
      new Transform("", kUppercaseAll, "."),
      new Transform("\xC2\xA0", kIdentity, ""),
      new Transform(" ", kIdentity, ","),
      new Transform("", kUppercaseFirst, '="'),
      new Transform("", kUppercaseAll, '="'),
      new Transform("", kIdentity, "ous "),
      new Transform("", kUppercaseAll, ", "),
      new Transform("", kUppercaseFirst, "='"),
      new Transform(" ", kUppercaseFirst, ","),
      new Transform(" ", kUppercaseAll, '="'),
      new Transform(" ", kUppercaseAll, ", "),
      new Transform("", kUppercaseAll, ","),
      new Transform("", kUppercaseAll, "("),
      new Transform("", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseAll, "."),
      new Transform("", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseFirst, '="'),
      new Transform(" ", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseFirst, "='")
    ];
    exports2.kTransforms = kTransforms;
    exports2.kNumTransforms = kTransforms.length;
    function ToUpperCase(p, i2) {
      if (p[i2] < 192) {
        if (p[i2] >= 97 && p[i2] <= 122) {
          p[i2] ^= 32;
        }
        return 1;
      }
      if (p[i2] < 224) {
        p[i2 + 1] ^= 32;
        return 2;
      }
      p[i2 + 2] ^= 5;
      return 3;
    }
    exports2.transformDictionaryWord = function(dst, idx, word, len, transform) {
      var prefix = kTransforms[transform].prefix;
      var suffix = kTransforms[transform].suffix;
      var t2 = kTransforms[transform].transform;
      var skip = t2 < kOmitFirst1 ? 0 : t2 - (kOmitFirst1 - 1);
      var i2 = 0;
      var start_idx = idx;
      var uppercase;
      if (skip > len) {
        skip = len;
      }
      var prefix_pos = 0;
      while (prefix_pos < prefix.length) {
        dst[idx++] = prefix[prefix_pos++];
      }
      word += skip;
      len -= skip;
      if (t2 <= kOmitLast9) {
        len -= t2;
      }
      for (i2 = 0; i2 < len; i2++) {
        dst[idx++] = BrotliDictionary.dictionary[word + i2];
      }
      uppercase = idx - len;
      if (t2 === kUppercaseFirst) {
        ToUpperCase(dst, uppercase);
      } else if (t2 === kUppercaseAll) {
        while (len > 0) {
          var step = ToUpperCase(dst, uppercase);
          uppercase += step;
          len -= step;
        }
      }
      var suffix_pos = 0;
      while (suffix_pos < suffix.length) {
        dst[idx++] = suffix[suffix_pos++];
      }
      return idx - start_idx;
    };
  }
});

// ../backend/node_modules/brotli/dec/decode.js
var require_decode2 = __commonJS({
  "../backend/node_modules/brotli/dec/decode.js"(exports2) {
    var BrotliInput = require_streams2().BrotliInput;
    var BrotliOutput = require_streams2().BrotliOutput;
    var BrotliBitReader = require_bit_reader();
    var BrotliDictionary = require_dictionary();
    var HuffmanCode = require_huffman().HuffmanCode;
    var BrotliBuildHuffmanTable = require_huffman().BrotliBuildHuffmanTable;
    var Context = require_context();
    var Prefix = require_prefix();
    var Transform = require_transform();
    var kDefaultCodeLength = 8;
    var kCodeLengthRepeatCode = 16;
    var kNumLiteralCodes = 256;
    var kNumInsertAndCopyCodes = 704;
    var kNumBlockLengthCodes = 26;
    var kLiteralContextBits = 6;
    var kDistanceContextBits = 2;
    var HUFFMAN_TABLE_BITS = 8;
    var HUFFMAN_TABLE_MASK = 255;
    var HUFFMAN_MAX_TABLE_SIZE = 1080;
    var CODE_LENGTH_CODES = 18;
    var kCodeLengthCodeOrder = new Uint8Array([
      1,
      2,
      3,
      4,
      0,
      5,
      17,
      6,
      16,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15
    ]);
    var NUM_DISTANCE_SHORT_CODES = 16;
    var kDistanceShortCodeIndexOffset = new Uint8Array([
      3,
      2,
      1,
      0,
      3,
      3,
      3,
      3,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2
    ]);
    var kDistanceShortCodeValueOffset = new Int8Array([
      0,
      0,
      0,
      0,
      -1,
      1,
      -2,
      2,
      -3,
      3,
      -1,
      1,
      -2,
      2,
      -3,
      3
    ]);
    var kMaxHuffmanTableSize = new Uint16Array([
      256,
      402,
      436,
      468,
      500,
      534,
      566,
      598,
      630,
      662,
      694,
      726,
      758,
      790,
      822,
      854,
      886,
      920,
      952,
      984,
      1016,
      1048,
      1080
    ]);
    function DecodeWindowBits(br) {
      var n;
      if (br.readBits(1) === 0) {
        return 16;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 17 + n;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 8 + n;
      }
      return 17;
    }
    function DecodeVarLenUint8(br) {
      if (br.readBits(1)) {
        var nbits = br.readBits(3);
        if (nbits === 0) {
          return 1;
        } else {
          return br.readBits(nbits) + (1 << nbits);
        }
      }
      return 0;
    }
    function MetaBlockLength() {
      this.meta_block_length = 0;
      this.input_end = 0;
      this.is_uncompressed = 0;
      this.is_metadata = false;
    }
    function DecodeMetaBlockLength(br) {
      var out = new MetaBlockLength();
      var size_nibbles;
      var size_bytes;
      var i2;
      out.input_end = br.readBits(1);
      if (out.input_end && br.readBits(1)) {
        return out;
      }
      size_nibbles = br.readBits(2) + 4;
      if (size_nibbles === 7) {
        out.is_metadata = true;
        if (br.readBits(1) !== 0)
          throw new Error("Invalid reserved bit");
        size_bytes = br.readBits(2);
        if (size_bytes === 0)
          return out;
        for (i2 = 0; i2 < size_bytes; i2++) {
          var next_byte = br.readBits(8);
          if (i2 + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
            throw new Error("Invalid size byte");
          out.meta_block_length |= next_byte << i2 * 8;
        }
      } else {
        for (i2 = 0; i2 < size_nibbles; ++i2) {
          var next_nibble = br.readBits(4);
          if (i2 + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
            throw new Error("Invalid size nibble");
          out.meta_block_length |= next_nibble << i2 * 4;
        }
      }
      ++out.meta_block_length;
      if (!out.input_end && !out.is_metadata) {
        out.is_uncompressed = br.readBits(1);
      }
      return out;
    }
    function ReadSymbol(table, index, br) {
      var start_index = index;
      var nbits;
      br.fillBitWindow();
      index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
      nbits = table[index].bits - HUFFMAN_TABLE_BITS;
      if (nbits > 0) {
        br.bit_pos_ += HUFFMAN_TABLE_BITS;
        index += table[index].value;
        index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
      }
      br.bit_pos_ += table[index].bits;
      return table[index].value;
    }
    function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
      var symbol = 0;
      var prev_code_len = kDefaultCodeLength;
      var repeat = 0;
      var repeat_code_len = 0;
      var space = 32768;
      var table = [];
      for (var i2 = 0; i2 < 32; i2++)
        table.push(new HuffmanCode(0, 0));
      BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
      while (symbol < num_symbols && space > 0) {
        var p = 0;
        var code_len;
        br.readMoreInput();
        br.fillBitWindow();
        p += br.val_ >>> br.bit_pos_ & 31;
        br.bit_pos_ += table[p].bits;
        code_len = table[p].value & 255;
        if (code_len < kCodeLengthRepeatCode) {
          repeat = 0;
          code_lengths[symbol++] = code_len;
          if (code_len !== 0) {
            prev_code_len = code_len;
            space -= 32768 >> code_len;
          }
        } else {
          var extra_bits = code_len - 14;
          var old_repeat;
          var repeat_delta;
          var new_len = 0;
          if (code_len === kCodeLengthRepeatCode) {
            new_len = prev_code_len;
          }
          if (repeat_code_len !== new_len) {
            repeat = 0;
            repeat_code_len = new_len;
          }
          old_repeat = repeat;
          if (repeat > 0) {
            repeat -= 2;
            repeat <<= extra_bits;
          }
          repeat += br.readBits(extra_bits) + 3;
          repeat_delta = repeat - old_repeat;
          if (symbol + repeat_delta > num_symbols) {
            throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
          }
          for (var x2 = 0; x2 < repeat_delta; x2++)
            code_lengths[symbol + x2] = repeat_code_len;
          symbol += repeat_delta;
          if (repeat_code_len !== 0) {
            space -= repeat_delta << 15 - repeat_code_len;
          }
        }
      }
      if (space !== 0) {
        throw new Error("[ReadHuffmanCodeLengths] space = " + space);
      }
      for (; symbol < num_symbols; symbol++)
        code_lengths[symbol] = 0;
    }
    function ReadHuffmanCode(alphabet_size, tables, table, br) {
      var table_size = 0;
      var simple_code_or_skip;
      var code_lengths = new Uint8Array(alphabet_size);
      br.readMoreInput();
      simple_code_or_skip = br.readBits(2);
      if (simple_code_or_skip === 1) {
        var i2;
        var max_bits_counter = alphabet_size - 1;
        var max_bits = 0;
        var symbols = new Int32Array(4);
        var num_symbols = br.readBits(2) + 1;
        while (max_bits_counter) {
          max_bits_counter >>= 1;
          ++max_bits;
        }
        for (i2 = 0; i2 < num_symbols; ++i2) {
          symbols[i2] = br.readBits(max_bits) % alphabet_size;
          code_lengths[symbols[i2]] = 2;
        }
        code_lengths[symbols[0]] = 1;
        switch (num_symbols) {
          case 1:
            break;
          case 3:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            break;
          case 2:
            if (symbols[0] === symbols[1]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            code_lengths[symbols[1]] = 1;
            break;
          case 4:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            if (br.readBits(1)) {
              code_lengths[symbols[2]] = 3;
              code_lengths[symbols[3]] = 3;
            } else {
              code_lengths[symbols[0]] = 2;
            }
            break;
        }
      } else {
        var i2;
        var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
        var space = 32;
        var num_codes = 0;
        var huff = [
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 1),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 5)
        ];
        for (i2 = simple_code_or_skip; i2 < CODE_LENGTH_CODES && space > 0; ++i2) {
          var code_len_idx = kCodeLengthCodeOrder[i2];
          var p = 0;
          var v;
          br.fillBitWindow();
          p += br.val_ >>> br.bit_pos_ & 15;
          br.bit_pos_ += huff[p].bits;
          v = huff[p].value;
          code_length_code_lengths[code_len_idx] = v;
          if (v !== 0) {
            space -= 32 >> v;
            ++num_codes;
          }
        }
        if (!(num_codes === 1 || space === 0))
          throw new Error("[ReadHuffmanCode] invalid num_codes or space");
        ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
      }
      table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
      if (table_size === 0) {
        throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
      }
      return table_size;
    }
    function ReadBlockLength(table, index, br) {
      var code;
      var nbits;
      code = ReadSymbol(table, index, br);
      nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
      return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
    }
    function TranslateShortCodes(code, ringbuffer, index) {
      var val;
      if (code < NUM_DISTANCE_SHORT_CODES) {
        index += kDistanceShortCodeIndexOffset[code];
        index &= 3;
        val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
      } else {
        val = code - NUM_DISTANCE_SHORT_CODES + 1;
      }
      return val;
    }
    function MoveToFront(v, index) {
      var value = v[index];
      var i2 = index;
      for (; i2; --i2) v[i2] = v[i2 - 1];
      v[0] = value;
    }
    function InverseMoveToFrontTransform(v, v_len) {
      var mtf = new Uint8Array(256);
      var i2;
      for (i2 = 0; i2 < 256; ++i2) {
        mtf[i2] = i2;
      }
      for (i2 = 0; i2 < v_len; ++i2) {
        var index = v[i2];
        v[i2] = mtf[index];
        if (index) MoveToFront(mtf, index);
      }
    }
    function HuffmanTreeGroup(alphabet_size, num_htrees) {
      this.alphabet_size = alphabet_size;
      this.num_htrees = num_htrees;
      this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
      this.htrees = new Uint32Array(num_htrees);
    }
    HuffmanTreeGroup.prototype.decode = function(br) {
      var i2;
      var table_size;
      var next = 0;
      for (i2 = 0; i2 < this.num_htrees; ++i2) {
        this.htrees[i2] = next;
        table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
        next += table_size;
      }
    };
    function DecodeContextMap(context_map_size, br) {
      var out = { num_htrees: null, context_map: null };
      var use_rle_for_zeros;
      var max_run_length_prefix = 0;
      var table;
      var i2;
      br.readMoreInput();
      var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
      var context_map = out.context_map = new Uint8Array(context_map_size);
      if (num_htrees <= 1) {
        return out;
      }
      use_rle_for_zeros = br.readBits(1);
      if (use_rle_for_zeros) {
        max_run_length_prefix = br.readBits(4) + 1;
      }
      table = [];
      for (i2 = 0; i2 < HUFFMAN_MAX_TABLE_SIZE; i2++) {
        table[i2] = new HuffmanCode(0, 0);
      }
      ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
      for (i2 = 0; i2 < context_map_size; ) {
        var code;
        br.readMoreInput();
        code = ReadSymbol(table, 0, br);
        if (code === 0) {
          context_map[i2] = 0;
          ++i2;
        } else if (code <= max_run_length_prefix) {
          var reps = 1 + (1 << code) + br.readBits(code);
          while (--reps) {
            if (i2 >= context_map_size) {
              throw new Error("[DecodeContextMap] i >= context_map_size");
            }
            context_map[i2] = 0;
            ++i2;
          }
        } else {
          context_map[i2] = code - max_run_length_prefix;
          ++i2;
        }
      }
      if (br.readBits(1)) {
        InverseMoveToFrontTransform(context_map, context_map_size);
      }
      return out;
    }
    function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
      var ringbuffer = tree_type * 2;
      var index = tree_type;
      var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
      var block_type;
      if (type_code === 0) {
        block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
      } else if (type_code === 1) {
        block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
      } else {
        block_type = type_code - 2;
      }
      if (block_type >= max_block_type) {
        block_type -= max_block_type;
      }
      block_types[tree_type] = block_type;
      ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
      ++indexes[index];
    }
    function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
      var rb_size = ringbuffer_mask + 1;
      var rb_pos = pos & ringbuffer_mask;
      var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
      var nbytes;
      if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
        while (len-- > 0) {
          br.readMoreInput();
          ringbuffer[rb_pos++] = br.readBits(8);
          if (rb_pos === rb_size) {
            output.write(ringbuffer, rb_size);
            rb_pos = 0;
          }
        }
        return;
      }
      if (br.bit_end_pos_ < 32) {
        throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
      }
      while (br.bit_pos_ < 32) {
        ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
        br.bit_pos_ += 8;
        ++rb_pos;
        --len;
      }
      nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
      if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
        var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
        for (var x2 = 0; x2 < tail; x2++)
          ringbuffer[rb_pos + x2] = br.buf_[br_pos + x2];
        nbytes -= tail;
        rb_pos += tail;
        len -= tail;
        br_pos = 0;
      }
      for (var x2 = 0; x2 < nbytes; x2++)
        ringbuffer[rb_pos + x2] = br.buf_[br_pos + x2];
      rb_pos += nbytes;
      len -= nbytes;
      if (rb_pos >= rb_size) {
        output.write(ringbuffer, rb_size);
        rb_pos -= rb_size;
        for (var x2 = 0; x2 < rb_pos; x2++)
          ringbuffer[x2] = ringbuffer[rb_size + x2];
      }
      while (rb_pos + len >= rb_size) {
        nbytes = rb_size - rb_pos;
        if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
          throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
        }
        output.write(ringbuffer, rb_size);
        len -= nbytes;
        rb_pos = 0;
      }
      if (br.input_.read(ringbuffer, rb_pos, len) < len) {
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
      }
      br.reset();
    }
    function JumpToByteBoundary(br) {
      var new_bit_pos = br.bit_pos_ + 7 & ~7;
      var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
      return pad_bits == 0;
    }
    function BrotliDecompressedSize(buffer) {
      var input = new BrotliInput(buffer);
      var br = new BrotliBitReader(input);
      DecodeWindowBits(br);
      var out = DecodeMetaBlockLength(br);
      return out.meta_block_length;
    }
    exports2.BrotliDecompressedSize = BrotliDecompressedSize;
    function BrotliDecompressBuffer(buffer, output_size) {
      var input = new BrotliInput(buffer);
      if (output_size == null) {
        output_size = BrotliDecompressedSize(buffer);
      }
      var output_buffer = new Uint8Array(output_size);
      var output = new BrotliOutput(output_buffer);
      BrotliDecompress(input, output);
      if (output.pos < output.buffer.length) {
        output.buffer = output.buffer.subarray(0, output.pos);
      }
      return output.buffer;
    }
    exports2.BrotliDecompressBuffer = BrotliDecompressBuffer;
    function BrotliDecompress(input, output) {
      var i2;
      var pos = 0;
      var input_end = 0;
      var window_bits = 0;
      var max_backward_distance;
      var max_distance = 0;
      var ringbuffer_size;
      var ringbuffer_mask;
      var ringbuffer;
      var ringbuffer_end;
      var dist_rb = [16, 15, 11, 4];
      var dist_rb_idx = 0;
      var prev_byte1 = 0;
      var prev_byte2 = 0;
      var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
      var block_type_trees;
      var block_len_trees;
      var br;
      var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
      br = new BrotliBitReader(input);
      window_bits = DecodeWindowBits(br);
      max_backward_distance = (1 << window_bits) - 16;
      ringbuffer_size = 1 << window_bits;
      ringbuffer_mask = ringbuffer_size - 1;
      ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
      ringbuffer_end = ringbuffer_size;
      block_type_trees = [];
      block_len_trees = [];
      for (var x2 = 0; x2 < 3 * HUFFMAN_MAX_TABLE_SIZE; x2++) {
        block_type_trees[x2] = new HuffmanCode(0, 0);
        block_len_trees[x2] = new HuffmanCode(0, 0);
      }
      while (!input_end) {
        var meta_block_remaining_len = 0;
        var is_uncompressed;
        var block_length = [1 << 28, 1 << 28, 1 << 28];
        var block_type = [0];
        var num_block_types = [1, 1, 1];
        var block_type_rb = [0, 1, 0, 1, 0, 1];
        var block_type_rb_index = [0];
        var distance_postfix_bits;
        var num_direct_distance_codes;
        var distance_postfix_mask;
        var num_distance_codes;
        var context_map = null;
        var context_modes = null;
        var num_literal_htrees;
        var dist_context_map = null;
        var num_dist_htrees;
        var context_offset = 0;
        var context_map_slice = null;
        var literal_htree_index = 0;
        var dist_context_offset = 0;
        var dist_context_map_slice = null;
        var dist_htree_index = 0;
        var context_lookup_offset1 = 0;
        var context_lookup_offset2 = 0;
        var context_mode;
        var htree_command;
        for (i2 = 0; i2 < 3; ++i2) {
          hgroup[i2].codes = null;
          hgroup[i2].htrees = null;
        }
        br.readMoreInput();
        var _out = DecodeMetaBlockLength(br);
        meta_block_remaining_len = _out.meta_block_length;
        if (pos + meta_block_remaining_len > output.buffer.length) {
          var tmp = new Uint8Array(pos + meta_block_remaining_len);
          tmp.set(output.buffer);
          output.buffer = tmp;
        }
        input_end = _out.input_end;
        is_uncompressed = _out.is_uncompressed;
        if (_out.is_metadata) {
          JumpToByteBoundary(br);
          for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
            br.readMoreInput();
            br.readBits(8);
          }
          continue;
        }
        if (meta_block_remaining_len === 0) {
          continue;
        }
        if (is_uncompressed) {
          br.bit_pos_ = br.bit_pos_ + 7 & ~7;
          CopyUncompressedBlockToOutput(
            output,
            meta_block_remaining_len,
            pos,
            ringbuffer,
            ringbuffer_mask,
            br
          );
          pos += meta_block_remaining_len;
          continue;
        }
        for (i2 = 0; i2 < 3; ++i2) {
          num_block_types[i2] = DecodeVarLenUint8(br) + 1;
          if (num_block_types[i2] >= 2) {
            ReadHuffmanCode(num_block_types[i2] + 2, block_type_trees, i2 * HUFFMAN_MAX_TABLE_SIZE, br);
            ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i2 * HUFFMAN_MAX_TABLE_SIZE, br);
            block_length[i2] = ReadBlockLength(block_len_trees, i2 * HUFFMAN_MAX_TABLE_SIZE, br);
            block_type_rb_index[i2] = 1;
          }
        }
        br.readMoreInput();
        distance_postfix_bits = br.readBits(2);
        num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
        distance_postfix_mask = (1 << distance_postfix_bits) - 1;
        num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
        context_modes = new Uint8Array(num_block_types[0]);
        for (i2 = 0; i2 < num_block_types[0]; ++i2) {
          br.readMoreInput();
          context_modes[i2] = br.readBits(2) << 1;
        }
        var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
        num_literal_htrees = _o1.num_htrees;
        context_map = _o1.context_map;
        var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
        num_dist_htrees = _o2.num_htrees;
        dist_context_map = _o2.context_map;
        hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
        hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
        hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
        for (i2 = 0; i2 < 3; ++i2) {
          hgroup[i2].decode(br);
        }
        context_map_slice = 0;
        dist_context_map_slice = 0;
        context_mode = context_modes[block_type[0]];
        context_lookup_offset1 = Context.lookupOffsets[context_mode];
        context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
        htree_command = hgroup[1].htrees[0];
        while (meta_block_remaining_len > 0) {
          var cmd_code;
          var range_idx;
          var insert_code;
          var copy_code;
          var insert_length;
          var copy_length;
          var distance_code;
          var distance;
          var context;
          var j;
          var copy_dst;
          br.readMoreInput();
          if (block_length[1] === 0) {
            DecodeBlockType(
              num_block_types[1],
              block_type_trees,
              1,
              block_type,
              block_type_rb,
              block_type_rb_index,
              br
            );
            block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
            htree_command = hgroup[1].htrees[block_type[1]];
          }
          --block_length[1];
          cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
          range_idx = cmd_code >> 6;
          if (range_idx >= 2) {
            range_idx -= 2;
            distance_code = -1;
          } else {
            distance_code = 0;
          }
          insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
          copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
          insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
          copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
          for (j = 0; j < insert_length; ++j) {
            br.readMoreInput();
            if (block_length[0] === 0) {
              DecodeBlockType(
                num_block_types[0],
                block_type_trees,
                0,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[0] = ReadBlockLength(block_len_trees, 0, br);
              context_offset = block_type[0] << kLiteralContextBits;
              context_map_slice = context_offset;
              context_mode = context_modes[block_type[0]];
              context_lookup_offset1 = Context.lookupOffsets[context_mode];
              context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
            }
            context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
            literal_htree_index = context_map[context_map_slice + context];
            --block_length[0];
            prev_byte2 = prev_byte1;
            prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
            ringbuffer[pos & ringbuffer_mask] = prev_byte1;
            if ((pos & ringbuffer_mask) === ringbuffer_mask) {
              output.write(ringbuffer, ringbuffer_size);
            }
            ++pos;
          }
          meta_block_remaining_len -= insert_length;
          if (meta_block_remaining_len <= 0) break;
          if (distance_code < 0) {
            var context;
            br.readMoreInput();
            if (block_length[2] === 0) {
              DecodeBlockType(
                num_block_types[2],
                block_type_trees,
                2,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
              dist_context_offset = block_type[2] << kDistanceContextBits;
              dist_context_map_slice = dist_context_offset;
            }
            --block_length[2];
            context = (copy_length > 4 ? 3 : copy_length - 2) & 255;
            dist_htree_index = dist_context_map[dist_context_map_slice + context];
            distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
            if (distance_code >= num_direct_distance_codes) {
              var nbits;
              var postfix;
              var offset;
              distance_code -= num_direct_distance_codes;
              postfix = distance_code & distance_postfix_mask;
              distance_code >>= distance_postfix_bits;
              nbits = (distance_code >> 1) + 1;
              offset = (2 + (distance_code & 1) << nbits) - 4;
              distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
            }
          }
          distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
          if (distance < 0) {
            throw new Error("[BrotliDecompress] invalid distance");
          }
          if (pos < max_backward_distance && max_distance !== max_backward_distance) {
            max_distance = pos;
          } else {
            max_distance = max_backward_distance;
          }
          copy_dst = pos & ringbuffer_mask;
          if (distance > max_distance) {
            if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
              var offset = BrotliDictionary.offsetsByLength[copy_length];
              var word_id = distance - max_distance - 1;
              var shift = BrotliDictionary.sizeBitsByLength[copy_length];
              var mask = (1 << shift) - 1;
              var word_idx = word_id & mask;
              var transform_idx = word_id >> shift;
              offset += word_idx * copy_length;
              if (transform_idx < Transform.kNumTransforms) {
                var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                copy_dst += len;
                pos += len;
                meta_block_remaining_len -= len;
                if (copy_dst >= ringbuffer_end) {
                  output.write(ringbuffer, ringbuffer_size);
                  for (var _x = 0; _x < copy_dst - ringbuffer_end; _x++)
                    ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                }
              } else {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }
            } else {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
          } else {
            if (distance_code > 0) {
              dist_rb[dist_rb_idx & 3] = distance;
              ++dist_rb_idx;
            }
            if (copy_length > meta_block_remaining_len) {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
            for (j = 0; j < copy_length; ++j) {
              ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
              if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                output.write(ringbuffer, ringbuffer_size);
              }
              ++pos;
              --meta_block_remaining_len;
            }
          }
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
        }
        pos &= 1073741823;
      }
      output.write(ringbuffer, pos & ringbuffer_mask);
    }
    exports2.BrotliDecompress = BrotliDecompress;
    BrotliDictionary.init();
  }
});

// ../backend/node_modules/brotli/decompress.js
var require_decompress = __commonJS({
  "../backend/node_modules/brotli/decompress.js"(exports2, module2) {
    module2.exports = require_decode2().BrotliDecompressBuffer;
  }
});

// ../backend/node_modules/fontkit/dist/main.cjs
var require_main3 = __commonJS({
  "../backend/node_modules/fontkit/dist/main.cjs"(exports2, module2) {
    var $elh9A$restructure = require_main();
    var $elh9A$fs = require("fs");
    var $elh9A$swchelperscjs_define_propertycjs = require_define_property();
    var $elh9A$swchelperscjs_ts_decoratecjs = require_ts_decorate();
    var $elh9A$fastdeepequal = require_fast_deep_equal();
    var $elh9A$unicodeproperties = require_main2();
    var $elh9A$unicodetrie = require_unicode_trie();
    var $elh9A$dfa = require_dfa();
    var $elh9A$clone = require_clone();
    var $elh9A$tinyinflate = require_tiny_inflate();
    var $elh9A$brotlidecompressjs = require_decompress();
    function $parcel$exportWildcard(dest, source) {
      Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) {
          return;
        }
        Object.defineProperty(dest, key, {
          enumerable: true,
          get: function get() {
            return source[key];
          }
        });
      });
      return dest;
    }
    function $parcel$export(e2, n, v, s2) {
      Object.defineProperty(e2, n, { get: v, set: s2, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    var $59aa4ed98453e1d4$exports = {};
    $parcel$export($59aa4ed98453e1d4$exports, "logErrors", () => $59aa4ed98453e1d4$export$bd5c5d8b8dcafd78);
    $parcel$export($59aa4ed98453e1d4$exports, "registerFormat", () => $59aa4ed98453e1d4$export$36b2f24e97d43be);
    $parcel$export($59aa4ed98453e1d4$exports, "create", () => $59aa4ed98453e1d4$export$185802fd694ee1f5);
    $parcel$export($59aa4ed98453e1d4$exports, "defaultLanguage", () => $59aa4ed98453e1d4$export$42940898df819940);
    $parcel$export($59aa4ed98453e1d4$exports, "setDefaultLanguage", () => $59aa4ed98453e1d4$export$5157e7780d44cc36);
    var $59aa4ed98453e1d4$export$bd5c5d8b8dcafd78 = false;
    var $59aa4ed98453e1d4$var$formats = [];
    function $59aa4ed98453e1d4$export$36b2f24e97d43be(format) {
      $59aa4ed98453e1d4$var$formats.push(format);
    }
    function $59aa4ed98453e1d4$export$185802fd694ee1f5(buffer, postscriptName) {
      for (let i2 = 0; i2 < $59aa4ed98453e1d4$var$formats.length; i2++) {
        let format = $59aa4ed98453e1d4$var$formats[i2];
        if (format.probe(buffer)) {
          let font = new format(new (0, $elh9A$restructure.DecodeStream)(buffer));
          if (postscriptName) return font.getFont(postscriptName);
          return font;
        }
      }
      throw new Error("Unknown font format");
    }
    var $59aa4ed98453e1d4$export$42940898df819940 = "en";
    function $59aa4ed98453e1d4$export$5157e7780d44cc36(lang = "en") {
      $59aa4ed98453e1d4$export$42940898df819940 = lang;
    }
    var $f39726ff40304956$exports = {};
    $parcel$export($f39726ff40304956$exports, "openSync", () => $f39726ff40304956$export$fa5499edb1ab414a);
    $parcel$export($f39726ff40304956$exports, "open", () => $f39726ff40304956$export$3ce6949f20cea765);
    function $f39726ff40304956$export$fa5499edb1ab414a(filename, postscriptName) {
      let buffer = (0, $parcel$interopDefault($elh9A$fs)).readFileSync(filename);
      return (0, $59aa4ed98453e1d4$export$185802fd694ee1f5)(buffer, postscriptName);
    }
    async function $f39726ff40304956$export$3ce6949f20cea765(filename, postscriptName, callback) {
      if (typeof postscriptName === "function") {
        callback = postscriptName;
        postscriptName = null;
      }
      let buffer = await (0, $parcel$interopDefault($elh9A$fs)).promises.readFile(filename);
      return (0, $59aa4ed98453e1d4$export$185802fd694ee1f5)(buffer, postscriptName);
    }
    function $3bda6911913b43f0$export$69a3209f1a06c04d(target, key, descriptor) {
      if (descriptor.get) {
        let get = descriptor.get;
        descriptor.get = function() {
          let value = get.call(this);
          Object.defineProperty(this, key, {
            value
          });
          return value;
        };
      } else if (typeof descriptor.value === "function") {
        let fn = descriptor.value;
        return {
          get() {
            let cache = /* @__PURE__ */ new Map();
            function memoized(...args) {
              let key2 = args.length > 0 ? args[0] : "value";
              if (cache.has(key2)) return cache.get(key2);
              let result = fn.apply(this, args);
              cache.set(key2, result);
              return result;
            }
            Object.defineProperty(this, key, {
              value: memoized
            });
            return memoized;
          }
        };
      }
    }
    var $e4ae0436c91af89f$var$SubHeader = new $elh9A$restructure.Struct({
      firstCode: $elh9A$restructure.uint16,
      entryCount: $elh9A$restructure.uint16,
      idDelta: $elh9A$restructure.int16,
      idRangeOffset: $elh9A$restructure.uint16
    });
    var $e4ae0436c91af89f$var$CmapGroup = new $elh9A$restructure.Struct({
      startCharCode: $elh9A$restructure.uint32,
      endCharCode: $elh9A$restructure.uint32,
      glyphID: $elh9A$restructure.uint32
    });
    var $e4ae0436c91af89f$var$UnicodeValueRange = new $elh9A$restructure.Struct({
      startUnicodeValue: $elh9A$restructure.uint24,
      additionalCount: $elh9A$restructure.uint8
    });
    var $e4ae0436c91af89f$var$UVSMapping = new $elh9A$restructure.Struct({
      unicodeValue: $elh9A$restructure.uint24,
      glyphID: $elh9A$restructure.uint16
    });
    var $e4ae0436c91af89f$var$DefaultUVS = new $elh9A$restructure.Array($e4ae0436c91af89f$var$UnicodeValueRange, $elh9A$restructure.uint32);
    var $e4ae0436c91af89f$var$NonDefaultUVS = new $elh9A$restructure.Array($e4ae0436c91af89f$var$UVSMapping, $elh9A$restructure.uint32);
    var $e4ae0436c91af89f$var$VarSelectorRecord = new $elh9A$restructure.Struct({
      varSelector: $elh9A$restructure.uint24,
      defaultUVS: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $e4ae0436c91af89f$var$DefaultUVS, {
        type: "parent"
      }),
      nonDefaultUVS: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $e4ae0436c91af89f$var$NonDefaultUVS, {
        type: "parent"
      })
    });
    var $e4ae0436c91af89f$var$CmapSubtable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      0: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        codeMap: new $elh9A$restructure.LazyArray($elh9A$restructure.uint8, 256)
      },
      2: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        subHeaderKeys: new $elh9A$restructure.Array($elh9A$restructure.uint16, 256),
        subHeaderCount: (t2) => Math.max.apply(Math, t2.subHeaderKeys),
        subHeaders: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$SubHeader, "subHeaderCount"),
        glyphIndexArray: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "subHeaderCount")
      },
      4: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        segCountX2: $elh9A$restructure.uint16,
        segCount: (t2) => t2.segCountX2 >> 1,
        searchRange: $elh9A$restructure.uint16,
        entrySelector: $elh9A$restructure.uint16,
        rangeShift: $elh9A$restructure.uint16,
        endCode: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "segCount"),
        reservedPad: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        startCode: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "segCount"),
        idDelta: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, "segCount"),
        idRangeOffset: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "segCount"),
        glyphIndexArray: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, (t2) => (t2.length - t2._currentOffset) / 2)
      },
      6: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        firstCode: $elh9A$restructure.uint16,
        entryCount: $elh9A$restructure.uint16,
        glyphIndices: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "entryCount")
      },
      8: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint16,
        is32: new $elh9A$restructure.LazyArray($elh9A$restructure.uint8, 8192),
        nGroups: $elh9A$restructure.uint32,
        groups: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$CmapGroup, "nGroups")
      },
      10: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint32,
        firstCode: $elh9A$restructure.uint32,
        entryCount: $elh9A$restructure.uint32,
        glyphIndices: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "numChars")
      },
      12: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint32,
        nGroups: $elh9A$restructure.uint32,
        groups: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$CmapGroup, "nGroups")
      },
      13: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint32,
        nGroups: $elh9A$restructure.uint32,
        groups: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$CmapGroup, "nGroups")
      },
      14: {
        length: $elh9A$restructure.uint32,
        numRecords: $elh9A$restructure.uint32,
        varSelectors: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$VarSelectorRecord, "numRecords")
      }
    });
    var $e4ae0436c91af89f$var$CmapEntry = new $elh9A$restructure.Struct({
      platformID: $elh9A$restructure.uint16,
      encodingID: $elh9A$restructure.uint16,
      table: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $e4ae0436c91af89f$var$CmapSubtable, {
        type: "parent",
        lazy: true
      })
    });
    var $e4ae0436c91af89f$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      numSubtables: $elh9A$restructure.uint16,
      tables: new $elh9A$restructure.Array($e4ae0436c91af89f$var$CmapEntry, "numSubtables")
    });
    var $55a60976afb7c261$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.int32,
      revision: $elh9A$restructure.int32,
      checkSumAdjustment: $elh9A$restructure.uint32,
      magicNumber: $elh9A$restructure.uint32,
      flags: $elh9A$restructure.uint16,
      unitsPerEm: $elh9A$restructure.uint16,
      created: new $elh9A$restructure.Array($elh9A$restructure.int32, 2),
      modified: new $elh9A$restructure.Array($elh9A$restructure.int32, 2),
      xMin: $elh9A$restructure.int16,
      yMin: $elh9A$restructure.int16,
      xMax: $elh9A$restructure.int16,
      yMax: $elh9A$restructure.int16,
      macStyle: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
        "bold",
        "italic",
        "underline",
        "outline",
        "shadow",
        "condensed",
        "extended"
      ]),
      lowestRecPPEM: $elh9A$restructure.uint16,
      fontDirectionHint: $elh9A$restructure.int16,
      indexToLocFormat: $elh9A$restructure.int16,
      glyphDataFormat: $elh9A$restructure.int16
      // 0 for current format
    });
    var $dde72b7b5b650596$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.int32,
      ascent: $elh9A$restructure.int16,
      descent: $elh9A$restructure.int16,
      lineGap: $elh9A$restructure.int16,
      advanceWidthMax: $elh9A$restructure.uint16,
      minLeftSideBearing: $elh9A$restructure.int16,
      minRightSideBearing: $elh9A$restructure.int16,
      xMaxExtent: $elh9A$restructure.int16,
      caretSlopeRise: $elh9A$restructure.int16,
      caretSlopeRun: $elh9A$restructure.int16,
      caretOffset: $elh9A$restructure.int16,
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.int16, 4),
      metricDataFormat: $elh9A$restructure.int16,
      numberOfMetrics: $elh9A$restructure.uint16
      // Number of advance widths in 'hmtx' table
    });
    var $a7c40184072c9a5b$var$HmtxEntry = new $elh9A$restructure.Struct({
      advance: $elh9A$restructure.uint16,
      bearing: $elh9A$restructure.int16
    });
    var $a7c40184072c9a5b$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      metrics: new $elh9A$restructure.LazyArray($a7c40184072c9a5b$var$HmtxEntry, (t2) => t2.parent.hhea.numberOfMetrics),
      bearings: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, (t2) => t2.parent.maxp.numGlyphs - t2.parent.hhea.numberOfMetrics)
    });
    var $521197722369f691$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.int32,
      numGlyphs: $elh9A$restructure.uint16,
      maxPoints: $elh9A$restructure.uint16,
      maxContours: $elh9A$restructure.uint16,
      maxComponentPoints: $elh9A$restructure.uint16,
      maxComponentContours: $elh9A$restructure.uint16,
      maxZones: $elh9A$restructure.uint16,
      maxTwilightPoints: $elh9A$restructure.uint16,
      maxStorage: $elh9A$restructure.uint16,
      maxFunctionDefs: $elh9A$restructure.uint16,
      maxInstructionDefs: $elh9A$restructure.uint16,
      maxStackElements: $elh9A$restructure.uint16,
      maxSizeOfInstructions: $elh9A$restructure.uint16,
      maxComponentElements: $elh9A$restructure.uint16,
      maxComponentDepth: $elh9A$restructure.uint16
      // Maximum levels of recursion; 1 for simple components
    });
    function $e2613b812f052cbe$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {
      if (platformID === 1 && $e2613b812f052cbe$export$479e671907f486d1[languageID]) return $e2613b812f052cbe$export$479e671907f486d1[languageID];
      return $e2613b812f052cbe$export$6fef87b7618bdf0b[platformID][encodingID];
    }
    var $e2613b812f052cbe$var$SINGLE_BYTE_ENCODINGS = /* @__PURE__ */ new Set([
      "x-mac-roman",
      "x-mac-cyrillic",
      "iso-8859-6",
      "iso-8859-8"
    ]);
    var $e2613b812f052cbe$var$MAC_ENCODINGS = {
      "x-mac-croatian": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u03A9\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026 \xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uF8FF\xA9\u2044\u20AC\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7",
      "x-mac-gaelic": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u1E02\xB1\u2264\u2265\u1E03\u010A\u010B\u1E0A\u1E0B\u1E1E\u1E1F\u0120\u0121\u1E40\xE6\xF8\u1E41\u1E56\u1E57\u027C\u0192\u017F\u1E60\xAB\xBB\u2026 \xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\u1E61\u1E9B\xFF\u0178\u1E6A\u20AC\u2039\u203A\u0176\u0177\u1E6B\xB7\u1EF2\u1EF3\u204A\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u2663\xD2\xDA\xDB\xD9\u0131\xDD\xFD\u0174\u0175\u1E84\u1E85\u1E80\u1E81\u1E82\u1E83",
      "x-mac-greek": "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\u20AC\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\xB7\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026 \u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\xAD",
      "x-mac-icelandic": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026 \xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\u20AC\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7",
      "x-mac-inuit": "\u1403\u1404\u1405\u1406\u140A\u140B\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144E\u144F\u1450\u1451\u1455\u1456\u1466\u146D\u146E\u146F\u1470\u1472\u1473\u1483\u148B\u148C\u148D\u148E\u1490\u1491\xB0\u14A1\u14A5\u14A6\u2022\xB6\u14A7\xAE\xA9\u2122\u14A8\u14AA\u14AB\u14BB\u14C2\u14C3\u14C4\u14C5\u14C7\u14C8\u14D0\u14EF\u14F0\u14F1\u14F2\u14F4\u14F5\u1505\u14D5\u14D6\u14D7\u14D8\u14DA\u14DB\u14EA\u1528\u1529\u152A\u152B\u152D\u2026 \u152E\u153E\u1555\u1556\u1557\u2013\u2014\u201C\u201D\u2018\u2019\u1558\u1559\u155A\u155D\u1546\u1547\u1548\u1549\u154B\u154C\u1550\u157F\u1580\u1581\u1582\u1583\u1584\u1585\u158F\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15A0\u15A1\u15A2\u15A3\u15A4\u15A5\u15A6\u157C\u0141\u0142",
      "x-mac-ce": "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026 \u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7",
      "x-mac-romanian": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u0218\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\u0103\u0219\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026 \xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\u20AC\u2039\u203A\u021A\u021B\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7",
      "x-mac-turkish": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026 \xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\uF8A0\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    };
    var $e2613b812f052cbe$var$encodingCache = /* @__PURE__ */ new Map();
    function $e2613b812f052cbe$export$1dceb3c14ed68bee(encoding) {
      let cached = $e2613b812f052cbe$var$encodingCache.get(encoding);
      if (cached) return cached;
      let mapping = $e2613b812f052cbe$var$MAC_ENCODINGS[encoding];
      if (mapping) {
        let res = /* @__PURE__ */ new Map();
        for (let i2 = 0; i2 < mapping.length; i2++) res.set(mapping.charCodeAt(i2), 128 + i2);
        $e2613b812f052cbe$var$encodingCache.set(encoding, res);
        return res;
      }
      if ($e2613b812f052cbe$var$SINGLE_BYTE_ENCODINGS.has(encoding)) {
        let decoder = new TextDecoder(encoding);
        let mapping2 = new Uint8Array(128);
        for (let i2 = 0; i2 < 128; i2++) mapping2[i2] = 128 + i2;
        let res = /* @__PURE__ */ new Map();
        let s2 = decoder.decode(mapping2);
        for (let i2 = 0; i2 < 128; i2++) res.set(s2.charCodeAt(i2), 128 + i2);
        $e2613b812f052cbe$var$encodingCache.set(encoding, res);
        return res;
      }
    }
    var $e2613b812f052cbe$export$6fef87b7618bdf0b = [
      // unicode
      [
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be"
      ],
      // macintosh
      // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
      // 0	Roman                 17	Malayalam
      // 1	Japanese	            18	Sinhalese
      // 2	Traditional Chinese	  19	Burmese
      // 3	Korean	              20	Khmer
      // 4	Arabic	              21	Thai
      // 5	Hebrew	              22	Laotian
      // 6	Greek	                23	Georgian
      // 7	Russian	              24	Armenian
      // 8	RSymbol	              25	Simplified Chinese
      // 9	Devanagari	          26	Tibetan
      // 10	Gurmukhi	            27	Mongolian
      // 11	Gujarati	            28	Geez
      // 12	Oriya	                29	Slavic
      // 13	Bengali	              30	Vietnamese
      // 14	Tamil	                31	Sindhi
      // 15	Telugu	              32	(Uninterpreted)
      // 16	Kannada
      [
        "x-mac-roman",
        "shift-jis",
        "big5",
        "euc-kr",
        "iso-8859-6",
        "iso-8859-8",
        "x-mac-greek",
        "x-mac-cyrillic",
        "x-mac-symbol",
        "x-mac-devanagari",
        "x-mac-gurmukhi",
        "x-mac-gujarati",
        "Oriya",
        "Bengali",
        "Tamil",
        "Telugu",
        "Kannada",
        "Malayalam",
        "Sinhalese",
        "Burmese",
        "Khmer",
        "iso-8859-11",
        "Laotian",
        "Georgian",
        "Armenian",
        "gbk",
        "Tibetan",
        "Mongolian",
        "Geez",
        "x-mac-ce",
        "Vietnamese",
        "Sindhi"
      ],
      // ISO (deprecated)
      [
        "ascii",
        null,
        "iso-8859-1"
      ],
      // windows
      // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
      [
        "symbol",
        "utf-16be",
        "shift-jis",
        "gb18030",
        "big5",
        "euc-kr",
        "johab",
        null,
        null,
        null,
        "utf-16be"
      ]
    ];
    var $e2613b812f052cbe$export$479e671907f486d1 = {
      15: "x-mac-icelandic",
      17: "x-mac-turkish",
      18: "x-mac-croatian",
      24: "x-mac-ce",
      25: "x-mac-ce",
      26: "x-mac-ce",
      27: "x-mac-ce",
      28: "x-mac-ce",
      30: "x-mac-icelandic",
      37: "x-mac-romanian",
      38: "x-mac-ce",
      39: "x-mac-ce",
      40: "x-mac-ce",
      143: "x-mac-inuit",
      146: "x-mac-gaelic"
    };
    var $e2613b812f052cbe$export$2092376fd002e13 = [
      // unicode
      [],
      {
        0: "en",
        30: "fo",
        60: "ks",
        90: "rw",
        1: "fr",
        31: "fa",
        61: "ku",
        91: "rn",
        2: "de",
        32: "ru",
        62: "sd",
        92: "ny",
        3: "it",
        33: "zh",
        63: "bo",
        93: "mg",
        4: "nl",
        34: "nl-BE",
        64: "ne",
        94: "eo",
        5: "sv",
        35: "ga",
        65: "sa",
        128: "cy",
        6: "es",
        36: "sq",
        66: "mr",
        129: "eu",
        7: "da",
        37: "ro",
        67: "bn",
        130: "ca",
        8: "pt",
        38: "cz",
        68: "as",
        131: "la",
        9: "no",
        39: "sk",
        69: "gu",
        132: "qu",
        10: "he",
        40: "si",
        70: "pa",
        133: "gn",
        11: "ja",
        41: "yi",
        71: "or",
        134: "ay",
        12: "ar",
        42: "sr",
        72: "ml",
        135: "tt",
        13: "fi",
        43: "mk",
        73: "kn",
        136: "ug",
        14: "el",
        44: "bg",
        74: "ta",
        137: "dz",
        15: "is",
        45: "uk",
        75: "te",
        138: "jv",
        16: "mt",
        46: "be",
        76: "si",
        139: "su",
        17: "tr",
        47: "uz",
        77: "my",
        140: "gl",
        18: "hr",
        48: "kk",
        78: "km",
        141: "af",
        19: "zh-Hant",
        49: "az-Cyrl",
        79: "lo",
        142: "br",
        20: "ur",
        50: "az-Arab",
        80: "vi",
        143: "iu",
        21: "hi",
        51: "hy",
        81: "id",
        144: "gd",
        22: "th",
        52: "ka",
        82: "tl",
        145: "gv",
        23: "ko",
        53: "mo",
        83: "ms",
        146: "ga",
        24: "lt",
        54: "ky",
        84: "ms-Arab",
        147: "to",
        25: "pl",
        55: "tg",
        85: "am",
        148: "el-polyton",
        26: "hu",
        56: "tk",
        86: "ti",
        149: "kl",
        27: "es",
        57: "mn-CN",
        87: "om",
        150: "az",
        28: "lv",
        58: "mn",
        88: "so",
        151: "nn",
        29: "se",
        59: "ps",
        89: "sw"
      },
      // ISO (deprecated)
      [],
      {
        1078: "af",
        16393: "en-IN",
        1159: "rw",
        1074: "tn",
        1052: "sq",
        6153: "en-IE",
        1089: "sw",
        1115: "si",
        1156: "gsw",
        8201: "en-JM",
        1111: "kok",
        1051: "sk",
        1118: "am",
        17417: "en-MY",
        1042: "ko",
        1060: "sl",
        5121: "ar-DZ",
        5129: "en-NZ",
        1088: "ky",
        11274: "es-AR",
        15361: "ar-BH",
        13321: "en-PH",
        1108: "lo",
        16394: "es-BO",
        3073: "ar",
        18441: "en-SG",
        1062: "lv",
        13322: "es-CL",
        2049: "ar-IQ",
        7177: "en-ZA",
        1063: "lt",
        9226: "es-CO",
        11265: "ar-JO",
        11273: "en-TT",
        2094: "dsb",
        5130: "es-CR",
        13313: "ar-KW",
        2057: "en-GB",
        1134: "lb",
        7178: "es-DO",
        12289: "ar-LB",
        1033: "en",
        1071: "mk",
        12298: "es-EC",
        4097: "ar-LY",
        12297: "en-ZW",
        2110: "ms-BN",
        17418: "es-SV",
        6145: "ary",
        1061: "et",
        1086: "ms",
        4106: "es-GT",
        8193: "ar-OM",
        1080: "fo",
        1100: "ml",
        18442: "es-HN",
        16385: "ar-QA",
        1124: "fil",
        1082: "mt",
        2058: "es-MX",
        1025: "ar-SA",
        1035: "fi",
        1153: "mi",
        19466: "es-NI",
        10241: "ar-SY",
        2060: "fr-BE",
        1146: "arn",
        6154: "es-PA",
        7169: "aeb",
        3084: "fr-CA",
        1102: "mr",
        15370: "es-PY",
        14337: "ar-AE",
        1036: "fr",
        1148: "moh",
        10250: "es-PE",
        9217: "ar-YE",
        5132: "fr-LU",
        1104: "mn",
        20490: "es-PR",
        1067: "hy",
        6156: "fr-MC",
        2128: "mn-CN",
        3082: "es",
        1101: "as",
        4108: "fr-CH",
        1121: "ne",
        1034: "es",
        2092: "az-Cyrl",
        1122: "fy",
        1044: "nb",
        21514: "es-US",
        1068: "az",
        1110: "gl",
        2068: "nn",
        14346: "es-UY",
        1133: "ba",
        1079: "ka",
        1154: "oc",
        8202: "es-VE",
        1069: "eu",
        3079: "de-AT",
        1096: "or",
        2077: "sv-FI",
        1059: "be",
        1031: "de",
        1123: "ps",
        1053: "sv",
        2117: "bn",
        5127: "de-LI",
        1045: "pl",
        1114: "syr",
        1093: "bn-IN",
        4103: "de-LU",
        1046: "pt",
        1064: "tg",
        8218: "bs-Cyrl",
        2055: "de-CH",
        2070: "pt-PT",
        2143: "tzm",
        5146: "bs",
        1032: "el",
        1094: "pa",
        1097: "ta",
        1150: "br",
        1135: "kl",
        1131: "qu-BO",
        1092: "tt",
        1026: "bg",
        1095: "gu",
        2155: "qu-EC",
        1098: "te",
        1027: "ca",
        1128: "ha",
        3179: "qu",
        1054: "th",
        3076: "zh-HK",
        1037: "he",
        1048: "ro",
        1105: "bo",
        5124: "zh-MO",
        1081: "hi",
        1047: "rm",
        1055: "tr",
        2052: "zh",
        1038: "hu",
        1049: "ru",
        1090: "tk",
        4100: "zh-SG",
        1039: "is",
        9275: "smn",
        1152: "ug",
        1028: "zh-TW",
        1136: "ig",
        4155: "smj-NO",
        1058: "uk",
        1155: "co",
        1057: "id",
        5179: "smj",
        1070: "hsb",
        1050: "hr",
        1117: "iu",
        3131: "se-FI",
        1056: "ur",
        4122: "hr-BA",
        2141: "iu-Latn",
        1083: "se",
        2115: "uz-Cyrl",
        1029: "cs",
        2108: "ga",
        2107: "se-SE",
        1091: "uz",
        1030: "da",
        1076: "xh",
        8251: "sms",
        1066: "vi",
        1164: "prs",
        1077: "zu",
        6203: "sma-NO",
        1106: "cy",
        1125: "dv",
        1040: "it",
        7227: "sms",
        1160: "wo",
        2067: "nl-BE",
        2064: "it-CH",
        1103: "sa",
        1157: "sah",
        1043: "nl",
        1041: "ja",
        7194: "sr-Cyrl-BA",
        1144: "ii",
        3081: "en-AU",
        1099: "kn",
        3098: "sr",
        1130: "yo",
        10249: "en-BZ",
        1087: "kk",
        6170: "sr-Latn-BA",
        4105: "en-CA",
        1107: "km",
        2074: "sr-Latn",
        9225: "en-029",
        1158: "quc",
        1132: "nso"
      }
    ];
    var $51a9f4feb3a3b2b1$var$NameRecord = new $elh9A$restructure.Struct({
      platformID: $elh9A$restructure.uint16,
      encodingID: $elh9A$restructure.uint16,
      languageID: $elh9A$restructure.uint16,
      nameID: $elh9A$restructure.uint16,
      length: $elh9A$restructure.uint16,
      string: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.String("length", (t2) => (0, $e2613b812f052cbe$export$badc544e0651b6b1)(t2.platformID, t2.encodingID, t2.languageID)), {
        type: "parent",
        relativeTo: (ctx) => ctx.parent.stringOffset,
        allowNull: false
      })
    });
    var $51a9f4feb3a3b2b1$var$LangTagRecord = new $elh9A$restructure.Struct({
      length: $elh9A$restructure.uint16,
      tag: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.String("length", "utf16be"), {
        type: "parent",
        relativeTo: (ctx) => ctx.stringOffset
      })
    });
    var $51a9f4feb3a3b2b1$var$NameTable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      0: {
        count: $elh9A$restructure.uint16,
        stringOffset: $elh9A$restructure.uint16,
        records: new $elh9A$restructure.Array($51a9f4feb3a3b2b1$var$NameRecord, "count")
      },
      1: {
        count: $elh9A$restructure.uint16,
        stringOffset: $elh9A$restructure.uint16,
        records: new $elh9A$restructure.Array($51a9f4feb3a3b2b1$var$NameRecord, "count"),
        langTagCount: $elh9A$restructure.uint16,
        langTags: new $elh9A$restructure.Array($51a9f4feb3a3b2b1$var$LangTagRecord, "langTagCount")
      }
    });
    var $51a9f4feb3a3b2b1$export$2e2bcd8739ae039 = $51a9f4feb3a3b2b1$var$NameTable;
    var $51a9f4feb3a3b2b1$var$NAMES = [
      "copyright",
      "fontFamily",
      "fontSubfamily",
      "uniqueSubfamily",
      "fullName",
      "version",
      "postscriptName",
      "trademark",
      "manufacturer",
      "designer",
      "description",
      "vendorURL",
      "designerURL",
      "license",
      "licenseURL",
      null,
      "preferredFamily",
      "preferredSubfamily",
      "compatibleFull",
      "sampleText",
      "postscriptCIDFontName",
      "wwsFamilyName",
      "wwsSubfamilyName"
    ];
    $51a9f4feb3a3b2b1$var$NameTable.process = function(stream) {
      var records = {};
      for (let record of this.records) {
        let language = (0, $e2613b812f052cbe$export$2092376fd002e13)[record.platformID][record.languageID];
        if (language == null && this.langTags != null && record.languageID >= 32768) language = this.langTags[record.languageID - 32768].tag;
        if (language == null) language = record.platformID + "-" + record.languageID;
        let key = record.nameID >= 256 ? "fontFeatures" : $51a9f4feb3a3b2b1$var$NAMES[record.nameID] || record.nameID;
        if (records[key] == null) records[key] = {};
        let obj = records[key];
        if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});
        if (typeof record.string === "string" || typeof obj[language] !== "string") obj[language] = record.string;
      }
      this.records = records;
    };
    $51a9f4feb3a3b2b1$var$NameTable.preEncode = function() {
      if (Array.isArray(this.records)) return;
      this.version = 0;
      let records = [];
      for (let key in this.records) {
        let val = this.records[key];
        if (key === "fontFeatures") continue;
        records.push({
          platformID: 3,
          encodingID: 1,
          languageID: 1033,
          nameID: $51a9f4feb3a3b2b1$var$NAMES.indexOf(key),
          length: val.en.length * 2,
          string: val.en
        });
        if (key === "postscriptName") records.push({
          platformID: 1,
          encodingID: 0,
          languageID: 0,
          nameID: $51a9f4feb3a3b2b1$var$NAMES.indexOf(key),
          length: val.en.length,
          string: val.en
        });
      }
      this.records = records;
      this.count = records.length;
      this.stringOffset = $51a9f4feb3a3b2b1$var$NameTable.size(this, null, false);
    };
    var $114ea85db469b435$var$OS2 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      header: {
        xAvgCharWidth: $elh9A$restructure.int16,
        usWeightClass: $elh9A$restructure.uint16,
        usWidthClass: $elh9A$restructure.uint16,
        fsType: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
          null,
          "noEmbedding",
          "viewOnly",
          "editable",
          null,
          null,
          null,
          null,
          "noSubsetting",
          "bitmapOnly"
        ]),
        ySubscriptXSize: $elh9A$restructure.int16,
        ySubscriptYSize: $elh9A$restructure.int16,
        ySubscriptXOffset: $elh9A$restructure.int16,
        ySubscriptYOffset: $elh9A$restructure.int16,
        ySuperscriptXSize: $elh9A$restructure.int16,
        ySuperscriptYSize: $elh9A$restructure.int16,
        ySuperscriptXOffset: $elh9A$restructure.int16,
        ySuperscriptYOffset: $elh9A$restructure.int16,
        yStrikeoutSize: $elh9A$restructure.int16,
        yStrikeoutPosition: $elh9A$restructure.int16,
        sFamilyClass: $elh9A$restructure.int16,
        panose: new $elh9A$restructure.Array($elh9A$restructure.uint8, 10),
        ulCharRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 4),
        vendorID: new $elh9A$restructure.String(4),
        fsSelection: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
          "italic",
          "underscore",
          "negative",
          "outlined",
          "strikeout",
          "bold",
          "regular",
          "useTypoMetrics",
          "wws",
          "oblique"
        ]),
        usFirstCharIndex: $elh9A$restructure.uint16,
        usLastCharIndex: $elh9A$restructure.uint16
        // The maximum Unicode index in this font
      },
      // The Apple version of this table ends here, but the Microsoft one continues on...
      0: {},
      1: {
        typoAscender: $elh9A$restructure.int16,
        typoDescender: $elh9A$restructure.int16,
        typoLineGap: $elh9A$restructure.int16,
        winAscent: $elh9A$restructure.uint16,
        winDescent: $elh9A$restructure.uint16,
        codePageRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 2)
      },
      2: {
        // these should be common with version 1 somehow
        typoAscender: $elh9A$restructure.int16,
        typoDescender: $elh9A$restructure.int16,
        typoLineGap: $elh9A$restructure.int16,
        winAscent: $elh9A$restructure.uint16,
        winDescent: $elh9A$restructure.uint16,
        codePageRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 2),
        xHeight: $elh9A$restructure.int16,
        capHeight: $elh9A$restructure.int16,
        defaultChar: $elh9A$restructure.uint16,
        breakChar: $elh9A$restructure.uint16,
        maxContent: $elh9A$restructure.uint16
      },
      5: {
        typoAscender: $elh9A$restructure.int16,
        typoDescender: $elh9A$restructure.int16,
        typoLineGap: $elh9A$restructure.int16,
        winAscent: $elh9A$restructure.uint16,
        winDescent: $elh9A$restructure.uint16,
        codePageRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 2),
        xHeight: $elh9A$restructure.int16,
        capHeight: $elh9A$restructure.int16,
        defaultChar: $elh9A$restructure.uint16,
        breakChar: $elh9A$restructure.uint16,
        maxContent: $elh9A$restructure.uint16,
        usLowerOpticalPointSize: $elh9A$restructure.uint16,
        usUpperOpticalPointSize: $elh9A$restructure.uint16
      }
    });
    var $114ea85db469b435$var$versions = $114ea85db469b435$var$OS2.versions;
    $114ea85db469b435$var$versions[3] = $114ea85db469b435$var$versions[4] = $114ea85db469b435$var$versions[2];
    var $114ea85db469b435$export$2e2bcd8739ae039 = $114ea85db469b435$var$OS2;
    var $f93b30299e1ea0f5$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.fixed32, {
      header: {
        italicAngle: $elh9A$restructure.fixed32,
        underlinePosition: $elh9A$restructure.int16,
        underlineThickness: $elh9A$restructure.int16,
        isFixedPitch: $elh9A$restructure.uint32,
        minMemType42: $elh9A$restructure.uint32,
        maxMemType42: $elh9A$restructure.uint32,
        minMemType1: $elh9A$restructure.uint32,
        maxMemType1: $elh9A$restructure.uint32
        // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
      },
      1: {},
      2: {
        numberOfGlyphs: $elh9A$restructure.uint16,
        glyphNameIndex: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numberOfGlyphs"),
        names: new $elh9A$restructure.Array(new $elh9A$restructure.String($elh9A$restructure.uint8))
      },
      2.5: {
        numberOfGlyphs: $elh9A$restructure.uint16,
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint8, "numberOfGlyphs")
      },
      3: {},
      4: {
        map: new $elh9A$restructure.Array($elh9A$restructure.uint32, (t2) => t2.parent.maxp.numGlyphs)
      }
    });
    var $8fb09b0f473d61a0$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      controlValues: new $elh9A$restructure.Array($elh9A$restructure.int16)
    });
    var $873d79fea57d3161$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      instructions: new $elh9A$restructure.Array($elh9A$restructure.uint8)
    });
    var $83c4155666d50c37$var$loca = new $elh9A$restructure.VersionedStruct("head.indexToLocFormat", {
      0: {
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint16)
      },
      1: {
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint32)
      }
    });
    $83c4155666d50c37$var$loca.process = function() {
      if (this.version === 0 && !this._processed) {
        for (let i2 = 0; i2 < this.offsets.length; i2++) this.offsets[i2] <<= 1;
        this._processed = true;
      }
    };
    $83c4155666d50c37$var$loca.preEncode = function() {
      if (this.version === 0 && this._processed !== false) {
        for (let i2 = 0; i2 < this.offsets.length; i2++) this.offsets[i2] >>>= 1;
        this._processed = false;
      }
    };
    var $83c4155666d50c37$export$2e2bcd8739ae039 = $83c4155666d50c37$var$loca;
    var $b12598db7cdf7042$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      controlValueProgram: new $elh9A$restructure.Array($elh9A$restructure.uint8)
    });
    var $7707bdf21a3d89cc$export$2e2bcd8739ae039 = new $elh9A$restructure.Array(new $elh9A$restructure.Buffer());
    var $9eaea3754914a290$export$2e2bcd8739ae039 = class {
      getCFFVersion(ctx) {
        while (ctx && !ctx.hdrSize) ctx = ctx.parent;
        return ctx ? ctx.version : -1;
      }
      decode(stream, parent) {
        let version = this.getCFFVersion(parent);
        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();
        if (count === 0) return [];
        let offSize = stream.readUInt8();
        let offsetType;
        if (offSize === 1) offsetType = $elh9A$restructure.uint8;
        else if (offSize === 2) offsetType = $elh9A$restructure.uint16;
        else if (offSize === 3) offsetType = $elh9A$restructure.uint24;
        else if (offSize === 4) offsetType = $elh9A$restructure.uint32;
        else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);
        let ret = [];
        let startPos = stream.pos + (count + 1) * offSize - 1;
        let start = offsetType.decode(stream);
        for (let i2 = 0; i2 < count; i2++) {
          let end = offsetType.decode(stream);
          if (this.type != null) {
            let pos = stream.pos;
            stream.pos = startPos + start;
            parent.length = end - start;
            ret.push(this.type.decode(stream, parent));
            stream.pos = pos;
          } else ret.push({
            offset: startPos + start,
            length: end - start
          });
          start = end;
        }
        stream.pos = startPos + start;
        return ret;
      }
      size(arr, parent) {
        let size = 2;
        if (arr.length === 0) return size;
        let type = this.type || new $elh9A$restructure.Buffer();
        let offset = 1;
        for (let i2 = 0; i2 < arr.length; i2++) {
          let item = arr[i2];
          offset += type.size(item, parent);
        }
        let offsetType;
        if (offset <= 255) offsetType = $elh9A$restructure.uint8;
        else if (offset <= 65535) offsetType = $elh9A$restructure.uint16;
        else if (offset <= 16777215) offsetType = $elh9A$restructure.uint24;
        else if (offset <= 4294967295) offsetType = $elh9A$restructure.uint32;
        else throw new Error("Bad offset in CFFIndex");
        size += 1 + offsetType.size() * (arr.length + 1);
        size += offset - 1;
        return size;
      }
      encode(stream, arr, parent) {
        stream.writeUInt16BE(arr.length);
        if (arr.length === 0) return;
        let type = this.type || new $elh9A$restructure.Buffer();
        let sizes = [];
        let offset = 1;
        for (let item of arr) {
          let s2 = type.size(item, parent);
          sizes.push(s2);
          offset += s2;
        }
        let offsetType;
        if (offset <= 255) offsetType = $elh9A$restructure.uint8;
        else if (offset <= 65535) offsetType = $elh9A$restructure.uint16;
        else if (offset <= 16777215) offsetType = $elh9A$restructure.uint24;
        else if (offset <= 4294967295) offsetType = $elh9A$restructure.uint32;
        else throw new Error("Bad offset in CFFIndex");
        stream.writeUInt8(offsetType.size());
        offset = 1;
        offsetType.encode(stream, offset);
        for (let size of sizes) {
          offset += size;
          offsetType.encode(stream, offset);
        }
        for (let item of arr) type.encode(stream, item, parent);
        return;
      }
      constructor(type) {
        this.type = type;
      }
    };
    var $f77b592c17132d70$var$FLOAT_EOF = 15;
    var $f77b592c17132d70$var$FLOAT_LOOKUP = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      ".",
      "E",
      "E-",
      null,
      "-"
    ];
    var $f77b592c17132d70$var$FLOAT_ENCODE_LOOKUP = {
      ".": 10,
      "E": 11,
      "E-": 12,
      "-": 14
    };
    var $f77b592c17132d70$export$2e2bcd8739ae039 = class {
      static decode(stream, value) {
        if (32 <= value && value <= 246) return value - 139;
        if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;
        if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;
        if (value === 28) return stream.readInt16BE();
        if (value === 29) return stream.readInt32BE();
        if (value === 30) {
          let str = "";
          while (true) {
            let b = stream.readUInt8();
            let n1 = b >> 4;
            if (n1 === $f77b592c17132d70$var$FLOAT_EOF) break;
            str += $f77b592c17132d70$var$FLOAT_LOOKUP[n1];
            let n2 = b & 15;
            if (n2 === $f77b592c17132d70$var$FLOAT_EOF) break;
            str += $f77b592c17132d70$var$FLOAT_LOOKUP[n2];
          }
          return parseFloat(str);
        }
        return null;
      }
      static size(value) {
        if (value.forceLarge) value = 32768;
        if ((value | 0) !== value) {
          let str = "" + value;
          return 1 + Math.ceil((str.length + 1) / 2);
        } else if (-107 <= value && value <= 107) return 1;
        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;
        else if (-32768 <= value && value <= 32767) return 3;
        else return 5;
      }
      static encode(stream, value) {
        let val = Number(value);
        if (value.forceLarge) {
          stream.writeUInt8(29);
          return stream.writeInt32BE(val);
        } else if ((val | 0) !== val) {
          stream.writeUInt8(30);
          let str = "" + val;
          for (let i2 = 0; i2 < str.length; i2 += 2) {
            let c1 = str[i2];
            let n1 = $f77b592c17132d70$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;
            if (i2 === str.length - 1) var n2 = $f77b592c17132d70$var$FLOAT_EOF;
            else {
              let c2 = str[i2 + 1];
              var n2 = $f77b592c17132d70$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;
            }
            stream.writeUInt8(n1 << 4 | n2 & 15);
          }
          if (n2 !== $f77b592c17132d70$var$FLOAT_EOF) return stream.writeUInt8($f77b592c17132d70$var$FLOAT_EOF << 4);
        } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);
        else if (108 <= val && val <= 1131) {
          val -= 108;
          stream.writeUInt8((val >> 8) + 247);
          return stream.writeUInt8(val & 255);
        } else if (-1131 <= val && val <= -108) {
          val = -val - 108;
          stream.writeUInt8((val >> 8) + 251);
          return stream.writeUInt8(val & 255);
        } else if (-32768 <= val && val <= 32767) {
          stream.writeUInt8(28);
          return stream.writeInt16BE(val);
        } else {
          stream.writeUInt8(29);
          return stream.writeInt32BE(val);
        }
      }
    };
    var $efe622f40a9c35bd$export$2e2bcd8739ae039 = class {
      decodeOperands(type, stream, ret, operands) {
        if (Array.isArray(type)) return operands.map((op, i2) => this.decodeOperands(type[i2], stream, ret, [
          op
        ]));
        else if (type.decode != null) return type.decode(stream, ret, operands);
        else switch (type) {
          case "number":
          case "offset":
          case "sid":
            return operands[0];
          case "boolean":
            return !!operands[0];
          default:
            return operands;
        }
      }
      encodeOperands(type, stream, ctx, operands) {
        if (Array.isArray(type)) return operands.map((op, i2) => this.encodeOperands(type[i2], stream, ctx, op)[0]);
        else if (type.encode != null) return type.encode(stream, operands, ctx);
        else if (typeof operands === "number") return [
          operands
        ];
        else if (typeof operands === "boolean") return [
          +operands
        ];
        else if (Array.isArray(operands)) return operands;
        else return [
          operands
        ];
      }
      decode(stream, parent) {
        let end = stream.pos + parent.length;
        let ret = {};
        let operands = [];
        Object.defineProperties(ret, {
          parent: {
            value: parent
          },
          _startOffset: {
            value: stream.pos
          }
        });
        for (let key in this.fields) {
          let field = this.fields[key];
          ret[field[1]] = field[3];
        }
        while (stream.pos < end) {
          let b = stream.readUInt8();
          if (b < 28) {
            if (b === 12) b = b << 8 | stream.readUInt8();
            let field = this.fields[b];
            if (!field) throw new Error(`Unknown operator ${b}`);
            let val = this.decodeOperands(field[2], stream, ret, operands);
            if (val != null) {
              if (val instanceof (0, $elh9A$restructure.PropertyDescriptor)) Object.defineProperty(ret, field[1], val);
              else ret[field[1]] = val;
            }
            operands = [];
          } else operands.push((0, $f77b592c17132d70$export$2e2bcd8739ae039).decode(stream, b));
        }
        return ret;
      }
      size(dict, parent, includePointers = true) {
        let ctx = {
          parent,
          val: dict,
          pointerSize: 0,
          startOffset: parent.startOffset || 0
        };
        let len = 0;
        for (let k in this.fields) {
          let field = this.fields[k];
          let val = dict[field[1]];
          if (val == null || (0, $parcel$interopDefault($elh9A$fastdeepequal))(val, field[3])) continue;
          let operands = this.encodeOperands(field[2], null, ctx, val);
          for (let op of operands) len += (0, $f77b592c17132d70$export$2e2bcd8739ae039).size(op);
          let key = Array.isArray(field[0]) ? field[0] : [
            field[0]
          ];
          len += key.length;
        }
        if (includePointers) len += ctx.pointerSize;
        return len;
      }
      encode(stream, dict, parent) {
        let ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent,
          val: dict,
          pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);
        for (let field of this.ops) {
          let val = dict[field[1]];
          if (val == null || (0, $parcel$interopDefault($elh9A$fastdeepequal))(val, field[3])) continue;
          let operands = this.encodeOperands(field[2], stream, ctx, val);
          for (let op of operands) (0, $f77b592c17132d70$export$2e2bcd8739ae039).encode(stream, op);
          let key = Array.isArray(field[0]) ? field[0] : [
            field[0]
          ];
          for (let op of key) stream.writeUInt8(op);
        }
        let i2 = 0;
        while (i2 < ctx.pointers.length) {
          let ptr = ctx.pointers[i2++];
          ptr.type.encode(stream, ptr.val, ptr.parent);
        }
        return;
      }
      constructor(ops = []) {
        this.ops = ops;
        this.fields = {};
        for (let field of ops) {
          let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
          this.fields[key] = field;
        }
      }
    };
    var $4aa1b0749c2770f8$export$2e2bcd8739ae039 = class extends $elh9A$restructure.Pointer {
      decode(stream, parent, operands) {
        this.offsetType = {
          decode: () => operands[0]
        };
        return super.decode(stream, parent, operands);
      }
      encode(stream, value, ctx) {
        if (!stream) {
          this.offsetType = {
            size: () => 0
          };
          this.size(value, ctx);
          return [
            new $4aa1b0749c2770f8$var$Ptr(0)
          ];
        }
        let ptr = null;
        this.offsetType = {
          encode: (stream2, val) => ptr = val
        };
        super.encode(stream, value, ctx);
        return [
          new $4aa1b0749c2770f8$var$Ptr(ptr)
        ];
      }
      constructor(type, options = {}) {
        if (options.type == null) options.type = "global";
        super(null, type, options);
      }
    };
    var $4aa1b0749c2770f8$var$Ptr = class {
      valueOf() {
        return this.val;
      }
      constructor(val) {
        this.val = val;
        this.forceLarge = true;
      }
    };
    var $15a0cbb3d09cf7ee$var$CFFBlendOp = class {
      static decode(stream, parent, operands) {
        let numBlends = operands.pop();
        while (operands.length > numBlends) operands.pop();
      }
    };
    var $15a0cbb3d09cf7ee$export$2e2bcd8739ae039 = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
      // key       name                    type                                          default
      [
        6,
        "BlueValues",
        "delta",
        null
      ],
      [
        7,
        "OtherBlues",
        "delta",
        null
      ],
      [
        8,
        "FamilyBlues",
        "delta",
        null
      ],
      [
        9,
        "FamilyOtherBlues",
        "delta",
        null
      ],
      [
        [
          12,
          9
        ],
        "BlueScale",
        "number",
        0.039625
      ],
      [
        [
          12,
          10
        ],
        "BlueShift",
        "number",
        7
      ],
      [
        [
          12,
          11
        ],
        "BlueFuzz",
        "number",
        1
      ],
      [
        10,
        "StdHW",
        "number",
        null
      ],
      [
        11,
        "StdVW",
        "number",
        null
      ],
      [
        [
          12,
          12
        ],
        "StemSnapH",
        "delta",
        null
      ],
      [
        [
          12,
          13
        ],
        "StemSnapV",
        "delta",
        null
      ],
      [
        [
          12,
          14
        ],
        "ForceBold",
        "boolean",
        false
      ],
      [
        [
          12,
          17
        ],
        "LanguageGroup",
        "number",
        0
      ],
      [
        [
          12,
          18
        ],
        "ExpansionFactor",
        "number",
        0.06
      ],
      [
        [
          12,
          19
        ],
        "initialRandomSeed",
        "number",
        0
      ],
      [
        20,
        "defaultWidthX",
        "number",
        0
      ],
      [
        21,
        "nominalWidthX",
        "number",
        0
      ],
      [
        22,
        "vsindex",
        "number",
        0
      ],
      [
        23,
        "blend",
        $15a0cbb3d09cf7ee$var$CFFBlendOp,
        null
      ],
      [
        19,
        "Subrs",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)(), {
          type: "local"
        }),
        null
      ]
    ]);
    var $860d3574d7fa3a51$export$2e2bcd8739ae039 = [
      ".notdef",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quoteright",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "quoteleft",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "exclamdown",
      "cent",
      "sterling",
      "fraction",
      "yen",
      "florin",
      "section",
      "currency",
      "quotesingle",
      "quotedblleft",
      "guillemotleft",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "endash",
      "dagger",
      "daggerdbl",
      "periodcentered",
      "paragraph",
      "bullet",
      "quotesinglbase",
      "quotedblbase",
      "quotedblright",
      "guillemotright",
      "ellipsis",
      "perthousand",
      "questiondown",
      "grave",
      "acute",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "dieresis",
      "ring",
      "cedilla",
      "hungarumlaut",
      "ogonek",
      "caron",
      "emdash",
      "AE",
      "ordfeminine",
      "Lslash",
      "Oslash",
      "OE",
      "ordmasculine",
      "ae",
      "dotlessi",
      "lslash",
      "oslash",
      "oe",
      "germandbls",
      "onesuperior",
      "logicalnot",
      "mu",
      "trademark",
      "Eth",
      "onehalf",
      "plusminus",
      "Thorn",
      "onequarter",
      "divide",
      "brokenbar",
      "degree",
      "thorn",
      "threequarters",
      "twosuperior",
      "registered",
      "minus",
      "eth",
      "multiply",
      "threesuperior",
      "copyright",
      "Aacute",
      "Acircumflex",
      "Adieresis",
      "Agrave",
      "Aring",
      "Atilde",
      "Ccedilla",
      "Eacute",
      "Ecircumflex",
      "Edieresis",
      "Egrave",
      "Iacute",
      "Icircumflex",
      "Idieresis",
      "Igrave",
      "Ntilde",
      "Oacute",
      "Ocircumflex",
      "Odieresis",
      "Ograve",
      "Otilde",
      "Scaron",
      "Uacute",
      "Ucircumflex",
      "Udieresis",
      "Ugrave",
      "Yacute",
      "Ydieresis",
      "Zcaron",
      "aacute",
      "acircumflex",
      "adieresis",
      "agrave",
      "aring",
      "atilde",
      "ccedilla",
      "eacute",
      "ecircumflex",
      "edieresis",
      "egrave",
      "iacute",
      "icircumflex",
      "idieresis",
      "igrave",
      "ntilde",
      "oacute",
      "ocircumflex",
      "odieresis",
      "ograve",
      "otilde",
      "scaron",
      "uacute",
      "ucircumflex",
      "udieresis",
      "ugrave",
      "yacute",
      "ydieresis",
      "zcaron",
      "exclamsmall",
      "Hungarumlautsmall",
      "dollaroldstyle",
      "dollarsuperior",
      "ampersandsmall",
      "Acutesmall",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "questionsmall",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "isuperior",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "ff",
      "ffi",
      "ffl",
      "parenleftinferior",
      "parenrightinferior",
      "Circumflexsmall",
      "hyphensuperior",
      "Gravesmall",
      "Asmall",
      "Bsmall",
      "Csmall",
      "Dsmall",
      "Esmall",
      "Fsmall",
      "Gsmall",
      "Hsmall",
      "Ismall",
      "Jsmall",
      "Ksmall",
      "Lsmall",
      "Msmall",
      "Nsmall",
      "Osmall",
      "Psmall",
      "Qsmall",
      "Rsmall",
      "Ssmall",
      "Tsmall",
      "Usmall",
      "Vsmall",
      "Wsmall",
      "Xsmall",
      "Ysmall",
      "Zsmall",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "Tildesmall",
      "exclamdownsmall",
      "centoldstyle",
      "Lslashsmall",
      "Scaronsmall",
      "Zcaronsmall",
      "Dieresissmall",
      "Brevesmall",
      "Caronsmall",
      "Dotaccentsmall",
      "Macronsmall",
      "figuredash",
      "hypheninferior",
      "Ogoneksmall",
      "Ringsmall",
      "Cedillasmall",
      "questiondownsmall",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "zerosuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior",
      "Agravesmall",
      "Aacutesmall",
      "Acircumflexsmall",
      "Atildesmall",
      "Adieresissmall",
      "Aringsmall",
      "AEsmall",
      "Ccedillasmall",
      "Egravesmall",
      "Eacutesmall",
      "Ecircumflexsmall",
      "Edieresissmall",
      "Igravesmall",
      "Iacutesmall",
      "Icircumflexsmall",
      "Idieresissmall",
      "Ethsmall",
      "Ntildesmall",
      "Ogravesmall",
      "Oacutesmall",
      "Ocircumflexsmall",
      "Otildesmall",
      "Odieresissmall",
      "OEsmall",
      "Oslashsmall",
      "Ugravesmall",
      "Uacutesmall",
      "Ucircumflexsmall",
      "Udieresissmall",
      "Yacutesmall",
      "Thornsmall",
      "Ydieresissmall",
      "001.000",
      "001.001",
      "001.002",
      "001.003",
      "Black",
      "Bold",
      "Book",
      "Light",
      "Medium",
      "Regular",
      "Roman",
      "Semibold"
    ];
    var $c4ffe47cba1d7f36$export$dee0027060fa13bd = [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quoteright",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "quoteleft",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "exclamdown",
      "cent",
      "sterling",
      "fraction",
      "yen",
      "florin",
      "section",
      "currency",
      "quotesingle",
      "quotedblleft",
      "guillemotleft",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "",
      "endash",
      "dagger",
      "daggerdbl",
      "periodcentered",
      "",
      "paragraph",
      "bullet",
      "quotesinglbase",
      "quotedblbase",
      "quotedblright",
      "guillemotright",
      "ellipsis",
      "perthousand",
      "",
      "questiondown",
      "",
      "grave",
      "acute",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "dieresis",
      "",
      "ring",
      "cedilla",
      "",
      "hungarumlaut",
      "ogonek",
      "caron",
      "emdash",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "AE",
      "",
      "ordfeminine",
      "",
      "",
      "",
      "",
      "Lslash",
      "Oslash",
      "OE",
      "ordmasculine",
      "",
      "",
      "",
      "",
      "",
      "ae",
      "",
      "",
      "",
      "dotlessi",
      "",
      "",
      "lslash",
      "oslash",
      "oe",
      "germandbls"
    ];
    var $c4ffe47cba1d7f36$export$4f58f497e14a53c3 = [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "space",
      "exclamsmall",
      "Hungarumlautsmall",
      "",
      "dollaroldstyle",
      "dollarsuperior",
      "ampersandsmall",
      "Acutesmall",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "comma",
      "hyphen",
      "period",
      "fraction",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "colon",
      "semicolon",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "questionsmall",
      "",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "",
      "",
      "isuperior",
      "",
      "",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "",
      "",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "",
      "ff",
      "fi",
      "fl",
      "ffi",
      "ffl",
      "parenleftinferior",
      "",
      "parenrightinferior",
      "Circumflexsmall",
      "hyphensuperior",
      "Gravesmall",
      "Asmall",
      "Bsmall",
      "Csmall",
      "Dsmall",
      "Esmall",
      "Fsmall",
      "Gsmall",
      "Hsmall",
      "Ismall",
      "Jsmall",
      "Ksmall",
      "Lsmall",
      "Msmall",
      "Nsmall",
      "Osmall",
      "Psmall",
      "Qsmall",
      "Rsmall",
      "Ssmall",
      "Tsmall",
      "Usmall",
      "Vsmall",
      "Wsmall",
      "Xsmall",
      "Ysmall",
      "Zsmall",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "Tildesmall",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "exclamdownsmall",
      "centoldstyle",
      "Lslashsmall",
      "",
      "",
      "Scaronsmall",
      "Zcaronsmall",
      "Dieresissmall",
      "Brevesmall",
      "Caronsmall",
      "",
      "Dotaccentsmall",
      "",
      "",
      "Macronsmall",
      "",
      "",
      "figuredash",
      "hypheninferior",
      "",
      "",
      "Ogoneksmall",
      "Ringsmall",
      "Cedillasmall",
      "",
      "",
      "",
      "onequarter",
      "onehalf",
      "threequarters",
      "questiondownsmall",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "",
      "",
      "zerosuperior",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior",
      "Agravesmall",
      "Aacutesmall",
      "Acircumflexsmall",
      "Atildesmall",
      "Adieresissmall",
      "Aringsmall",
      "AEsmall",
      "Ccedillasmall",
      "Egravesmall",
      "Eacutesmall",
      "Ecircumflexsmall",
      "Edieresissmall",
      "Igravesmall",
      "Iacutesmall",
      "Icircumflexsmall",
      "Idieresissmall",
      "Ethsmall",
      "Ntildesmall",
      "Ogravesmall",
      "Oacutesmall",
      "Ocircumflexsmall",
      "Otildesmall",
      "Odieresissmall",
      "OEsmall",
      "Oslashsmall",
      "Ugravesmall",
      "Uacutesmall",
      "Ucircumflexsmall",
      "Udieresissmall",
      "Yacutesmall",
      "Thornsmall",
      "Ydieresissmall"
    ];
    var $1e7c7c16984e4427$export$c33b50336c234f16 = [
      ".notdef",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quoteright",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "quoteleft",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "exclamdown",
      "cent",
      "sterling",
      "fraction",
      "yen",
      "florin",
      "section",
      "currency",
      "quotesingle",
      "quotedblleft",
      "guillemotleft",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "endash",
      "dagger",
      "daggerdbl",
      "periodcentered",
      "paragraph",
      "bullet",
      "quotesinglbase",
      "quotedblbase",
      "quotedblright",
      "guillemotright",
      "ellipsis",
      "perthousand",
      "questiondown",
      "grave",
      "acute",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "dieresis",
      "ring",
      "cedilla",
      "hungarumlaut",
      "ogonek",
      "caron",
      "emdash",
      "AE",
      "ordfeminine",
      "Lslash",
      "Oslash",
      "OE",
      "ordmasculine",
      "ae",
      "dotlessi",
      "lslash",
      "oslash",
      "oe",
      "germandbls",
      "onesuperior",
      "logicalnot",
      "mu",
      "trademark",
      "Eth",
      "onehalf",
      "plusminus",
      "Thorn",
      "onequarter",
      "divide",
      "brokenbar",
      "degree",
      "thorn",
      "threequarters",
      "twosuperior",
      "registered",
      "minus",
      "eth",
      "multiply",
      "threesuperior",
      "copyright",
      "Aacute",
      "Acircumflex",
      "Adieresis",
      "Agrave",
      "Aring",
      "Atilde",
      "Ccedilla",
      "Eacute",
      "Ecircumflex",
      "Edieresis",
      "Egrave",
      "Iacute",
      "Icircumflex",
      "Idieresis",
      "Igrave",
      "Ntilde",
      "Oacute",
      "Ocircumflex",
      "Odieresis",
      "Ograve",
      "Otilde",
      "Scaron",
      "Uacute",
      "Ucircumflex",
      "Udieresis",
      "Ugrave",
      "Yacute",
      "Ydieresis",
      "Zcaron",
      "aacute",
      "acircumflex",
      "adieresis",
      "agrave",
      "aring",
      "atilde",
      "ccedilla",
      "eacute",
      "ecircumflex",
      "edieresis",
      "egrave",
      "iacute",
      "icircumflex",
      "idieresis",
      "igrave",
      "ntilde",
      "oacute",
      "ocircumflex",
      "odieresis",
      "ograve",
      "otilde",
      "scaron",
      "uacute",
      "ucircumflex",
      "udieresis",
      "ugrave",
      "yacute",
      "ydieresis",
      "zcaron"
    ];
    var $1e7c7c16984e4427$export$3ed0f9e1fee8d489 = [
      ".notdef",
      "space",
      "exclamsmall",
      "Hungarumlautsmall",
      "dollaroldstyle",
      "dollarsuperior",
      "ampersandsmall",
      "Acutesmall",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "comma",
      "hyphen",
      "period",
      "fraction",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "colon",
      "semicolon",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "questionsmall",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "isuperior",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "ff",
      "fi",
      "fl",
      "ffi",
      "ffl",
      "parenleftinferior",
      "parenrightinferior",
      "Circumflexsmall",
      "hyphensuperior",
      "Gravesmall",
      "Asmall",
      "Bsmall",
      "Csmall",
      "Dsmall",
      "Esmall",
      "Fsmall",
      "Gsmall",
      "Hsmall",
      "Ismall",
      "Jsmall",
      "Ksmall",
      "Lsmall",
      "Msmall",
      "Nsmall",
      "Osmall",
      "Psmall",
      "Qsmall",
      "Rsmall",
      "Ssmall",
      "Tsmall",
      "Usmall",
      "Vsmall",
      "Wsmall",
      "Xsmall",
      "Ysmall",
      "Zsmall",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "Tildesmall",
      "exclamdownsmall",
      "centoldstyle",
      "Lslashsmall",
      "Scaronsmall",
      "Zcaronsmall",
      "Dieresissmall",
      "Brevesmall",
      "Caronsmall",
      "Dotaccentsmall",
      "Macronsmall",
      "figuredash",
      "hypheninferior",
      "Ogoneksmall",
      "Ringsmall",
      "Cedillasmall",
      "onequarter",
      "onehalf",
      "threequarters",
      "questiondownsmall",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "zerosuperior",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior",
      "Agravesmall",
      "Aacutesmall",
      "Acircumflexsmall",
      "Atildesmall",
      "Adieresissmall",
      "Aringsmall",
      "AEsmall",
      "Ccedillasmall",
      "Egravesmall",
      "Eacutesmall",
      "Ecircumflexsmall",
      "Edieresissmall",
      "Igravesmall",
      "Iacutesmall",
      "Icircumflexsmall",
      "Idieresissmall",
      "Ethsmall",
      "Ntildesmall",
      "Ogravesmall",
      "Oacutesmall",
      "Ocircumflexsmall",
      "Otildesmall",
      "Odieresissmall",
      "OEsmall",
      "Oslashsmall",
      "Ugravesmall",
      "Uacutesmall",
      "Ucircumflexsmall",
      "Udieresissmall",
      "Yacutesmall",
      "Thornsmall",
      "Ydieresissmall"
    ];
    var $1e7c7c16984e4427$export$dc28be11139d4120 = [
      ".notdef",
      "space",
      "dollaroldstyle",
      "dollarsuperior",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "comma",
      "hyphen",
      "period",
      "fraction",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "colon",
      "semicolon",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "isuperior",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "ff",
      "fi",
      "fl",
      "ffi",
      "ffl",
      "parenleftinferior",
      "parenrightinferior",
      "hyphensuperior",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "centoldstyle",
      "figuredash",
      "hypheninferior",
      "onequarter",
      "onehalf",
      "threequarters",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "zerosuperior",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior"
    ];
    var $b6dd765146ad212a$var$LangSysTable = new $elh9A$restructure.Struct({
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
      reqFeatureIndex: $elh9A$restructure.uint16,
      featureCount: $elh9A$restructure.uint16,
      featureIndexes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "featureCount")
    });
    var $b6dd765146ad212a$var$LangSysRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      langSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$LangSysTable, {
        type: "parent"
      })
    });
    var $b6dd765146ad212a$var$Script = new $elh9A$restructure.Struct({
      defaultLangSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$LangSysTable),
      count: $elh9A$restructure.uint16,
      langSysRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LangSysRecord, "count")
    });
    var $b6dd765146ad212a$var$ScriptRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      script: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$Script, {
        type: "parent"
      })
    });
    var $b6dd765146ad212a$export$3e15fc05ce864229 = new $elh9A$restructure.Array($b6dd765146ad212a$var$ScriptRecord, $elh9A$restructure.uint16);
    var $b6dd765146ad212a$var$FeatureParams = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      nameID: $elh9A$restructure.uint16
    });
    var $b6dd765146ad212a$export$6e91cf7616333d5 = new $elh9A$restructure.Struct({
      featureParams: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$FeatureParams),
      lookupCount: $elh9A$restructure.uint16,
      lookupListIndexes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "lookupCount")
    });
    var $b6dd765146ad212a$var$FeatureRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      feature: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$6e91cf7616333d5, {
        type: "parent"
      })
    });
    var $b6dd765146ad212a$export$aa18130def4b6cb4 = new $elh9A$restructure.Array($b6dd765146ad212a$var$FeatureRecord, $elh9A$restructure.uint16);
    var $b6dd765146ad212a$var$LookupFlags = new $elh9A$restructure.Struct({
      markAttachmentType: $elh9A$restructure.uint8,
      flags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
        "rightToLeft",
        "ignoreBaseGlyphs",
        "ignoreLigatures",
        "ignoreMarks",
        "useMarkFilteringSet"
      ])
    });
    function $b6dd765146ad212a$export$df0008c6ff2da22a(SubTable) {
      let Lookup = new $elh9A$restructure.Struct({
        lookupType: $elh9A$restructure.uint16,
        flags: $b6dd765146ad212a$var$LookupFlags,
        subTableCount: $elh9A$restructure.uint16,
        subTables: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, SubTable), "subTableCount"),
        markFilteringSet: new $elh9A$restructure.Optional($elh9A$restructure.uint16, (t2) => t2.flags.flags.useMarkFilteringSet)
      });
      return new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, Lookup), $elh9A$restructure.uint16);
    }
    var $b6dd765146ad212a$var$RangeRecord = new $elh9A$restructure.Struct({
      start: $elh9A$restructure.uint16,
      end: $elh9A$restructure.uint16,
      startCoverageIndex: $elh9A$restructure.uint16
    });
    var $b6dd765146ad212a$export$17608c3f81a6111 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        glyphCount: $elh9A$restructure.uint16,
        glyphs: new $elh9A$restructure.Array($elh9A$restructure.uint16, "glyphCount")
      },
      2: {
        rangeCount: $elh9A$restructure.uint16,
        rangeRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$RangeRecord, "rangeCount")
      }
    });
    var $b6dd765146ad212a$var$ClassRangeRecord = new $elh9A$restructure.Struct({
      start: $elh9A$restructure.uint16,
      end: $elh9A$restructure.uint16,
      class: $elh9A$restructure.uint16
    });
    var $b6dd765146ad212a$export$843d551fbbafef71 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        startGlyph: $elh9A$restructure.uint16,
        glyphCount: $elh9A$restructure.uint16,
        classValueArray: new $elh9A$restructure.Array($elh9A$restructure.uint16, "glyphCount")
      },
      2: {
        classRangeCount: $elh9A$restructure.uint16,
        classRangeRecord: new $elh9A$restructure.Array($b6dd765146ad212a$var$ClassRangeRecord, "classRangeCount")
      }
    });
    var $b6dd765146ad212a$export$8215d14a63d9fb10 = new $elh9A$restructure.Struct({
      a: $elh9A$restructure.uint16,
      b: $elh9A$restructure.uint16,
      deltaFormat: $elh9A$restructure.uint16
    });
    var $b6dd765146ad212a$var$LookupRecord = new $elh9A$restructure.Struct({
      sequenceIndex: $elh9A$restructure.uint16,
      lookupListIndex: $elh9A$restructure.uint16
    });
    var $b6dd765146ad212a$var$Rule = new $elh9A$restructure.Struct({
      glyphCount: $elh9A$restructure.uint16,
      lookupCount: $elh9A$restructure.uint16,
      input: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.glyphCount - 1),
      lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
    });
    var $b6dd765146ad212a$var$RuleSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$Rule), $elh9A$restructure.uint16);
    var $b6dd765146ad212a$var$ClassRule = new $elh9A$restructure.Struct({
      glyphCount: $elh9A$restructure.uint16,
      lookupCount: $elh9A$restructure.uint16,
      classes: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.glyphCount - 1),
      lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
    });
    var $b6dd765146ad212a$var$ClassSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ClassRule), $elh9A$restructure.uint16);
    var $b6dd765146ad212a$export$841858b892ce1f4c = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        ruleSetCount: $elh9A$restructure.uint16,
        ruleSets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$RuleSet), "ruleSetCount")
      },
      2: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        classDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        classSetCnt: $elh9A$restructure.uint16,
        classSet: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ClassSet), "classSetCnt")
      },
      3: {
        glyphCount: $elh9A$restructure.uint16,
        lookupCount: $elh9A$restructure.uint16,
        coverages: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "glyphCount"),
        lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
      }
    });
    var $b6dd765146ad212a$var$ChainRule = new $elh9A$restructure.Struct({
      backtrackGlyphCount: $elh9A$restructure.uint16,
      backtrack: new $elh9A$restructure.Array($elh9A$restructure.uint16, "backtrackGlyphCount"),
      inputGlyphCount: $elh9A$restructure.uint16,
      input: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.inputGlyphCount - 1),
      lookaheadGlyphCount: $elh9A$restructure.uint16,
      lookahead: new $elh9A$restructure.Array($elh9A$restructure.uint16, "lookaheadGlyphCount"),
      lookupCount: $elh9A$restructure.uint16,
      lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
    });
    var $b6dd765146ad212a$var$ChainRuleSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ChainRule), $elh9A$restructure.uint16);
    var $b6dd765146ad212a$export$5e6d09e6861162f6 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        chainCount: $elh9A$restructure.uint16,
        chainRuleSets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ChainRuleSet), "chainCount")
      },
      2: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        backtrackClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        inputClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        lookaheadClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        chainCount: $elh9A$restructure.uint16,
        chainClassSet: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ChainRuleSet), "chainCount")
      },
      3: {
        backtrackGlyphCount: $elh9A$restructure.uint16,
        backtrackCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "backtrackGlyphCount"),
        inputGlyphCount: $elh9A$restructure.uint16,
        inputCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "inputGlyphCount"),
        lookaheadGlyphCount: $elh9A$restructure.uint16,
        lookaheadCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "lookaheadGlyphCount"),
        lookupCount: $elh9A$restructure.uint16,
        lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
      }
    });
    var $2e4adcda047b3383$var$F2DOT14 = new $elh9A$restructure.Fixed(16, "BE", 14);
    var $2e4adcda047b3383$var$RegionAxisCoordinates = new $elh9A$restructure.Struct({
      startCoord: $2e4adcda047b3383$var$F2DOT14,
      peakCoord: $2e4adcda047b3383$var$F2DOT14,
      endCoord: $2e4adcda047b3383$var$F2DOT14
    });
    var $2e4adcda047b3383$var$VariationRegionList = new $elh9A$restructure.Struct({
      axisCount: $elh9A$restructure.uint16,
      regionCount: $elh9A$restructure.uint16,
      variationRegions: new $elh9A$restructure.Array(new $elh9A$restructure.Array($2e4adcda047b3383$var$RegionAxisCoordinates, "axisCount"), "regionCount")
    });
    var $2e4adcda047b3383$var$DeltaSet = new $elh9A$restructure.Struct({
      shortDeltas: new $elh9A$restructure.Array($elh9A$restructure.int16, (t2) => t2.parent.shortDeltaCount),
      regionDeltas: new $elh9A$restructure.Array($elh9A$restructure.int8, (t2) => t2.parent.regionIndexCount - t2.parent.shortDeltaCount),
      deltas: (t2) => t2.shortDeltas.concat(t2.regionDeltas)
    });
    var $2e4adcda047b3383$var$ItemVariationData = new $elh9A$restructure.Struct({
      itemCount: $elh9A$restructure.uint16,
      shortDeltaCount: $elh9A$restructure.uint16,
      regionIndexCount: $elh9A$restructure.uint16,
      regionIndexes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "regionIndexCount"),
      deltaSets: new $elh9A$restructure.Array($2e4adcda047b3383$var$DeltaSet, "itemCount")
    });
    var $2e4adcda047b3383$export$fe1b122a2710f241 = new $elh9A$restructure.Struct({
      format: $elh9A$restructure.uint16,
      variationRegionList: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$VariationRegionList),
      variationDataCount: $elh9A$restructure.uint16,
      itemVariationData: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$ItemVariationData), "variationDataCount")
    });
    var $2e4adcda047b3383$var$ConditionTable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        axisIndex: $elh9A$restructure.uint16,
        axisIndex: $elh9A$restructure.uint16,
        filterRangeMinValue: $2e4adcda047b3383$var$F2DOT14,
        filterRangeMaxValue: $2e4adcda047b3383$var$F2DOT14
      }
    });
    var $2e4adcda047b3383$var$ConditionSet = new $elh9A$restructure.Struct({
      conditionCount: $elh9A$restructure.uint16,
      conditionTable: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$ConditionTable), "conditionCount")
    });
    var $2e4adcda047b3383$var$FeatureTableSubstitutionRecord = new $elh9A$restructure.Struct({
      featureIndex: $elh9A$restructure.uint16,
      alternateFeatureTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $b6dd765146ad212a$export$6e91cf7616333d5), {
        type: "parent"
      })
    });
    var $2e4adcda047b3383$var$FeatureTableSubstitution = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.fixed32,
      substitutionCount: $elh9A$restructure.uint16,
      substitutions: new $elh9A$restructure.Array($2e4adcda047b3383$var$FeatureTableSubstitutionRecord, "substitutionCount")
    });
    var $2e4adcda047b3383$var$FeatureVariationRecord = new $elh9A$restructure.Struct({
      conditionSet: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$ConditionSet, {
        type: "parent"
      }),
      featureTableSubstitution: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$FeatureTableSubstitution, {
        type: "parent"
      })
    });
    var $2e4adcda047b3383$export$441b70b7971dd419 = new $elh9A$restructure.Struct({
      majorVersion: $elh9A$restructure.uint16,
      minorVersion: $elh9A$restructure.uint16,
      featureVariationRecordCount: $elh9A$restructure.uint32,
      featureVariationRecords: new $elh9A$restructure.Array($2e4adcda047b3383$var$FeatureVariationRecord, "featureVariationRecordCount")
    });
    var $5b547cf9e5da519b$var$PredefinedOp = class {
      decode(stream, parent, operands) {
        if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];
        return this.type.decode(stream, parent, operands);
      }
      size(value, ctx) {
        return this.type.size(value, ctx);
      }
      encode(stream, value, ctx) {
        let index = this.predefinedOps.indexOf(value);
        if (index !== -1) return index;
        return this.type.encode(stream, value, ctx);
      }
      constructor(predefinedOps, type) {
        this.predefinedOps = predefinedOps;
        this.type = type;
      }
    };
    var $5b547cf9e5da519b$var$CFFEncodingVersion = class extends $elh9A$restructure.Number {
      decode(stream) {
        return $elh9A$restructure.uint8.decode(stream) & 127;
      }
      constructor() {
        super("UInt8");
      }
    };
    var $5b547cf9e5da519b$var$Range1 = new $elh9A$restructure.Struct({
      first: $elh9A$restructure.uint16,
      nLeft: $elh9A$restructure.uint8
    });
    var $5b547cf9e5da519b$var$Range2 = new $elh9A$restructure.Struct({
      first: $elh9A$restructure.uint16,
      nLeft: $elh9A$restructure.uint16
    });
    var $5b547cf9e5da519b$var$CFFCustomEncoding = new $elh9A$restructure.VersionedStruct(new $5b547cf9e5da519b$var$CFFEncodingVersion(), {
      0: {
        nCodes: $elh9A$restructure.uint8,
        codes: new $elh9A$restructure.Array($elh9A$restructure.uint8, "nCodes")
      },
      1: {
        nRanges: $elh9A$restructure.uint8,
        ranges: new $elh9A$restructure.Array($5b547cf9e5da519b$var$Range1, "nRanges")
      }
    });
    var $5b547cf9e5da519b$var$CFFEncoding = new $5b547cf9e5da519b$var$PredefinedOp([
      (0, $c4ffe47cba1d7f36$export$dee0027060fa13bd),
      (0, $c4ffe47cba1d7f36$export$4f58f497e14a53c3)
    ], new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$CFFCustomEncoding, {
      lazy: true
    }));
    var $5b547cf9e5da519b$var$RangeArray = class extends $elh9A$restructure.Array {
      decode(stream, parent) {
        let length = (0, $elh9A$restructure.resolveLength)(this.length, stream, parent);
        let count = 0;
        let res = [];
        while (count < length) {
          let range = this.type.decode(stream, parent);
          range.offset = count;
          count += range.nLeft + 1;
          res.push(range);
        }
        return res;
      }
    };
    var $5b547cf9e5da519b$var$CFFCustomCharset = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint8, {
      0: {
        glyphs: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.parent.CharStrings.length - 1)
      },
      1: {
        ranges: new $5b547cf9e5da519b$var$RangeArray($5b547cf9e5da519b$var$Range1, (t2) => t2.parent.CharStrings.length - 1)
      },
      2: {
        ranges: new $5b547cf9e5da519b$var$RangeArray($5b547cf9e5da519b$var$Range2, (t2) => t2.parent.CharStrings.length - 1)
      }
    });
    var $5b547cf9e5da519b$var$CFFCharset = new $5b547cf9e5da519b$var$PredefinedOp([
      (0, $1e7c7c16984e4427$export$c33b50336c234f16),
      (0, $1e7c7c16984e4427$export$3ed0f9e1fee8d489),
      (0, $1e7c7c16984e4427$export$dc28be11139d4120)
    ], new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$CFFCustomCharset, {
      lazy: true
    }));
    var $5b547cf9e5da519b$var$FDRange3 = new $elh9A$restructure.Struct({
      first: $elh9A$restructure.uint16,
      fd: $elh9A$restructure.uint8
    });
    var $5b547cf9e5da519b$var$FDRange4 = new $elh9A$restructure.Struct({
      first: $elh9A$restructure.uint32,
      fd: $elh9A$restructure.uint16
    });
    var $5b547cf9e5da519b$var$FDSelect = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint8, {
      0: {
        fds: new $elh9A$restructure.Array($elh9A$restructure.uint8, (t2) => t2.parent.CharStrings.length)
      },
      3: {
        nRanges: $elh9A$restructure.uint16,
        ranges: new $elh9A$restructure.Array($5b547cf9e5da519b$var$FDRange3, "nRanges"),
        sentinel: $elh9A$restructure.uint16
      },
      4: {
        nRanges: $elh9A$restructure.uint32,
        ranges: new $elh9A$restructure.Array($5b547cf9e5da519b$var$FDRange4, "nRanges"),
        sentinel: $elh9A$restructure.uint32
      }
    });
    var $5b547cf9e5da519b$var$ptr = new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)((0, $15a0cbb3d09cf7ee$export$2e2bcd8739ae039));
    var $5b547cf9e5da519b$var$CFFPrivateOp = class {
      decode(stream, parent, operands) {
        parent.length = operands[0];
        return $5b547cf9e5da519b$var$ptr.decode(stream, parent, [
          operands[1]
        ]);
      }
      size(dict, ctx) {
        return [
          (0, $15a0cbb3d09cf7ee$export$2e2bcd8739ae039).size(dict, ctx, false),
          $5b547cf9e5da519b$var$ptr.size(dict, ctx)[0]
        ];
      }
      encode(stream, dict, ctx) {
        return [
          (0, $15a0cbb3d09cf7ee$export$2e2bcd8739ae039).size(dict, ctx, false),
          $5b547cf9e5da519b$var$ptr.encode(stream, dict, ctx)[0]
        ];
      }
    };
    var $5b547cf9e5da519b$var$FontDict = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
      // key       name                   type(s)                                 default
      [
        18,
        "Private",
        new $5b547cf9e5da519b$var$CFFPrivateOp(),
        null
      ],
      [
        [
          12,
          38
        ],
        "FontName",
        "sid",
        null
      ],
      [
        [
          12,
          7
        ],
        "FontMatrix",
        "array",
        [
          1e-3,
          0,
          0,
          1e-3,
          0,
          0
        ]
      ],
      [
        [
          12,
          5
        ],
        "PaintType",
        "number",
        0
      ]
    ]);
    var $5b547cf9e5da519b$var$CFFTopDict = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
      // key       name                   type(s)                                 default
      [
        [
          12,
          30
        ],
        "ROS",
        [
          "sid",
          "sid",
          "number"
        ],
        null
      ],
      [
        0,
        "version",
        "sid",
        null
      ],
      [
        1,
        "Notice",
        "sid",
        null
      ],
      [
        [
          12,
          0
        ],
        "Copyright",
        "sid",
        null
      ],
      [
        2,
        "FullName",
        "sid",
        null
      ],
      [
        3,
        "FamilyName",
        "sid",
        null
      ],
      [
        4,
        "Weight",
        "sid",
        null
      ],
      [
        [
          12,
          1
        ],
        "isFixedPitch",
        "boolean",
        false
      ],
      [
        [
          12,
          2
        ],
        "ItalicAngle",
        "number",
        0
      ],
      [
        [
          12,
          3
        ],
        "UnderlinePosition",
        "number",
        -100
      ],
      [
        [
          12,
          4
        ],
        "UnderlineThickness",
        "number",
        50
      ],
      [
        [
          12,
          5
        ],
        "PaintType",
        "number",
        0
      ],
      [
        [
          12,
          6
        ],
        "CharstringType",
        "number",
        2
      ],
      [
        [
          12,
          7
        ],
        "FontMatrix",
        "array",
        [
          1e-3,
          0,
          0,
          1e-3,
          0,
          0
        ]
      ],
      [
        13,
        "UniqueID",
        "number",
        null
      ],
      [
        5,
        "FontBBox",
        "array",
        [
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          12,
          8
        ],
        "StrokeWidth",
        "number",
        0
      ],
      [
        14,
        "XUID",
        "array",
        null
      ],
      [
        15,
        "charset",
        $5b547cf9e5da519b$var$CFFCharset,
        (0, $1e7c7c16984e4427$export$c33b50336c234f16)
      ],
      [
        16,
        "Encoding",
        $5b547cf9e5da519b$var$CFFEncoding,
        (0, $c4ffe47cba1d7f36$export$dee0027060fa13bd)
      ],
      [
        17,
        "CharStrings",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)()),
        null
      ],
      [
        18,
        "Private",
        new $5b547cf9e5da519b$var$CFFPrivateOp(),
        null
      ],
      [
        [
          12,
          20
        ],
        "SyntheticBase",
        "number",
        null
      ],
      [
        [
          12,
          21
        ],
        "PostScript",
        "sid",
        null
      ],
      [
        [
          12,
          22
        ],
        "BaseFontName",
        "sid",
        null
      ],
      [
        [
          12,
          23
        ],
        "BaseFontBlend",
        "delta",
        null
      ],
      // CID font specific
      [
        [
          12,
          31
        ],
        "CIDFontVersion",
        "number",
        0
      ],
      [
        [
          12,
          32
        ],
        "CIDFontRevision",
        "number",
        0
      ],
      [
        [
          12,
          33
        ],
        "CIDFontType",
        "number",
        0
      ],
      [
        [
          12,
          34
        ],
        "CIDCount",
        "number",
        8720
      ],
      [
        [
          12,
          35
        ],
        "UIDBase",
        "number",
        null
      ],
      [
        [
          12,
          37
        ],
        "FDSelect",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FDSelect),
        null
      ],
      [
        [
          12,
          36
        ],
        "FDArray",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FontDict)),
        null
      ],
      [
        [
          12,
          38
        ],
        "FontName",
        "sid",
        null
      ]
    ]);
    var $5b547cf9e5da519b$var$VariationStore = new $elh9A$restructure.Struct({
      length: $elh9A$restructure.uint16,
      itemVariationStore: (0, $2e4adcda047b3383$export$fe1b122a2710f241)
    });
    var $5b547cf9e5da519b$var$CFF2TopDict = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
      [
        [
          12,
          7
        ],
        "FontMatrix",
        "array",
        [
          1e-3,
          0,
          0,
          1e-3,
          0,
          0
        ]
      ],
      [
        17,
        "CharStrings",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)()),
        null
      ],
      [
        [
          12,
          37
        ],
        "FDSelect",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FDSelect),
        null
      ],
      [
        [
          12,
          36
        ],
        "FDArray",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FontDict)),
        null
      ],
      [
        24,
        "vstore",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$VariationStore),
        null
      ],
      [
        25,
        "maxstack",
        "number",
        193
      ]
    ]);
    var $5b547cf9e5da519b$var$CFFTop = new $elh9A$restructure.VersionedStruct($elh9A$restructure.fixed16, {
      1: {
        hdrSize: $elh9A$restructure.uint8,
        offSize: $elh9A$restructure.uint8,
        nameIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)(new $elh9A$restructure.String("length")),
        topDictIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$CFFTopDict),
        stringIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)(new $elh9A$restructure.String("length")),
        globalSubrIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)()
      },
      2: {
        hdrSize: $elh9A$restructure.uint8,
        length: $elh9A$restructure.uint16,
        topDict: $5b547cf9e5da519b$var$CFF2TopDict,
        globalSubrIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)()
      }
    });
    var $5b547cf9e5da519b$export$2e2bcd8739ae039 = $5b547cf9e5da519b$var$CFFTop;
    var $f717432b360040c7$var$CFFFont = class _$f717432b360040c7$var$CFFFont {
      static decode(stream) {
        return new _$f717432b360040c7$var$CFFFont(stream);
      }
      decode() {
        let start = this.stream.pos;
        let top = (0, $5b547cf9e5da519b$export$2e2bcd8739ae039).decode(this.stream);
        for (let key in top) {
          let val = top[key];
          this[key] = val;
        }
        if (this.version < 2) {
          if (this.topDictIndex.length !== 1) throw new Error("Only a single font is allowed in CFF");
          this.topDict = this.topDictIndex[0];
        }
        this.isCIDFont = this.topDict.ROS != null;
        return this;
      }
      string(sid) {
        if (this.version >= 2) return null;
        if (sid < (0, $860d3574d7fa3a51$export$2e2bcd8739ae039).length) return (0, $860d3574d7fa3a51$export$2e2bcd8739ae039)[sid];
        return this.stringIndex[sid - (0, $860d3574d7fa3a51$export$2e2bcd8739ae039).length];
      }
      get postscriptName() {
        if (this.version < 2) return this.nameIndex[0];
        return null;
      }
      get fullName() {
        return this.string(this.topDict.FullName);
      }
      get familyName() {
        return this.string(this.topDict.FamilyName);
      }
      getCharString(glyph) {
        this.stream.pos = this.topDict.CharStrings[glyph].offset;
        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
      }
      getGlyphName(gid) {
        if (this.version >= 2) return null;
        if (this.isCIDFont) return null;
        let { charset } = this.topDict;
        if (Array.isArray(charset)) return charset[gid];
        if (gid === 0) return ".notdef";
        gid -= 1;
        switch (charset.version) {
          case 0:
            return this.string(charset.glyphs[gid]);
          case 1:
          case 2:
            for (let i2 = 0; i2 < charset.ranges.length; i2++) {
              let range = charset.ranges[i2];
              if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));
            }
            break;
        }
        return null;
      }
      fdForGlyph(gid) {
        if (!this.topDict.FDSelect) return null;
        switch (this.topDict.FDSelect.version) {
          case 0:
            return this.topDict.FDSelect.fds[gid];
          case 3:
          case 4:
            let { ranges } = this.topDict.FDSelect;
            let low = 0;
            let high = ranges.length - 1;
            while (low <= high) {
              let mid = low + high >> 1;
              if (gid < ranges[mid].first) high = mid - 1;
              else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;
              else return ranges[mid].fd;
            }
          default:
            throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
        }
      }
      privateDictForGlyph(gid) {
        if (this.topDict.FDSelect) {
          let fd = this.fdForGlyph(gid);
          if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;
          return null;
        }
        if (this.version < 2) return this.topDict.Private;
        return this.topDict.FDArray[0].Private;
      }
      constructor(stream) {
        this.stream = stream;
        this.decode();
      }
    };
    var $f717432b360040c7$export$2e2bcd8739ae039 = $f717432b360040c7$var$CFFFont;
    var $8cb7ae73ed7aa7d8$var$VerticalOrigin = new $elh9A$restructure.Struct({
      glyphIndex: $elh9A$restructure.uint16,
      vertOriginY: $elh9A$restructure.int16
    });
    var $8cb7ae73ed7aa7d8$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      majorVersion: $elh9A$restructure.uint16,
      minorVersion: $elh9A$restructure.uint16,
      defaultVertOriginY: $elh9A$restructure.int16,
      numVertOriginYMetrics: $elh9A$restructure.uint16,
      metrics: new $elh9A$restructure.Array($8cb7ae73ed7aa7d8$var$VerticalOrigin, "numVertOriginYMetrics")
    });
    var $20e0c7bbecb76d75$export$16b227cb15d716a0 = new $elh9A$restructure.Struct({
      height: $elh9A$restructure.uint8,
      width: $elh9A$restructure.uint8,
      horiBearingX: $elh9A$restructure.int8,
      horiBearingY: $elh9A$restructure.int8,
      horiAdvance: $elh9A$restructure.uint8,
      vertBearingX: $elh9A$restructure.int8,
      vertBearingY: $elh9A$restructure.int8,
      vertAdvance: $elh9A$restructure.uint8
    });
    var $20e0c7bbecb76d75$export$62c53e75f69bfe12 = new $elh9A$restructure.Struct({
      height: $elh9A$restructure.uint8,
      width: $elh9A$restructure.uint8,
      bearingX: $elh9A$restructure.int8,
      bearingY: $elh9A$restructure.int8,
      advance: $elh9A$restructure.uint8
    });
    var $20e0c7bbecb76d75$var$EBDTComponent = new $elh9A$restructure.Struct({
      glyph: $elh9A$restructure.uint16,
      xOffset: $elh9A$restructure.int8,
      yOffset: $elh9A$restructure.int8
    });
    var $20e0c7bbecb76d75$var$ByteAligned = class {
    };
    var $20e0c7bbecb76d75$var$BitAligned = class {
    };
    var $20e0c7bbecb76d75$export$f1f5ddeb20d14f = new $elh9A$restructure.VersionedStruct("version", {
      1: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        data: $20e0c7bbecb76d75$var$ByteAligned
      },
      2: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        data: $20e0c7bbecb76d75$var$BitAligned
      },
      // format 3 is deprecated
      // format 4 is not supported by Microsoft
      5: {
        data: $20e0c7bbecb76d75$var$BitAligned
      },
      6: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        data: $20e0c7bbecb76d75$var$ByteAligned
      },
      7: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        data: $20e0c7bbecb76d75$var$BitAligned
      },
      8: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        pad: new $elh9A$restructure.Reserved($elh9A$restructure.uint8),
        numComponents: $elh9A$restructure.uint16,
        components: new $elh9A$restructure.Array($20e0c7bbecb76d75$var$EBDTComponent, "numComponents")
      },
      9: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        pad: new $elh9A$restructure.Reserved($elh9A$restructure.uint8),
        numComponents: $elh9A$restructure.uint16,
        components: new $elh9A$restructure.Array($20e0c7bbecb76d75$var$EBDTComponent, "numComponents")
      },
      17: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        dataLen: $elh9A$restructure.uint32,
        data: new $elh9A$restructure.Buffer("dataLen")
      },
      18: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        dataLen: $elh9A$restructure.uint32,
        data: new $elh9A$restructure.Buffer("dataLen")
      },
      19: {
        dataLen: $elh9A$restructure.uint32,
        data: new $elh9A$restructure.Buffer("dataLen")
      }
    });
    var $035bb95c0cdb1f6d$var$SBitLineMetrics = new $elh9A$restructure.Struct({
      ascender: $elh9A$restructure.int8,
      descender: $elh9A$restructure.int8,
      widthMax: $elh9A$restructure.uint8,
      caretSlopeNumerator: $elh9A$restructure.int8,
      caretSlopeDenominator: $elh9A$restructure.int8,
      caretOffset: $elh9A$restructure.int8,
      minOriginSB: $elh9A$restructure.int8,
      minAdvanceSB: $elh9A$restructure.int8,
      maxBeforeBL: $elh9A$restructure.int8,
      minAfterBL: $elh9A$restructure.int8,
      pad: new $elh9A$restructure.Reserved($elh9A$restructure.int8, 2)
    });
    var $035bb95c0cdb1f6d$var$CodeOffsetPair = new $elh9A$restructure.Struct({
      glyphCode: $elh9A$restructure.uint16,
      offset: $elh9A$restructure.uint16
    });
    var $035bb95c0cdb1f6d$var$IndexSubtable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      header: {
        imageFormat: $elh9A$restructure.uint16,
        imageDataOffset: $elh9A$restructure.uint32
      },
      1: {
        offsetArray: new $elh9A$restructure.Array($elh9A$restructure.uint32, (t2) => t2.parent.lastGlyphIndex - t2.parent.firstGlyphIndex + 1)
      },
      2: {
        imageSize: $elh9A$restructure.uint32,
        bigMetrics: (0, $20e0c7bbecb76d75$export$16b227cb15d716a0)
      },
      3: {
        offsetArray: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.parent.lastGlyphIndex - t2.parent.firstGlyphIndex + 1)
      },
      4: {
        numGlyphs: $elh9A$restructure.uint32,
        glyphArray: new $elh9A$restructure.Array($035bb95c0cdb1f6d$var$CodeOffsetPair, (t2) => t2.numGlyphs + 1)
      },
      5: {
        imageSize: $elh9A$restructure.uint32,
        bigMetrics: (0, $20e0c7bbecb76d75$export$16b227cb15d716a0),
        numGlyphs: $elh9A$restructure.uint32,
        glyphCodeArray: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numGlyphs")
      }
    });
    var $035bb95c0cdb1f6d$var$IndexSubtableArray = new $elh9A$restructure.Struct({
      firstGlyphIndex: $elh9A$restructure.uint16,
      lastGlyphIndex: $elh9A$restructure.uint16,
      subtable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $035bb95c0cdb1f6d$var$IndexSubtable)
    });
    var $035bb95c0cdb1f6d$var$BitmapSizeTable = new $elh9A$restructure.Struct({
      indexSubTableArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($035bb95c0cdb1f6d$var$IndexSubtableArray, 1), {
        type: "parent"
      }),
      indexTablesSize: $elh9A$restructure.uint32,
      numberOfIndexSubTables: $elh9A$restructure.uint32,
      colorRef: $elh9A$restructure.uint32,
      hori: $035bb95c0cdb1f6d$var$SBitLineMetrics,
      vert: $035bb95c0cdb1f6d$var$SBitLineMetrics,
      startGlyphIndex: $elh9A$restructure.uint16,
      endGlyphIndex: $elh9A$restructure.uint16,
      ppemX: $elh9A$restructure.uint8,
      ppemY: $elh9A$restructure.uint8,
      bitDepth: $elh9A$restructure.uint8,
      flags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
        "horizontal",
        "vertical"
      ])
    });
    var $035bb95c0cdb1f6d$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint32,
      numSizes: $elh9A$restructure.uint32,
      sizes: new $elh9A$restructure.Array($035bb95c0cdb1f6d$var$BitmapSizeTable, "numSizes")
    });
    var $73d13900b55a3c0c$var$ImageTable = new $elh9A$restructure.Struct({
      ppem: $elh9A$restructure.uint16,
      resolution: $elh9A$restructure.uint16,
      imageOffsets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, "void"), (t2) => t2.parent.parent.maxp.numGlyphs + 1)
    });
    var $73d13900b55a3c0c$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      flags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
        "renderOutlines"
      ]),
      numImgTables: $elh9A$restructure.uint32,
      imageTables: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $73d13900b55a3c0c$var$ImageTable), "numImgTables")
    });
    var $97f6b8be3a347a8f$var$LayerRecord = new $elh9A$restructure.Struct({
      gid: $elh9A$restructure.uint16,
      paletteIndex: $elh9A$restructure.uint16
      // Index value to use in the appropriate palette. This value must
    });
    var $97f6b8be3a347a8f$var$BaseGlyphRecord = new $elh9A$restructure.Struct({
      gid: $elh9A$restructure.uint16,
      // and is not rendered for color.
      firstLayerIndex: $elh9A$restructure.uint16,
      // There will be numLayers consecutive entries for this base glyph.
      numLayers: $elh9A$restructure.uint16
    });
    var $97f6b8be3a347a8f$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      numBaseGlyphRecords: $elh9A$restructure.uint16,
      baseGlyphRecord: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($97f6b8be3a347a8f$var$BaseGlyphRecord, "numBaseGlyphRecords")),
      layerRecords: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($97f6b8be3a347a8f$var$LayerRecord, "numLayerRecords"), {
        lazy: true
      }),
      numLayerRecords: $elh9A$restructure.uint16
    });
    var $16ca60ecbdee30ea$var$ColorRecord = new $elh9A$restructure.Struct({
      blue: $elh9A$restructure.uint8,
      green: $elh9A$restructure.uint8,
      red: $elh9A$restructure.uint8,
      alpha: $elh9A$restructure.uint8
    });
    var $16ca60ecbdee30ea$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      header: {
        numPaletteEntries: $elh9A$restructure.uint16,
        numPalettes: $elh9A$restructure.uint16,
        numColorRecords: $elh9A$restructure.uint16,
        colorRecords: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($16ca60ecbdee30ea$var$ColorRecord, "numColorRecords")),
        colorRecordIndices: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numPalettes")
      },
      0: {},
      1: {
        offsetPaletteTypeArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($elh9A$restructure.uint32, "numPalettes")),
        offsetPaletteLabelArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($elh9A$restructure.uint16, "numPalettes")),
        offsetPaletteEntryLabelArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($elh9A$restructure.uint16, "numPaletteEntries"))
      }
    });
    var $7327e41706f9d5c7$var$BaseCoord = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        coordinate: $elh9A$restructure.int16
        // X or Y value, in design units
      },
      2: {
        coordinate: $elh9A$restructure.int16,
        referenceGlyph: $elh9A$restructure.uint16,
        baseCoordPoint: $elh9A$restructure.uint16
        // Index of contour point on the referenceGlyph
      },
      3: {
        coordinate: $elh9A$restructure.int16,
        deviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10))
        // Device table for X or Y value
      }
    });
    var $7327e41706f9d5c7$var$BaseValues = new $elh9A$restructure.Struct({
      defaultIndex: $elh9A$restructure.uint16,
      baseCoordCount: $elh9A$restructure.uint16,
      baseCoords: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord), "baseCoordCount")
    });
    var $7327e41706f9d5c7$var$FeatMinMaxRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      minCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord, {
        type: "parent"
      }),
      maxCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord, {
        type: "parent"
      })
      // May be NULL
    });
    var $7327e41706f9d5c7$var$MinMax = new $elh9A$restructure.Struct({
      minCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord),
      maxCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord),
      featMinMaxCount: $elh9A$restructure.uint16,
      featMinMaxRecords: new $elh9A$restructure.Array($7327e41706f9d5c7$var$FeatMinMaxRecord, "featMinMaxCount")
      // In alphabetical order
    });
    var $7327e41706f9d5c7$var$BaseLangSysRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      minMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$MinMax, {
        type: "parent"
      })
    });
    var $7327e41706f9d5c7$var$BaseScript = new $elh9A$restructure.Struct({
      baseValues: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseValues),
      defaultMinMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$MinMax),
      baseLangSysCount: $elh9A$restructure.uint16,
      baseLangSysRecords: new $elh9A$restructure.Array($7327e41706f9d5c7$var$BaseLangSysRecord, "baseLangSysCount")
      // in alphabetical order by BaseLangSysTag
    });
    var $7327e41706f9d5c7$var$BaseScriptRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      script: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseScript, {
        type: "parent"
      })
    });
    var $7327e41706f9d5c7$var$BaseScriptList = new $elh9A$restructure.Array($7327e41706f9d5c7$var$BaseScriptRecord, $elh9A$restructure.uint16);
    var $7327e41706f9d5c7$var$BaseTagList = new $elh9A$restructure.Array(new $elh9A$restructure.String(4), $elh9A$restructure.uint16);
    var $7327e41706f9d5c7$var$Axis = new $elh9A$restructure.Struct({
      baseTagList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseTagList),
      baseScriptList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseScriptList)
    });
    var $7327e41706f9d5c7$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
      header: {
        horizAxis: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$Axis),
        vertAxis: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$Axis)
        // May be NULL
      },
      65536: {},
      65537: {
        itemVariationStore: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$fe1b122a2710f241))
      }
    });
    var $7e48bbe9e5345664$var$AttachPoint = new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16);
    var $7e48bbe9e5345664$var$AttachList = new $elh9A$restructure.Struct({
      coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
      glyphCount: $elh9A$restructure.uint16,
      attachPoints: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$AttachPoint), "glyphCount")
    });
    var $7e48bbe9e5345664$var$CaretValue = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        coordinate: $elh9A$restructure.int16
      },
      2: {
        caretValuePoint: $elh9A$restructure.uint16
      },
      3: {
        coordinate: $elh9A$restructure.int16,
        deviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10))
      }
    });
    var $7e48bbe9e5345664$var$LigGlyph = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$CaretValue), $elh9A$restructure.uint16);
    var $7e48bbe9e5345664$var$LigCaretList = new $elh9A$restructure.Struct({
      coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
      ligGlyphCount: $elh9A$restructure.uint16,
      ligGlyphs: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$LigGlyph), "ligGlyphCount")
    });
    var $7e48bbe9e5345664$var$MarkGlyphSetsDef = new $elh9A$restructure.Struct({
      markSetTableFormat: $elh9A$restructure.uint16,
      markSetCount: $elh9A$restructure.uint16,
      coverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $b6dd765146ad212a$export$17608c3f81a6111)), "markSetCount")
    });
    var $7e48bbe9e5345664$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
      header: {
        glyphClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71)),
        attachList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$AttachList),
        ligCaretList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$LigCaretList),
        markAttachClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71))
      },
      65536: {},
      65538: {
        markGlyphSetsDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$MarkGlyphSetsDef)
      },
      65539: {
        markGlyphSetsDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$MarkGlyphSetsDef),
        itemVariationStore: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$fe1b122a2710f241))
      }
    });
    var $b687332511a4da75$var$ValueFormat = new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
      "xPlacement",
      "yPlacement",
      "xAdvance",
      "yAdvance",
      "xPlaDevice",
      "yPlaDevice",
      "xAdvDevice",
      "yAdvDevice"
    ]);
    var $b687332511a4da75$var$types = {
      xPlacement: $elh9A$restructure.int16,
      yPlacement: $elh9A$restructure.int16,
      xAdvance: $elh9A$restructure.int16,
      yAdvance: $elh9A$restructure.int16,
      xPlaDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      }),
      yPlaDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      }),
      xAdvDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      }),
      yAdvDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      })
    };
    var $b687332511a4da75$var$ValueRecord = class {
      buildStruct(parent) {
        let struct = parent;
        while (!struct[this.key] && struct.parent) struct = struct.parent;
        if (!struct[this.key]) return;
        let fields = {};
        fields.rel = () => struct._startOffset;
        let format = struct[this.key];
        for (let key in format) if (format[key]) fields[key] = $b687332511a4da75$var$types[key];
        return new $elh9A$restructure.Struct(fields);
      }
      size(val, ctx) {
        return this.buildStruct(ctx).size(val, ctx);
      }
      decode(stream, parent) {
        let res = this.buildStruct(parent).decode(stream, parent);
        delete res.rel;
        return res;
      }
      constructor(key = "valueFormat") {
        this.key = key;
      }
    };
    var $b687332511a4da75$var$PairValueRecord = new $elh9A$restructure.Struct({
      secondGlyph: $elh9A$restructure.uint16,
      value1: new $b687332511a4da75$var$ValueRecord("valueFormat1"),
      value2: new $b687332511a4da75$var$ValueRecord("valueFormat2")
    });
    var $b687332511a4da75$var$PairSet = new $elh9A$restructure.Array($b687332511a4da75$var$PairValueRecord, $elh9A$restructure.uint16);
    var $b687332511a4da75$var$Class2Record = new $elh9A$restructure.Struct({
      value1: new $b687332511a4da75$var$ValueRecord("valueFormat1"),
      value2: new $b687332511a4da75$var$ValueRecord("valueFormat2")
    });
    var $b687332511a4da75$var$Anchor = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      1: {
        xCoordinate: $elh9A$restructure.int16,
        yCoordinate: $elh9A$restructure.int16
      },
      2: {
        xCoordinate: $elh9A$restructure.int16,
        yCoordinate: $elh9A$restructure.int16,
        anchorPoint: $elh9A$restructure.uint16
      },
      3: {
        xCoordinate: $elh9A$restructure.int16,
        yCoordinate: $elh9A$restructure.int16,
        xDeviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10)),
        yDeviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10))
      }
    });
    var $b687332511a4da75$var$EntryExitRecord = new $elh9A$restructure.Struct({
      entryAnchor: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor, {
        type: "parent"
      }),
      exitAnchor: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor, {
        type: "parent"
      })
    });
    var $b687332511a4da75$var$MarkRecord = new $elh9A$restructure.Struct({
      class: $elh9A$restructure.uint16,
      markAnchor: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor, {
        type: "parent"
      })
    });
    var $b687332511a4da75$var$MarkArray = new $elh9A$restructure.Array($b687332511a4da75$var$MarkRecord, $elh9A$restructure.uint16);
    var $b687332511a4da75$var$BaseRecord = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor), (t2) => t2.parent.classCount);
    var $b687332511a4da75$var$BaseArray = new $elh9A$restructure.Array($b687332511a4da75$var$BaseRecord, $elh9A$restructure.uint16);
    var $b687332511a4da75$var$ComponentRecord = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor), (t2) => t2.parent.parent.classCount);
    var $b687332511a4da75$var$LigatureAttach = new $elh9A$restructure.Array($b687332511a4da75$var$ComponentRecord, $elh9A$restructure.uint16);
    var $b687332511a4da75$var$LigatureArray = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$LigatureAttach), $elh9A$restructure.uint16);
    var $b687332511a4da75$export$73a8cfb19cd43a0f = new $elh9A$restructure.VersionedStruct("lookupType", {
      1: new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        1: {
          coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
          valueFormat: $b687332511a4da75$var$ValueFormat,
          value: new $b687332511a4da75$var$ValueRecord()
        },
        2: {
          coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
          valueFormat: $b687332511a4da75$var$ValueFormat,
          valueCount: $elh9A$restructure.uint16,
          values: new $elh9A$restructure.LazyArray(new $b687332511a4da75$var$ValueRecord(), "valueCount")
        }
      }),
      2: new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        1: {
          coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
          valueFormat1: $b687332511a4da75$var$ValueFormat,
          valueFormat2: $b687332511a4da75$var$ValueFormat,
          pairSetCount: $elh9A$restructure.uint16,
          pairSets: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$PairSet), "pairSetCount")
        },
        2: {
          coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
          valueFormat1: $b687332511a4da75$var$ValueFormat,
          valueFormat2: $b687332511a4da75$var$ValueFormat,
          classDef1: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71)),
          classDef2: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71)),
          class1Count: $elh9A$restructure.uint16,
          class2Count: $elh9A$restructure.uint16,
          classRecords: new $elh9A$restructure.LazyArray(new $elh9A$restructure.LazyArray($b687332511a4da75$var$Class2Record, "class2Count"), "class1Count")
        }
      }),
      3: {
        format: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        entryExitCount: $elh9A$restructure.uint16,
        entryExitRecords: new $elh9A$restructure.Array($b687332511a4da75$var$EntryExitRecord, "entryExitCount")
      },
      4: {
        format: $elh9A$restructure.uint16,
        markCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        baseCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        classCount: $elh9A$restructure.uint16,
        markArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$MarkArray),
        baseArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$BaseArray)
      },
      5: {
        format: $elh9A$restructure.uint16,
        markCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        ligatureCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        classCount: $elh9A$restructure.uint16,
        markArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$MarkArray),
        ligatureArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$LigatureArray)
      },
      6: {
        format: $elh9A$restructure.uint16,
        mark1Coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        mark2Coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        classCount: $elh9A$restructure.uint16,
        mark1Array: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$MarkArray),
        mark2Array: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$BaseArray)
      },
      7: (0, $b6dd765146ad212a$export$841858b892ce1f4c),
      8: (0, $b6dd765146ad212a$export$5e6d09e6861162f6),
      9: {
        posFormat: $elh9A$restructure.uint16,
        lookupType: $elh9A$restructure.uint16,
        extension: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, null)
      }
    });
    $b687332511a4da75$export$73a8cfb19cd43a0f.versions[9].extension.type = $b687332511a4da75$export$73a8cfb19cd43a0f;
    var $b687332511a4da75$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
      header: {
        scriptList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$3e15fc05ce864229)),
        featureList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$aa18130def4b6cb4)),
        lookupList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)($b687332511a4da75$export$73a8cfb19cd43a0f))
      },
      65536: {},
      65537: {
        featureVariations: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$441b70b7971dd419))
      }
    });
    var $99ccad60b96f92fb$var$Sequence = new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16);
    var $99ccad60b96f92fb$var$AlternateSet = $99ccad60b96f92fb$var$Sequence;
    var $99ccad60b96f92fb$var$Ligature = new $elh9A$restructure.Struct({
      glyph: $elh9A$restructure.uint16,
      compCount: $elh9A$restructure.uint16,
      components: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.compCount - 1)
    });
    var $99ccad60b96f92fb$var$LigatureSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$Ligature), $elh9A$restructure.uint16);
    var $99ccad60b96f92fb$var$GSUBLookup = new $elh9A$restructure.VersionedStruct("lookupType", {
      1: new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        1: {
          coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
          deltaGlyphID: $elh9A$restructure.int16
        },
        2: {
          coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
          glyphCount: $elh9A$restructure.uint16,
          substitute: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "glyphCount")
        }
      }),
      2: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        count: $elh9A$restructure.uint16,
        sequences: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$Sequence), "count")
      },
      3: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        count: $elh9A$restructure.uint16,
        alternateSet: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$AlternateSet), "count")
      },
      4: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        count: $elh9A$restructure.uint16,
        ligatureSets: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$LigatureSet), "count")
      },
      5: (0, $b6dd765146ad212a$export$841858b892ce1f4c),
      6: (0, $b6dd765146ad212a$export$5e6d09e6861162f6),
      7: {
        substFormat: $elh9A$restructure.uint16,
        lookupType: $elh9A$restructure.uint16,
        extension: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, null)
      },
      8: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        backtrackCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)), "backtrackGlyphCount"),
        lookaheadGlyphCount: $elh9A$restructure.uint16,
        lookaheadCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)), "lookaheadGlyphCount"),
        glyphCount: $elh9A$restructure.uint16,
        substitutes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "glyphCount")
      }
    });
    $99ccad60b96f92fb$var$GSUBLookup.versions[7].extension.type = $99ccad60b96f92fb$var$GSUBLookup;
    var $99ccad60b96f92fb$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
      header: {
        scriptList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$3e15fc05ce864229)),
        featureList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$aa18130def4b6cb4)),
        lookupList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)($99ccad60b96f92fb$var$GSUBLookup))
      },
      65536: {},
      65537: {
        featureVariations: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$441b70b7971dd419))
      }
    });
    var $573d5042c76c4940$var$JstfGSUBModList = new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16);
    var $573d5042c76c4940$var$JstfPriority = new $elh9A$restructure.Struct({
      shrinkageEnableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      shrinkageDisableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      shrinkageEnableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      shrinkageDisableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      shrinkageJstfMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)((0, $b687332511a4da75$export$73a8cfb19cd43a0f))),
      extensionEnableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      extensionDisableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      extensionEnableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      extensionDisableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
      extensionJstfMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)((0, $b687332511a4da75$export$73a8cfb19cd43a0f)))
    });
    var $573d5042c76c4940$var$JstfLangSys = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfPriority), $elh9A$restructure.uint16);
    var $573d5042c76c4940$var$JstfLangSysRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      jstfLangSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfLangSys)
    });
    var $573d5042c76c4940$var$JstfScript = new $elh9A$restructure.Struct({
      extenderGlyphs: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16)),
      defaultLangSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfLangSys),
      langSysCount: $elh9A$restructure.uint16,
      langSysRecords: new $elh9A$restructure.Array($573d5042c76c4940$var$JstfLangSysRecord, "langSysCount")
    });
    var $573d5042c76c4940$var$JstfScriptRecord = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      script: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfScript, {
        type: "parent"
      })
    });
    var $573d5042c76c4940$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint32,
      scriptCount: $elh9A$restructure.uint16,
      scriptList: new $elh9A$restructure.Array($573d5042c76c4940$var$JstfScriptRecord, "scriptCount")
    });
    var $a5875b80d6087f61$var$VariableSizeNumber = class {
      decode(stream, parent) {
        switch (this.size(0, parent)) {
          case 1:
            return stream.readUInt8();
          case 2:
            return stream.readUInt16BE();
          case 3:
            return stream.readUInt24BE();
          case 4:
            return stream.readUInt32BE();
        }
      }
      size(val, parent) {
        return (0, $elh9A$restructure.resolveLength)(this._size, null, parent);
      }
      constructor(size) {
        this._size = size;
      }
    };
    var $a5875b80d6087f61$var$MapDataEntry = new $elh9A$restructure.Struct({
      entry: new $a5875b80d6087f61$var$VariableSizeNumber((t2) => ((t2.parent.entryFormat & 48) >> 4) + 1),
      outerIndex: (t2) => t2.entry >> (t2.parent.entryFormat & 15) + 1,
      innerIndex: (t2) => t2.entry & (1 << (t2.parent.entryFormat & 15) + 1) - 1
    });
    var $a5875b80d6087f61$var$DeltaSetIndexMap = new $elh9A$restructure.Struct({
      entryFormat: $elh9A$restructure.uint16,
      mapCount: $elh9A$restructure.uint16,
      mapData: new $elh9A$restructure.Array($a5875b80d6087f61$var$MapDataEntry, "mapCount")
    });
    var $a5875b80d6087f61$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      majorVersion: $elh9A$restructure.uint16,
      minorVersion: $elh9A$restructure.uint16,
      itemVariationStore: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$fe1b122a2710f241)),
      advanceWidthMapping: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $a5875b80d6087f61$var$DeltaSetIndexMap),
      LSBMapping: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $a5875b80d6087f61$var$DeltaSetIndexMap),
      RSBMapping: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $a5875b80d6087f61$var$DeltaSetIndexMap)
    });
    var $4423bc1ac09bbbd1$var$Signature = new $elh9A$restructure.Struct({
      format: $elh9A$restructure.uint32,
      length: $elh9A$restructure.uint32,
      offset: $elh9A$restructure.uint32
    });
    var $4423bc1ac09bbbd1$var$SignatureBlock = new $elh9A$restructure.Struct({
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16, 2),
      cbSignature: $elh9A$restructure.uint32,
      signature: new $elh9A$restructure.Buffer("cbSignature")
    });
    var $4423bc1ac09bbbd1$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      ulVersion: $elh9A$restructure.uint32,
      usNumSigs: $elh9A$restructure.uint16,
      usFlag: $elh9A$restructure.uint16,
      signatures: new $elh9A$restructure.Array($4423bc1ac09bbbd1$var$Signature, "usNumSigs"),
      signatureBlocks: new $elh9A$restructure.Array($4423bc1ac09bbbd1$var$SignatureBlock, "usNumSigs")
    });
    var $7b50e3f8d83263de$var$GaspRange = new $elh9A$restructure.Struct({
      rangeMaxPPEM: $elh9A$restructure.uint16,
      rangeGaspBehavior: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
        "grayscale",
        "gridfit",
        "symmetricSmoothing",
        "symmetricGridfit"
        // only in version 1, for ClearType
      ])
    });
    var $7b50e3f8d83263de$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      numRanges: $elh9A$restructure.uint16,
      gaspRanges: new $elh9A$restructure.Array($7b50e3f8d83263de$var$GaspRange, "numRanges")
      // Sorted by ppem
    });
    var $7bf92ec372cd2307$var$DeviceRecord = new $elh9A$restructure.Struct({
      pixelSize: $elh9A$restructure.uint8,
      maximumWidth: $elh9A$restructure.uint8,
      widths: new $elh9A$restructure.Array($elh9A$restructure.uint8, (t2) => t2.parent.parent.maxp.numGlyphs)
    });
    var $7bf92ec372cd2307$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      numRecords: $elh9A$restructure.int16,
      sizeDeviceRecord: $elh9A$restructure.int32,
      records: new $elh9A$restructure.Array($7bf92ec372cd2307$var$DeviceRecord, "numRecords")
    });
    var $a3f544bcf76542d1$var$KernPair = new $elh9A$restructure.Struct({
      left: $elh9A$restructure.uint16,
      right: $elh9A$restructure.uint16,
      value: $elh9A$restructure.int16
    });
    var $a3f544bcf76542d1$var$ClassTable = new $elh9A$restructure.Struct({
      firstGlyph: $elh9A$restructure.uint16,
      nGlyphs: $elh9A$restructure.uint16,
      offsets: new $elh9A$restructure.Array($elh9A$restructure.uint16, "nGlyphs"),
      max: (t2) => t2.offsets.length && Math.max.apply(Math, t2.offsets)
    });
    var $a3f544bcf76542d1$var$Kern2Array = new $elh9A$restructure.Struct({
      off: (t2) => t2._startOffset - t2.parent.parent._startOffset,
      len: (t2) => ((t2.parent.leftTable.max - t2.off) / t2.parent.rowWidth + 1) * (t2.parent.rowWidth / 2),
      values: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, "len")
    });
    var $a3f544bcf76542d1$var$KernSubtable = new $elh9A$restructure.VersionedStruct("format", {
      0: {
        nPairs: $elh9A$restructure.uint16,
        searchRange: $elh9A$restructure.uint16,
        entrySelector: $elh9A$restructure.uint16,
        rangeShift: $elh9A$restructure.uint16,
        pairs: new $elh9A$restructure.Array($a3f544bcf76542d1$var$KernPair, "nPairs")
      },
      2: {
        rowWidth: $elh9A$restructure.uint16,
        leftTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $a3f544bcf76542d1$var$ClassTable, {
          type: "parent"
        }),
        rightTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $a3f544bcf76542d1$var$ClassTable, {
          type: "parent"
        }),
        array: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $a3f544bcf76542d1$var$Kern2Array, {
          type: "parent"
        })
      },
      3: {
        glyphCount: $elh9A$restructure.uint16,
        kernValueCount: $elh9A$restructure.uint8,
        leftClassCount: $elh9A$restructure.uint8,
        rightClassCount: $elh9A$restructure.uint8,
        flags: $elh9A$restructure.uint8,
        kernValue: new $elh9A$restructure.Array($elh9A$restructure.int16, "kernValueCount"),
        leftClass: new $elh9A$restructure.Array($elh9A$restructure.uint8, "glyphCount"),
        rightClass: new $elh9A$restructure.Array($elh9A$restructure.uint8, "glyphCount"),
        kernIndex: new $elh9A$restructure.Array($elh9A$restructure.uint8, (t2) => t2.leftClassCount * t2.rightClassCount)
      }
    });
    var $a3f544bcf76542d1$var$KernTable = new $elh9A$restructure.VersionedStruct("version", {
      0: {
        subVersion: $elh9A$restructure.uint16,
        length: $elh9A$restructure.uint16,
        format: $elh9A$restructure.uint8,
        coverage: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
          "horizontal",
          "minimum",
          "crossStream",
          "override"
          // If set to 1 the value in this table replaces the accumulated value
        ]),
        subtable: $a3f544bcf76542d1$var$KernSubtable,
        padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t2) => t2.length - t2._currentOffset)
      },
      1: {
        length: $elh9A$restructure.uint32,
        coverage: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
          null,
          null,
          null,
          null,
          null,
          "variation",
          "crossStream",
          "vertical"
          // Set if table has vertical kerning values
        ]),
        format: $elh9A$restructure.uint8,
        tupleIndex: $elh9A$restructure.uint16,
        subtable: $a3f544bcf76542d1$var$KernSubtable,
        padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t2) => t2.length - t2._currentOffset)
      }
    });
    var $a3f544bcf76542d1$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
      0: {
        nTables: $elh9A$restructure.uint16,
        tables: new $elh9A$restructure.Array($a3f544bcf76542d1$var$KernTable, "nTables")
      },
      1: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        nTables: $elh9A$restructure.uint32,
        tables: new $elh9A$restructure.Array($a3f544bcf76542d1$var$KernTable, "nTables")
      }
    });
    var $86687befb45925d0$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      numGlyphs: $elh9A$restructure.uint16,
      yPels: new $elh9A$restructure.Array($elh9A$restructure.uint8, "numGlyphs")
    });
    var $91429006e51e0fe8$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      fontNumber: $elh9A$restructure.uint32,
      pitch: $elh9A$restructure.uint16,
      xHeight: $elh9A$restructure.uint16,
      style: $elh9A$restructure.uint16,
      typeFamily: $elh9A$restructure.uint16,
      capHeight: $elh9A$restructure.uint16,
      symbolSet: $elh9A$restructure.uint16,
      typeface: new $elh9A$restructure.String(16),
      characterComplement: new $elh9A$restructure.String(8),
      fileName: new $elh9A$restructure.String(6),
      strokeWeight: new $elh9A$restructure.String(1),
      widthType: new $elh9A$restructure.String(1),
      serifStyle: $elh9A$restructure.uint8,
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint8)
    });
    var $627850fc9deed59a$var$Ratio = new $elh9A$restructure.Struct({
      bCharSet: $elh9A$restructure.uint8,
      xRatio: $elh9A$restructure.uint8,
      yStartRatio: $elh9A$restructure.uint8,
      yEndRatio: $elh9A$restructure.uint8
      // Ending y-Ratio value
    });
    var $627850fc9deed59a$var$vTable = new $elh9A$restructure.Struct({
      yPelHeight: $elh9A$restructure.uint16,
      yMax: $elh9A$restructure.int16,
      yMin: $elh9A$restructure.int16
      // Minimum value (in pels) for this yPelHeight
    });
    var $627850fc9deed59a$var$VdmxGroup = new $elh9A$restructure.Struct({
      recs: $elh9A$restructure.uint16,
      startsz: $elh9A$restructure.uint8,
      endsz: $elh9A$restructure.uint8,
      entries: new $elh9A$restructure.Array($627850fc9deed59a$var$vTable, "recs")
      // The VDMX records
    });
    var $627850fc9deed59a$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      numRecs: $elh9A$restructure.uint16,
      numRatios: $elh9A$restructure.uint16,
      ratioRanges: new $elh9A$restructure.Array($627850fc9deed59a$var$Ratio, "numRatios"),
      offsets: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numRatios"),
      groups: new $elh9A$restructure.Array($627850fc9deed59a$var$VdmxGroup, "numRecs")
      // The actual VDMX groupings
    });
    var $65c33f5f068fc77f$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      ascent: $elh9A$restructure.int16,
      descent: $elh9A$restructure.int16,
      lineGap: $elh9A$restructure.int16,
      advanceHeightMax: $elh9A$restructure.int16,
      minTopSideBearing: $elh9A$restructure.int16,
      minBottomSideBearing: $elh9A$restructure.int16,
      yMaxExtent: $elh9A$restructure.int16,
      caretSlopeRise: $elh9A$restructure.int16,
      caretSlopeRun: $elh9A$restructure.int16,
      caretOffset: $elh9A$restructure.int16,
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.int16, 4),
      metricDataFormat: $elh9A$restructure.int16,
      numberOfMetrics: $elh9A$restructure.uint16
      // Number of advance heights in the Vertical Metrics table
    });
    var $597d739523b65bb3$var$VmtxEntry = new $elh9A$restructure.Struct({
      advance: $elh9A$restructure.uint16,
      bearing: $elh9A$restructure.int16
      // The top sidebearing of the glyph
    });
    var $597d739523b65bb3$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      metrics: new $elh9A$restructure.LazyArray($597d739523b65bb3$var$VmtxEntry, (t2) => t2.parent.vhea.numberOfMetrics),
      bearings: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, (t2) => t2.parent.maxp.numGlyphs - t2.parent.vhea.numberOfMetrics)
    });
    var $35aa0c87d9c3d3a0$var$shortFrac = new $elh9A$restructure.Fixed(16, "BE", 14);
    var $35aa0c87d9c3d3a0$var$Correspondence = new $elh9A$restructure.Struct({
      fromCoord: $35aa0c87d9c3d3a0$var$shortFrac,
      toCoord: $35aa0c87d9c3d3a0$var$shortFrac
    });
    var $35aa0c87d9c3d3a0$var$Segment = new $elh9A$restructure.Struct({
      pairCount: $elh9A$restructure.uint16,
      correspondence: new $elh9A$restructure.Array($35aa0c87d9c3d3a0$var$Correspondence, "pairCount")
    });
    var $35aa0c87d9c3d3a0$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.fixed32,
      axisCount: $elh9A$restructure.uint32,
      segment: new $elh9A$restructure.Array($35aa0c87d9c3d3a0$var$Segment, "axisCount")
    });
    var $22801616bd931ca3$var$UnboundedArrayAccessor = class {
      getItem(index) {
        if (this._items[index] == null) {
          let pos = this.stream.pos;
          this.stream.pos = this.base + this.type.size(null, this.parent) * index;
          this._items[index] = this.type.decode(this.stream, this.parent);
          this.stream.pos = pos;
        }
        return this._items[index];
      }
      inspect() {
        return `[UnboundedArray ${this.type.constructor.name}]`;
      }
      constructor(type, stream, parent) {
        this.type = type;
        this.stream = stream;
        this.parent = parent;
        this.base = this.stream.pos;
        this._items = [];
      }
    };
    var $22801616bd931ca3$export$c5af1eebc882e39a = class extends $elh9A$restructure.Array {
      decode(stream, parent) {
        return new $22801616bd931ca3$var$UnboundedArrayAccessor(this.type, stream, parent);
      }
      constructor(type) {
        super(type, 0);
      }
    };
    var $22801616bd931ca3$export$8351f8c2ae2f103c = function(ValueType = $elh9A$restructure.uint16) {
      class Shadow {
        decode(stream, ctx) {
          ctx = ctx.parent.parent;
          return this.type.decode(stream, ctx);
        }
        size(val, ctx) {
          ctx = ctx.parent.parent;
          return this.type.size(val, ctx);
        }
        encode(stream, val, ctx) {
          ctx = ctx.parent.parent;
          return this.type.encode(stream, val, ctx);
        }
        constructor(type) {
          this.type = type;
        }
      }
      ValueType = new Shadow(ValueType);
      let BinarySearchHeader = new $elh9A$restructure.Struct({
        unitSize: $elh9A$restructure.uint16,
        nUnits: $elh9A$restructure.uint16,
        searchRange: $elh9A$restructure.uint16,
        entrySelector: $elh9A$restructure.uint16,
        rangeShift: $elh9A$restructure.uint16
      });
      let LookupSegmentSingle = new $elh9A$restructure.Struct({
        lastGlyph: $elh9A$restructure.uint16,
        firstGlyph: $elh9A$restructure.uint16,
        value: ValueType
      });
      let LookupSegmentArray = new $elh9A$restructure.Struct({
        lastGlyph: $elh9A$restructure.uint16,
        firstGlyph: $elh9A$restructure.uint16,
        values: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.Array(ValueType, (t2) => t2.lastGlyph - t2.firstGlyph + 1), {
          type: "parent"
        })
      });
      let LookupSingle = new $elh9A$restructure.Struct({
        glyph: $elh9A$restructure.uint16,
        value: ValueType
      });
      return new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        0: {
          values: new $22801616bd931ca3$export$c5af1eebc882e39a(ValueType)
          // length == number of glyphs maybe?
        },
        2: {
          binarySearchHeader: BinarySearchHeader,
          segments: new $elh9A$restructure.Array(LookupSegmentSingle, (t2) => t2.binarySearchHeader.nUnits)
        },
        4: {
          binarySearchHeader: BinarySearchHeader,
          segments: new $elh9A$restructure.Array(LookupSegmentArray, (t2) => t2.binarySearchHeader.nUnits)
        },
        6: {
          binarySearchHeader: BinarySearchHeader,
          segments: new $elh9A$restructure.Array(LookupSingle, (t2) => t2.binarySearchHeader.nUnits)
        },
        8: {
          firstGlyph: $elh9A$restructure.uint16,
          count: $elh9A$restructure.uint16,
          values: new $elh9A$restructure.Array(ValueType, "count")
        }
      });
    };
    function $22801616bd931ca3$export$79f7d93d790934ba(entryData = {}, lookupType = $elh9A$restructure.uint16) {
      let entry = Object.assign({
        newState: $elh9A$restructure.uint16,
        flags: $elh9A$restructure.uint16
      }, entryData);
      let Entry = new $elh9A$restructure.Struct(entry);
      let StateArray = new $22801616bd931ca3$export$c5af1eebc882e39a(new $elh9A$restructure.Array($elh9A$restructure.uint16, (t2) => t2.nClasses));
      let StateHeader = new $elh9A$restructure.Struct({
        nClasses: $elh9A$restructure.uint32,
        classTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $22801616bd931ca3$export$8351f8c2ae2f103c(lookupType)),
        stateArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, StateArray),
        entryTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $22801616bd931ca3$export$c5af1eebc882e39a(Entry))
      });
      return StateHeader;
    }
    function $22801616bd931ca3$export$105027425199cc51(entryData = {}, lookupType = $elh9A$restructure.uint16) {
      let ClassLookupTable = new $elh9A$restructure.Struct({
        version() {
          return 8;
        },
        firstGlyph: $elh9A$restructure.uint16,
        values: new $elh9A$restructure.Array($elh9A$restructure.uint8, $elh9A$restructure.uint16)
      });
      let entry = Object.assign({
        newStateOffset: $elh9A$restructure.uint16,
        // convert offset to stateArray index
        newState: (t2) => (t2.newStateOffset - (t2.parent.stateArray.base - t2.parent._startOffset)) / t2.parent.nClasses,
        flags: $elh9A$restructure.uint16
      }, entryData);
      let Entry = new $elh9A$restructure.Struct(entry);
      let StateArray = new $22801616bd931ca3$export$c5af1eebc882e39a(new $elh9A$restructure.Array($elh9A$restructure.uint8, (t2) => t2.nClasses));
      let StateHeader1 = new $elh9A$restructure.Struct({
        nClasses: $elh9A$restructure.uint16,
        classTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, ClassLookupTable),
        stateArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, StateArray),
        entryTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $22801616bd931ca3$export$c5af1eebc882e39a(Entry))
      });
      return StateHeader1;
    }
    var $3a5ca96d3e3aaf20$var$BslnSubtable = new $elh9A$restructure.VersionedStruct("format", {
      0: {
        deltas: new $elh9A$restructure.Array($elh9A$restructure.int16, 32)
      },
      1: {
        deltas: new $elh9A$restructure.Array($elh9A$restructure.int16, 32),
        mappingData: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)($elh9A$restructure.uint16)
      },
      2: {
        standardGlyph: $elh9A$restructure.uint16,
        controlPoints: new $elh9A$restructure.Array($elh9A$restructure.uint16, 32)
      },
      3: {
        standardGlyph: $elh9A$restructure.uint16,
        controlPoints: new $elh9A$restructure.Array($elh9A$restructure.uint16, 32),
        mappingData: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)($elh9A$restructure.uint16)
      }
    });
    var $3a5ca96d3e3aaf20$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.fixed32,
      format: $elh9A$restructure.uint16,
      defaultBaseline: $elh9A$restructure.uint16,
      subtable: $3a5ca96d3e3aaf20$var$BslnSubtable
    });
    var $8d4241d96b2b0589$var$Setting = new $elh9A$restructure.Struct({
      setting: $elh9A$restructure.uint16,
      nameIndex: $elh9A$restructure.int16,
      name: (t2) => t2.parent.parent.parent.name.records.fontFeatures[t2.nameIndex]
    });
    var $8d4241d96b2b0589$var$FeatureName = new $elh9A$restructure.Struct({
      feature: $elh9A$restructure.uint16,
      nSettings: $elh9A$restructure.uint16,
      settingTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($8d4241d96b2b0589$var$Setting, "nSettings"), {
        type: "parent"
      }),
      featureFlags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
        null,
        null,
        null,
        null,
        null,
        null,
        "hasDefault",
        "exclusive"
      ]),
      defaultSetting: $elh9A$restructure.uint8,
      nameIndex: $elh9A$restructure.int16,
      name: (t2) => t2.parent.parent.name.records.fontFeatures[t2.nameIndex]
    });
    var $8d4241d96b2b0589$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.fixed32,
      featureNameCount: $elh9A$restructure.uint16,
      reserved1: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
      reserved2: new $elh9A$restructure.Reserved($elh9A$restructure.uint32),
      featureNames: new $elh9A$restructure.Array($8d4241d96b2b0589$var$FeatureName, "featureNameCount")
    });
    var $a79cd5132b1cf476$var$Axis = new $elh9A$restructure.Struct({
      axisTag: new $elh9A$restructure.String(4),
      minValue: $elh9A$restructure.fixed32,
      defaultValue: $elh9A$restructure.fixed32,
      maxValue: $elh9A$restructure.fixed32,
      flags: $elh9A$restructure.uint16,
      nameID: $elh9A$restructure.uint16,
      name: (t2) => t2.parent.parent.name.records.fontFeatures[t2.nameID]
    });
    var $a79cd5132b1cf476$var$Instance = new $elh9A$restructure.Struct({
      nameID: $elh9A$restructure.uint16,
      name: (t2) => t2.parent.parent.name.records.fontFeatures[t2.nameID],
      flags: $elh9A$restructure.uint16,
      coord: new $elh9A$restructure.Array($elh9A$restructure.fixed32, (t2) => t2.parent.axisCount),
      postscriptNameID: new $elh9A$restructure.Optional($elh9A$restructure.uint16, (t2) => t2.parent.instanceSize - t2._currentOffset > 0)
    });
    var $a79cd5132b1cf476$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.fixed32,
      offsetToData: $elh9A$restructure.uint16,
      countSizePairs: $elh9A$restructure.uint16,
      axisCount: $elh9A$restructure.uint16,
      axisSize: $elh9A$restructure.uint16,
      instanceCount: $elh9A$restructure.uint16,
      instanceSize: $elh9A$restructure.uint16,
      axis: new $elh9A$restructure.Array($a79cd5132b1cf476$var$Axis, "axisCount"),
      instance: new $elh9A$restructure.Array($a79cd5132b1cf476$var$Instance, "instanceCount")
    });
    var $3f36f1a5e6989457$var$shortFrac = new $elh9A$restructure.Fixed(16, "BE", 14);
    var $3f36f1a5e6989457$var$Offset = class {
      static decode(stream, parent) {
        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
      }
    };
    var $3f36f1a5e6989457$var$gvar = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
      axisCount: $elh9A$restructure.uint16,
      globalCoordCount: $elh9A$restructure.uint16,
      globalCoords: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array(new $elh9A$restructure.Array($3f36f1a5e6989457$var$shortFrac, "axisCount"), "globalCoordCount")),
      glyphCount: $elh9A$restructure.uint16,
      flags: $elh9A$restructure.uint16,
      offsetToData: $elh9A$restructure.uint32,
      offsets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($3f36f1a5e6989457$var$Offset, "void", {
        relativeTo: (ctx) => ctx.offsetToData,
        allowNull: false
      }), (t2) => t2.glyphCount + 1)
    });
    var $3f36f1a5e6989457$export$2e2bcd8739ae039 = $3f36f1a5e6989457$var$gvar;
    var $0bd8fe7a6d1d9fb4$var$ClassTable = new $elh9A$restructure.Struct({
      length: $elh9A$restructure.uint16,
      coverage: $elh9A$restructure.uint16,
      subFeatureFlags: $elh9A$restructure.uint32,
      stateTable: new (0, $22801616bd931ca3$export$105027425199cc51)()
    });
    var $0bd8fe7a6d1d9fb4$var$WidthDeltaRecord = new $elh9A$restructure.Struct({
      justClass: $elh9A$restructure.uint32,
      beforeGrowLimit: $elh9A$restructure.fixed32,
      beforeShrinkLimit: $elh9A$restructure.fixed32,
      afterGrowLimit: $elh9A$restructure.fixed32,
      afterShrinkLimit: $elh9A$restructure.fixed32,
      growFlags: $elh9A$restructure.uint16,
      shrinkFlags: $elh9A$restructure.uint16
    });
    var $0bd8fe7a6d1d9fb4$var$WidthDeltaCluster = new $elh9A$restructure.Array($0bd8fe7a6d1d9fb4$var$WidthDeltaRecord, $elh9A$restructure.uint32);
    var $0bd8fe7a6d1d9fb4$var$ActionData = new $elh9A$restructure.VersionedStruct("actionType", {
      0: {
        lowerLimit: $elh9A$restructure.fixed32,
        upperLimit: $elh9A$restructure.fixed32,
        order: $elh9A$restructure.uint16,
        glyphs: new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16)
      },
      1: {
        addGlyph: $elh9A$restructure.uint16
      },
      2: {
        substThreshold: $elh9A$restructure.fixed32,
        addGlyph: $elh9A$restructure.uint16,
        substGlyph: $elh9A$restructure.uint16
      },
      3: {},
      4: {
        variationAxis: $elh9A$restructure.uint32,
        minimumLimit: $elh9A$restructure.fixed32,
        noStretchValue: $elh9A$restructure.fixed32,
        maximumLimit: $elh9A$restructure.fixed32
      },
      5: {
        flags: $elh9A$restructure.uint16,
        glyph: $elh9A$restructure.uint16
      }
    });
    var $0bd8fe7a6d1d9fb4$var$Action = new $elh9A$restructure.Struct({
      actionClass: $elh9A$restructure.uint16,
      actionType: $elh9A$restructure.uint16,
      actionLength: $elh9A$restructure.uint32,
      actionData: $0bd8fe7a6d1d9fb4$var$ActionData,
      padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t2) => t2.actionLength - t2._currentOffset)
    });
    var $0bd8fe7a6d1d9fb4$var$PostcompensationAction = new $elh9A$restructure.Array($0bd8fe7a6d1d9fb4$var$Action, $elh9A$restructure.uint32);
    var $0bd8fe7a6d1d9fb4$var$PostCompensationTable = new $elh9A$restructure.Struct({
      lookupTable: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$PostcompensationAction))
    });
    var $0bd8fe7a6d1d9fb4$var$JustificationTable = new $elh9A$restructure.Struct({
      classTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$ClassTable, {
        type: "parent"
      }),
      wdcOffset: $elh9A$restructure.uint16,
      postCompensationTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$PostCompensationTable, {
        type: "parent"
      }),
      widthDeltaClusters: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$WidthDeltaCluster, {
        type: "parent",
        relativeTo: (ctx) => ctx.wdcOffset
      }))
    });
    var $0bd8fe7a6d1d9fb4$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint32,
      format: $elh9A$restructure.uint16,
      horizontal: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$JustificationTable),
      vertical: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$JustificationTable)
    });
    var $ef40c6dc80fd50a2$var$LigatureData = {
      action: $elh9A$restructure.uint16
    };
    var $ef40c6dc80fd50a2$var$ContextualData = {
      markIndex: $elh9A$restructure.uint16,
      currentIndex: $elh9A$restructure.uint16
    };
    var $ef40c6dc80fd50a2$var$InsertionData = {
      currentInsertIndex: $elh9A$restructure.uint16,
      markedInsertIndex: $elh9A$restructure.uint16
    };
    var $ef40c6dc80fd50a2$var$SubstitutionTable = new $elh9A$restructure.Struct({
      items: new (0, $22801616bd931ca3$export$c5af1eebc882e39a)(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)()))
    });
    var $ef40c6dc80fd50a2$var$SubtableData = new $elh9A$restructure.VersionedStruct("type", {
      0: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)()
      },
      1: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)($ef40c6dc80fd50a2$var$ContextualData),
        substitutionTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $ef40c6dc80fd50a2$var$SubstitutionTable)
      },
      2: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)($ef40c6dc80fd50a2$var$LigatureData),
        ligatureActions: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint32)),
        components: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint16)),
        ligatureList: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint16))
      },
      4: {
        lookupTable: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)()
      },
      5: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)($ef40c6dc80fd50a2$var$InsertionData),
        insertionActions: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint16))
      }
    });
    var $ef40c6dc80fd50a2$var$Subtable = new $elh9A$restructure.Struct({
      length: $elh9A$restructure.uint32,
      coverage: $elh9A$restructure.uint24,
      type: $elh9A$restructure.uint8,
      subFeatureFlags: $elh9A$restructure.uint32,
      table: $ef40c6dc80fd50a2$var$SubtableData,
      padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t2) => t2.length - t2._currentOffset)
    });
    var $ef40c6dc80fd50a2$var$FeatureEntry = new $elh9A$restructure.Struct({
      featureType: $elh9A$restructure.uint16,
      featureSetting: $elh9A$restructure.uint16,
      enableFlags: $elh9A$restructure.uint32,
      disableFlags: $elh9A$restructure.uint32
    });
    var $ef40c6dc80fd50a2$var$MorxChain = new $elh9A$restructure.Struct({
      defaultFlags: $elh9A$restructure.uint32,
      chainLength: $elh9A$restructure.uint32,
      nFeatureEntries: $elh9A$restructure.uint32,
      nSubtables: $elh9A$restructure.uint32,
      features: new $elh9A$restructure.Array($ef40c6dc80fd50a2$var$FeatureEntry, "nFeatureEntries"),
      subtables: new $elh9A$restructure.Array($ef40c6dc80fd50a2$var$Subtable, "nSubtables")
    });
    var $ef40c6dc80fd50a2$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint16,
      unused: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
      nChains: $elh9A$restructure.uint32,
      chains: new $elh9A$restructure.Array($ef40c6dc80fd50a2$var$MorxChain, "nChains")
    });
    var $ab24dea08b58a7cc$var$OpticalBounds = new $elh9A$restructure.Struct({
      left: $elh9A$restructure.int16,
      top: $elh9A$restructure.int16,
      right: $elh9A$restructure.int16,
      bottom: $elh9A$restructure.int16
    });
    var $ab24dea08b58a7cc$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.fixed32,
      format: $elh9A$restructure.uint16,
      lookupTable: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)($ab24dea08b58a7cc$var$OpticalBounds)
    });
    var $5825c04ce8f7102d$var$tables = {};
    var $5825c04ce8f7102d$export$2e2bcd8739ae039 = $5825c04ce8f7102d$var$tables;
    $5825c04ce8f7102d$var$tables.cmap = (0, $e4ae0436c91af89f$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.head = (0, $55a60976afb7c261$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.hhea = (0, $dde72b7b5b650596$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.hmtx = (0, $a7c40184072c9a5b$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.maxp = (0, $521197722369f691$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.name = (0, $51a9f4feb3a3b2b1$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables["OS/2"] = (0, $114ea85db469b435$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.post = (0, $f93b30299e1ea0f5$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.fpgm = (0, $873d79fea57d3161$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.loca = (0, $83c4155666d50c37$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.prep = (0, $b12598db7cdf7042$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables["cvt "] = (0, $8fb09b0f473d61a0$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.glyf = (0, $7707bdf21a3d89cc$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables["CFF "] = (0, $f717432b360040c7$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables["CFF2"] = (0, $f717432b360040c7$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.VORG = (0, $8cb7ae73ed7aa7d8$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.EBLC = (0, $035bb95c0cdb1f6d$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.CBLC = $5825c04ce8f7102d$var$tables.EBLC;
    $5825c04ce8f7102d$var$tables.sbix = (0, $73d13900b55a3c0c$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.COLR = (0, $97f6b8be3a347a8f$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.CPAL = (0, $16ca60ecbdee30ea$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.BASE = (0, $7327e41706f9d5c7$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.GDEF = (0, $7e48bbe9e5345664$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.GPOS = (0, $b687332511a4da75$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.GSUB = (0, $99ccad60b96f92fb$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.JSTF = (0, $573d5042c76c4940$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.HVAR = (0, $a5875b80d6087f61$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.DSIG = (0, $4423bc1ac09bbbd1$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.gasp = (0, $7b50e3f8d83263de$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.hdmx = (0, $7bf92ec372cd2307$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.kern = (0, $a3f544bcf76542d1$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.LTSH = (0, $86687befb45925d0$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.PCLT = (0, $91429006e51e0fe8$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.VDMX = (0, $627850fc9deed59a$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.vhea = (0, $65c33f5f068fc77f$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.vmtx = (0, $597d739523b65bb3$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.avar = (0, $35aa0c87d9c3d3a0$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.bsln = (0, $3a5ca96d3e3aaf20$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.feat = (0, $8d4241d96b2b0589$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.fvar = (0, $a79cd5132b1cf476$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.gvar = (0, $3f36f1a5e6989457$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.just = (0, $0bd8fe7a6d1d9fb4$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.morx = (0, $ef40c6dc80fd50a2$export$2e2bcd8739ae039);
    $5825c04ce8f7102d$var$tables.opbd = (0, $ab24dea08b58a7cc$export$2e2bcd8739ae039);
    var $df50e1efe10a1247$var$TableEntry = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      checkSum: $elh9A$restructure.uint32,
      offset: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, "void", {
        type: "global"
      }),
      length: $elh9A$restructure.uint32
    });
    var $df50e1efe10a1247$var$Directory = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      numTables: $elh9A$restructure.uint16,
      searchRange: $elh9A$restructure.uint16,
      entrySelector: $elh9A$restructure.uint16,
      rangeShift: $elh9A$restructure.uint16,
      tables: new $elh9A$restructure.Array($df50e1efe10a1247$var$TableEntry, "numTables")
    });
    $df50e1efe10a1247$var$Directory.process = function() {
      let tables = {};
      for (let table of this.tables) tables[table.tag] = table;
      this.tables = tables;
    };
    $df50e1efe10a1247$var$Directory.preEncode = function() {
      if (!Array.isArray(this.tables)) {
        let tables = [];
        for (let tag in this.tables) {
          let table = this.tables[tag];
          if (table) tables.push({
            tag,
            checkSum: 0,
            offset: new $elh9A$restructure.VoidPointer((0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[tag], table),
            length: (0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[tag].size(table)
          });
        }
        this.tables = tables;
      }
      this.tag = "true";
      this.numTables = this.tables.length;
      let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
      let maxPowerOf2 = Math.pow(2, maxExponentFor2);
      this.searchRange = maxPowerOf2 * 16;
      this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
      this.rangeShift = this.numTables * 16 - this.searchRange;
    };
    var $df50e1efe10a1247$export$2e2bcd8739ae039 = $df50e1efe10a1247$var$Directory;
    function $66a5b9fb5318558a$export$2e0ae67339d5f1ac(arr, cmp) {
      let min = 0;
      let max = arr.length - 1;
      while (min <= max) {
        let mid = min + max >> 1;
        let res = cmp(arr[mid]);
        if (res < 0) max = mid - 1;
        else if (res > 0) min = mid + 1;
        else return mid;
      }
      return -1;
    }
    function $66a5b9fb5318558a$export$d02631cccf789723(index, end) {
      let range = [];
      while (index < end) range.push(index++);
      return range;
    }
    var $66a5b9fb5318558a$export$3d28c1996ced1f14 = new TextDecoder("ascii");
    var $66a5b9fb5318558a$var$CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var $66a5b9fb5318558a$var$LOOKUP = new Uint8Array(256);
    for (let i2 = 0; i2 < $66a5b9fb5318558a$var$CHARS.length; i2++) $66a5b9fb5318558a$var$LOOKUP[$66a5b9fb5318558a$var$CHARS.charCodeAt(i2)] = i2;
    function $66a5b9fb5318558a$export$94fdf11bafc8de6b(base64) {
      let bufferLength = base64.length * 0.75;
      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") bufferLength--;
      }
      let bytes = new Uint8Array(bufferLength);
      let p = 0;
      for (let i2 = 0, len = base64.length; i2 < len; i2 += 4) {
        let encoded1 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i2)];
        let encoded2 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i2 + 1)];
        let encoded3 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i2 + 2)];
        let encoded4 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i2 + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }
      return bytes;
    }
    var $0d6e160064c86e50$export$2e2bcd8739ae039 = class {
      findSubtable(cmapTable, pairs) {
        for (let [platformID, encodingID] of pairs) for (let cmap of cmapTable.tables) {
          if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;
        }
        return null;
      }
      lookup(codepoint, variationSelector) {
        if (this.encoding) codepoint = this.encoding.get(codepoint) || codepoint;
        else if (variationSelector) {
          let gid = this.getVariationSelector(codepoint, variationSelector);
          if (gid) return gid;
        }
        let cmap = this.cmap;
        switch (cmap.version) {
          case 0:
            return cmap.codeMap.get(codepoint) || 0;
          case 4: {
            let min = 0;
            let max = cmap.segCount - 1;
            while (min <= max) {
              let mid = min + max >> 1;
              if (codepoint < cmap.startCode.get(mid)) max = mid - 1;
              else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;
              else {
                let rangeOffset = cmap.idRangeOffset.get(mid);
                let gid;
                if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);
                else {
                  let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                  gid = cmap.glyphIndexArray.get(index) || 0;
                  if (gid !== 0) gid += cmap.idDelta.get(mid);
                }
                return gid & 65535;
              }
            }
            return 0;
          }
          case 8:
            throw new Error("TODO: cmap format 8");
          case 6:
          case 10:
            return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;
          case 12:
          case 13: {
            let min = 0;
            let max = cmap.nGroups - 1;
            while (min <= max) {
              let mid = min + max >> 1;
              let group = cmap.groups.get(mid);
              if (codepoint < group.startCharCode) max = mid - 1;
              else if (codepoint > group.endCharCode) min = mid + 1;
              else {
                if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);
                else return group.glyphID;
              }
            }
            return 0;
          }
          case 14:
            throw new Error("TODO: cmap format 14");
          default:
            throw new Error(`Unknown cmap format ${cmap.version}`);
        }
      }
      getVariationSelector(codepoint, variationSelector) {
        if (!this.uvs) return 0;
        let selectors = this.uvs.varSelectors.toArray();
        let i2 = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(selectors, (x2) => variationSelector - x2.varSelector);
        let sel = selectors[i2];
        if (i2 !== -1 && sel.defaultUVS) i2 = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(sel.defaultUVS, (x2) => codepoint < x2.startUnicodeValue ? -1 : codepoint > x2.startUnicodeValue + x2.additionalCount ? 1 : 0);
        if (i2 !== -1 && sel.nonDefaultUVS) {
          i2 = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(sel.nonDefaultUVS, (x2) => codepoint - x2.unicodeValue);
          if (i2 !== -1) return sel.nonDefaultUVS[i2].glyphID;
        }
        return 0;
      }
      getCharacterSet() {
        let cmap = this.cmap;
        switch (cmap.version) {
          case 0:
            return (0, $66a5b9fb5318558a$export$d02631cccf789723)(0, cmap.codeMap.length);
          case 4: {
            let res = [];
            let endCodes = cmap.endCode.toArray();
            for (let i2 = 0; i2 < endCodes.length; i2++) {
              let tail = endCodes[i2] + 1;
              let start = cmap.startCode.get(i2);
              res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(start, tail));
            }
            return res;
          }
          case 8:
            throw new Error("TODO: cmap format 8");
          case 6:
          case 10:
            return (0, $66a5b9fb5318558a$export$d02631cccf789723)(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);
          case 12:
          case 13: {
            let res = [];
            for (let group of cmap.groups.toArray()) res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));
            return res;
          }
          case 14:
            throw new Error("TODO: cmap format 14");
          default:
            throw new Error(`Unknown cmap format ${cmap.version}`);
        }
      }
      codePointsForGlyph(gid) {
        let cmap = this.cmap;
        switch (cmap.version) {
          case 0: {
            let res = [];
            for (let i2 = 0; i2 < 256; i2++) if (cmap.codeMap.get(i2) === gid) res.push(i2);
            return res;
          }
          case 4: {
            let res = [];
            for (let i2 = 0; i2 < cmap.segCount; i2++) {
              let end = cmap.endCode.get(i2);
              let start = cmap.startCode.get(i2);
              let rangeOffset = cmap.idRangeOffset.get(i2);
              let delta = cmap.idDelta.get(i2);
              for (var c = start; c <= end; c++) {
                let g = 0;
                if (rangeOffset === 0) g = c + delta;
                else {
                  let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i2);
                  g = cmap.glyphIndexArray.get(index) || 0;
                  if (g !== 0) g += delta;
                }
                if (g === gid) res.push(c);
              }
            }
            return res;
          }
          case 12: {
            let res = [];
            for (let group of cmap.groups.toArray()) if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));
            return res;
          }
          case 13: {
            let res = [];
            for (let group of cmap.groups.toArray()) if (gid === group.glyphID) res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));
            return res;
          }
          default:
            throw new Error(`Unknown cmap format ${cmap.version}`);
        }
      }
      constructor(cmapTable) {
        this.encoding = null;
        this.cmap = this.findSubtable(cmapTable, [
          // 32-bit subtables
          [
            3,
            10
          ],
          [
            0,
            6
          ],
          [
            0,
            4
          ],
          // 16-bit subtables
          [
            3,
            1
          ],
          [
            0,
            3
          ],
          [
            0,
            2
          ],
          [
            0,
            1
          ],
          [
            0,
            0
          ]
        ]);
        if (!this.cmap) for (let cmap of cmapTable.tables) {
          let encoding = (0, $e2613b812f052cbe$export$badc544e0651b6b1)(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
          let mapping = (0, $e2613b812f052cbe$export$1dceb3c14ed68bee)(encoding);
          if (mapping) {
            this.cmap = cmap.table;
            this.encoding = mapping;
          }
        }
        if (!this.cmap) throw new Error("Could not find a supported cmap table");
        this.uvs = this.findSubtable(cmapTable, [
          [
            0,
            5
          ]
        ]);
        if (this.uvs && this.uvs.version !== 14) this.uvs = null;
      }
    };
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0d6e160064c86e50$export$2e2bcd8739ae039.prototype, "getCharacterSet", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0d6e160064c86e50$export$2e2bcd8739ae039.prototype, "codePointsForGlyph", null);
    var $4646d52c2a559cdb$export$2e2bcd8739ae039 = class {
      process(glyphs, positions) {
        for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
          let left = glyphs[glyphIndex].id;
          let right = glyphs[glyphIndex + 1].id;
          positions[glyphIndex].xAdvance += this.getKerning(left, right);
        }
      }
      getKerning(left, right) {
        let res = 0;
        for (let table of this.kern.tables) {
          if (table.coverage.crossStream) continue;
          switch (table.version) {
            case 0:
              if (!table.coverage.horizontal) continue;
              break;
            case 1:
              if (table.coverage.vertical || table.coverage.variation) continue;
              break;
            default:
              throw new Error(`Unsupported kerning table version ${table.version}`);
          }
          let val = 0;
          let s2 = table.subtable;
          switch (table.format) {
            case 0:
              let pairIdx = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(s2.pairs, function(pair) {
                return left - pair.left || right - pair.right;
              });
              if (pairIdx >= 0) val = s2.pairs[pairIdx].value;
              break;
            case 2:
              let leftOffset = 0, rightOffset = 0;
              if (left >= s2.leftTable.firstGlyph && left < s2.leftTable.firstGlyph + s2.leftTable.nGlyphs) leftOffset = s2.leftTable.offsets[left - s2.leftTable.firstGlyph];
              else leftOffset = s2.array.off;
              if (right >= s2.rightTable.firstGlyph && right < s2.rightTable.firstGlyph + s2.rightTable.nGlyphs) rightOffset = s2.rightTable.offsets[right - s2.rightTable.firstGlyph];
              let index = (leftOffset + rightOffset - s2.array.off) / 2;
              val = s2.array.values.get(index);
              break;
            case 3:
              if (left >= s2.glyphCount || right >= s2.glyphCount) return 0;
              val = s2.kernValue[s2.kernIndex[s2.leftClass[left] * s2.rightClassCount + s2.rightClass[right]]];
              break;
            default:
              throw new Error(`Unsupported kerning sub-table format ${table.format}`);
          }
          if (table.coverage.override) res = val;
          else res += val;
        }
        return res;
      }
      constructor(font) {
        this.kern = font.kern;
      }
    };
    var $a57a26817cd35108$export$2e2bcd8739ae039 = class {
      positionGlyphs(glyphs, positions) {
        let clusterStart = 0;
        let clusterEnd = 0;
        for (let index = 0; index < glyphs.length; index++) {
          let glyph = glyphs[index];
          if (glyph.isMark) clusterEnd = index;
          else {
            if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
            clusterStart = clusterEnd = index;
          }
        }
        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        return positions;
      }
      positionCluster(glyphs, positions, clusterStart, clusterEnd) {
        let base = glyphs[clusterStart];
        let baseBox = base.cbox.copy();
        if (base.codePoints.length > 1)
          baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
        let xOffset = -positions[clusterStart].xAdvance;
        let yOffset = 0;
        let yGap = this.font.unitsPerEm / 16;
        for (let index = clusterStart + 1; index <= clusterEnd; index++) {
          let mark = glyphs[index];
          let markBox = mark.cbox;
          let position = positions[index];
          let combiningClass = this.getCombiningClass(mark.codePoints[0]);
          if (combiningClass !== "Not_Reordered") {
            position.xOffset = position.yOffset = 0;
            switch (combiningClass) {
              case "Double_Above":
              case "Double_Below":
                position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
                break;
              case "Attached_Below_Left":
              case "Below_Left":
              case "Above_Left":
                position.xOffset += baseBox.minX - markBox.minX;
                break;
              case "Attached_Above_Right":
              case "Below_Right":
              case "Above_Right":
                position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
                break;
              default:
                position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
            }
            switch (combiningClass) {
              case "Double_Below":
              case "Below_Left":
              case "Below":
              case "Below_Right":
              case "Attached_Below_Left":
              case "Attached_Below":
                if (combiningClass === "Attached_Below_Left" || combiningClass === "Attached_Below") baseBox.minY += yGap;
                position.yOffset = -baseBox.minY - markBox.maxY;
                baseBox.minY += markBox.height;
                break;
              case "Double_Above":
              case "Above_Left":
              case "Above":
              case "Above_Right":
              case "Attached_Above":
              case "Attached_Above_Right":
                if (combiningClass === "Attached_Above" || combiningClass === "Attached_Above_Right") baseBox.maxY += yGap;
                position.yOffset = baseBox.maxY - markBox.minY;
                baseBox.maxY += markBox.height;
                break;
            }
            position.xAdvance = position.yAdvance = 0;
            position.xOffset += xOffset;
            position.yOffset += yOffset;
          } else {
            xOffset -= position.xAdvance;
            yOffset -= position.yAdvance;
          }
        }
        return;
      }
      getCombiningClass(codePoint) {
        let combiningClass = (0, $elh9A$unicodeproperties.getCombiningClass)(codePoint);
        if ((codePoint & -256) === 3584) {
          if (combiningClass === "Not_Reordered") switch (codePoint) {
            case 3633:
            case 3636:
            case 3637:
            case 3638:
            case 3639:
            case 3655:
            case 3660:
            case 3645:
            case 3662:
              return "Above_Right";
            case 3761:
            case 3764:
            case 3765:
            case 3766:
            case 3767:
            case 3771:
            case 3788:
            case 3789:
              return "Above";
            case 3772:
              return "Below";
          }
          else if (codePoint === 3642) return "Below_Right";
        }
        switch (combiningClass) {
          // Hebrew
          case "CCC10":
          case "CCC11":
          case "CCC12":
          case "CCC13":
          case "CCC14":
          case "CCC15":
          case "CCC16":
          case "CCC17":
          case "CCC18":
          case "CCC20":
          case "CCC22":
            return "Below";
          case "CCC23":
            return "Attached_Above";
          case "CCC24":
            return "Above_Right";
          case "CCC25":
          case "CCC19":
            return "Above_Left";
          case "CCC26":
            return "Above";
          case "CCC21":
            break;
          // Arabic and Syriac
          case "CCC27":
          case "CCC28":
          case "CCC30":
          case "CCC31":
          case "CCC33":
          case "CCC34":
          case "CCC35":
          case "CCC36":
            return "Above";
          case "CCC29":
          case "CCC32":
            return "Below";
          // Thai
          case "CCC103":
            return "Below_Right";
          case "CCC107":
            return "Above_Right";
          // Lao
          case "CCC118":
            return "Below";
          case "CCC122":
            return "Above";
          // Tibetan
          case "CCC129":
          case "CCC132":
            return "Below";
          case "CCC130":
            return "Above";
        }
        return combiningClass;
      }
      constructor(font) {
        this.font = font;
      }
    };
    var $0e2da1c4ce69e8ad$export$2e2bcd8739ae039 = class _$0e2da1c4ce69e8ad$export$2e2bcd8739ae039 {
      /**
      * The width of the bounding box
      * @type {number}
      */
      get width() {
        return this.maxX - this.minX;
      }
      /**
      * The height of the bounding box
      * @type {number}
      */
      get height() {
        return this.maxY - this.minY;
      }
      addPoint(x2, y) {
        if (Math.abs(x2) !== Infinity) {
          if (x2 < this.minX) this.minX = x2;
          if (x2 > this.maxX) this.maxX = x2;
        }
        if (Math.abs(y) !== Infinity) {
          if (y < this.minY) this.minY = y;
          if (y > this.maxY) this.maxY = y;
        }
      }
      copy() {
        return new _$0e2da1c4ce69e8ad$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);
      }
      constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
      }
    };
    var $e38a1a895f6aeb54$var$UNICODE_SCRIPTS = {
      Caucasian_Albanian: "aghb",
      Arabic: "arab",
      Imperial_Aramaic: "armi",
      Armenian: "armn",
      Avestan: "avst",
      Balinese: "bali",
      Bamum: "bamu",
      Bassa_Vah: "bass",
      Batak: "batk",
      Bengali: [
        "bng2",
        "beng"
      ],
      Bopomofo: "bopo",
      Brahmi: "brah",
      Braille: "brai",
      Buginese: "bugi",
      Buhid: "buhd",
      Chakma: "cakm",
      Canadian_Aboriginal: "cans",
      Carian: "cari",
      Cham: "cham",
      Cherokee: "cher",
      Coptic: "copt",
      Cypriot: "cprt",
      Cyrillic: "cyrl",
      Devanagari: [
        "dev2",
        "deva"
      ],
      Deseret: "dsrt",
      Duployan: "dupl",
      Egyptian_Hieroglyphs: "egyp",
      Elbasan: "elba",
      Ethiopic: "ethi",
      Georgian: "geor",
      Glagolitic: "glag",
      Gothic: "goth",
      Grantha: "gran",
      Greek: "grek",
      Gujarati: [
        "gjr2",
        "gujr"
      ],
      Gurmukhi: [
        "gur2",
        "guru"
      ],
      Hangul: "hang",
      Han: "hani",
      Hanunoo: "hano",
      Hebrew: "hebr",
      Hiragana: "hira",
      Pahawh_Hmong: "hmng",
      Katakana_Or_Hiragana: "hrkt",
      Old_Italic: "ital",
      Javanese: "java",
      Kayah_Li: "kali",
      Katakana: "kana",
      Kharoshthi: "khar",
      Khmer: "khmr",
      Khojki: "khoj",
      Kannada: [
        "knd2",
        "knda"
      ],
      Kaithi: "kthi",
      Tai_Tham: "lana",
      Lao: "lao ",
      Latin: "latn",
      Lepcha: "lepc",
      Limbu: "limb",
      Linear_A: "lina",
      Linear_B: "linb",
      Lisu: "lisu",
      Lycian: "lyci",
      Lydian: "lydi",
      Mahajani: "mahj",
      Mandaic: "mand",
      Manichaean: "mani",
      Mende_Kikakui: "mend",
      Meroitic_Cursive: "merc",
      Meroitic_Hieroglyphs: "mero",
      Malayalam: [
        "mlm2",
        "mlym"
      ],
      Modi: "modi",
      Mongolian: "mong",
      Mro: "mroo",
      Meetei_Mayek: "mtei",
      Myanmar: [
        "mym2",
        "mymr"
      ],
      Old_North_Arabian: "narb",
      Nabataean: "nbat",
      Nko: "nko ",
      Ogham: "ogam",
      Ol_Chiki: "olck",
      Old_Turkic: "orkh",
      Oriya: [
        "ory2",
        "orya"
      ],
      Osmanya: "osma",
      Palmyrene: "palm",
      Pau_Cin_Hau: "pauc",
      Old_Permic: "perm",
      Phags_Pa: "phag",
      Inscriptional_Pahlavi: "phli",
      Psalter_Pahlavi: "phlp",
      Phoenician: "phnx",
      Miao: "plrd",
      Inscriptional_Parthian: "prti",
      Rejang: "rjng",
      Runic: "runr",
      Samaritan: "samr",
      Old_South_Arabian: "sarb",
      Saurashtra: "saur",
      Shavian: "shaw",
      Sharada: "shrd",
      Siddham: "sidd",
      Khudawadi: "sind",
      Sinhala: "sinh",
      Sora_Sompeng: "sora",
      Sundanese: "sund",
      Syloti_Nagri: "sylo",
      Syriac: "syrc",
      Tagbanwa: "tagb",
      Takri: "takr",
      Tai_Le: "tale",
      New_Tai_Lue: "talu",
      Tamil: [
        "tml2",
        "taml"
      ],
      Tai_Viet: "tavt",
      Telugu: [
        "tel2",
        "telu"
      ],
      Tifinagh: "tfng",
      Tagalog: "tglg",
      Thaana: "thaa",
      Thai: "thai",
      Tibetan: "tibt",
      Tirhuta: "tirh",
      Ugaritic: "ugar",
      Vai: "vai ",
      Warang_Citi: "wara",
      Old_Persian: "xpeo",
      Cuneiform: "xsux",
      Yi: "yi  ",
      Inherited: "zinh",
      Common: "zyyy",
      Unknown: "zzzz"
    };
    var $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS = {};
    for (let script in $e38a1a895f6aeb54$var$UNICODE_SCRIPTS) {
      let tag = $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
      if (Array.isArray(tag)) for (let t2 of tag) $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS[t2] = script;
      else $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS[tag] = script;
    }
    function $e38a1a895f6aeb54$export$ce50e82f12a827a4(tag) {
      return $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS[tag];
    }
    function $e38a1a895f6aeb54$export$e5cb25e204fb8450(string) {
      let len = string.length;
      let idx = 0;
      while (idx < len) {
        let code = string.charCodeAt(idx++);
        if (55296 <= code && code <= 56319 && idx < len) {
          let next = string.charCodeAt(idx);
          if (56320 <= next && next <= 57343) {
            idx++;
            code = ((code & 1023) << 10) + (next & 1023) + 65536;
          }
        }
        let script = (0, $elh9A$unicodeproperties.getScript)(code);
        if (script !== "Common" && script !== "Inherited" && script !== "Unknown") return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
      }
      return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS.Unknown;
    }
    function $e38a1a895f6aeb54$export$16fab0757cfc223d(codePoints) {
      for (let i2 = 0; i2 < codePoints.length; i2++) {
        let codePoint = codePoints[i2];
        let script = (0, $elh9A$unicodeproperties.getScript)(codePoint);
        if (script !== "Common" && script !== "Inherited" && script !== "Unknown") return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
      }
      return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS.Unknown;
    }
    var $e38a1a895f6aeb54$var$RTL = {
      arab: true,
      hebr: true,
      syrc: true,
      thaa: true,
      cprt: true,
      khar: true,
      phnx: true,
      "nko ": true,
      lydi: true,
      avst: true,
      armi: true,
      phli: true,
      prti: true,
      sarb: true,
      orkh: true,
      samr: true,
      mand: true,
      merc: true,
      mero: true,
      // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
      mani: true,
      mend: true,
      nbat: true,
      narb: true,
      palm: true,
      phlp: true
      // Psalter Pahlavi
    };
    function $e38a1a895f6aeb54$export$9fddb9d0dd7d8a54(script) {
      if ($e38a1a895f6aeb54$var$RTL[script]) return "rtl";
      return "ltr";
    }
    var $b19c79ec7a94fa39$export$2e2bcd8739ae039 = class {
      /**
      * The total advance width of the run.
      * @type {number}
      */
      get advanceWidth() {
        let width = 0;
        for (let position of this.positions) width += position.xAdvance;
        return width;
      }
      /**
      * The total advance height of the run.
      * @type {number}
      */
      get advanceHeight() {
        let height = 0;
        for (let position of this.positions) height += position.yAdvance;
        return height;
      }
      /**
      * The bounding box containing all glyphs in the run.
      * @type {BBox}
      */
      get bbox() {
        let bbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)();
        let x2 = 0;
        let y = 0;
        for (let index = 0; index < this.glyphs.length; index++) {
          let glyph = this.glyphs[index];
          let p = this.positions[index];
          let b = glyph.bbox;
          bbox.addPoint(b.minX + x2 + p.xOffset, b.minY + y + p.yOffset);
          bbox.addPoint(b.maxX + x2 + p.xOffset, b.maxY + y + p.yOffset);
          x2 += p.xAdvance;
          y += p.yAdvance;
        }
        return bbox;
      }
      constructor(glyphs, features, script, language, direction) {
        this.glyphs = glyphs;
        this.positions = null;
        this.script = script;
        this.language = language || null;
        this.direction = direction || $e38a1a895f6aeb54$export$9fddb9d0dd7d8a54(script);
        this.features = {};
        if (Array.isArray(features)) for (let tag of features) this.features[tag] = true;
        else if (typeof features === "object") this.features = features;
      }
    };
    var $9195cf1266c12ea5$export$2e2bcd8739ae039 = class {
      constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {
        this.xAdvance = xAdvance;
        this.yAdvance = yAdvance;
        this.xOffset = xOffset;
        this.yOffset = yOffset;
      }
    };
    var $2b7f887ebcb5888a$var$features = {
      allTypographicFeatures: {
        code: 0,
        exclusive: false,
        allTypeFeatures: 0
      },
      ligatures: {
        code: 1,
        exclusive: false,
        requiredLigatures: 0,
        commonLigatures: 2,
        rareLigatures: 4,
        // logos: 6
        rebusPictures: 8,
        diphthongLigatures: 10,
        squaredLigatures: 12,
        abbrevSquaredLigatures: 14,
        symbolLigatures: 16,
        contextualLigatures: 18,
        historicalLigatures: 20
      },
      cursiveConnection: {
        code: 2,
        exclusive: true,
        unconnected: 0,
        partiallyConnected: 1,
        cursive: 2
      },
      letterCase: {
        code: 3,
        exclusive: true
      },
      // upperAndLowerCase: 0          # deprecated
      // allCaps: 1                    # deprecated
      // allLowerCase: 2               # deprecated
      // smallCaps: 3                  # deprecated
      // initialCaps: 4                # deprecated
      // initialCapsAndSmallCaps: 5    # deprecated
      verticalSubstitution: {
        code: 4,
        exclusive: false,
        substituteVerticalForms: 0
      },
      linguisticRearrangement: {
        code: 5,
        exclusive: false,
        linguisticRearrangement: 0
      },
      numberSpacing: {
        code: 6,
        exclusive: true,
        monospacedNumbers: 0,
        proportionalNumbers: 1,
        thirdWidthNumbers: 2,
        quarterWidthNumbers: 3
      },
      smartSwash: {
        code: 8,
        exclusive: false,
        wordInitialSwashes: 0,
        wordFinalSwashes: 2,
        // lineInitialSwashes: 4
        // lineFinalSwashes: 6
        nonFinalSwashes: 8
      },
      diacritics: {
        code: 9,
        exclusive: true,
        showDiacritics: 0,
        hideDiacritics: 1,
        decomposeDiacritics: 2
      },
      verticalPosition: {
        code: 10,
        exclusive: true,
        normalPosition: 0,
        superiors: 1,
        inferiors: 2,
        ordinals: 3,
        scientificInferiors: 4
      },
      fractions: {
        code: 11,
        exclusive: true,
        noFractions: 0,
        verticalFractions: 1,
        diagonalFractions: 2
      },
      overlappingCharacters: {
        code: 13,
        exclusive: false,
        preventOverlap: 0
      },
      typographicExtras: {
        code: 14,
        exclusive: false,
        // hyphensToEmDash: 0
        // hyphenToEnDash: 2
        slashedZero: 4
      },
      // formInterrobang: 6
      // smartQuotes: 8
      // periodsToEllipsis: 10
      mathematicalExtras: {
        code: 15,
        exclusive: false,
        // hyphenToMinus: 0
        // asteristoMultiply: 2
        // slashToDivide: 4
        // inequalityLigatures: 6
        // exponents: 8
        mathematicalGreek: 10
      },
      ornamentSets: {
        code: 16,
        exclusive: true,
        noOrnaments: 0,
        dingbats: 1,
        piCharacters: 2,
        fleurons: 3,
        decorativeBorders: 4,
        internationalSymbols: 5,
        mathSymbols: 6
      },
      characterAlternatives: {
        code: 17,
        exclusive: true,
        noAlternates: 0
      },
      // user defined options
      designComplexity: {
        code: 18,
        exclusive: true,
        designLevel1: 0,
        designLevel2: 1,
        designLevel3: 2,
        designLevel4: 3,
        designLevel5: 4
      },
      styleOptions: {
        code: 19,
        exclusive: true,
        noStyleOptions: 0,
        displayText: 1,
        engravedText: 2,
        illuminatedCaps: 3,
        titlingCaps: 4,
        tallCaps: 5
      },
      characterShape: {
        code: 20,
        exclusive: true,
        traditionalCharacters: 0,
        simplifiedCharacters: 1,
        JIS1978Characters: 2,
        JIS1983Characters: 3,
        JIS1990Characters: 4,
        traditionalAltOne: 5,
        traditionalAltTwo: 6,
        traditionalAltThree: 7,
        traditionalAltFour: 8,
        traditionalAltFive: 9,
        expertCharacters: 10,
        JIS2004Characters: 11,
        hojoCharacters: 12,
        NLCCharacters: 13,
        traditionalNamesCharacters: 14
      },
      numberCase: {
        code: 21,
        exclusive: true,
        lowerCaseNumbers: 0,
        upperCaseNumbers: 1
      },
      textSpacing: {
        code: 22,
        exclusive: true,
        proportionalText: 0,
        monospacedText: 1,
        halfWidthText: 2,
        thirdWidthText: 3,
        quarterWidthText: 4,
        altProportionalText: 5,
        altHalfWidthText: 6
      },
      transliteration: {
        code: 23,
        exclusive: true,
        noTransliteration: 0
      },
      // hanjaToHangul: 1
      // hiraganaToKatakana: 2
      // katakanaToHiragana: 3
      // kanaToRomanization: 4
      // romanizationToHiragana: 5
      // romanizationToKatakana: 6
      // hanjaToHangulAltOne: 7
      // hanjaToHangulAltTwo: 8
      // hanjaToHangulAltThree: 9
      annotation: {
        code: 24,
        exclusive: true,
        noAnnotation: 0,
        boxAnnotation: 1,
        roundedBoxAnnotation: 2,
        circleAnnotation: 3,
        invertedCircleAnnotation: 4,
        parenthesisAnnotation: 5,
        periodAnnotation: 6,
        romanNumeralAnnotation: 7,
        diamondAnnotation: 8,
        invertedBoxAnnotation: 9,
        invertedRoundedBoxAnnotation: 10
      },
      kanaSpacing: {
        code: 25,
        exclusive: true,
        fullWidthKana: 0,
        proportionalKana: 1
      },
      ideographicSpacing: {
        code: 26,
        exclusive: true,
        fullWidthIdeographs: 0,
        proportionalIdeographs: 1,
        halfWidthIdeographs: 2
      },
      unicodeDecomposition: {
        code: 27,
        exclusive: false,
        canonicalComposition: 0,
        compatibilityComposition: 2,
        transcodingComposition: 4
      },
      rubyKana: {
        code: 28,
        exclusive: false,
        // noRubyKana: 0     # deprecated - use rubyKanaOff instead
        // rubyKana: 1     # deprecated - use rubyKanaOn instead
        rubyKana: 2
      },
      CJKSymbolAlternatives: {
        code: 29,
        exclusive: true,
        noCJKSymbolAlternatives: 0,
        CJKSymbolAltOne: 1,
        CJKSymbolAltTwo: 2,
        CJKSymbolAltThree: 3,
        CJKSymbolAltFour: 4,
        CJKSymbolAltFive: 5
      },
      ideographicAlternatives: {
        code: 30,
        exclusive: true,
        noIdeographicAlternatives: 0,
        ideographicAltOne: 1,
        ideographicAltTwo: 2,
        ideographicAltThree: 3,
        ideographicAltFour: 4,
        ideographicAltFive: 5
      },
      CJKVerticalRomanPlacement: {
        code: 31,
        exclusive: true,
        CJKVerticalRomanCentered: 0,
        CJKVerticalRomanHBaseline: 1
      },
      italicCJKRoman: {
        code: 32,
        exclusive: false,
        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
        CJKItalicRoman: 2
      },
      caseSensitiveLayout: {
        code: 33,
        exclusive: false,
        caseSensitiveLayout: 0,
        caseSensitiveSpacing: 2
      },
      alternateKana: {
        code: 34,
        exclusive: false,
        alternateHorizKana: 0,
        alternateVertKana: 2
      },
      stylisticAlternatives: {
        code: 35,
        exclusive: false,
        noStylisticAlternates: 0,
        stylisticAltOne: 2,
        stylisticAltTwo: 4,
        stylisticAltThree: 6,
        stylisticAltFour: 8,
        stylisticAltFive: 10,
        stylisticAltSix: 12,
        stylisticAltSeven: 14,
        stylisticAltEight: 16,
        stylisticAltNine: 18,
        stylisticAltTen: 20,
        stylisticAltEleven: 22,
        stylisticAltTwelve: 24,
        stylisticAltThirteen: 26,
        stylisticAltFourteen: 28,
        stylisticAltFifteen: 30,
        stylisticAltSixteen: 32,
        stylisticAltSeventeen: 34,
        stylisticAltEighteen: 36,
        stylisticAltNineteen: 38,
        stylisticAltTwenty: 40
      },
      contextualAlternates: {
        code: 36,
        exclusive: false,
        contextualAlternates: 0,
        swashAlternates: 2,
        contextualSwashAlternates: 4
      },
      lowerCase: {
        code: 37,
        exclusive: true,
        defaultLowerCase: 0,
        lowerCaseSmallCaps: 1,
        lowerCasePetiteCaps: 2
      },
      upperCase: {
        code: 38,
        exclusive: true,
        defaultUpperCase: 0,
        upperCaseSmallCaps: 1,
        upperCasePetiteCaps: 2
      },
      languageTag: {
        code: 39,
        exclusive: true
      },
      CJKRomanSpacing: {
        code: 103,
        exclusive: true,
        halfWidthCJKRoman: 0,
        proportionalCJKRoman: 1,
        defaultCJKRoman: 2,
        fullWidthCJKRoman: 3
      }
    };
    var $2b7f887ebcb5888a$var$feature = (name, selector) => [
      $2b7f887ebcb5888a$var$features[name].code,
      $2b7f887ebcb5888a$var$features[name][selector]
    ];
    var $2b7f887ebcb5888a$var$OTMapping = {
      rlig: $2b7f887ebcb5888a$var$feature("ligatures", "requiredLigatures"),
      clig: $2b7f887ebcb5888a$var$feature("ligatures", "contextualLigatures"),
      dlig: $2b7f887ebcb5888a$var$feature("ligatures", "rareLigatures"),
      hlig: $2b7f887ebcb5888a$var$feature("ligatures", "historicalLigatures"),
      liga: $2b7f887ebcb5888a$var$feature("ligatures", "commonLigatures"),
      hist: $2b7f887ebcb5888a$var$feature("ligatures", "historicalLigatures"),
      smcp: $2b7f887ebcb5888a$var$feature("lowerCase", "lowerCaseSmallCaps"),
      pcap: $2b7f887ebcb5888a$var$feature("lowerCase", "lowerCasePetiteCaps"),
      frac: $2b7f887ebcb5888a$var$feature("fractions", "diagonalFractions"),
      dnom: $2b7f887ebcb5888a$var$feature("fractions", "diagonalFractions"),
      numr: $2b7f887ebcb5888a$var$feature("fractions", "diagonalFractions"),
      afrc: $2b7f887ebcb5888a$var$feature("fractions", "verticalFractions"),
      // aalt
      // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
      // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
      // unic, vatu, vhal, vjmo, vpal, vrt2
      // dist -> trak table?
      // kern, vkrn -> kern table
      // lfbd + opbd + rtbd -> opbd table?
      // mark, mkmk -> acnt table?
      // locl -> languageTag + ltag table
      case: $2b7f887ebcb5888a$var$feature("caseSensitiveLayout", "caseSensitiveLayout"),
      ccmp: $2b7f887ebcb5888a$var$feature("unicodeDecomposition", "canonicalComposition"),
      cpct: $2b7f887ebcb5888a$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
      valt: $2b7f887ebcb5888a$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
      swsh: $2b7f887ebcb5888a$var$feature("contextualAlternates", "swashAlternates"),
      cswh: $2b7f887ebcb5888a$var$feature("contextualAlternates", "contextualSwashAlternates"),
      curs: $2b7f887ebcb5888a$var$feature("cursiveConnection", "cursive"),
      c2pc: $2b7f887ebcb5888a$var$feature("upperCase", "upperCasePetiteCaps"),
      c2sc: $2b7f887ebcb5888a$var$feature("upperCase", "upperCaseSmallCaps"),
      init: $2b7f887ebcb5888a$var$feature("smartSwash", "wordInitialSwashes"),
      fin2: $2b7f887ebcb5888a$var$feature("smartSwash", "wordFinalSwashes"),
      medi: $2b7f887ebcb5888a$var$feature("smartSwash", "nonFinalSwashes"),
      med2: $2b7f887ebcb5888a$var$feature("smartSwash", "nonFinalSwashes"),
      fin3: $2b7f887ebcb5888a$var$feature("smartSwash", "wordFinalSwashes"),
      fina: $2b7f887ebcb5888a$var$feature("smartSwash", "wordFinalSwashes"),
      pkna: $2b7f887ebcb5888a$var$feature("kanaSpacing", "proportionalKana"),
      half: $2b7f887ebcb5888a$var$feature("textSpacing", "halfWidthText"),
      halt: $2b7f887ebcb5888a$var$feature("textSpacing", "altHalfWidthText"),
      hkna: $2b7f887ebcb5888a$var$feature("alternateKana", "alternateHorizKana"),
      vkna: $2b7f887ebcb5888a$var$feature("alternateKana", "alternateVertKana"),
      // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
      ital: $2b7f887ebcb5888a$var$feature("italicCJKRoman", "CJKItalicRoman"),
      lnum: $2b7f887ebcb5888a$var$feature("numberCase", "upperCaseNumbers"),
      onum: $2b7f887ebcb5888a$var$feature("numberCase", "lowerCaseNumbers"),
      mgrk: $2b7f887ebcb5888a$var$feature("mathematicalExtras", "mathematicalGreek"),
      // nalt: not enough info. what type of annotation?
      // ornm: ditto, which ornament style?
      calt: $2b7f887ebcb5888a$var$feature("contextualAlternates", "contextualAlternates"),
      vrt2: $2b7f887ebcb5888a$var$feature("verticalSubstitution", "substituteVerticalForms"),
      vert: $2b7f887ebcb5888a$var$feature("verticalSubstitution", "substituteVerticalForms"),
      tnum: $2b7f887ebcb5888a$var$feature("numberSpacing", "monospacedNumbers"),
      pnum: $2b7f887ebcb5888a$var$feature("numberSpacing", "proportionalNumbers"),
      sups: $2b7f887ebcb5888a$var$feature("verticalPosition", "superiors"),
      subs: $2b7f887ebcb5888a$var$feature("verticalPosition", "inferiors"),
      ordn: $2b7f887ebcb5888a$var$feature("verticalPosition", "ordinals"),
      pwid: $2b7f887ebcb5888a$var$feature("textSpacing", "proportionalText"),
      hwid: $2b7f887ebcb5888a$var$feature("textSpacing", "halfWidthText"),
      qwid: $2b7f887ebcb5888a$var$feature("textSpacing", "quarterWidthText"),
      twid: $2b7f887ebcb5888a$var$feature("textSpacing", "thirdWidthText"),
      fwid: $2b7f887ebcb5888a$var$feature("textSpacing", "proportionalText"),
      palt: $2b7f887ebcb5888a$var$feature("textSpacing", "altProportionalText"),
      trad: $2b7f887ebcb5888a$var$feature("characterShape", "traditionalCharacters"),
      smpl: $2b7f887ebcb5888a$var$feature("characterShape", "simplifiedCharacters"),
      jp78: $2b7f887ebcb5888a$var$feature("characterShape", "JIS1978Characters"),
      jp83: $2b7f887ebcb5888a$var$feature("characterShape", "JIS1983Characters"),
      jp90: $2b7f887ebcb5888a$var$feature("characterShape", "JIS1990Characters"),
      jp04: $2b7f887ebcb5888a$var$feature("characterShape", "JIS2004Characters"),
      expt: $2b7f887ebcb5888a$var$feature("characterShape", "expertCharacters"),
      hojo: $2b7f887ebcb5888a$var$feature("characterShape", "hojoCharacters"),
      nlck: $2b7f887ebcb5888a$var$feature("characterShape", "NLCCharacters"),
      tnam: $2b7f887ebcb5888a$var$feature("characterShape", "traditionalNamesCharacters"),
      ruby: $2b7f887ebcb5888a$var$feature("rubyKana", "rubyKana"),
      titl: $2b7f887ebcb5888a$var$feature("styleOptions", "titlingCaps"),
      zero: $2b7f887ebcb5888a$var$feature("typographicExtras", "slashedZero"),
      ss01: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltOne"),
      ss02: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTwo"),
      ss03: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltThree"),
      ss04: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFour"),
      ss05: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFive"),
      ss06: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSix"),
      ss07: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSeven"),
      ss08: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltEight"),
      ss09: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltNine"),
      ss10: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTen"),
      ss11: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltEleven"),
      ss12: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTwelve"),
      ss13: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltThirteen"),
      ss14: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFourteen"),
      ss15: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFifteen"),
      ss16: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSixteen"),
      ss17: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSeventeen"),
      ss18: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltEighteen"),
      ss19: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltNineteen"),
      ss20: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTwenty")
    };
    for (let i2 = 1; i2 <= 99; i2++) $2b7f887ebcb5888a$var$OTMapping[`cv${`00${i2}`.slice(-2)}`] = [
      $2b7f887ebcb5888a$var$features.characterAlternatives.code,
      i2
    ];
    var $2b7f887ebcb5888a$var$AATMapping = {};
    for (let ot in $2b7f887ebcb5888a$var$OTMapping) {
      let aat = $2b7f887ebcb5888a$var$OTMapping[ot];
      if ($2b7f887ebcb5888a$var$AATMapping[aat[0]] == null) $2b7f887ebcb5888a$var$AATMapping[aat[0]] = {};
      $2b7f887ebcb5888a$var$AATMapping[aat[0]][aat[1]] = ot;
    }
    function $2b7f887ebcb5888a$export$b813f7d2a1677c16(features) {
      let res = {};
      for (let k in features) {
        let r2;
        if (r2 = $2b7f887ebcb5888a$var$OTMapping[k]) {
          if (res[r2[0]] == null) res[r2[0]] = {};
          res[r2[0]][r2[1]] = features[k];
        }
      }
      return res;
    }
    function $2b7f887ebcb5888a$var$mapFeatureStrings(f3) {
      let [type, setting] = f3;
      if (isNaN(type)) var typeCode = $2b7f887ebcb5888a$var$features[type] && $2b7f887ebcb5888a$var$features[type].code;
      else var typeCode = type;
      if (isNaN(setting)) var settingCode = $2b7f887ebcb5888a$var$features[type] && $2b7f887ebcb5888a$var$features[type][setting];
      else var settingCode = setting;
      return [
        typeCode,
        settingCode
      ];
    }
    function $2b7f887ebcb5888a$export$bd6df347a4f391c4(features) {
      let res = {};
      if (Array.isArray(features)) for (let k = 0; k < features.length; k++) {
        let r2;
        let f3 = $2b7f887ebcb5888a$var$mapFeatureStrings(features[k]);
        if (r2 = $2b7f887ebcb5888a$var$AATMapping[f3[0]] && $2b7f887ebcb5888a$var$AATMapping[f3[0]][f3[1]]) res[r2] = true;
      }
      else if (typeof features === "object") for (let type in features) {
        let feature = features[type];
        for (let setting in feature) {
          let r2;
          let f3 = $2b7f887ebcb5888a$var$mapFeatureStrings([
            type,
            setting
          ]);
          if (feature[setting] && (r2 = $2b7f887ebcb5888a$var$AATMapping[f3[0]] && $2b7f887ebcb5888a$var$AATMapping[f3[0]][f3[1]])) res[r2] = true;
        }
      }
      return Object.keys(res);
    }
    var $f3d63ae925545400$export$2e2bcd8739ae039 = class {
      lookup(glyph) {
        switch (this.table.version) {
          case 0:
            return this.table.values.getItem(glyph);
          case 2:
          case 4: {
            let min = 0;
            let max = this.table.binarySearchHeader.nUnits - 1;
            while (min <= max) {
              var mid = min + max >> 1;
              var seg = this.table.segments[mid];
              if (seg.firstGlyph === 65535) return null;
              if (glyph < seg.firstGlyph) max = mid - 1;
              else if (glyph > seg.lastGlyph) min = mid + 1;
              else {
                if (this.table.version === 2) return seg.value;
                else return seg.values[glyph - seg.firstGlyph];
              }
            }
            return null;
          }
          case 6: {
            let min = 0;
            let max = this.table.binarySearchHeader.nUnits - 1;
            while (min <= max) {
              var mid = min + max >> 1;
              var seg = this.table.segments[mid];
              if (seg.glyph === 65535) return null;
              if (glyph < seg.glyph) max = mid - 1;
              else if (glyph > seg.glyph) min = mid + 1;
              else return seg.value;
            }
            return null;
          }
          case 8:
            return this.table.values[glyph - this.table.firstGlyph];
          default:
            throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
      }
      glyphsForValue(classValue) {
        let res = [];
        switch (this.table.version) {
          case 2:
          case 4:
            for (let segment of this.table.segments) if (this.table.version === 2 && segment.value === classValue) res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(segment.firstGlyph, segment.lastGlyph + 1));
            else {
              for (let index = 0; index < segment.values.length; index++) if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);
            }
            break;
          case 6:
            for (let segment of this.table.segments) if (segment.value === classValue) res.push(segment.glyph);
            break;
          case 8:
            for (let i2 = 0; i2 < this.table.values.length; i2++) if (this.table.values[i2] === classValue) res.push(this.table.firstGlyph + i2);
            break;
          default:
            throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
        return res;
      }
      constructor(table) {
        this.table = table;
      }
    };
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $f3d63ae925545400$export$2e2bcd8739ae039.prototype, "glyphsForValue", null);
    var $860c6347bb941b91$var$START_OF_TEXT_STATE = 0;
    var $860c6347bb941b91$var$END_OF_TEXT_CLASS = 0;
    var $860c6347bb941b91$var$OUT_OF_BOUNDS_CLASS = 1;
    var $860c6347bb941b91$var$DELETED_GLYPH_CLASS = 2;
    var $860c6347bb941b91$var$DONT_ADVANCE = 16384;
    var $860c6347bb941b91$export$2e2bcd8739ae039 = class {
      process(glyphs, reverse, processEntry) {
        let currentState = $860c6347bb941b91$var$START_OF_TEXT_STATE;
        let index = reverse ? glyphs.length - 1 : 0;
        let dir = reverse ? -1 : 1;
        while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
          let glyph = null;
          let classCode = $860c6347bb941b91$var$OUT_OF_BOUNDS_CLASS;
          let shouldAdvance = true;
          if (index === glyphs.length || index === -1) classCode = $860c6347bb941b91$var$END_OF_TEXT_CLASS;
          else {
            glyph = glyphs[index];
            if (glyph.id === 65535) classCode = $860c6347bb941b91$var$DELETED_GLYPH_CLASS;
            else {
              classCode = this.lookupTable.lookup(glyph.id);
              if (classCode == null) classCode = $860c6347bb941b91$var$OUT_OF_BOUNDS_CLASS;
            }
          }
          let row = this.stateTable.stateArray.getItem(currentState);
          let entryIndex = row[classCode];
          let entry = this.stateTable.entryTable.getItem(entryIndex);
          if (classCode !== $860c6347bb941b91$var$END_OF_TEXT_CLASS && classCode !== $860c6347bb941b91$var$DELETED_GLYPH_CLASS) {
            processEntry(glyph, entry, index);
            shouldAdvance = !(entry.flags & $860c6347bb941b91$var$DONT_ADVANCE);
          }
          currentState = entry.newState;
          if (shouldAdvance) index += dir;
        }
        return glyphs;
      }
      /**
      * Performs a depth-first traversal of the glyph strings
      * represented by the state machine.
      */
      traverse(opts, state = 0, visited = /* @__PURE__ */ new Set()) {
        if (visited.has(state)) return;
        visited.add(state);
        let { nClasses, stateArray, entryTable } = this.stateTable;
        let row = stateArray.getItem(state);
        for (let classCode = 4; classCode < nClasses; classCode++) {
          let entryIndex = row[classCode];
          let entry = entryTable.getItem(entryIndex);
          for (let glyph of this.lookupTable.glyphsForValue(classCode)) {
            if (opts.enter) opts.enter(glyph, entry);
            if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);
            if (opts.exit) opts.exit(glyph, entry);
          }
        }
      }
      constructor(stateTable) {
        this.stateTable = stateTable;
        this.lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(stateTable.classTable);
      }
    };
    var $99be642f82069918$var$MARK_FIRST = 32768;
    var $99be642f82069918$var$MARK_LAST = 8192;
    var $99be642f82069918$var$VERB = 15;
    var $99be642f82069918$var$SET_MARK = 32768;
    var $99be642f82069918$var$SET_COMPONENT = 32768;
    var $99be642f82069918$var$PERFORM_ACTION = 8192;
    var $99be642f82069918$var$LAST_MASK = 2147483648;
    var $99be642f82069918$var$STORE_MASK = 1073741824;
    var $99be642f82069918$var$OFFSET_MASK = 1073741823;
    var $99be642f82069918$var$REVERSE_DIRECTION = 4194304;
    var $99be642f82069918$var$CURRENT_INSERT_BEFORE = 2048;
    var $99be642f82069918$var$MARKED_INSERT_BEFORE = 1024;
    var $99be642f82069918$var$CURRENT_INSERT_COUNT = 992;
    var $99be642f82069918$var$MARKED_INSERT_COUNT = 31;
    var $99be642f82069918$export$2e2bcd8739ae039 = class {
      // Processes an array of glyphs and applies the specified features
      // Features should be in the form of {featureType:{featureSetting:boolean}}
      process(glyphs, features = {}) {
        for (let chain of this.morx.chains) {
          let flags = chain.defaultFlags;
          for (let feature of chain.features) {
            let f3;
            if (f3 = features[feature.featureType]) {
              if (f3[feature.featureSetting]) {
                flags &= feature.disableFlags;
                flags |= feature.enableFlags;
              } else if (f3[feature.featureSetting] === false) {
                flags |= ~feature.disableFlags;
                flags &= ~feature.enableFlags;
              }
            }
          }
          for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);
        }
        let index = glyphs.length - 1;
        while (index >= 0) {
          if (glyphs[index].id === 65535) glyphs.splice(index, 1);
          index--;
        }
        return glyphs;
      }
      processSubtable(subtable, glyphs) {
        this.subtable = subtable;
        this.glyphs = glyphs;
        if (this.subtable.type === 4) {
          this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
          return;
        }
        this.ligatureStack = [];
        this.markedGlyph = null;
        this.firstGlyph = null;
        this.lastGlyph = null;
        this.markedIndex = null;
        let stateMachine = this.getStateMachine(subtable);
        let process2 = this.getProcessor();
        let reverse = !!(this.subtable.coverage & $99be642f82069918$var$REVERSE_DIRECTION);
        return stateMachine.process(this.glyphs, reverse, process2);
      }
      getStateMachine(subtable) {
        return new (0, $860c6347bb941b91$export$2e2bcd8739ae039)(subtable.table.stateTable);
      }
      getProcessor() {
        switch (this.subtable.type) {
          case 0:
            return this.processIndicRearragement;
          case 1:
            return this.processContextualSubstitution;
          case 2:
            return this.processLigature;
          case 4:
            return this.processNoncontextualSubstitutions;
          case 5:
            return this.processGlyphInsertion;
          default:
            throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
        }
      }
      processIndicRearragement(glyph, entry, index) {
        if (entry.flags & $99be642f82069918$var$MARK_FIRST) this.firstGlyph = index;
        if (entry.flags & $99be642f82069918$var$MARK_LAST) this.lastGlyph = index;
        $99be642f82069918$var$reorderGlyphs(this.glyphs, entry.flags & $99be642f82069918$var$VERB, this.firstGlyph, this.lastGlyph);
      }
      processContextualSubstitution(glyph, entry, index) {
        let subsitutions = this.subtable.table.substitutionTable.items;
        if (entry.markIndex !== 65535) {
          let lookup = subsitutions.getItem(entry.markIndex);
          let lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(lookup);
          glyph = this.glyphs[this.markedGlyph];
          var gid = lookupTable.lookup(glyph.id);
          if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.currentIndex !== 65535) {
          let lookup = subsitutions.getItem(entry.currentIndex);
          let lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(lookup);
          glyph = this.glyphs[index];
          var gid = lookupTable.lookup(glyph.id);
          if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.flags & $99be642f82069918$var$SET_MARK) this.markedGlyph = index;
      }
      processLigature(glyph, entry, index) {
        if (entry.flags & $99be642f82069918$var$SET_COMPONENT) this.ligatureStack.push(index);
        if (entry.flags & $99be642f82069918$var$PERFORM_ACTION) {
          let actions = this.subtable.table.ligatureActions;
          let components = this.subtable.table.components;
          let ligatureList = this.subtable.table.ligatureList;
          let actionIndex = entry.action;
          let last = false;
          let ligatureIndex = 0;
          let codePoints = [];
          let ligatureGlyphs = [];
          while (!last) {
            let componentGlyph = this.ligatureStack.pop();
            codePoints.unshift(...this.glyphs[componentGlyph].codePoints);
            let action = actions.getItem(actionIndex++);
            last = !!(action & $99be642f82069918$var$LAST_MASK);
            let store = !!(action & $99be642f82069918$var$STORE_MASK);
            let offset = (action & $99be642f82069918$var$OFFSET_MASK) << 2 >> 2;
            offset += this.glyphs[componentGlyph].id;
            let component = components.getItem(offset);
            ligatureIndex += component;
            if (last || store) {
              let ligatureEntry = ligatureList.getItem(ligatureIndex);
              this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
              ligatureGlyphs.push(componentGlyph);
              ligatureIndex = 0;
              codePoints = [];
            } else this.glyphs[componentGlyph] = this.font.getGlyph(65535);
          }
          this.ligatureStack.push(...ligatureGlyphs);
        }
      }
      processNoncontextualSubstitutions(subtable, glyphs, index) {
        let lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(subtable.table.lookupTable);
        for (index = 0; index < glyphs.length; index++) {
          let glyph = glyphs[index];
          if (glyph.id !== 65535) {
            let gid = lookupTable.lookup(glyph.id);
            if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
          }
        }
      }
      _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
        let insertions = [];
        while (count--) {
          let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
          insertions.push(this.font.getGlyph(gid));
        }
        if (!isBefore) glyphIndex++;
        this.glyphs.splice(glyphIndex, 0, ...insertions);
      }
      processGlyphInsertion(glyph, entry, index) {
        if (entry.flags & $99be642f82069918$var$SET_MARK) this.markedIndex = index;
        if (entry.markedInsertIndex !== 65535) {
          let count = (entry.flags & $99be642f82069918$var$MARKED_INSERT_COUNT) >>> 5;
          let isBefore = !!(entry.flags & $99be642f82069918$var$MARKED_INSERT_BEFORE);
          this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
        }
        if (entry.currentInsertIndex !== 65535) {
          let count = (entry.flags & $99be642f82069918$var$CURRENT_INSERT_COUNT) >>> 5;
          let isBefore = !!(entry.flags & $99be642f82069918$var$CURRENT_INSERT_BEFORE);
          this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);
        }
      }
      getSupportedFeatures() {
        let features = [];
        for (let chain of this.morx.chains) for (let feature of chain.features) features.push([
          feature.featureType,
          feature.featureSetting
        ]);
        return features;
      }
      generateInputs(gid) {
        if (!this.inputCache) this.generateInputCache();
        return this.inputCache[gid] || [];
      }
      generateInputCache() {
        this.inputCache = {};
        for (let chain of this.morx.chains) {
          let flags = chain.defaultFlags;
          for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);
        }
      }
      generateInputsForSubtable(subtable) {
        if (subtable.type !== 2) return;
        let reverse = !!(subtable.coverage & $99be642f82069918$var$REVERSE_DIRECTION);
        if (reverse) throw new Error("Reverse subtable, not supported.");
        this.subtable = subtable;
        this.ligatureStack = [];
        let stateMachine = this.getStateMachine(subtable);
        let process2 = this.getProcessor();
        let input = [];
        let stack = [];
        this.glyphs = [];
        stateMachine.traverse({
          enter: (glyph, entry) => {
            let glyphs = this.glyphs;
            stack.push({
              glyphs: glyphs.slice(),
              ligatureStack: this.ligatureStack.slice()
            });
            let g = this.font.getGlyph(glyph);
            input.push(g);
            glyphs.push(input[input.length - 1]);
            process2(glyphs[glyphs.length - 1], entry, glyphs.length - 1);
            let count = 0;
            let found = 0;
            for (let i2 = 0; i2 < glyphs.length && count <= 1; i2++) if (glyphs[i2].id !== 65535) {
              count++;
              found = glyphs[i2].id;
            }
            if (count === 1) {
              let result = input.map((g2) => g2.id);
              let cache = this.inputCache[found];
              if (cache) cache.push(result);
              else this.inputCache[found] = [
                result
              ];
            }
          },
          exit: () => {
            ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());
            input.pop();
          }
        });
      }
      constructor(font) {
        this.processIndicRearragement = this.processIndicRearragement.bind(this);
        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
        this.processLigature = this.processLigature.bind(this);
        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
        this.font = font;
        this.morx = font.morx;
        this.inputCache = null;
      }
    };
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $99be642f82069918$export$2e2bcd8739ae039.prototype, "getStateMachine", null);
    function $99be642f82069918$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {
      let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
      if (reverseB) end.reverse();
      let start = glyphs.splice(rangeA[0], rangeA[1], ...end);
      if (reverseA) start.reverse();
      glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);
      return glyphs;
    }
    function $99be642f82069918$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
      let length = lastGlyph - firstGlyph + 1;
      switch (verb) {
        case 0:
          return glyphs;
        case 1:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            0
          ]);
        case 2:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            0
          ], [
            lastGlyph,
            1
          ]);
        case 3:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            1
          ]);
        case 4:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            0
          ]);
        case 5:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            0
          ], true, false);
        case 6:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            0
          ], [
            lastGlyph,
            2
          ]);
        case 7:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            0
          ], [
            lastGlyph,
            2
          ], false, true);
        case 8:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            2
          ]);
        case 9:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            2
          ], false, true);
        case 10:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            1
          ]);
        case 11:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            1
          ], true, false);
        case 12:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ]);
        case 13:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ], true, false);
        case 14:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ], false, true);
        case 15:
          return $99be642f82069918$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ], true, true);
        default:
          throw new Error(`Unknown verb: ${verb}`);
      }
    }
    var $860fcbd64bc12fbc$export$2e2bcd8739ae039 = class {
      substitute(glyphRun) {
        if (glyphRun.direction === "rtl") glyphRun.glyphs.reverse();
        this.morxProcessor.process(glyphRun.glyphs, $2b7f887ebcb5888a$export$b813f7d2a1677c16(glyphRun.features));
      }
      getAvailableFeatures(script, language) {
        return $2b7f887ebcb5888a$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());
      }
      stringsForGlyph(gid) {
        let glyphStrings = this.morxProcessor.generateInputs(gid);
        let result = /* @__PURE__ */ new Set();
        for (let glyphs of glyphStrings) this._addStrings(glyphs, 0, result, "");
        return result;
      }
      _addStrings(glyphs, index, strings, string) {
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);
        for (let codePoint of codePoints) {
          let s2 = string + String.fromCodePoint(codePoint);
          if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s2);
          else strings.add(s2);
        }
      }
      constructor(font) {
        this.font = font;
        this.morxProcessor = new (0, $99be642f82069918$export$2e2bcd8739ae039)(font);
        this.fallbackPosition = false;
      }
    };
    var $d7e93cca3cf8ce8a$export$2e2bcd8739ae039 = class {
      /**
      * Adds the given features to the last stage.
      * Ignores features that have already been applied.
      */
      _addFeatures(features, global2) {
        let stageIndex = this.stages.length - 1;
        let stage = this.stages[stageIndex];
        for (let feature of features) if (this.allFeatures[feature] == null) {
          stage.push(feature);
          this.allFeatures[feature] = stageIndex;
          if (global2) this.globalFeatures[feature] = true;
        }
      }
      /**
      * Add features to the last stage
      */
      add(arg, global2 = true) {
        if (this.stages.length === 0) this.stages.push([]);
        if (typeof arg === "string") arg = [
          arg
        ];
        if (Array.isArray(arg)) this._addFeatures(arg, global2);
        else if (typeof arg === "object") {
          this._addFeatures(arg.global || [], true);
          this._addFeatures(arg.local || [], false);
        } else throw new Error("Unsupported argument to ShapingPlan#add");
      }
      /**
      * Add a new stage
      */
      addStage(arg, global2) {
        if (typeof arg === "function") this.stages.push(arg, []);
        else {
          this.stages.push([]);
          this.add(arg, global2);
        }
      }
      setFeatureOverrides(features) {
        if (Array.isArray(features)) this.add(features);
        else if (typeof features === "object") for (let tag in features) {
          if (features[tag]) this.add(tag);
          else if (this.allFeatures[tag] != null) {
            let stage = this.stages[this.allFeatures[tag]];
            stage.splice(stage.indexOf(tag), 1);
            delete this.allFeatures[tag];
            delete this.globalFeatures[tag];
          }
        }
      }
      /**
      * Assigns the global features to the given glyphs
      */
      assignGlobalFeatures(glyphs) {
        for (let glyph of glyphs) for (let feature in this.globalFeatures) glyph.features[feature] = true;
      }
      /**
      * Executes the planned stages using the given OTProcessor
      */
      process(processor, glyphs, positions) {
        for (let stage of this.stages) {
          if (typeof stage === "function") {
            if (!positions) stage(this.font, glyphs, this);
          } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);
        }
      }
      constructor(font, script, direction) {
        this.font = font;
        this.script = script;
        this.direction = direction;
        this.stages = [];
        this.globalFeatures = {};
        this.allFeatures = {};
      }
    };
    var $d28fb665ee343afc$var$VARIATION_FEATURES = [
      "rvrn"
    ];
    var $d28fb665ee343afc$var$COMMON_FEATURES = [
      "ccmp",
      "locl",
      "rlig",
      "mark",
      "mkmk"
    ];
    var $d28fb665ee343afc$var$FRACTIONAL_FEATURES = [
      "frac",
      "numr",
      "dnom"
    ];
    var $d28fb665ee343afc$var$HORIZONTAL_FEATURES = [
      "calt",
      "clig",
      "liga",
      "rclt",
      "curs",
      "kern"
    ];
    var $d28fb665ee343afc$var$DIRECTIONAL_FEATURES = {
      ltr: [
        "ltra",
        "ltrm"
      ],
      rtl: [
        "rtla",
        "rtlm"
      ]
    };
    var $d28fb665ee343afc$export$2e2bcd8739ae039 = class {
      static plan(plan, glyphs, features) {
        this.planPreprocessing(plan);
        this.planFeatures(plan);
        this.planPostprocessing(plan, features);
        plan.assignGlobalFeatures(glyphs);
        this.assignFeatures(plan, glyphs);
      }
      static planPreprocessing(plan) {
        plan.add({
          global: [
            ...$d28fb665ee343afc$var$VARIATION_FEATURES,
            ...$d28fb665ee343afc$var$DIRECTIONAL_FEATURES[plan.direction]
          ],
          local: $d28fb665ee343afc$var$FRACTIONAL_FEATURES
        });
      }
      static planFeatures(plan) {
      }
      static planPostprocessing(plan, userFeatures) {
        plan.add([
          ...$d28fb665ee343afc$var$COMMON_FEATURES,
          ...$d28fb665ee343afc$var$HORIZONTAL_FEATURES
        ]);
        plan.setFeatureOverrides(userFeatures);
      }
      static assignFeatures(plan, glyphs) {
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          let glyph = glyphs[i2];
          if (glyph.codePoints[0] === 8260) {
            let start = i2;
            let end = i2 + 1;
            while (start > 0 && (0, $elh9A$unicodeproperties.isDigit)(glyphs[start - 1].codePoints[0])) {
              glyphs[start - 1].features.numr = true;
              glyphs[start - 1].features.frac = true;
              start--;
            }
            while (end < glyphs.length && (0, $elh9A$unicodeproperties.isDigit)(glyphs[end].codePoints[0])) {
              glyphs[end].features.dnom = true;
              glyphs[end].features.frac = true;
              end++;
            }
            glyph.features.frac = true;
            i2 = end - 1;
          }
        }
      }
    };
    (0, $elh9A$swchelperscjs_define_propertycjs._)($d28fb665ee343afc$export$2e2bcd8739ae039, "zeroMarkWidths", "AFTER_GPOS");
    var $17ba6019f27bfcf9$var$trie = new (0, $parcel$interopDefault($elh9A$unicodetrie))((0, $66a5b9fb5318558a$export$94fdf11bafc8de6b)("APABAAAAAAAAOAAAAf0BAv7tmi1MxDAUx7vtvjhAgcDgkEgEAnmXEBIMCYaEcygEiqBQ4FAkCE4ikUgMiiBJSAgSiUQSDMn9L9eSl6bddddug9t7yS/trevre+3r27pcNxZiG+yCfdCVv/9LeQxOwRm4AJegD27ALbgD9+ABPJF+z+BN/h7yDj5k/VOWX6SdmU5+wLWknggxDxaS8u0qiiX4uiz9XamQ3wzDMAzDMAzDMAzDVI/h959V/v7BMAzDMAzDMLlyNTNiMSdewVxbiA44B4/guz1qW58VYlMI0WsJ0W+N6kXw0spvPtdwhtkwnGM6uLaV4Xyzg3v3PM9DPfQ/sOg4xPWjipy31P8LTqbU304c/cLCUmWJLNB2Uz2U1KTeRKNmKHVMfbJC+/0loTZRH/W5cvEvBJPMbREkWt3FD1NcqXZBSpuE2Ad0PBehPtNrPtIEdYP+hiRt/V1jIiE69X4NT/uVZI3PUHE9bm5M7ePGdZWy951v7Nn6j8v1WWKP3mt6ttnsigx6VN7Vc0VomSSGqW2mGNP1muZPl7LfjNUaKNFtDGVf2fvE9O7VlBS5j333c5p/eeoOqcs1R/hIqDWLJ7TTlksirVT1SI7l8k4Yp+g3jafGcrU1RM6l9th80XOpnlN97bDNY4i4s61B0Si/ipa0uHMl6zqEjlFfCZm/TM8KmzQDjmuTAQ=="));
    var $17ba6019f27bfcf9$var$FEATURES = [
      "isol",
      "fina",
      "fin2",
      "fin3",
      "medi",
      "med2",
      "init"
    ];
    var $17ba6019f27bfcf9$var$ShapingClasses = {
      Non_Joining: 0,
      Left_Joining: 1,
      Right_Joining: 2,
      Dual_Joining: 3,
      Join_Causing: 3,
      ALAPH: 4,
      "DALATH RISH": 5,
      Transparent: 6
    };
    var $17ba6019f27bfcf9$var$ISOL = "isol";
    var $17ba6019f27bfcf9$var$FINA = "fina";
    var $17ba6019f27bfcf9$var$FIN2 = "fin2";
    var $17ba6019f27bfcf9$var$FIN3 = "fin3";
    var $17ba6019f27bfcf9$var$MEDI = "medi";
    var $17ba6019f27bfcf9$var$MED2 = "med2";
    var $17ba6019f27bfcf9$var$INIT = "init";
    var $17ba6019f27bfcf9$var$NONE = null;
    var $17ba6019f27bfcf9$var$STATE_TABLE = [
      //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
      // State 0: prev was U,  not willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          1
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          1
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          6
        ]
      ],
      // State 1: prev was R or ISOL/ALAPH,  not willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          1
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$FIN2,
          5
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          6
        ]
      ],
      // State 2: prev was D/L in ISOL form,  willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$INIT,
          $17ba6019f27bfcf9$var$FINA,
          1
        ],
        [
          $17ba6019f27bfcf9$var$INIT,
          $17ba6019f27bfcf9$var$FINA,
          3
        ],
        [
          $17ba6019f27bfcf9$var$INIT,
          $17ba6019f27bfcf9$var$FINA,
          4
        ],
        [
          $17ba6019f27bfcf9$var$INIT,
          $17ba6019f27bfcf9$var$FINA,
          6
        ]
      ],
      // State 3: prev was D in FINA form,  willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$MEDI,
          $17ba6019f27bfcf9$var$FINA,
          1
        ],
        [
          $17ba6019f27bfcf9$var$MEDI,
          $17ba6019f27bfcf9$var$FINA,
          3
        ],
        [
          $17ba6019f27bfcf9$var$MEDI,
          $17ba6019f27bfcf9$var$FINA,
          4
        ],
        [
          $17ba6019f27bfcf9$var$MEDI,
          $17ba6019f27bfcf9$var$FINA,
          6
        ]
      ],
      // State 4: prev was FINA ALAPH,  not willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$MED2,
          $17ba6019f27bfcf9$var$ISOL,
          1
        ],
        [
          $17ba6019f27bfcf9$var$MED2,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$MED2,
          $17ba6019f27bfcf9$var$FIN2,
          5
        ],
        [
          $17ba6019f27bfcf9$var$MED2,
          $17ba6019f27bfcf9$var$ISOL,
          6
        ]
      ],
      // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$ISOL,
          $17ba6019f27bfcf9$var$ISOL,
          1
        ],
        [
          $17ba6019f27bfcf9$var$ISOL,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$ISOL,
          $17ba6019f27bfcf9$var$FIN2,
          5
        ],
        [
          $17ba6019f27bfcf9$var$ISOL,
          $17ba6019f27bfcf9$var$ISOL,
          6
        ]
      ],
      // State 6: prev was DALATH/RISH,  not willing to join.
      [
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$NONE,
          0
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          1
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          2
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$FIN3,
          5
        ],
        [
          $17ba6019f27bfcf9$var$NONE,
          $17ba6019f27bfcf9$var$ISOL,
          6
        ]
      ]
    ];
    var $17ba6019f27bfcf9$export$2e2bcd8739ae039 = class extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
      static planFeatures(plan) {
        plan.add([
          "ccmp",
          "locl"
        ]);
        for (let i2 = 0; i2 < $17ba6019f27bfcf9$var$FEATURES.length; i2++) {
          let feature = $17ba6019f27bfcf9$var$FEATURES[i2];
          plan.addStage(feature, false);
        }
        plan.addStage("mset");
      }
      static assignFeatures(plan, glyphs) {
        super.assignFeatures(plan, glyphs);
        let prev = -1;
        let state = 0;
        let actions = [];
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          let curAction, prevAction;
          var glyph = glyphs[i2];
          let type = $17ba6019f27bfcf9$var$getShapingClass(glyph.codePoints[0]);
          if (type === $17ba6019f27bfcf9$var$ShapingClasses.Transparent) {
            actions[i2] = $17ba6019f27bfcf9$var$NONE;
            continue;
          }
          [prevAction, curAction, state] = $17ba6019f27bfcf9$var$STATE_TABLE[state][type];
          if (prevAction !== $17ba6019f27bfcf9$var$NONE && prev !== -1) actions[prev] = prevAction;
          actions[i2] = curAction;
          prev = i2;
        }
        for (let index = 0; index < glyphs.length; index++) {
          let feature;
          var glyph = glyphs[index];
          if (feature = actions[index]) glyph.features[feature] = true;
        }
      }
    };
    function $17ba6019f27bfcf9$var$getShapingClass(codePoint) {
      let res = $17ba6019f27bfcf9$var$trie.get(codePoint);
      if (res) return res - 1;
      let category = (0, $elh9A$unicodeproperties.getCategory)(codePoint);
      if (category === "Mn" || category === "Me" || category === "Cf") return $17ba6019f27bfcf9$var$ShapingClasses.Transparent;
      return $17ba6019f27bfcf9$var$ShapingClasses.Non_Joining;
    }
    var $d6368085223f631e$export$2e2bcd8739ae039 = class {
      reset(options = {}, index = 0) {
        this.options = options;
        this.flags = options.flags || {};
        this.markAttachmentType = options.markAttachmentType || 0;
        this.index = index;
      }
      get cur() {
        return this.glyphs[this.index] || null;
      }
      shouldIgnore(glyph) {
        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
      }
      move(dir) {
        this.index += dir;
        while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) this.index += dir;
        if (0 > this.index || this.index >= this.glyphs.length) return null;
        return this.glyphs[this.index];
      }
      next() {
        return this.move(1);
      }
      prev() {
        return this.move(-1);
      }
      peek(count = 1) {
        let idx = this.index;
        let res = this.increment(count);
        this.index = idx;
        return res;
      }
      peekIndex(count = 1) {
        let idx = this.index;
        this.increment(count);
        let res = this.index;
        this.index = idx;
        return res;
      }
      increment(count = 1) {
        let dir = count < 0 ? -1 : 1;
        count = Math.abs(count);
        while (count--) this.move(dir);
        return this.glyphs[this.index];
      }
      constructor(glyphs, options) {
        this.glyphs = glyphs;
        this.reset(options);
      }
    };
    var $7b226e6bbeadedeb$var$DEFAULT_SCRIPTS = [
      "DFLT",
      "dflt",
      "latn"
    ];
    var $7b226e6bbeadedeb$export$2e2bcd8739ae039 = class {
      findScript(script) {
        if (this.table.scriptList == null) return null;
        if (!Array.isArray(script)) script = [
          script
        ];
        for (let s2 of script) for (let entry of this.table.scriptList) {
          if (entry.tag === s2) return entry;
        }
        return null;
      }
      selectScript(script, language, direction) {
        let changed = false;
        let entry;
        if (!this.script || script !== this.scriptTag) {
          entry = this.findScript(script);
          if (!entry) entry = this.findScript($7b226e6bbeadedeb$var$DEFAULT_SCRIPTS);
          if (!entry) return this.scriptTag;
          this.scriptTag = entry.tag;
          this.script = entry.script;
          this.language = null;
          this.languageTag = null;
          changed = true;
        }
        if (!direction || direction !== this.direction) this.direction = direction || $e38a1a895f6aeb54$export$9fddb9d0dd7d8a54(script);
        if (language && language.length < 4) language += " ".repeat(4 - language.length);
        if (!language || language !== this.languageTag) {
          this.language = null;
          for (let lang of this.script.langSysRecords) if (lang.tag === language) {
            this.language = lang.langSys;
            this.languageTag = lang.tag;
            break;
          }
          if (!this.language) {
            this.language = this.script.defaultLangSys;
            this.languageTag = null;
          }
          changed = true;
        }
        if (changed) {
          this.features = {};
          if (this.language) for (let featureIndex of this.language.featureIndexes) {
            let record = this.table.featureList[featureIndex];
            let substituteFeature = this.substituteFeatureForVariations(featureIndex);
            this.features[record.tag] = substituteFeature || record.feature;
          }
        }
        return this.scriptTag;
      }
      lookupsForFeatures(userFeatures = [], exclude) {
        let lookups = [];
        for (let tag of userFeatures) {
          let feature = this.features[tag];
          if (!feature) continue;
          for (let lookupIndex of feature.lookupListIndexes) {
            if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;
            lookups.push({
              feature: tag,
              index: lookupIndex,
              lookup: this.table.lookupList.get(lookupIndex)
            });
          }
        }
        lookups.sort((a, b) => a.index - b.index);
        return lookups;
      }
      substituteFeatureForVariations(featureIndex) {
        if (this.variationsIndex === -1) return null;
        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
        let substitutions = record.featureTableSubstitution.substitutions;
        for (let substitution of substitutions) {
          if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;
        }
        return null;
      }
      findVariationsIndex(coords) {
        let variations = this.table.featureVariations;
        if (!variations) return -1;
        let records = variations.featureVariationRecords;
        for (let i2 = 0; i2 < records.length; i2++) {
          let conditions = records[i2].conditionSet.conditionTable;
          if (this.variationConditionsMatch(conditions, coords)) return i2;
        }
        return -1;
      }
      variationConditionsMatch(conditions, coords) {
        return conditions.every((condition) => {
          let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
          return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
        });
      }
      applyFeatures(userFeatures, glyphs, advances) {
        let lookups = this.lookupsForFeatures(userFeatures);
        this.applyLookups(lookups, glyphs, advances);
      }
      applyLookups(lookups, glyphs, positions) {
        this.glyphs = glyphs;
        this.positions = positions;
        this.glyphIterator = new (0, $d6368085223f631e$export$2e2bcd8739ae039)(glyphs);
        for (let { feature, lookup } of lookups) {
          this.currentFeature = feature;
          this.glyphIterator.reset(lookup.flags);
          while (this.glyphIterator.index < glyphs.length) {
            if (!(feature in this.glyphIterator.cur.features)) {
              this.glyphIterator.next();
              continue;
            }
            for (let table of lookup.subTables) {
              let res = this.applyLookup(lookup.lookupType, table);
              if (res) break;
            }
            this.glyphIterator.next();
          }
        }
      }
      applyLookup(lookup, table) {
        throw new Error("applyLookup must be implemented by subclasses");
      }
      applyLookupList(lookupRecords) {
        let options = this.glyphIterator.options;
        let glyphIndex = this.glyphIterator.index;
        for (let lookupRecord of lookupRecords) {
          this.glyphIterator.reset(options, glyphIndex);
          this.glyphIterator.increment(lookupRecord.sequenceIndex);
          let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
          this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);
          for (let table of lookup.subTables) {
            if (this.applyLookup(lookup.lookupType, table)) break;
          }
        }
        this.glyphIterator.reset(options, glyphIndex);
        return true;
      }
      coverageIndex(coverage, glyph) {
        if (glyph == null) glyph = this.glyphIterator.cur.id;
        switch (coverage.version) {
          case 1:
            return coverage.glyphs.indexOf(glyph);
          case 2:
            for (let range of coverage.rangeRecords) {
              if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;
            }
            break;
        }
        return -1;
      }
      match(sequenceIndex, sequence, fn, matched) {
        let pos = this.glyphIterator.index;
        let glyph = this.glyphIterator.increment(sequenceIndex);
        let idx = 0;
        while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
          if (matched) matched.push(this.glyphIterator.index);
          idx++;
          glyph = this.glyphIterator.next();
        }
        this.glyphIterator.index = pos;
        if (idx < sequence.length) return false;
        return matched || true;
      }
      sequenceMatches(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);
      }
      sequenceMatchIndices(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph) => {
          if (!(this.currentFeature in glyph.features)) return false;
          return component === glyph.id;
        }, []);
      }
      coverageSequenceMatches(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0);
      }
      getClassID(glyph, classDef) {
        switch (classDef.version) {
          case 1:
            let i2 = glyph - classDef.startGlyph;
            if (i2 >= 0 && i2 < classDef.classValueArray.length) return classDef.classValueArray[i2];
            break;
          case 2:
            for (let range of classDef.classRangeRecord) {
              if (range.start <= glyph && glyph <= range.end) return range.class;
            }
            break;
        }
        return 0;
      }
      classSequenceMatches(sequenceIndex, sequence, classDef) {
        return this.match(sequenceIndex, sequence, (classID, glyph) => classID === this.getClassID(glyph.id, classDef));
      }
      applyContext(table) {
        let index, set;
        switch (table.version) {
          case 1:
            index = this.coverageIndex(table.coverage);
            if (index === -1) return false;
            set = table.ruleSets[index];
            for (let rule of set) {
              if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);
            }
            break;
          case 2:
            if (this.coverageIndex(table.coverage) === -1) return false;
            index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
            if (index === -1) return false;
            set = table.classSet[index];
            for (let rule of set) {
              if (this.classSequenceMatches(1, rule.classes, table.classDef)) return this.applyLookupList(rule.lookupRecords);
            }
            break;
          case 3:
            if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);
            break;
        }
        return false;
      }
      applyChainingContext(table) {
        let index;
        switch (table.version) {
          case 1:
            index = this.coverageIndex(table.coverage);
            if (index === -1) return false;
            let set = table.chainRuleSets[index];
            for (let rule of set) {
              if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);
            }
            break;
          case 2:
            if (this.coverageIndex(table.coverage) === -1) return false;
            index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
            let rules = table.chainClassSet[index];
            if (!rules) return false;
            for (let rule of rules) {
              if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule.input, table.inputClassDef) && this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule.lookupRecords);
            }
            break;
          case 3:
            if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);
            break;
        }
        return false;
      }
      constructor(font, table) {
        this.font = font;
        this.table = table;
        this.script = null;
        this.scriptTag = null;
        this.language = null;
        this.languageTag = null;
        this.features = {};
        this.lookups = {};
        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;
        this.selectScript();
        this.glyphs = [];
        this.positions = [];
        this.ligatureID = 1;
        this.currentFeature = null;
      }
    };
    var $f22bb23c9fd478d8$export$2e2bcd8739ae039 = class _$f22bb23c9fd478d8$export$2e2bcd8739ae039 {
      get id() {
        return this._id;
      }
      set id(id) {
        this._id = id;
        this.substituted = true;
        let GDEF = this._font.GDEF;
        if (GDEF && GDEF.glyphClassDef) {
          let classID = (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.glyphClassDef);
          this.isBase = classID === 1;
          this.isLigature = classID === 2;
          this.isMark = classID === 3;
          this.markAttachmentType = GDEF.markAttachClassDef ? (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
        } else {
          this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $elh9A$unicodeproperties.isMark));
          this.isBase = !this.isMark;
          this.isLigature = this.codePoints.length > 1;
          this.markAttachmentType = 0;
        }
      }
      copy() {
        return new _$f22bb23c9fd478d8$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);
      }
      constructor(font, id, codePoints = [], features) {
        this._font = font;
        this.codePoints = codePoints;
        this.id = id;
        this.features = {};
        if (Array.isArray(features)) for (let i2 = 0; i2 < features.length; i2++) {
          let feature = features[i2];
          this.features[feature] = true;
        }
        else if (typeof features === "object") Object.assign(this.features, features);
        this.ligatureID = null;
        this.ligatureComponent = null;
        this.isLigated = false;
        this.cursiveAttachment = null;
        this.markAttachment = null;
        this.shaperInfo = null;
        this.substituted = false;
        this.isMultiplied = false;
      }
    };
    var $fa1d9fd80dd7279e$export$2e2bcd8739ae039 = class extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
      static planFeatures(plan) {
        plan.add([
          "ljmo",
          "vjmo",
          "tjmo"
        ], false);
      }
      static assignFeatures(plan, glyphs) {
        let state = 0;
        let i2 = 0;
        while (i2 < glyphs.length) {
          let action;
          let glyph = glyphs[i2];
          let code = glyph.codePoints[0];
          let type = $fa1d9fd80dd7279e$var$getType(code);
          [action, state] = $fa1d9fd80dd7279e$var$STATE_TABLE[state][type];
          switch (action) {
            case $fa1d9fd80dd7279e$var$DECOMPOSE:
              if (!plan.font.hasGlyphForCodePoint(code)) i2 = $fa1d9fd80dd7279e$var$decompose(glyphs, i2, plan.font);
              break;
            case $fa1d9fd80dd7279e$var$COMPOSE:
              i2 = $fa1d9fd80dd7279e$var$compose(glyphs, i2, plan.font);
              break;
            case $fa1d9fd80dd7279e$var$TONE_MARK:
              $fa1d9fd80dd7279e$var$reorderToneMark(glyphs, i2, plan.font);
              break;
            case $fa1d9fd80dd7279e$var$INVALID:
              i2 = $fa1d9fd80dd7279e$var$insertDottedCircle(glyphs, i2, plan.font);
              break;
          }
          i2++;
        }
      }
    };
    (0, $elh9A$swchelperscjs_define_propertycjs._)($fa1d9fd80dd7279e$export$2e2bcd8739ae039, "zeroMarkWidths", "NONE");
    var $fa1d9fd80dd7279e$var$HANGUL_BASE = 44032;
    var $fa1d9fd80dd7279e$var$HANGUL_END = 55204;
    var $fa1d9fd80dd7279e$var$HANGUL_COUNT = $fa1d9fd80dd7279e$var$HANGUL_END - $fa1d9fd80dd7279e$var$HANGUL_BASE + 1;
    var $fa1d9fd80dd7279e$var$L_BASE = 4352;
    var $fa1d9fd80dd7279e$var$V_BASE = 4449;
    var $fa1d9fd80dd7279e$var$T_BASE = 4519;
    var $fa1d9fd80dd7279e$var$L_COUNT = 19;
    var $fa1d9fd80dd7279e$var$V_COUNT = 21;
    var $fa1d9fd80dd7279e$var$T_COUNT = 28;
    var $fa1d9fd80dd7279e$var$L_END = $fa1d9fd80dd7279e$var$L_BASE + $fa1d9fd80dd7279e$var$L_COUNT - 1;
    var $fa1d9fd80dd7279e$var$V_END = $fa1d9fd80dd7279e$var$V_BASE + $fa1d9fd80dd7279e$var$V_COUNT - 1;
    var $fa1d9fd80dd7279e$var$T_END = $fa1d9fd80dd7279e$var$T_BASE + $fa1d9fd80dd7279e$var$T_COUNT - 1;
    var $fa1d9fd80dd7279e$var$DOTTED_CIRCLE = 9676;
    var $fa1d9fd80dd7279e$var$isL = (code) => 4352 <= code && code <= 4447 || 43360 <= code && code <= 43388;
    var $fa1d9fd80dd7279e$var$isV = (code) => 4448 <= code && code <= 4519 || 55216 <= code && code <= 55238;
    var $fa1d9fd80dd7279e$var$isT = (code) => 4520 <= code && code <= 4607 || 55243 <= code && code <= 55291;
    var $fa1d9fd80dd7279e$var$isTone = (code) => 12334 <= code && code <= 12335;
    var $fa1d9fd80dd7279e$var$isLVT = (code) => $fa1d9fd80dd7279e$var$HANGUL_BASE <= code && code <= $fa1d9fd80dd7279e$var$HANGUL_END;
    var $fa1d9fd80dd7279e$var$isLV = (code) => code - $fa1d9fd80dd7279e$var$HANGUL_BASE < $fa1d9fd80dd7279e$var$HANGUL_COUNT && (code - $fa1d9fd80dd7279e$var$HANGUL_BASE) % $fa1d9fd80dd7279e$var$T_COUNT === 0;
    var $fa1d9fd80dd7279e$var$isCombiningL = (code) => $fa1d9fd80dd7279e$var$L_BASE <= code && code <= $fa1d9fd80dd7279e$var$L_END;
    var $fa1d9fd80dd7279e$var$isCombiningV = (code) => $fa1d9fd80dd7279e$var$V_BASE <= code && code <= $fa1d9fd80dd7279e$var$V_END;
    var $fa1d9fd80dd7279e$var$isCombiningT = (code) => $fa1d9fd80dd7279e$var$T_BASE + 1 && 1 <= code && code <= $fa1d9fd80dd7279e$var$T_END;
    var $fa1d9fd80dd7279e$var$X = 0;
    var $fa1d9fd80dd7279e$var$L = 1;
    var $fa1d9fd80dd7279e$var$V = 2;
    var $fa1d9fd80dd7279e$var$T = 3;
    var $fa1d9fd80dd7279e$var$LV = 4;
    var $fa1d9fd80dd7279e$var$LVT = 5;
    var $fa1d9fd80dd7279e$var$M = 6;
    function $fa1d9fd80dd7279e$var$getType(code) {
      if ($fa1d9fd80dd7279e$var$isL(code)) return $fa1d9fd80dd7279e$var$L;
      if ($fa1d9fd80dd7279e$var$isV(code)) return $fa1d9fd80dd7279e$var$V;
      if ($fa1d9fd80dd7279e$var$isT(code)) return $fa1d9fd80dd7279e$var$T;
      if ($fa1d9fd80dd7279e$var$isLV(code)) return $fa1d9fd80dd7279e$var$LV;
      if ($fa1d9fd80dd7279e$var$isLVT(code)) return $fa1d9fd80dd7279e$var$LVT;
      if ($fa1d9fd80dd7279e$var$isTone(code)) return $fa1d9fd80dd7279e$var$M;
      return $fa1d9fd80dd7279e$var$X;
    }
    var $fa1d9fd80dd7279e$var$NO_ACTION = 0;
    var $fa1d9fd80dd7279e$var$DECOMPOSE = 1;
    var $fa1d9fd80dd7279e$var$COMPOSE = 2;
    var $fa1d9fd80dd7279e$var$TONE_MARK = 4;
    var $fa1d9fd80dd7279e$var$INVALID = 5;
    var $fa1d9fd80dd7279e$var$STATE_TABLE = [
      //       X                 L                 V                T                  LV                LVT               M
      // State 0: start state
      [
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          1
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          2
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          3
        ],
        [
          $fa1d9fd80dd7279e$var$INVALID,
          0
        ]
      ],
      // State 1: <L>
      [
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          1
        ],
        [
          $fa1d9fd80dd7279e$var$COMPOSE,
          2
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          2
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          3
        ],
        [
          $fa1d9fd80dd7279e$var$INVALID,
          0
        ]
      ],
      // State 2: <L,V> or <LV>
      [
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          1
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$COMPOSE,
          3
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          2
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          3
        ],
        [
          $fa1d9fd80dd7279e$var$TONE_MARK,
          0
        ]
      ],
      // State 3: <L,V,T> or <LVT>
      [
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          1
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$NO_ACTION,
          0
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          2
        ],
        [
          $fa1d9fd80dd7279e$var$DECOMPOSE,
          3
        ],
        [
          $fa1d9fd80dd7279e$var$TONE_MARK,
          0
        ]
      ]
    ];
    function $fa1d9fd80dd7279e$var$getGlyph(font, code, features) {
      return new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, font.glyphForCodePoint(code).id, [
        code
      ], features);
    }
    function $fa1d9fd80dd7279e$var$decompose(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyph.codePoints[0];
      let s2 = code - $fa1d9fd80dd7279e$var$HANGUL_BASE;
      let t2 = $fa1d9fd80dd7279e$var$T_BASE + s2 % $fa1d9fd80dd7279e$var$T_COUNT;
      s2 = s2 / $fa1d9fd80dd7279e$var$T_COUNT | 0;
      let l = $fa1d9fd80dd7279e$var$L_BASE + s2 / $fa1d9fd80dd7279e$var$V_COUNT | 0;
      let v = $fa1d9fd80dd7279e$var$V_BASE + s2 % $fa1d9fd80dd7279e$var$V_COUNT;
      if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t2 !== $fa1d9fd80dd7279e$var$T_BASE && !font.hasGlyphForCodePoint(t2)) return i2;
      let ljmo = $fa1d9fd80dd7279e$var$getGlyph(font, l, glyph.features);
      ljmo.features.ljmo = true;
      let vjmo = $fa1d9fd80dd7279e$var$getGlyph(font, v, glyph.features);
      vjmo.features.vjmo = true;
      let insert = [
        ljmo,
        vjmo
      ];
      if (t2 > $fa1d9fd80dd7279e$var$T_BASE) {
        let tjmo = $fa1d9fd80dd7279e$var$getGlyph(font, t2, glyph.features);
        tjmo.features.tjmo = true;
        insert.push(tjmo);
      }
      glyphs.splice(i2, 1, ...insert);
      return i2 + insert.length - 1;
    }
    function $fa1d9fd80dd7279e$var$compose(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyphs[i2].codePoints[0];
      let type = $fa1d9fd80dd7279e$var$getType(code);
      let prev = glyphs[i2 - 1].codePoints[0];
      let prevType = $fa1d9fd80dd7279e$var$getType(prev);
      let lv, ljmo, vjmo, tjmo;
      if (prevType === $fa1d9fd80dd7279e$var$LV && type === $fa1d9fd80dd7279e$var$T) {
        lv = prev;
        tjmo = glyph;
      } else {
        if (type === $fa1d9fd80dd7279e$var$V) {
          ljmo = glyphs[i2 - 1];
          vjmo = glyph;
        } else {
          ljmo = glyphs[i2 - 2];
          vjmo = glyphs[i2 - 1];
          tjmo = glyph;
        }
        let l = ljmo.codePoints[0];
        let v = vjmo.codePoints[0];
        if ($fa1d9fd80dd7279e$var$isCombiningL(l) && $fa1d9fd80dd7279e$var$isCombiningV(v)) lv = $fa1d9fd80dd7279e$var$HANGUL_BASE + ((l - $fa1d9fd80dd7279e$var$L_BASE) * $fa1d9fd80dd7279e$var$V_COUNT + (v - $fa1d9fd80dd7279e$var$V_BASE)) * $fa1d9fd80dd7279e$var$T_COUNT;
      }
      let t2 = tjmo && tjmo.codePoints[0] || $fa1d9fd80dd7279e$var$T_BASE;
      if (lv != null && (t2 === $fa1d9fd80dd7279e$var$T_BASE || $fa1d9fd80dd7279e$var$isCombiningT(t2))) {
        let s2 = lv + (t2 - $fa1d9fd80dd7279e$var$T_BASE);
        if (font.hasGlyphForCodePoint(s2)) {
          let del = prevType === $fa1d9fd80dd7279e$var$V ? 3 : 2;
          glyphs.splice(i2 - del + 1, del, $fa1d9fd80dd7279e$var$getGlyph(font, s2, glyph.features));
          return i2 - del + 1;
        }
      }
      if (ljmo) ljmo.features.ljmo = true;
      if (vjmo) vjmo.features.vjmo = true;
      if (tjmo) tjmo.features.tjmo = true;
      if (prevType === $fa1d9fd80dd7279e$var$LV) {
        $fa1d9fd80dd7279e$var$decompose(glyphs, i2 - 1, font);
        return i2 + 1;
      }
      return i2;
    }
    function $fa1d9fd80dd7279e$var$getLength(code) {
      switch ($fa1d9fd80dd7279e$var$getType(code)) {
        case $fa1d9fd80dd7279e$var$LV:
        case $fa1d9fd80dd7279e$var$LVT:
          return 1;
        case $fa1d9fd80dd7279e$var$V:
          return 2;
        case $fa1d9fd80dd7279e$var$T:
          return 3;
      }
    }
    function $fa1d9fd80dd7279e$var$reorderToneMark(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyphs[i2].codePoints[0];
      if (font.glyphForCodePoint(code).advanceWidth === 0) return;
      let prev = glyphs[i2 - 1].codePoints[0];
      let len = $fa1d9fd80dd7279e$var$getLength(prev);
      glyphs.splice(i2, 1);
      return glyphs.splice(i2 - len, 0, glyph);
    }
    function $fa1d9fd80dd7279e$var$insertDottedCircle(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyphs[i2].codePoints[0];
      if (font.hasGlyphForCodePoint($fa1d9fd80dd7279e$var$DOTTED_CIRCLE)) {
        let dottedCircle = $fa1d9fd80dd7279e$var$getGlyph(font, $fa1d9fd80dd7279e$var$DOTTED_CIRCLE, glyph.features);
        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i2 : i2 + 1;
        glyphs.splice(idx, 0, dottedCircle);
        i2++;
      }
      return i2;
    }
    var $d22b56f2cf15e5ba$exports = {};
    $d22b56f2cf15e5ba$exports = JSON.parse('{"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],"accepting":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],"tags":[[],["broken_cluster"],["consonant_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],[],["broken_cluster"],["symbol_cluster"],[],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["symbol_cluster"],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],[],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],[],[],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],["consonant_syllable"],["vowel_syllable"],["standalone_cluster"]]}');
    var $79781f8c452881c2$exports = {};
    $79781f8c452881c2$exports = JSON.parse('{"categories":["O","IND","S","GB","B","FM","CGJ","VMAbv","VMPst","VAbv","VPst","CMBlw","VPre","VBlw","H","VMBlw","CMAbv","MBlw","CS","R","SUB","MPst","MPre","FAbv","FPst","FBlw","null","SMAbv","SMBlw","VMPre","ZWNJ","ZWJ","WJ","M","VS","N","HN","MAbv"],"decompositions":{"2507":[2503,2494],"2508":[2503,2519],"2888":[2887,2902],"2891":[2887,2878],"2892":[2887,2903],"3018":[3014,3006],"3019":[3015,3006],"3020":[3014,3031],"3144":[3142,3158],"3264":[3263,3285],"3271":[3270,3285],"3272":[3270,3286],"3274":[3270,3266],"3275":[3270,3266,3285],"3402":[3398,3390],"3403":[3399,3390],"3404":[3398,3415],"3546":[3545,3530],"3548":[3545,3535],"3549":[3545,3535,3530],"3550":[3545,3551],"3635":[3661,3634],"3763":[3789,3762],"3955":[3953,3954],"3957":[3953,3956],"3958":[4018,3968],"3959":[4018,3953,3968],"3960":[4019,3968],"3961":[4019,3953,3968],"3969":[3953,3968],"6971":[6970,6965],"6973":[6972,6965],"6976":[6974,6965],"6977":[6975,6965],"6979":[6978,6965],"69934":[69937,69927],"69935":[69938,69927],"70475":[70471,70462],"70476":[70471,70487],"70843":[70841,70842],"70844":[70841,70832],"70846":[70841,70845],"71098":[71096,71087],"71099":[71097,71087]},"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,0,23,0,0,2,0,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],"accepting":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"tags":[[],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["symbol_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["virama_terminated_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["number_joiner_terminated_cluster"],["standard_cluster"],["standard_cluster"],["numeral_cluster"]]}');
    var $79e3b6f2c331d0bf$export$a513ea61a7bee91c = {
      X: 1,
      C: 2,
      V: 4,
      N: 8,
      H: 16,
      ZWNJ: 32,
      ZWJ: 64,
      M: 128,
      SM: 256,
      VD: 512,
      A: 1024,
      Placeholder: 2048,
      Dotted_Circle: 4096,
      RS: 8192,
      Coeng: 16384,
      Repha: 32768,
      Ra: 65536,
      CM: 131072,
      Symbol: 262144
      // Avagraha, etc that take marks (SM,A,VD).
    };
    var $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0 = {
      Start: 1,
      Ra_To_Become_Reph: 2,
      Pre_M: 4,
      Pre_C: 8,
      Base_C: 16,
      After_Main: 32,
      Above_C: 64,
      Before_Sub: 128,
      Below_C: 256,
      After_Sub: 512,
      Before_Post: 1024,
      Post_C: 2048,
      After_Post: 4096,
      Final_C: 8192,
      SMVD: 16384,
      End: 32768
    };
    var $79e3b6f2c331d0bf$export$8519deaa7de2b07 = $79e3b6f2c331d0bf$export$a513ea61a7bee91c.C | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Ra | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.CM | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.V | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Placeholder | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Dotted_Circle;
    var $79e3b6f2c331d0bf$export$bbcd928767338e0d = $79e3b6f2c331d0bf$export$a513ea61a7bee91c.ZWJ | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.ZWNJ;
    var $79e3b6f2c331d0bf$export$ca9599b2a300afc = $79e3b6f2c331d0bf$export$a513ea61a7bee91c.H | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Coeng;
    var $79e3b6f2c331d0bf$export$e99d119da76a0fc5 = {
      Default: {
        hasOldSpec: false,
        virama: 0,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Devanagari: {
        hasOldSpec: true,
        virama: 2381,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Bengali: {
        hasOldSpec: true,
        virama: 2509,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Sub,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Gurmukhi: {
        hasOldSpec: true,
        virama: 2637,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Sub,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Gujarati: {
        hasOldSpec: true,
        virama: 2765,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Oriya: {
        hasOldSpec: true,
        virama: 2893,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Tamil: {
        hasOldSpec: true,
        virama: 3021,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Telugu: {
        hasOldSpec: true,
        virama: 3149,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Explicit",
        blwfMode: "Post_Only"
      },
      Kannada: {
        hasOldSpec: true,
        virama: 3277,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Implicit",
        blwfMode: "Post_Only"
      },
      Malayalam: {
        hasOldSpec: true,
        virama: 3405,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: "Log_Repha",
        blwfMode: "Pre_And_Post"
      },
      // Handled by UniversalShaper
      // Sinhala: {
      //   hasOldSpec: false,
      //   virama: 0x0DCA,
      //   basePos: 'Last_Sinhala',
      //   rephPos: POSITIONS.After_Main,
      //   rephMode: 'Explicit',
      //   blwfMode: 'Pre_And_Post'
      // },
      Khmer: {
        hasOldSpec: false,
        virama: 6098,
        basePos: "First",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,
        rephMode: "Vis_Repha",
        blwfMode: "Pre_And_Post"
      }
    };
    var $79e3b6f2c331d0bf$export$f647c9cfdd77d95a = {
      // Khmer
      6078: [
        6081,
        6078
      ],
      6079: [
        6081,
        6079
      ],
      6080: [
        6081,
        6080
      ],
      6084: [
        6081,
        6084
      ],
      6085: [
        6081,
        6085
      ]
    };
    var { decompositions: $d203e6b9523d0071$var$decompositions } = (0, /* @__PURE__ */ $parcel$interopDefault($79781f8c452881c2$exports));
    var $d203e6b9523d0071$var$trie = new (0, $parcel$interopDefault($elh9A$unicodetrie))((0, $66a5b9fb5318558a$export$94fdf11bafc8de6b)("AAARAAAAAABg2AAAAWYPmfDtnXuMXFUdx+/uzs7M7szudAtECGJRIMRQbUAithQWkGAKiVhNpFVRRAmIQVCDkDYICGotIA9BTCz8IeUviv7BQ2PBtBIRLBBQIWAUsKg1BKxRAqIgfs/cc+aeOXPej3tnZX7JJ/dxzj3nd36/8753Z5fUsuxgsAwcAU4Gp4BPgM+Cd4P3RjieDs4GXwLrHJ5bDy4DG8A14LvgZrAZbAF3gns0z18ALgY/B78C94NHwBPgabAE/AX8DbwM5sF/QX0yD5vFcU/wVnAgWAoOAyvAceBE8CGwBpwGzgJfAF8BXwXfAFeC68EmsBlsAXeCreA+8CB4DDwF/gh2gd3gFfAGmKxn2QzYC+wHDgRLweFgJTgWrKrnuq/GcQ04jV6fheN54EJwEbgcXAG+Q8O/j+Mt4DZwB9haz8t9Hz3a8iCN/xiOvwRP0evH6fE68AzOH+Ke2eWYhw3PcGnuxvkr4A3QaGRZB7wFLAEHg2XgiEZ/fHKcp/ceBh/A+cngFPCpRm6vM3E8l8a5gN67GMdvgqsbeX2ap9yI601gM7gN3AG20mfuo8cdOP6GpvdUg9oKxz839GV90RDO2/glxN1B790NXsN1rZll7WYRdw+c70uvTwIHNAfTO0RyL5TDmnnbc3lmRQI9UnM0dD5eovfz4FpJ/BNpXNYWV+N6Lfg0hY97JK1vn+Pur9DoQur2F7m436bHDUK8C5t5/8vruo4+97WmXG+GLmzEiBF+PDwEOowYMWLEiBEjRoxYeBw5BDqIPEfXut9yWN+vVNxfrnnmWqR/PdgENoMt4E5wD9gOHgCPgifBs2BXM99b2o3jP8F/wMRUlrXAHNgHvH0q3895J46HguXgWHAGLctmLv9VuL96qnp7jxgxYsSbCbJvuRZ97/tqxT59VVRtixEjRsThBG7OSt5zzoPT0M+cBc4T5noXOs79TqLHeZrHUeCSqeJ96gacXy2kecNU8V6Hh7yXuQlhtw7B/PO1RTkr52Aj8JNFZjYg3gOKuC/g/v6Ls2wNuAY8urg//PcIb+6RZXuDNeCS6SzbBrJWlh0DLiFHco8ed9IjzzvaWfa9sZzTcf6D9mCcnbg3PlNcH4fzS8F2MDaLdQG4dLZIJxbbaZqv4ri8k58f3+mPs66T6/TTzqDeI0aMGDGiHP5dcR8ce/xxYcWi6vOfr725uRzcjnngXVOD61Hync+9uL+Nmyfej/NHpvL56A5Jeuz7uyfo+pqcPz2Vf1NH0ttJ03pekt8SmuY/EPYy9zzbN319ym/9TL6ZIt9MHCXRdxJtoAkWTRdz472n87D9cTwYLJvuz++I6WIePo/zE8AHp4v8WLyP0nufnM6/+zoDx8+DL08P6r9+urheRtO+jD6/cdrsx3mqu8w+xH4PScKIXa5D2jeCm8Et4DbwI/BjcC/4BXgI/Bb8DuwEu8Bu8Ap4A9RaRZptnO8J9gUHgEPAoWA5OLY1qMO90GEV7q+mYWtxPBWcIYnL4p+DsPNbxfVFOP86uAr8DNc34HgTDb8Vx9sVaRFI/LtagzYjnCqpb908EX87eBA8Bh4Hf2jle/9/wvGFVv787rrZZy8h7qtgDOuFOmiBuXYRvg/O9wMHgXeB97SLspk4sq0OI/q9v13+ek+sh3zYSRp9jrYorw9ll1/GRzR+KotYZSHf8laVP2lvpA/8OGdPMk59hqtXZ+L8nHbxvWwqO65ryu+fT3VZz+l4dET7L0R072ljsMyzTpaJqQxsbL8M9WajY789DO85XMp/Dcp3Qztdn+9qf/a97ZWK8PXc3G+TpC/nv8Mncy7ZvICF302P5O+aNiOtLdTXd+D4Q7DVwfcvWvx9zTEJ/o5iG3R8YAjGNFseha5PGuZKz7b7xxXbOrXMcu5eJSo//rXdH/73Enz6L1q/X+fyIu8wZGtNBmkjkzNZNgP2AvuBg2bysKUzduXn/66JtNeN4PCZvO0/x7Ujdn4VnYOvRJzjZ/I+9sQZeftX2Tc1RPcPz/Tf4/si0g+t5Mq+kfZjZL34Mc5ul3PPnE7TOxvHK2qDaZ+L++db2HyYqMo/qVnb/P8uH8/rmnFxR0k6DCu/rjj/RxT7KGUSWgbd+LMQuEgYB1zsk2qtvJD8v5AhdfdttbEunSxbcJD9Zf7chqp1Hlbe7FK1/aPVTfp7FgtC1yGGiSncFK/DhZvi+epZta0WWjlsfDZMyPRdSPrryqSSKnXx1bkq/Ye9TlRpk7Lrjq1UrfdC9X+MtKqwP6+3a/4pJFUZF0pZZpv91MYjMBaRRXbxpho5zQmUY3F+Pt4o7rvQrBXPdm00TaE24uMadaM2meLSI7iu071t3er3b6ZLi8JEde3qw+6zGv+ycF5kaRBh/m1T/7Yl/mMyTuMwadP4xL9ifjJpNwbvDZRJ8G8vnqV/Wf12aa/kyOdl69+BspTsXzGueE6E+JfZnvmXIfNPW+FfXkjb1YmqPNpnLP3b61fHCj/X5tzGANf2y3yqvC7Jv7btV4TVbdammI9l/g0dS5lNxLrk2j9r8xjjxhBQnygg0lgg/bOrfyct+udJi/Yrk0lFnxC7f+5kRbsNmcexfrubt0X/rGvLqrGSnYv3ZPHEe8r7lvMvUfi2LOu/2dg8LrRtQt2yfcv8r5IU70VkIs6nbebUXf0M/o7Znl39Sdoz+X1oEb5N8ffF67qhPfPP6eoUbxf+GRf/6sRnvaSdmw+Bf1VxmbD+2sa//DU7t/Gv2PfKpKdrBP92Ojk+IvqX16ks/2qxbL8EZnc2HqsgYuqPuzZV+I3RbujbDm+T0PmWCVO/5jqftp1zy+wSA6s0JWtp2z5e1oZV+yMsjB3ZXolsv0Ulrv01v3/iKrF94Qtbt9siCnmeb6fjjf59KnLk1xaEbvtvFnFirGvEOqmycQrbm/IMsXd3P28uh4nM3swXRER717OiX8kc7K2qqyn2p3maFGU/aruP5VCv+PraoTYU8yUmmbDwcYo6pusnM486xdoga4dkPCb1pK7Sfc6ebvkd4qeAtQcd/N63bB3lU3dlUnUf38VyvqCqK7JxlNSd7lydrDlm+/uqHiRvl30Nrp/n9zpkZRjoJ3V1diyP05rIYXHYs+w+D5+WMS8b5gZtKcuX0KT5d/WwtB97VnyvY6rjMukI56HI0rFJPwt8PjT/1OXzSbcMeEmdh294qvKK4rNu7j4n3LNZg8TKXwafv025U+XvKjHsT8Q7/7LGaJt9lAh7Asz3uv0XEX6t0duDoWN/93wmh92XpUHmCKb9GALbG+rZP3AfNbQPKKv/jpF/bP0JXfuW1QYk7dhljcyvk5mw+933Hpo1g26PQ2ZP6zVmTJt47P25jncD9vPwGS+q9QS/V6RaY8j8K8LmvUr9HfYCpH5OWL9lZY+Sv6pesHCJHbtrf9k6etZvf0G1L0ja4cAe1UT/s3zdCe3/Q5/n372wMc97/E1Qh0Tbmfwh3m/V9On72tNnrCF1sJkVe1EyXMdBa7+lHMsk44zMF6St9e2djNnbm8ybpHkq+gbbemMaH0UZmD8obKGrk7r+nt+3bE7o83YZp/vqOKdv6PzJNN6mTJsI/51XR7i2ZrGA5B6zFwnjzxmqPjaGfW3tZNrz1eljq29mOOqeCfF/irRt87PNw0uXSVAvrmOMNT569MptsYaV0sic/wbY13e8hPrb9K2ySUJ0j6G/Lu0U4qpTrR23jMp6m5hU+YTaWCeh9aIsm/rqUHV4bFv42kgnZdfH1PUj1D7DVH9d8khRN1zFRl/+/TW//qxL1uH83+mk3H+SvRtS2TDU90nX2TpM6/1xzZpZtoYdK763dqlz0f6uNeFehcs+H/nbGP77MpX06n/ofpzP+tVmTUvRtVuX/cjS67OE5kRBrxyJ+w/dPo7r+9cO1160e3gqu0S2uW7PjN/L6ns/UfMf10Lai87frJ+3KndAfc8yTf1M3T4s6qm4/yh7/2GSkG8UMw//DvRLgbYZSEOxr0LCWvRdjfh9XGzfqN4NivfZd7rsmFp08zmbssrKJEuTfVMZopdpbuwSrhNv3/N2s+0PDG3KNB6RMrFvJHv6B85HXObAoWsd3zm3i+6uZYytv+5+pohbpo6+tpZJFfmGlrcMf4c8b1Pe2OUIsaXJrinCTfaxtZOt+NYnU3hIfQlN20Z/1+dt7JaqLsbIzycNWZmrlNg2Dc2/LJ1T+T6WrrYSml4Ku7ik7yIx2opJD51vU9UfVRmrqL8u/olZj0PyCLV5irxcdKoi/6rKb8qTrHsnhW9jyZH/nSpeWDzxd9769uQ016lgUuf2pAfKPhu2FpfZL2Yb9snLNl/fNIepXaUsj4vNXCXUZ75px8ojNP8UPvAta2g6fb+F1ckZuneshv1vGXXDeyRRrN/bBPS1Jul+l+7zW86R7Wv63WXyDpt/RxraRjvC+TC3O61/Sqj/prag8x372yQivn+XwudrI2X2E2KdtJEov52e0L+uv4FO3p/rvssgsL8F4d/z9PzlWS94m8fqS3361Fi+6qaVYHwi9Yz4iH2fobIj+45cpz/TUaarr/4+z+vaWtVtyAX2d1LG8W9C3f+F1mnf36/k4w3YPrLv+XBVXCJs3cr+n4MKJuLv/fN9GhNdXVP5pJMN9vFi3rpv3/r8Ywg3SYp66zNOsO8QGcxPpnmRS/1mvmJjju3v7absI2xspQrvs1dNbjOj/wP7h1RlZyKGy8occ408UL8En4v6xfC/K3z52XzJd62T8vuZGGsxo/6O46ntmNqqFb/jps2/hHV4rPKH0svT4pstU7t2tZ9u/ZdqbJL1MwP6O86Fyt4jYaIrGz9mjEt8lFL4PtVE6votG2P6fpdf/GZRse7s3bf4BtSl/DIbKMctx++Z+8o6K6z9FPOwKsRmXiaNl7C+6NYRpjlbqG1j72f49qsuY4brd/amb4ZVc8TQ+sSH985LrEe8iPWJnfPrJRbWbb+dwn4x6o+r/aS2S7w3qWt//LnYz2ntE0vH1uDcyKatx1rH+EiMPEN1SZG/iz6+9o01Rob6O7Q+xLZ1jHobK61U+pWVvo2EpuWqzzD6Poa+pvhli0wn8Zq/72Mzm2d90o5VN1x9ZKuzbTgvqWwUIin8FSpl1CXXvFRxU0iozVPYJDRtF3uFphn6XAyJUUdD7SjTJ8v6n9fVbVObkKWp001lc9VRlqdOf5v0ZM+bymdbfp1NfG0bq27Y5JMyfxeJkU6o/inKH8O2Zfgidb6h/g3VJ7QcVbWL0Pxt6rlrPqa4KfQ25a2zl4/E8GdM/4fK/wA="));
    var $d203e6b9523d0071$var$stateMachine = new (0, $parcel$interopDefault($elh9A$dfa))((0, /* @__PURE__ */ $parcel$interopDefault($d22b56f2cf15e5ba$exports)));
    var $d203e6b9523d0071$export$2e2bcd8739ae039 = class extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
      static planFeatures(plan) {
        plan.addStage($d203e6b9523d0071$var$setupSyllables);
        plan.addStage([
          "locl",
          "ccmp"
        ]);
        plan.addStage($d203e6b9523d0071$var$initialReordering);
        plan.addStage("nukt");
        plan.addStage("akhn");
        plan.addStage("rphf", false);
        plan.addStage("rkrf");
        plan.addStage("pref", false);
        plan.addStage("blwf", false);
        plan.addStage("abvf", false);
        plan.addStage("half", false);
        plan.addStage("pstf", false);
        plan.addStage("vatu");
        plan.addStage("cjct");
        plan.addStage("cfar", false);
        plan.addStage($d203e6b9523d0071$var$finalReordering);
        plan.addStage({
          local: [
            "init"
          ],
          global: [
            "pres",
            "abvs",
            "blws",
            "psts",
            "haln",
            "dist",
            "abvm",
            "blwm",
            "calt",
            "clig"
          ]
        });
        plan.unicodeScript = $e38a1a895f6aeb54$export$ce50e82f12a827a4(plan.script);
        plan.indicConfig = (0, $79e3b6f2c331d0bf$export$e99d119da76a0fc5)[plan.unicodeScript] || (0, $79e3b6f2c331d0bf$export$e99d119da76a0fc5).Default;
        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== "2";
      }
      static assignFeatures(plan, glyphs) {
        for (let i2 = glyphs.length - 1; i2 >= 0; i2--) {
          let codepoint = glyphs[i2].codePoints[0];
          let d = (0, $79e3b6f2c331d0bf$export$f647c9cfdd77d95a)[codepoint] || $d203e6b9523d0071$var$decompositions[codepoint];
          if (d) {
            let decomposed = d.map((c) => {
              let g = plan.font.glyphForCodePoint(c);
              return new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(plan.font, g.id, [
                c
              ], glyphs[i2].features);
            });
            glyphs.splice(i2, 1, ...decomposed);
          }
        }
      }
    };
    (0, $elh9A$swchelperscjs_define_propertycjs._)($d203e6b9523d0071$export$2e2bcd8739ae039, "zeroMarkWidths", "NONE");
    function $d203e6b9523d0071$var$indicCategory(glyph) {
      return $d203e6b9523d0071$var$trie.get(glyph.codePoints[0]) >> 8;
    }
    function $d203e6b9523d0071$var$indicPosition(glyph) {
      return 1 << ($d203e6b9523d0071$var$trie.get(glyph.codePoints[0]) & 255);
    }
    var $d203e6b9523d0071$var$IndicInfo = class {
      constructor(category, position, syllableType, syllable) {
        this.category = category;
        this.position = position;
        this.syllableType = syllableType;
        this.syllable = syllable;
      }
    };
    function $d203e6b9523d0071$var$setupSyllables(font, glyphs) {
      let syllable = 0;
      let last = 0;
      for (let [start, end, tags] of $d203e6b9523d0071$var$stateMachine.match(glyphs.map($d203e6b9523d0071$var$indicCategory))) {
        if (start > last) {
          ++syllable;
          for (let i2 = last; i2 < start; i2++) glyphs[i2].shaperInfo = new $d203e6b9523d0071$var$IndicInfo((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).X, (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).End, "non_indic_cluster", syllable);
        }
        ++syllable;
        for (let i2 = start; i2 <= end; i2++) glyphs[i2].shaperInfo = new $d203e6b9523d0071$var$IndicInfo(1 << $d203e6b9523d0071$var$indicCategory(glyphs[i2]), $d203e6b9523d0071$var$indicPosition(glyphs[i2]), tags[0], syllable);
        last = end + 1;
      }
      if (last < glyphs.length) {
        ++syllable;
        for (let i2 = last; i2 < glyphs.length; i2++) glyphs[i2].shaperInfo = new $d203e6b9523d0071$var$IndicInfo((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).X, (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).End, "non_indic_cluster", syllable);
      }
    }
    function $d203e6b9523d0071$var$isConsonant(glyph) {
      return glyph.shaperInfo.category & (0, $79e3b6f2c331d0bf$export$8519deaa7de2b07);
    }
    function $d203e6b9523d0071$var$isJoiner(glyph) {
      return glyph.shaperInfo.category & (0, $79e3b6f2c331d0bf$export$bbcd928767338e0d);
    }
    function $d203e6b9523d0071$var$isHalantOrCoeng(glyph) {
      return glyph.shaperInfo.category & (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc);
    }
    function $d203e6b9523d0071$var$wouldSubstitute(glyphs, feature) {
      for (let glyph of glyphs) glyph.features = {
        [feature]: true
      };
      let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
      GSUB.applyFeatures([
        feature
      ], glyphs);
      return glyphs.length === 1;
    }
    function $d203e6b9523d0071$var$consonantPosition(font, consonant, virama) {
      let glyphs = [
        virama,
        consonant,
        virama
      ];
      if ($d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(0, 2), "blwf") || $d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(1, 3), "blwf")) return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C;
      else if ($d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(0, 2), "pstf") || $d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(1, 3), "pstf")) return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C;
      else if ($d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(0, 2), "pref") || $d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(1, 3), "pref")) return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C;
      return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C;
    }
    function $d203e6b9523d0071$var$initialReordering(font, glyphs, plan) {
      let indicConfig = plan.indicConfig;
      let features = font._layoutEngine.engine.GSUBProcessor.features;
      let dottedCircle = font.glyphForCodePoint(9676).id;
      let virama = font.glyphForCodePoint(indicConfig.virama).id;
      if (virama) {
        let info = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, virama, [
          indicConfig.virama
        ]);
        for (let i2 = 0; i2 < glyphs.length; i2++) if (glyphs[i2].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) glyphs[i2].shaperInfo.position = $d203e6b9523d0071$var$consonantPosition(font, glyphs[i2].copy(), info);
      }
      for (let start = 0, end = $d203e6b9523d0071$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $d203e6b9523d0071$var$nextSyllable(glyphs, start)) {
        let { category, syllableType } = glyphs[start].shaperInfo;
        if (syllableType === "symbol_cluster" || syllableType === "non_indic_cluster") continue;
        if (syllableType === "broken_cluster" && dottedCircle) {
          let g = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, dottedCircle, [
            9676
          ]);
          g.shaperInfo = new $d203e6b9523d0071$var$IndicInfo(1 << $d203e6b9523d0071$var$indicCategory(g), $d203e6b9523d0071$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);
          let i2 = start;
          while (i2 < end && glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Repha) i2++;
          glyphs.splice(i2++, 0, g);
          end++;
        }
        let base = end;
        let limit = start;
        let hasReph = false;
        if (indicConfig.rephPos !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === "Implicit" && !$d203e6b9523d0071$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === "Explicit" && glyphs[start + 2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ)) {
          let g = [
            glyphs[start].copy(),
            glyphs[start + 1].copy(),
            glyphs[start + 2].copy()
          ];
          if ($d203e6b9523d0071$var$wouldSubstitute(g.slice(0, 2), "rphf") || indicConfig.rephMode === "Explicit" && $d203e6b9523d0071$var$wouldSubstitute(g, "rphf")) {
            limit += 2;
            while (limit < end && $d203e6b9523d0071$var$isJoiner(glyphs[limit])) limit++;
            base = start;
            hasReph = true;
          }
        } else if (indicConfig.rephMode === "Log_Repha" && glyphs[start].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Repha) {
          limit++;
          while (limit < end && $d203e6b9523d0071$var$isJoiner(glyphs[limit])) limit++;
          base = start;
          hasReph = true;
        }
        switch (indicConfig.basePos) {
          case "Last": {
            let i2 = end;
            let seenBelow = false;
            do {
              let info = glyphs[--i2].shaperInfo;
              if ($d203e6b9523d0071$var$isConsonant(glyphs[i2])) {
                if (info.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C && (info.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C || seenBelow)) {
                  base = i2;
                  break;
                }
                if (info.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C) seenBelow = true;
                base = i2;
              } else if (start < i2 && info.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ && glyphs[i2 - 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H) break;
            } while (i2 > limit);
            break;
          }
          case "First":
            base = start;
            for (let i2 = base + 1; i2 < end; i2++) if ($d203e6b9523d0071$var$isConsonant(glyphs[i2])) glyphs[i2].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C;
        }
        if (hasReph && base === start && limit - base <= 2) hasReph = false;
        for (let i2 = start; i2 < base; i2++) {
          let info = glyphs[i2].shaperInfo;
          info.position = Math.min((0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_C, info.position);
        }
        if (base < end) glyphs[base].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C;
        for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) {
          for (let j = i2 + 1; j < end; j++) if ($d203e6b9523d0071$var$isConsonant(glyphs[j])) {
            glyphs[j].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Final_C;
            break;
          }
          break;
        }
        if (hasReph) glyphs[start].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph;
        if (plan.isOldSpec) {
          let disallowDoubleHalants = plan.unicodeScript !== "Malayalam";
          for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H) {
            let j;
            for (j = end - 1; j > i2; j--) {
              if ($d203e6b9523d0071$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H) break;
            }
            if (glyphs[j].shaperInfo.category !== (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H && j > i2) {
              let t2 = glyphs[i2];
              glyphs.splice(i2, 0, ...glyphs.splice(i2 + 1, j - i2));
              glyphs[j] = t2;
            }
            break;
          }
        }
        let lastPos = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Start;
        for (let i2 = start; i2 < end; i2++) {
          let info = glyphs[i2].shaperInfo;
          if (info.category & ((0, $79e3b6f2c331d0bf$export$bbcd928767338e0d) | (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).N | (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).RS | (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).CM | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc) & info.category)) {
            info.position = lastPos;
            if (info.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H && info.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
              for (let j = i2; j > start; j--) if (glyphs[j - 1].shaperInfo.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
                info.position = glyphs[j - 1].shaperInfo.position;
                break;
              }
            }
          } else if (info.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD) lastPos = info.position;
        }
        let last = base;
        for (let i2 = base + 1; i2 < end; i2++) {
          if ($d203e6b9523d0071$var$isConsonant(glyphs[i2])) {
            for (let j = last + 1; j < i2; j++) if (glyphs[j].shaperInfo.position < (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD) glyphs[j].shaperInfo.position = glyphs[i2].shaperInfo.position;
            last = i2;
          } else if (glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) last = i2;
        }
        let arr = glyphs.slice(start, end);
        arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);
        glyphs.splice(start, arr.length, ...arr);
        for (let i2 = start; i2 < end; i2++) if (glyphs[i2].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) {
          base = i2;
          break;
        }
        for (let i2 = start; i2 < end && glyphs[i2].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; i2++) glyphs[i2].features.rphf = true;
        let blwf = !plan.isOldSpec && indicConfig.blwfMode === "Pre_And_Post";
        for (let i2 = start; i2 < base; i2++) {
          glyphs[i2].features.half = true;
          if (blwf) glyphs[i2].features.blwf = true;
        }
        for (let i2 = base + 1; i2 < end; i2++) {
          glyphs[i2].features.abvf = true;
          glyphs[i2].features.pstf = true;
          glyphs[i2].features.blwf = true;
        }
        if (plan.isOldSpec && plan.unicodeScript === "Devanagari") {
          for (let i2 = start; i2 + 1 < base; i2++) if (glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Ra && glyphs[i2 + 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H && (i2 + 1 === base || glyphs[i2 + 2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ)) {
            glyphs[i2].features.blwf = true;
            glyphs[i2 + 1].features.blwf = true;
          }
        }
        let prefLen = 2;
        if (features.pref && base + prefLen < end)
          for (let i2 = base + 1; i2 + prefLen - 1 < end; i2++) {
            let g = [
              glyphs[i2].copy(),
              glyphs[i2 + 1].copy()
            ];
            if ($d203e6b9523d0071$var$wouldSubstitute(g, "pref")) {
              for (let j = 0; j < prefLen; j++) glyphs[i2++].features.pref = true;
              if (features.cfar) for (; i2 < end; i2++) glyphs[i2].features.cfar = true;
              break;
            }
          }
        for (let i2 = start + 1; i2 < end; i2++) if ($d203e6b9523d0071$var$isJoiner(glyphs[i2])) {
          let nonJoiner = glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWNJ;
          let j = i2;
          do {
            j--;
            if (nonJoiner) delete glyphs[j].features.half;
          } while (j > start && !$d203e6b9523d0071$var$isConsonant(glyphs[j]));
        }
      }
    }
    function $d203e6b9523d0071$var$finalReordering(font, glyphs, plan) {
      let indicConfig = plan.indicConfig;
      let features = font._layoutEngine.engine.GSUBProcessor.features;
      for (let start = 0, end = $d203e6b9523d0071$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $d203e6b9523d0071$var$nextSyllable(glyphs, start)) {
        let tryPref = !!features.pref;
        let base = start;
        for (; base < end; base++) if (glyphs[base].shaperInfo.position >= (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) {
          if (tryPref && base + 1 < end) {
            for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].features.pref) {
              if (!(glyphs[i2].substituted && glyphs[i2].isLigated && !glyphs[i2].isMultiplied)) {
                base = i2;
                while (base < end && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[base])) base++;
                glyphs[base].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).BASE_C;
                tryPref = false;
              }
              break;
            }
          }
          if (plan.unicodeScript === "Malayalam") for (let i2 = base + 1; i2 < end; i2++) {
            while (i2 < end && $d203e6b9523d0071$var$isJoiner(glyphs[i2])) i2++;
            if (i2 === end || !$d203e6b9523d0071$var$isHalantOrCoeng(glyphs[i2])) break;
            i2++;
            while (i2 < end && $d203e6b9523d0071$var$isJoiner(glyphs[i2])) i2++;
            if (i2 < end && $d203e6b9523d0071$var$isConsonant(glyphs[i2]) && glyphs[i2].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C) {
              base = i2;
              glyphs[base].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C;
            }
          }
          if (start < base && glyphs[base].shaperInfo.position > (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) base--;
          break;
        }
        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ) base--;
        if (base < end) while (start < base && glyphs[base].shaperInfo.category & ((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).N | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc))) base--;
        if (start + 1 < end && start < base) {
          let newPos = base === end ? base - 2 : base - 1;
          if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
            while (newPos > start && !(glyphs[newPos].shaperInfo.category & ((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc)))) newPos--;
            if ($d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
              if (newPos + 1 < end && $d203e6b9523d0071$var$isJoiner(glyphs[newPos + 1])) newPos++;
            } else newPos = start;
          }
          if (start < newPos && glyphs[newPos].shaperInfo.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
            for (let i2 = newPos; i2 > start; i2--) if (glyphs[i2 - 1].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
              let oldPos = i2 - 1;
              if (oldPos < base && base <= newPos) base--;
              let tmp = glyphs[oldPos];
              glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));
              glyphs[newPos] = tmp;
              newPos--;
            }
          }
        }
        if (start + 1 < end && glyphs[start].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && glyphs[start].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
          let newRephPos;
          let rephPos = indicConfig.rephPos;
          let found = false;
          if (rephPos !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Post) {
            newRephPos = start + 1;
            while (newRephPos < base && !$d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;
            if (newRephPos < base && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) {
              if (newRephPos + 1 < base && $d203e6b9523d0071$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
              found = true;
            }
            if (!found && rephPos === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Main) {
              newRephPos = base;
              while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Main) newRephPos++;
              found = newRephPos < end;
            }
            if (!found && rephPos === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Sub) {
              newRephPos = base;
              while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ((0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C | (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Post | (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD))) newRephPos++;
              found = newRephPos < end;
            }
          }
          if (!found) {
            newRephPos = start + 1;
            while (newRephPos < base && !$d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;
            if (newRephPos < base && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) {
              if (newRephPos + 1 < base && $d203e6b9523d0071$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
              found = true;
            }
          }
          if (!found) {
            newRephPos = end - 1;
            while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD) newRephPos--;
            if ($d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) {
              for (let i2 = base + 1; i2 < newRephPos; i2++) if (glyphs[i2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) newRephPos--;
            }
          }
          let reph = glyphs[start];
          glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));
          glyphs[newRephPos] = reph;
          if (start < base && base <= newRephPos) base--;
        }
        if (tryPref && base + 1 < end) {
          for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].features.pref) {
            if (glyphs[i2].isLigated && !glyphs[i2].isMultiplied) {
              let newPos = base;
              if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
                while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc)))) newPos--;
                if (newPos > start && glyphs[newPos - 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) {
                  let oldPos2 = i2;
                  for (let j = base + 1; j < oldPos2; j++) if (glyphs[j].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) {
                    newPos--;
                    break;
                  }
                }
              }
              if (newPos > start && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newPos - 1])) {
                if (newPos < end && $d203e6b9523d0071$var$isJoiner(glyphs[newPos])) newPos++;
              }
              let oldPos = i2;
              let tmp = glyphs[oldPos];
              glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));
              glyphs[newPos] = tmp;
              if (newPos <= base && base < oldPos) base++;
            }
            break;
          }
        }
        if (glyphs[start].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M && (!start || !/Cf|Mn/.test((0, $elh9A$unicodeproperties.getCategory)(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;
      }
    }
    function $d203e6b9523d0071$var$nextSyllable(glyphs, start) {
      if (start >= glyphs.length) return start;
      let syllable = glyphs[start].shaperInfo.syllable;
      while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) ;
      return start;
    }
    var { categories: $9b772791ccede8a5$var$categories, decompositions: $9b772791ccede8a5$var$decompositions } = (0, /* @__PURE__ */ $parcel$interopDefault($79781f8c452881c2$exports));
    var $9b772791ccede8a5$var$trie = new (0, $parcel$interopDefault($elh9A$unicodetrie))((0, $66a5b9fb5318558a$export$94fdf11bafc8de6b)("AAACAAAAAAAQugAAAQUO+vHtnHuMX0UVx2d3u/t7bXe7FlqgvB+mpQhFmhikMRAg0ZQmakMU+cPWBzZisEGNjUpoiIYCEgmGUGOEGqOVNPUZUGNA+QNIBU2KREEFFSMBUYRISMXE+B3vnPzOzp553tcWfif5ZO5jnufMzJ2ZO/eumlDqFLAWnAMuBBvBZnC5uXZeBe4WsA1sBzs8/naCXcL1G8GtYDfYA74NvgfuAfcZHmT+fwEeBb8DTwvxPQWeAavACyZvq8z9VYxXwCGglijVBcvACnA8eCM4E6wHG8BF4BLwbvA+8AHwUbAd7AA7wS5wC9gN7gR7wX5wN7gXPAAeBr8Gvwd/Ac+CF8EhoCaV6oBZsBKcAE4FZ0wWeV8P9zxwoTnfCHczuBxsAdvAx8Gnzf1r4X4B3AxuA1+bHJb9m5PzdVGW/Yjv+xXHyfmxFfd9OH8Q/Ar8Bjw1WZT3GfACeAX8N5CfqSmlZsAKsGqqCH8K3DXgbHCuuXYB3HeAd4HLpgrdarbi+EPgY+CT4HPg8ybMTcb9MtyvghtYut/A+b4pf95+ELgfw08Qx/3gADgInjDl0veehPtX8A/wsrn2KtzxDuogWNoJx38k/BzXKeI8Ee5qcBZYD9aZtDbg+AwT19uMX83F7JizCdcvBZdZ97c6/BMfMWmfzfTm88/95aLj+DDSvApcDXZ04uPfaen3TMHPLvi5BezuFPVtD4t/qUcfe3FvP7gb3Ouwo9T+H+gMy/UIjh8DfwBPm7T08d/M8WMBe1Sh3xEjXo+M2s+IESNGjBgxYsSI1wLrOsM1gRsi/P+TzV3/Zc1jvxgR/j8IM9Et1mEGcJeDFeA4cJq5/ia467uF/w1wzwdvB+80998LdwvYZs63w90Bdnbd6Wp/uzz3R4wYMWJEvZzTMm2Xf8SIEfVQd/v+EsaPt3eL90J3wP2WMJ78Trd4t6+P77Hu37cIxp9/ny6YXqrUJeCR6TA74e/nll81MzxejeMtYA94HBwy91bPYow+O/S3A8d7oIM/gRN7CAP29Iqx/B1ThfuwOecM+vA3NmRjf6Gfm3BtH7v+PI7XDpS6EuwDz4O10+0/f9om1F4ehO4OmHp6EO7jxl56nvhsN/15ut+4Z0b657yYkZ7UJ0jhX0bcr3bn+6P87vekN4762QNzvWHZtL+jcH5srzg/uTf0f3pvfj5i+6tYW7rK9+aefO+tuL4BXAQ2gs3gPeBJc//9OL4CXAWuNvc/A64DN4Jbwe0s7jtxvBfsAz8EPwX3gwPgoJAHPQ9/Atf/bO7p/TTP4fglwS/5/zfujfWH5z0cz4Gj+8X5Sf1ib4m+vwbHZ/fdOtP+z+3LOnPp/QL4vxhsApeCy8BWk/a2ftFmYu22Hf4/Ba4B14Hrwc0sP7fh+Cvg6+Au8F1WthA/8pT7UeTxZ/12njkuXT8UyM9i6iur1EEb6f+yPz/eg0b3v4X7x365fMaW42lPu7PTv6vi8i/G+lWF/cvUk7bLl1r+5/rN5tu3j2qvWTd/qV+4h+AqjDGnBsX59GDo94iBXDa6v6Yjl6vu+h8itJcsZq/ZykHhHg/3tMHhUe9s/Yfuny7YNxTvQ8LYdrER2+/c0GBezhrMv3ZNRv7PmYirh7oOv4W1Y72/cwPOzx8U7X8d2295sfE3MPnbBPfSQbHv9nK4HxTqiK/trI7Yy5mLzvuVg/nX+N7V51A3r+gMy/4J434W7l2dYf5PZWGuNX6uh3uzEPetuLY7sZ20zTETY2oxyBhj3DrnfsidYPeXRGLHpxzX6pbFofGRkFBdGhcgW40L4cYtd9JAElO36q4LEzXHX7VMtZ2BEhJjy9dT25fazOtJxhwsBrHzwfu8w12kMYN9fLhIbp2RxlI59rX1dzjpsKl2Fxt3iu6rbofc9q5+KcRrXVzzDn6/Crvk6p/y1GFgGhs9/6maHjBLgv8/18fTxl1q0bPoW8ywsFTGWaazHosrNn/kP2eeqEroZYLZphsZl7L82eephMIqNT8dyT9JjH1Jpg32ubZvTB/SF665ymSnnaqjUHum+1Qn+NyOtz9f2r6y5OQ51b6hYy0D40r2tYXar30+Y/mbVX6JqY+hMC60XZapoh3S/HdOpT3DYu3rs0lKnquyb277JZvyPlqp+f1zVVK2/dJYNpQGf04uYyh1+PTPqfalZ2tO/xwSu+3bOrDzmWvfcTW/fLmibRx6lkvlcOlc8qsE/y5/rnSk67F1iAu1VT6+4jKt5tufn8e2b+n57JKcckhrsKG1Cd6Wu+Y8tf2l5DenPafqQZ/7xstKLeyr+XnInjSelvRgS9n27JPQM5n6Am7jmLG8VK6m7OvyS2L313XYV2r/tth5LWPfNxhyhI+1Up7HVbe/HMgeZE8brtNQ/7tcyX0cn//H2LTO9kpir5VI6yYp9szJW9W2jI1Tqfl5ic2v1GZ5XaG6RDZbyvxMO/DVh1SdUj5y1vraaHs+2/TYNXvtSRoXk4wrf9w6fEctnFt0zL2y+xFsfSrLza2zOTqMiZv8xOpbn8+xsL5ykdj6VsxNKb/Lvxb7nX8u48y1x6yuMW3V9tNxTlouzXslibVxndjC14xda8g2NIbg5x01XAP2lfeIBFSi/zrQEporTXru8fCueiy1CUnqrhspSM9SzbSS64tep9R1ZsZcOxKsUEUfNZeYtr0vjY5DeXW915hT8/PRV8MxlR1HV4DHZZc9R7dzajgWoXikdLtGr0uEfPigsGS/NvYjSHW87XejoXZehZ74XrcqpQ4d5T5f7Gu8f6g7fQmefoqOqk4/VarQv2o4/VDetPDnhjR2dc3BCBp/9NVw7KGfwStVMf6aZNAajj6224j9HCZbpZa/LvH1gU30i/q5WnUdSNEprxv2eIOwx2pcjjLMsmObo008k0J4u69P3d9QdbspW/dy080Nb8PXqcrmj0vsc7tu6qwD1A5oLYr3U3XWSxqj6/a10nCMkudJMyxvrvbK55jUrqU+Xlr/Iai98jY7mVAml5QNHxq31j2m5TrSdmp6z5p+9kpzQntdQbI1Pafr6I9C60gxrALHGtdF6tyhLTtxeBuW+hhqyzPMX931xl6rJ5f6n5h3blpsW7vKbvdBfL1gpYfjDLrvob1drrRT+mcuMf1OrJSdW/P+RfufdUB+pOtdTzhpL5t0jfKr46P3obQfQdPGt1jS+DEkx4MT2PmEg1j72OthqfZNWX+JuZ4at/2sTAmn5cSIMqZIjk0pnD0+aUI6YS9ekdaspWsp8cWEC62dS66UTkq+ypajyvXSlPz4xhQhm/ns6wpXBVI560jHN9aKkdT46spvWT916rONdHNsGSNtl6Hp8oakTVukpF9n3U3Jx0TNefbp3R4jltVfFfpvQkJpNaH/puyco++qbZPz7sE1L3DFGVovc4XPLUPO3ELyrzLiSpmPhaTJfqeJ+t60PiTh9snNW2656upDQ+Wtyg6ueJquB7HSVPspW9a28lDWJouhb6iyv7XjTfVL67j2vjDpvUfMt1Vl4GvctMaeq/vYcFWXIfV5Ku3XaxK951H6dsWFrhcxa3pU/pz3C1xc71tTcaXjGjtJbYIj7UHm7wxSyx+D/d7SfpfJ3wPpfSQp32tS2dt8V2tD7+Bce3rpPa3eC6Dr8Ulq+K+J3HFvbn312Zv2RdStr9g0pP0P/B04XbP3Q8cIT2dlRF6orkrhY/Rv27FqHfL1DP480ffo/V6V7aTHXLKDbTdXOOrnyG1ScvSv6xqve30lPzdpj36M8Pilb+L5vr0xE3dd30nWIfZ45uSSxK4x+CRmTUK6F/LrSsfnj+aOdYyvpXyMK7/OpHWjlDTsa0rJum5K7Ppnj7F9c+0q0qtr7pQji2X9oMwcVrJfmblwU2V2SV3rEk3YuO46XXf8MfrQz077G2zftyDkj/ZqhcZr9nldkOg5ykAt3GunJbR3NGYsUfWafd3ts853C4dLHppOM6WcfM5C+xSbaC/2HMa1H9v1vXdoXm/LKSVpYh5wqmr/X67SfwHtPc9a97p/k8bt0hpbW0j1Svr2m+7Rd98qIQ1pvSF273dKOjHYNmk6fd8/JX3tWIddblBqoU5p7zrZKnd9TppjVq0DSitWqkwz12b2exb7vwjaRvS/TFd/S+8AYvIo+Suri5TwvvZRdV1IQevQ1/8SA+UeH5eto7n/X1Oe86ptaafl8kPjcF7P7W93eD9d5n+oSvn7fFe7I/G9q1IBfylSR71N6fft94ZU18hOXKR+JqUO8f4+5dvLsmWlMQb/Vov+CUDlpTGUndeQlG3fdZWdRPoPgl3mmDlsLnaey/4X3tVuU+o6L3/Pym+qlLV/jk6rlBRd8394hZ6JdnuqIv2ykOh3pfq96Wkq/E8qu2xl88/tOJ4R3tfmpbGi3c5T859bzqr7MbsN03iI5itUNj5eaEKWqIX/KJCQ/iFWNZMmHXs8ovWk53JzFq5vPul6zDjLV36pX7bzvNzB0YlQOZephWtRS5T7eeSq8030R77/HvC1d7tN83Zt9yltrDdwSR0XxsZd5l+MvvvU1/M9jSnj+Nh6FPJbBld/w6XHXH5MZeXrOfS/65g9RTl1JCa8chzX2RZ9/3lXSh4/VqWfEBNq4b82Ytp6m+9Qqxir1jX+rfPdT1vvsWhM6bPbmON6E1LnPCZW7L0qqXswmtqf0MQelZj4myrzYtzvIYmURlvtqapyx+gzRfd0XPfahVSOquMoG+dibBdl46iyfdbV1qvUW9m8+KTudMvkzZe/pqTJ+pWTflX5zw1fVfox6ZTVc8hvHflOSb+OuG1JsZ0kufXAJf8D"));
    var $9b772791ccede8a5$var$stateMachine = new (0, $parcel$interopDefault($elh9A$dfa))((0, /* @__PURE__ */ $parcel$interopDefault($79781f8c452881c2$exports)));
    var $9b772791ccede8a5$export$2e2bcd8739ae039 = class extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
      static planFeatures(plan) {
        plan.addStage($9b772791ccede8a5$var$setupSyllables);
        plan.addStage([
          "locl",
          "ccmp",
          "nukt",
          "akhn"
        ]);
        plan.addStage($9b772791ccede8a5$var$clearSubstitutionFlags);
        plan.addStage([
          "rphf"
        ], false);
        plan.addStage($9b772791ccede8a5$var$recordRphf);
        plan.addStage($9b772791ccede8a5$var$clearSubstitutionFlags);
        plan.addStage([
          "pref"
        ]);
        plan.addStage($9b772791ccede8a5$var$recordPref);
        plan.addStage([
          "rkrf",
          "abvf",
          "blwf",
          "half",
          "pstf",
          "vatu",
          "cjct"
        ]);
        plan.addStage($9b772791ccede8a5$var$reorder);
        plan.addStage([
          "abvs",
          "blws",
          "pres",
          "psts",
          "dist",
          "abvm",
          "blwm"
        ]);
      }
      static assignFeatures(plan, glyphs) {
        for (let i2 = glyphs.length - 1; i2 >= 0; i2--) {
          let codepoint = glyphs[i2].codePoints[0];
          if ($9b772791ccede8a5$var$decompositions[codepoint]) {
            let decomposed = $9b772791ccede8a5$var$decompositions[codepoint].map((c) => {
              let g = plan.font.glyphForCodePoint(c);
              return new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(plan.font, g.id, [
                c
              ], glyphs[i2].features);
            });
            glyphs.splice(i2, 1, ...decomposed);
          }
        }
      }
    };
    (0, $elh9A$swchelperscjs_define_propertycjs._)($9b772791ccede8a5$export$2e2bcd8739ae039, "zeroMarkWidths", "BEFORE_GPOS");
    function $9b772791ccede8a5$var$useCategory(glyph) {
      return $9b772791ccede8a5$var$trie.get(glyph.codePoints[0]);
    }
    var $9b772791ccede8a5$var$USEInfo = class {
      constructor(category, syllableType, syllable) {
        this.category = category;
        this.syllableType = syllableType;
        this.syllable = syllable;
      }
    };
    function $9b772791ccede8a5$var$setupSyllables(font, glyphs) {
      let syllable = 0;
      for (let [start, end, tags] of $9b772791ccede8a5$var$stateMachine.match(glyphs.map($9b772791ccede8a5$var$useCategory))) {
        ++syllable;
        for (let i2 = start; i2 <= end; i2++) glyphs[i2].shaperInfo = new $9b772791ccede8a5$var$USEInfo($9b772791ccede8a5$var$categories[$9b772791ccede8a5$var$useCategory(glyphs[i2])], tags[0], syllable);
        let limit = glyphs[start].shaperInfo.category === "R" ? 1 : Math.min(3, end - start);
        for (let i2 = start; i2 < start + limit; i2++) glyphs[i2].features.rphf = true;
      }
    }
    function $9b772791ccede8a5$var$clearSubstitutionFlags(font, glyphs) {
      for (let glyph of glyphs) glyph.substituted = false;
    }
    function $9b772791ccede8a5$var$recordRphf(font, glyphs) {
      for (let glyph of glyphs) if (glyph.substituted && glyph.features.rphf)
        glyph.shaperInfo.category = "R";
    }
    function $9b772791ccede8a5$var$recordPref(font, glyphs) {
      for (let glyph of glyphs) if (glyph.substituted)
        glyph.shaperInfo.category = "VPre";
    }
    function $9b772791ccede8a5$var$reorder(font, glyphs) {
      let dottedCircle = font.glyphForCodePoint(9676).id;
      for (let start = 0, end = $9b772791ccede8a5$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $9b772791ccede8a5$var$nextSyllable(glyphs, start)) {
        let i2, j;
        let info = glyphs[start].shaperInfo;
        let type = info.syllableType;
        if (type !== "virama_terminated_cluster" && type !== "standard_cluster" && type !== "broken_cluster") continue;
        if (type === "broken_cluster" && dottedCircle) {
          let g = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, dottedCircle, [
            9676
          ]);
          g.shaperInfo = info;
          for (i2 = start; i2 < end && glyphs[i2].shaperInfo.category === "R"; i2++) ;
          glyphs.splice(++i2, 0, g);
          end++;
        }
        if (info.category === "R" && end - start > 1)
          for (i2 = start + 1; i2 < end; i2++) {
            info = glyphs[i2].shaperInfo;
            if ($9b772791ccede8a5$var$isBase(info) || $9b772791ccede8a5$var$isHalant(glyphs[i2])) {
              if ($9b772791ccede8a5$var$isHalant(glyphs[i2])) i2--;
              glyphs.splice(start, 0, ...glyphs.splice(start + 1, i2 - start), glyphs[i2]);
              break;
            }
          }
        for (i2 = start, j = end; i2 < end; i2++) {
          info = glyphs[i2].shaperInfo;
          if ($9b772791ccede8a5$var$isBase(info) || $9b772791ccede8a5$var$isHalant(glyphs[i2]))
            j = $9b772791ccede8a5$var$isHalant(glyphs[i2]) ? i2 + 1 : i2;
          else if ((info.category === "VPre" || info.category === "VMPre") && j < i2) glyphs.splice(j, 1, glyphs[i2], ...glyphs.splice(j, i2 - j));
        }
      }
    }
    function $9b772791ccede8a5$var$nextSyllable(glyphs, start) {
      if (start >= glyphs.length) return start;
      let syllable = glyphs[start].shaperInfo.syllable;
      while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) ;
      return start;
    }
    function $9b772791ccede8a5$var$isHalant(glyph) {
      return glyph.shaperInfo.category === "H" && !glyph.isLigated;
    }
    function $9b772791ccede8a5$var$isBase(info) {
      return info.category === "B" || info.category === "GB";
    }
    var $fdb4471fc82bc2c2$var$SHAPERS = {
      arab: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      mong: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      syrc: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      "nko ": (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      phag: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      mand: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      mani: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      phlp: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
      hang: (0, $fa1d9fd80dd7279e$export$2e2bcd8739ae039),
      bng2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      beng: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      dev2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      deva: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      gjr2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      gujr: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      guru: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      gur2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      knda: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      knd2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      mlm2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      mlym: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      ory2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      orya: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      taml: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      tml2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      telu: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      tel2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      khmr: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      bali: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      batk: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      brah: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      bugi: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      buhd: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      cakm: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      cham: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      dupl: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      egyp: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      gran: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      hano: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      java: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      kthi: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      kali: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      khar: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      khoj: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      sind: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      lepc: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      limb: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      mahj: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      // mand: UniversalShaper, // Mandaic
      // mani: UniversalShaper, // Manichaean
      mtei: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      modi: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      // mong: UniversalShaper, // Mongolian
      // 'nko ': UniversalShaper, // N’Ko
      hmng: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      // phag: UniversalShaper, // Phags-pa
      // phlp: UniversalShaper, // Psalter Pahlavi
      rjng: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      saur: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      shrd: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      sidd: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      sinh: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
      sund: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      sylo: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tglg: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tagb: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tale: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      lana: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tavt: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      takr: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tibt: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tfng: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      tirh: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
      latn: (0, $d28fb665ee343afc$export$2e2bcd8739ae039),
      DFLT: (0, $d28fb665ee343afc$export$2e2bcd8739ae039)
    };
    function $fdb4471fc82bc2c2$export$7877a478dd30fd3d(script) {
      if (!Array.isArray(script)) script = [
        script
      ];
      for (let s2 of script) {
        let shaper = $fdb4471fc82bc2c2$var$SHAPERS[s2];
        if (shaper) return shaper;
      }
      return 0, $d28fb665ee343afc$export$2e2bcd8739ae039;
    }
    var $86bc1883359e094a$export$2e2bcd8739ae039 = class extends (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039) {
      applyLookup(lookupType, table) {
        switch (lookupType) {
          case 1: {
            let index = this.coverageIndex(table.coverage);
            if (index === -1) return false;
            let glyph = this.glyphIterator.cur;
            switch (table.version) {
              case 1:
                glyph.id = glyph.id + table.deltaGlyphID & 65535;
                break;
              case 2:
                glyph.id = table.substitute.get(index);
                break;
            }
            return true;
          }
          case 2: {
            let index = this.coverageIndex(table.coverage);
            if (index !== -1) {
              let sequence = table.sequences.get(index);
              if (sequence.length === 0) {
                this.glyphs.splice(this.glyphIterator.index, 1);
                return true;
              }
              this.glyphIterator.cur.id = sequence[0];
              this.glyphIterator.cur.ligatureComponent = 0;
              let features = this.glyphIterator.cur.features;
              let curGlyph = this.glyphIterator.cur;
              let replacement = sequence.slice(1).map((gid, i2) => {
                let glyph = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(this.font, gid, void 0, features);
                glyph.shaperInfo = curGlyph.shaperInfo;
                glyph.isLigated = curGlyph.isLigated;
                glyph.ligatureComponent = i2 + 1;
                glyph.substituted = true;
                glyph.isMultiplied = true;
                return glyph;
              });
              this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);
              return true;
            }
            return false;
          }
          case 3: {
            let index = this.coverageIndex(table.coverage);
            if (index !== -1) {
              let USER_INDEX = 0;
              this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];
              return true;
            }
            return false;
          }
          case 4: {
            let index = this.coverageIndex(table.coverage);
            if (index === -1) return false;
            for (let ligature of table.ligatureSets.get(index)) {
              let matched = this.sequenceMatchIndices(1, ligature.components);
              if (!matched) continue;
              let curGlyph = this.glyphIterator.cur;
              let characters = curGlyph.codePoints.slice();
              for (let index2 of matched) characters.push(...this.glyphs[index2].codePoints);
              let ligatureGlyph = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(this.font, ligature.glyph, characters, curGlyph.features);
              ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
              ligatureGlyph.isLigated = true;
              ligatureGlyph.substituted = true;
              let isMarkLigature = curGlyph.isMark;
              for (let i2 = 0; i2 < matched.length && isMarkLigature; i2++) isMarkLigature = this.glyphs[matched[i2]].isMark;
              ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
              let lastLigID = curGlyph.ligatureID;
              let lastNumComps = curGlyph.codePoints.length;
              let curComps = lastNumComps;
              let idx = this.glyphIterator.index + 1;
              for (let matchIndex of matched) {
                if (isMarkLigature) idx = matchIndex;
                else while (idx < matchIndex) {
                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                  this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                  this.glyphs[idx].ligatureComponent = ligatureComponent;
                  idx++;
                }
                lastLigID = this.glyphs[idx].ligatureID;
                lastNumComps = this.glyphs[idx].codePoints.length;
                curComps += lastNumComps;
                idx++;
              }
              if (lastLigID && !isMarkLigature) for (let i2 = idx; i2 < this.glyphs.length; i2++) {
                if (this.glyphs[i2].ligatureID === lastLigID) {
                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i2].ligatureComponent || 1, lastNumComps);
                  this.glyphs[i2].ligatureComponent = ligatureComponent;
                } else break;
              }
              for (let i2 = matched.length - 1; i2 >= 0; i2--) this.glyphs.splice(matched[i2], 1);
              this.glyphs[this.glyphIterator.index] = ligatureGlyph;
              return true;
            }
            return false;
          }
          case 5:
            return this.applyContext(table);
          case 6:
            return this.applyChainingContext(table);
          case 7:
            return this.applyLookup(table.lookupType, table.extension);
          default:
            throw new Error(`GSUB lookupType ${lookupType} is not supported`);
        }
      }
    };
    var $79ea6270f0a90256$export$2e2bcd8739ae039 = class extends (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039) {
      applyPositionValue(sequenceIndex, value) {
        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
        if (value.xAdvance != null) position.xAdvance += value.xAdvance;
        if (value.yAdvance != null) position.yAdvance += value.yAdvance;
        if (value.xPlacement != null) position.xOffset += value.xPlacement;
        if (value.yPlacement != null) position.yOffset += value.yPlacement;
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
          if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
          if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
          if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
          if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
        }
      }
      applyLookup(lookupType, table) {
        switch (lookupType) {
          case 1: {
            let index = this.coverageIndex(table.coverage);
            if (index === -1) return false;
            switch (table.version) {
              case 1:
                this.applyPositionValue(0, table.value);
                break;
              case 2:
                this.applyPositionValue(0, table.values.get(index));
                break;
            }
            return true;
          }
          case 2: {
            let nextGlyph = this.glyphIterator.peek();
            if (!nextGlyph) return false;
            let index = this.coverageIndex(table.coverage);
            if (index === -1) return false;
            switch (table.version) {
              case 1:
                let set = table.pairSets.get(index);
                for (let pair2 of set) if (pair2.secondGlyph === nextGlyph.id) {
                  this.applyPositionValue(0, pair2.value1);
                  this.applyPositionValue(1, pair2.value2);
                  return true;
                }
                return false;
              case 2:
                let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
                let class2 = this.getClassID(nextGlyph.id, table.classDef2);
                if (class1 === -1 || class2 === -1) return false;
                var pair = table.classRecords.get(class1).get(class2);
                this.applyPositionValue(0, pair.value1);
                this.applyPositionValue(1, pair.value2);
                return true;
            }
          }
          case 3: {
            let nextIndex = this.glyphIterator.peekIndex();
            let nextGlyph = this.glyphs[nextIndex];
            if (!nextGlyph) return false;
            let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
            if (!curRecord || !curRecord.exitAnchor) return false;
            let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];
            if (!nextRecord || !nextRecord.entryAnchor) return false;
            let entry = this.getAnchor(nextRecord.entryAnchor);
            let exit = this.getAnchor(curRecord.exitAnchor);
            let cur = this.positions[this.glyphIterator.index];
            let next = this.positions[nextIndex];
            let d;
            switch (this.direction) {
              case "ltr":
                cur.xAdvance = exit.x + cur.xOffset;
                d = entry.x + next.xOffset;
                next.xAdvance -= d;
                next.xOffset -= d;
                break;
              case "rtl":
                d = exit.x + cur.xOffset;
                cur.xAdvance -= d;
                cur.xOffset -= d;
                next.xAdvance = entry.x + next.xOffset;
                break;
            }
            if (this.glyphIterator.flags.rightToLeft) {
              this.glyphIterator.cur.cursiveAttachment = nextIndex;
              cur.yOffset = entry.y - exit.y;
            } else {
              nextGlyph.cursiveAttachment = this.glyphIterator.index;
              cur.yOffset = exit.y - entry.y;
            }
            return true;
          }
          case 4: {
            let markIndex = this.coverageIndex(table.markCoverage);
            if (markIndex === -1) return false;
            let baseGlyphIndex = this.glyphIterator.index;
            while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) ;
            if (baseGlyphIndex < 0) return false;
            let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
            if (baseIndex === -1) return false;
            let markRecord = table.markArray[markIndex];
            let baseAnchor = table.baseArray[baseIndex][markRecord.class];
            this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
            return true;
          }
          case 5: {
            let markIndex = this.coverageIndex(table.markCoverage);
            if (markIndex === -1) return false;
            let baseGlyphIndex = this.glyphIterator.index;
            while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark) ;
            if (baseGlyphIndex < 0) return false;
            let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);
            if (ligIndex === -1) return false;
            let ligAttach = table.ligatureArray[ligIndex];
            let markGlyph = this.glyphIterator.cur;
            let ligGlyph = this.glyphs[baseGlyphIndex];
            let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
            let markRecord = table.markArray[markIndex];
            let baseAnchor = ligAttach[compIndex][markRecord.class];
            this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
            return true;
          }
          case 6: {
            let mark1Index = this.coverageIndex(table.mark1Coverage);
            if (mark1Index === -1) return false;
            let prevIndex = this.glyphIterator.peekIndex(-1);
            let prev = this.glyphs[prevIndex];
            if (!prev || !prev.isMark) return false;
            let cur = this.glyphIterator.cur;
            let good = false;
            if (cur.ligatureID === prev.ligatureID) {
              if (!cur.ligatureID) good = true;
              else if (cur.ligatureComponent === prev.ligatureComponent) good = true;
            } else if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;
            if (!good) return false;
            let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
            if (mark2Index === -1) return false;
            let markRecord = table.mark1Array[mark1Index];
            let baseAnchor = table.mark2Array[mark2Index][markRecord.class];
            this.applyAnchor(markRecord, baseAnchor, prevIndex);
            return true;
          }
          case 7:
            return this.applyContext(table);
          case 8:
            return this.applyChainingContext(table);
          case 9:
            return this.applyLookup(table.lookupType, table.extension);
          default:
            throw new Error(`Unsupported GPOS table: ${lookupType}`);
        }
      }
      applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
        let baseCoords = this.getAnchor(baseAnchor);
        let markCoords = this.getAnchor(markRecord.markAnchor);
        let basePos = this.positions[baseGlyphIndex];
        let markPos = this.positions[this.glyphIterator.index];
        markPos.xOffset = baseCoords.x - markCoords.x;
        markPos.yOffset = baseCoords.y - markCoords.y;
        this.glyphIterator.cur.markAttachment = baseGlyphIndex;
      }
      getAnchor(anchor) {
        let x2 = anchor.xCoordinate;
        let y = anchor.yCoordinate;
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
          if (anchor.xDeviceTable) x2 += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
          if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
        }
        return {
          x: x2,
          y
        };
      }
      applyFeatures(userFeatures, glyphs, advances) {
        super.applyFeatures(userFeatures, glyphs, advances);
        for (var i2 = 0; i2 < this.glyphs.length; i2++) this.fixCursiveAttachment(i2);
        this.fixMarkAttachment();
      }
      fixCursiveAttachment(i2) {
        let glyph = this.glyphs[i2];
        if (glyph.cursiveAttachment != null) {
          let j = glyph.cursiveAttachment;
          glyph.cursiveAttachment = null;
          this.fixCursiveAttachment(j);
          this.positions[i2].yOffset += this.positions[j].yOffset;
        }
      }
      fixMarkAttachment() {
        for (let i2 = 0; i2 < this.glyphs.length; i2++) {
          let glyph = this.glyphs[i2];
          if (glyph.markAttachment != null) {
            let j = glyph.markAttachment;
            this.positions[i2].xOffset += this.positions[j].xOffset;
            this.positions[i2].yOffset += this.positions[j].yOffset;
            if (this.direction === "ltr") for (let k = j; k < i2; k++) {
              this.positions[i2].xOffset -= this.positions[k].xAdvance;
              this.positions[i2].yOffset -= this.positions[k].yAdvance;
            }
            else for (let k = j + 1; k < i2 + 1; k++) {
              this.positions[i2].xOffset += this.positions[k].xAdvance;
              this.positions[i2].yOffset += this.positions[k].yAdvance;
            }
          }
        }
      }
    };
    var $b2f26a32cb9ab2fa$export$2e2bcd8739ae039 = class {
      setup(glyphRun) {
        this.glyphInfos = glyphRun.glyphs.map((glyph) => new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(this.font, glyph.id, [
          ...glyph.codePoints
        ]));
        let script = null;
        if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        this.shaper = $fdb4471fc82bc2c2$export$7877a478dd30fd3d(script);
        this.plan = new (0, $d7e93cca3cf8ce8a$export$2e2bcd8739ae039)(this.font, script, glyphRun.direction);
        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);
        for (let key in this.plan.allFeatures) glyphRun.features[key] = true;
      }
      substitute(glyphRun) {
        if (this.GSUBProcessor) {
          this.plan.process(this.GSUBProcessor, this.glyphInfos);
          glyphRun.glyphs = this.glyphInfos.map((glyphInfo) => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));
        }
      }
      position(glyphRun) {
        if (this.shaper.zeroMarkWidths === "BEFORE_GPOS") this.zeroMarkAdvances(glyphRun.positions);
        if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
        if (this.shaper.zeroMarkWidths === "AFTER_GPOS") this.zeroMarkAdvances(glyphRun.positions);
        if (glyphRun.direction === "rtl") {
          glyphRun.glyphs.reverse();
          glyphRun.positions.reverse();
        }
        return this.GPOSProcessor && this.GPOSProcessor.features;
      }
      zeroMarkAdvances(positions) {
        for (let i2 = 0; i2 < this.glyphInfos.length; i2++) if (this.glyphInfos[i2].isMark) {
          positions[i2].xAdvance = 0;
          positions[i2].yAdvance = 0;
        }
      }
      cleanup() {
        this.glyphInfos = null;
        this.plan = null;
        this.shaper = null;
      }
      getAvailableFeatures(script, language) {
        let features = [];
        if (this.GSUBProcessor) {
          this.GSUBProcessor.selectScript(script, language);
          features.push(...Object.keys(this.GSUBProcessor.features));
        }
        if (this.GPOSProcessor) {
          this.GPOSProcessor.selectScript(script, language);
          features.push(...Object.keys(this.GPOSProcessor.features));
        }
        return features;
      }
      constructor(font) {
        this.font = font;
        this.glyphInfos = null;
        this.plan = null;
        this.GSUBProcessor = null;
        this.GPOSProcessor = null;
        this.fallbackPosition = true;
        if (font.GSUB) this.GSUBProcessor = new (0, $86bc1883359e094a$export$2e2bcd8739ae039)(font, font.GSUB);
        if (font.GPOS) this.GPOSProcessor = new (0, $79ea6270f0a90256$export$2e2bcd8739ae039)(font, font.GPOS);
      }
    };
    var $9d641258c9d7180d$export$2e2bcd8739ae039 = class {
      layout(string, features, script, language, direction) {
        if (typeof features === "string") {
          direction = language;
          language = script;
          script = features;
          features = [];
        }
        if (typeof string === "string") {
          if (script == null) script = $e38a1a895f6aeb54$export$e5cb25e204fb8450(string);
          var glyphs = this.font.glyphsForString(string);
        } else {
          if (script == null) {
            let codePoints = [];
            for (let glyph of string) codePoints.push(...glyph.codePoints);
            script = $e38a1a895f6aeb54$export$16fab0757cfc223d(codePoints);
          }
          var glyphs = string;
        }
        let glyphRun = new (0, $b19c79ec7a94fa39$export$2e2bcd8739ae039)(glyphs, features, script, language, direction);
        if (glyphs.length === 0) {
          glyphRun.positions = [];
          return glyphRun;
        }
        if (this.engine && this.engine.setup) this.engine.setup(glyphRun);
        this.substitute(glyphRun);
        this.position(glyphRun);
        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);
        if (this.engine && this.engine.cleanup) this.engine.cleanup();
        return glyphRun;
      }
      substitute(glyphRun) {
        if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);
      }
      position(glyphRun) {
        glyphRun.positions = glyphRun.glyphs.map((glyph) => new (0, $9195cf1266c12ea5$export$2e2bcd8739ae039)(glyph.advanceWidth));
        let positioned = null;
        if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);
        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
          if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new (0, $a57a26817cd35108$export$2e2bcd8739ae039)(this.font);
          this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
        }
        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
          if (!this.kernProcessor) this.kernProcessor = new (0, $4646d52c2a559cdb$export$2e2bcd8739ae039)(this.font);
          this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
          glyphRun.features.kern = true;
        }
      }
      hideDefaultIgnorables(glyphs, positions) {
        let space = this.font.glyphForCodePoint(32);
        for (let i2 = 0; i2 < glyphs.length; i2++) if (this.isDefaultIgnorable(glyphs[i2].codePoints[0])) {
          glyphs[i2] = space;
          positions[i2].xAdvance = 0;
          positions[i2].yAdvance = 0;
        }
      }
      isDefaultIgnorable(ch) {
        let plane = ch >> 16;
        if (plane === 0)
          switch (ch >> 8) {
            case 0:
              return ch === 173;
            case 3:
              return ch === 847;
            case 6:
              return ch === 1564;
            case 23:
              return 6068 <= ch && ch <= 6069;
            case 24:
              return 6155 <= ch && ch <= 6158;
            case 32:
              return 8203 <= ch && ch <= 8207 || 8234 <= ch && ch <= 8238 || 8288 <= ch && ch <= 8303;
            case 254:
              return 65024 <= ch && ch <= 65039 || ch === 65279;
            case 255:
              return 65520 <= ch && ch <= 65528;
            default:
              return false;
          }
        else
          switch (plane) {
            case 1:
              return 113824 <= ch && ch <= 113827 || 119155 <= ch && ch <= 119162;
            case 14:
              return 917504 <= ch && ch <= 921599;
            default:
              return false;
          }
      }
      getAvailableFeatures(script, language) {
        let features = [];
        if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));
        if (this.font.kern && features.indexOf("kern") === -1) features.push("kern");
        return features;
      }
      stringsForGlyph(gid) {
        let result = /* @__PURE__ */ new Set();
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
        for (let codePoint of codePoints) result.add(String.fromCodePoint(codePoint));
        if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid)) result.add(string);
        return Array.from(result);
      }
      constructor(font) {
        this.font = font;
        this.unicodeLayoutEngine = null;
        this.kernProcessor = null;
        if (this.font.morx) this.engine = new (0, $860fcbd64bc12fbc$export$2e2bcd8739ae039)(this.font);
        else if (this.font.GSUB || this.font.GPOS) this.engine = new (0, $b2f26a32cb9ab2fa$export$2e2bcd8739ae039)(this.font);
      }
    };
    var $67ee4828d81adb28$var$SVG_COMMANDS = {
      moveTo: "M",
      lineTo: "L",
      quadraticCurveTo: "Q",
      bezierCurveTo: "C",
      closePath: "Z"
    };
    var $67ee4828d81adb28$export$2e2bcd8739ae039 = class _$67ee4828d81adb28$export$2e2bcd8739ae039 {
      /**
      * Compiles the path to a JavaScript function that can be applied with
      * a graphics context in order to render the path.
      * @return {string}
      */
      toFunction() {
        return (ctx) => {
          this.commands.forEach((c) => {
            return ctx[c.command].apply(ctx, c.args);
          });
        };
      }
      /**
      * Converts the path to an SVG path data string
      * @return {string}
      */
      toSVG() {
        let cmds = this.commands.map((c) => {
          let args = c.args.map((arg) => Math.round(arg * 100) / 100);
          return `${$67ee4828d81adb28$var$SVG_COMMANDS[c.command]}${args.join(" ")}`;
        });
        return cmds.join("");
      }
      /**
      * Gets the "control box" of a path.
      * This is like the bounding box, but it includes all points including
      * control points of bezier segments and is much faster to compute than
      * the real bounding box.
      * @type {BBox}
      */
      get cbox() {
        if (!this._cbox) {
          let cbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)();
          for (let command of this.commands) for (let i2 = 0; i2 < command.args.length; i2 += 2) cbox.addPoint(command.args[i2], command.args[i2 + 1]);
          this._cbox = Object.freeze(cbox);
        }
        return this._cbox;
      }
      /**
      * Gets the exact bounding box of the path by evaluating curve segments.
      * Slower to compute than the control box, but more accurate.
      * @type {BBox}
      */
      get bbox() {
        if (this._bbox) return this._bbox;
        let bbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)();
        let cx = 0, cy = 0;
        let f3 = (t2) => Math.pow(1 - t2, 3) * p0[i2] + 3 * Math.pow(1 - t2, 2) * t2 * p1[i2] + 3 * (1 - t2) * Math.pow(t2, 2) * p2[i2] + Math.pow(t2, 3) * p3[i2];
        for (let c of this.commands) switch (c.command) {
          case "moveTo":
          case "lineTo":
            let [x2, y] = c.args;
            bbox.addPoint(x2, y);
            cx = x2;
            cy = y;
            break;
          case "quadraticCurveTo":
          case "bezierCurveTo":
            if (c.command === "quadraticCurveTo") {
              var [qp1x, qp1y, p3x, p3y] = c.args;
              var cp1x = cx + 2 / 3 * (qp1x - cx);
              var cp1y = cy + 2 / 3 * (qp1y - cy);
              var cp2x = p3x + 2 / 3 * (qp1x - p3x);
              var cp2y = p3y + 2 / 3 * (qp1y - p3y);
            } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;
            bbox.addPoint(p3x, p3y);
            var p0 = [
              cx,
              cy
            ];
            var p1 = [
              cp1x,
              cp1y
            ];
            var p2 = [
              cp2x,
              cp2y
            ];
            var p3 = [
              p3x,
              p3y
            ];
            for (var i2 = 0; i2 <= 1; i2++) {
              let b = 6 * p0[i2] - 12 * p1[i2] + 6 * p2[i2];
              let a = -3 * p0[i2] + 9 * p1[i2] - 9 * p2[i2] + 3 * p3[i2];
              c = 3 * p1[i2] - 3 * p0[i2];
              if (a === 0) {
                if (b === 0) continue;
                let t3 = -c / b;
                if (0 < t3 && t3 < 1) {
                  if (i2 === 0) bbox.addPoint(f3(t3), bbox.maxY);
                  else if (i2 === 1) bbox.addPoint(bbox.maxX, f3(t3));
                }
                continue;
              }
              let b2ac = Math.pow(b, 2) - 4 * c * a;
              if (b2ac < 0) continue;
              let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
              if (0 < t1 && t1 < 1) {
                if (i2 === 0) bbox.addPoint(f3(t1), bbox.maxY);
                else if (i2 === 1) bbox.addPoint(bbox.maxX, f3(t1));
              }
              let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
              if (0 < t2 && t2 < 1) {
                if (i2 === 0) bbox.addPoint(f3(t2), bbox.maxY);
                else if (i2 === 1) bbox.addPoint(bbox.maxX, f3(t2));
              }
            }
            cx = p3x;
            cy = p3y;
            break;
        }
        return this._bbox = Object.freeze(bbox);
      }
      /**
      * Applies a mapping function to each point in the path.
      * @param {function} fn
      * @return {Path}
      */
      mapPoints(fn) {
        let path = new _$67ee4828d81adb28$export$2e2bcd8739ae039();
        for (let c of this.commands) {
          let args = [];
          for (let i2 = 0; i2 < c.args.length; i2 += 2) {
            let [x2, y] = fn(c.args[i2], c.args[i2 + 1]);
            args.push(x2, y);
          }
          path[c.command](...args);
        }
        return path;
      }
      /**
      * Transforms the path by the given matrix.
      */
      transform(m0, m1, m2, m3, m4, m5) {
        return this.mapPoints((x2, y) => {
          const tx = m0 * x2 + m2 * y + m4;
          const ty = m1 * x2 + m3 * y + m5;
          return [
            tx,
            ty
          ];
        });
      }
      /**
      * Translates the path by the given offset.
      */
      translate(x2, y) {
        return this.transform(1, 0, 0, 1, x2, y);
      }
      /**
      * Rotates the path by the given angle (in radians).
      */
      rotate(angle) {
        let cos = Math.cos(angle);
        let sin = Math.sin(angle);
        return this.transform(cos, sin, -sin, cos, 0, 0);
      }
      /**
      * Scales the path.
      */
      scale(scaleX, scaleY = scaleX) {
        return this.transform(scaleX, 0, 0, scaleY, 0, 0);
      }
      constructor() {
        this.commands = [];
        this._bbox = null;
        this._cbox = null;
      }
    };
    for (let command of [
      "moveTo",
      "lineTo",
      "quadraticCurveTo",
      "bezierCurveTo",
      "closePath"
    ]) $67ee4828d81adb28$export$2e2bcd8739ae039.prototype[command] = function(...args) {
      this._bbox = this._cbox = null;
      this.commands.push({
        command,
        args
      });
      return this;
    };
    var $85e16e40023cfb0f$export$2e2bcd8739ae039 = [
      ".notdef",
      ".null",
      "nonmarkingreturn",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quotesingle",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "grave",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "Adieresis",
      "Aring",
      "Ccedilla",
      "Eacute",
      "Ntilde",
      "Odieresis",
      "Udieresis",
      "aacute",
      "agrave",
      "acircumflex",
      "adieresis",
      "atilde",
      "aring",
      "ccedilla",
      "eacute",
      "egrave",
      "ecircumflex",
      "edieresis",
      "iacute",
      "igrave",
      "icircumflex",
      "idieresis",
      "ntilde",
      "oacute",
      "ograve",
      "ocircumflex",
      "odieresis",
      "otilde",
      "uacute",
      "ugrave",
      "ucircumflex",
      "udieresis",
      "dagger",
      "degree",
      "cent",
      "sterling",
      "section",
      "bullet",
      "paragraph",
      "germandbls",
      "registered",
      "copyright",
      "trademark",
      "acute",
      "dieresis",
      "notequal",
      "AE",
      "Oslash",
      "infinity",
      "plusminus",
      "lessequal",
      "greaterequal",
      "yen",
      "mu",
      "partialdiff",
      "summation",
      "product",
      "pi",
      "integral",
      "ordfeminine",
      "ordmasculine",
      "Omega",
      "ae",
      "oslash",
      "questiondown",
      "exclamdown",
      "logicalnot",
      "radical",
      "florin",
      "approxequal",
      "Delta",
      "guillemotleft",
      "guillemotright",
      "ellipsis",
      "nonbreakingspace",
      "Agrave",
      "Atilde",
      "Otilde",
      "OE",
      "oe",
      "endash",
      "emdash",
      "quotedblleft",
      "quotedblright",
      "quoteleft",
      "quoteright",
      "divide",
      "lozenge",
      "ydieresis",
      "Ydieresis",
      "fraction",
      "currency",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "daggerdbl",
      "periodcentered",
      "quotesinglbase",
      "quotedblbase",
      "perthousand",
      "Acircumflex",
      "Ecircumflex",
      "Aacute",
      "Edieresis",
      "Egrave",
      "Iacute",
      "Icircumflex",
      "Idieresis",
      "Igrave",
      "Oacute",
      "Ocircumflex",
      "apple",
      "Ograve",
      "Uacute",
      "Ucircumflex",
      "Ugrave",
      "dotlessi",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "ring",
      "cedilla",
      "hungarumlaut",
      "ogonek",
      "caron",
      "Lslash",
      "lslash",
      "Scaron",
      "scaron",
      "Zcaron",
      "zcaron",
      "brokenbar",
      "Eth",
      "eth",
      "Yacute",
      "yacute",
      "Thorn",
      "thorn",
      "minus",
      "multiply",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "onehalf",
      "onequarter",
      "threequarters",
      "franc",
      "Gbreve",
      "gbreve",
      "Idotaccent",
      "Scedilla",
      "scedilla",
      "Cacute",
      "cacute",
      "Ccaron",
      "ccaron",
      "dcroat"
    ];
    var $0e4f52d7996e478b$export$2e2bcd8739ae039 = class {
      _getPath() {
        return new (0, $67ee4828d81adb28$export$2e2bcd8739ae039)();
      }
      _getCBox() {
        return this.path.cbox;
      }
      _getBBox() {
        return this.path.bbox;
      }
      _getTableMetrics(table) {
        if (this.id < table.metrics.length) return table.metrics.get(this.id);
        let metric = table.metrics.get(table.metrics.length - 1);
        let res = {
          advance: metric ? metric.advance : 0,
          bearing: table.bearings.get(this.id - table.metrics.length) || 0
        };
        return res;
      }
      _getMetrics(cbox) {
        if (this._metrics) return this._metrics;
        let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);
        if (this._font.vmtx) var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);
        else {
          let os2;
          if (typeof cbox === "undefined" || cbox === null) ({ cbox } = this);
          if ((os2 = this._font["OS/2"]) && os2.version > 0) {
            var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
            var topBearing = os2.typoAscender - cbox.maxY;
          } else {
            let { hhea } = this._font;
            var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
            var topBearing = hhea.ascent - cbox.maxY;
          }
        }
        if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
        return this._metrics = {
          advanceWidth,
          advanceHeight,
          leftBearing,
          topBearing
        };
      }
      /**
      * The glyph’s control box.
      * This is often the same as the bounding box, but is faster to compute.
      * Because of the way bezier curves are defined, some of the control points
      * can be outside of the bounding box. Where `bbox` takes this into account,
      * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
      * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
      * for a more detailed description.
      *
      * @type {BBox}
      */
      get cbox() {
        return this._getCBox();
      }
      /**
      * The glyph’s bounding box, i.e. the rectangle that encloses the
      * glyph outline as tightly as possible.
      * @type {BBox}
      */
      get bbox() {
        return this._getBBox();
      }
      /**
      * A vector Path object representing the glyph outline.
      * @type {Path}
      */
      get path() {
        return this._getPath();
      }
      /**
      * Returns a path scaled to the given font size.
      * @param {number} size
      * @return {Path}
      */
      getScaledPath(size) {
        let scale = 1 / this._font.unitsPerEm * size;
        return this.path.scale(scale);
      }
      /**
      * The glyph's advance width.
      * @type {number}
      */
      get advanceWidth() {
        return this._getMetrics().advanceWidth;
      }
      /**
      * The glyph's advance height.
      * @type {number}
      */
      get advanceHeight() {
        return this._getMetrics().advanceHeight;
      }
      get ligatureCaretPositions() {
      }
      _getName() {
        let { post } = this._font;
        if (!post) return null;
        switch (post.version) {
          case 1:
            return (0, $85e16e40023cfb0f$export$2e2bcd8739ae039)[this.id];
          case 2:
            let id = post.glyphNameIndex[this.id];
            if (id < (0, $85e16e40023cfb0f$export$2e2bcd8739ae039).length) return (0, $85e16e40023cfb0f$export$2e2bcd8739ae039)[id];
            return post.names[id - (0, $85e16e40023cfb0f$export$2e2bcd8739ae039).length];
          case 2.5:
            return (0, $85e16e40023cfb0f$export$2e2bcd8739ae039)[this.id + post.offsets[this.id]];
          case 4:
            return String.fromCharCode(post.map[this.id]);
        }
      }
      /**
      * The glyph's name
      * @type {string}
      */
      get name() {
        return this._getName();
      }
      /**
      * Renders the glyph to the given graphics context, at the specified font size.
      * @param {CanvasRenderingContext2d} ctx
      * @param {number} size
      */
      render(ctx, size) {
        ctx.save();
        let scale = 1 / this._font.head.unitsPerEm * size;
        ctx.scale(scale, scale);
        let fn = this.path.toFunction();
        fn(ctx);
        ctx.fill();
        ctx.restore();
      }
      constructor(id, codePoints, font) {
        this.id = id;
        this.codePoints = codePoints;
        this._font = font;
        this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $elh9A$unicodeproperties.isMark));
        this.isLigature = this.codePoints.length > 1;
      }
    };
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "cbox", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "bbox", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "path", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "advanceWidth", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "advanceHeight", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "name", null);
    var $f680320fa07ef53d$var$GlyfHeader = new $elh9A$restructure.Struct({
      numberOfContours: $elh9A$restructure.int16,
      xMin: $elh9A$restructure.int16,
      yMin: $elh9A$restructure.int16,
      xMax: $elh9A$restructure.int16,
      yMax: $elh9A$restructure.int16
    });
    var $f680320fa07ef53d$var$ON_CURVE = 1;
    var $f680320fa07ef53d$var$X_SHORT_VECTOR = 2;
    var $f680320fa07ef53d$var$Y_SHORT_VECTOR = 4;
    var $f680320fa07ef53d$var$REPEAT = 8;
    var $f680320fa07ef53d$var$SAME_X = 16;
    var $f680320fa07ef53d$var$SAME_Y = 32;
    var $f680320fa07ef53d$var$ARG_1_AND_2_ARE_WORDS = 1;
    var $f680320fa07ef53d$var$WE_HAVE_A_SCALE = 8;
    var $f680320fa07ef53d$var$MORE_COMPONENTS = 32;
    var $f680320fa07ef53d$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;
    var $f680320fa07ef53d$var$WE_HAVE_A_TWO_BY_TWO = 128;
    var $f680320fa07ef53d$var$WE_HAVE_INSTRUCTIONS = 256;
    var $f680320fa07ef53d$export$baf26146a414f24a = class _$f680320fa07ef53d$export$baf26146a414f24a {
      copy() {
        return new _$f680320fa07ef53d$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);
      }
      constructor(onCurve, endContour, x2 = 0, y = 0) {
        this.onCurve = onCurve;
        this.endContour = endContour;
        this.x = x2;
        this.y = y;
      }
    };
    var $f680320fa07ef53d$var$Component = class {
      constructor(glyphID, dx, dy) {
        this.glyphID = glyphID;
        this.dx = dx;
        this.dy = dy;
        this.pos = 0;
        this.scaleX = this.scaleY = 1;
        this.scale01 = this.scale10 = 0;
      }
    };
    var $f680320fa07ef53d$export$2e2bcd8739ae039 = class extends (0, $0e4f52d7996e478b$export$2e2bcd8739ae039) {
      // Parses just the glyph header and returns the bounding box
      _getCBox(internal) {
        if (this._font._variationProcessor && !internal) return this.path.cbox;
        let stream = this._font._getTableStream("glyf");
        stream.pos += this._font.loca.offsets[this.id];
        let glyph = $f680320fa07ef53d$var$GlyfHeader.decode(stream);
        let cbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
        return Object.freeze(cbox);
      }
      // Parses a single glyph coordinate
      _parseGlyphCoord(stream, prev, short, same) {
        if (short) {
          var val = stream.readUInt8();
          if (!same) val = -val;
          val += prev;
        } else if (same) var val = prev;
        else var val = prev + stream.readInt16BE();
        return val;
      }
      // Decodes the glyph data into points for simple glyphs,
      // or components for composite glyphs
      _decode() {
        let glyfPos = this._font.loca.offsets[this.id];
        let nextPos = this._font.loca.offsets[this.id + 1];
        if (glyfPos === nextPos) return null;
        let stream = this._font._getTableStream("glyf");
        stream.pos += glyfPos;
        let startPos = stream.pos;
        let glyph = $f680320fa07ef53d$var$GlyfHeader.decode(stream);
        if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);
        else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);
        return glyph;
      }
      _decodeSimple(glyph, stream) {
        glyph.points = [];
        let endPtsOfContours = new $elh9A$restructure.Array($elh9A$restructure.uint16, glyph.numberOfContours).decode(stream);
        glyph.instructions = new $elh9A$restructure.Array($elh9A$restructure.uint8, $elh9A$restructure.uint16).decode(stream);
        let flags = [];
        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;
        while (flags.length < numCoords) {
          var flag = stream.readUInt8();
          flags.push(flag);
          if (flag & $f680320fa07ef53d$var$REPEAT) {
            let count = stream.readUInt8();
            for (let j = 0; j < count; j++) flags.push(flag);
          }
        }
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags[i2];
          let point = new $f680320fa07ef53d$export$baf26146a414f24a(!!(flag & $f680320fa07ef53d$var$ON_CURVE), endPtsOfContours.indexOf(i2) >= 0, 0, 0);
          glyph.points.push(point);
        }
        let px = 0;
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags[i2];
          glyph.points[i2].x = px = this._parseGlyphCoord(stream, px, flag & $f680320fa07ef53d$var$X_SHORT_VECTOR, flag & $f680320fa07ef53d$var$SAME_X);
        }
        let py = 0;
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags[i2];
          glyph.points[i2].y = py = this._parseGlyphCoord(stream, py, flag & $f680320fa07ef53d$var$Y_SHORT_VECTOR, flag & $f680320fa07ef53d$var$SAME_Y);
        }
        if (this._font._variationProcessor) {
          let points = glyph.points.slice();
          points.push(...this._getPhantomPoints(glyph));
          this._font._variationProcessor.transformPoints(this.id, points);
          glyph.phantomPoints = points.slice(-4);
        }
        return;
      }
      _decodeComposite(glyph, stream, offset = 0) {
        glyph.components = [];
        let haveInstructions = false;
        let flags = $f680320fa07ef53d$var$MORE_COMPONENTS;
        while (flags & $f680320fa07ef53d$var$MORE_COMPONENTS) {
          flags = stream.readUInt16BE();
          let gPos = stream.pos - offset;
          let glyphID = stream.readUInt16BE();
          if (!haveInstructions) haveInstructions = (flags & $f680320fa07ef53d$var$WE_HAVE_INSTRUCTIONS) !== 0;
          if (flags & $f680320fa07ef53d$var$ARG_1_AND_2_ARE_WORDS) {
            var dx = stream.readInt16BE();
            var dy = stream.readInt16BE();
          } else {
            var dx = stream.readInt8();
            var dy = stream.readInt8();
          }
          var component = new $f680320fa07ef53d$var$Component(glyphID, dx, dy);
          component.pos = gPos;
          if (flags & $f680320fa07ef53d$var$WE_HAVE_A_SCALE)
            component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
          else if (flags & $f680320fa07ef53d$var$WE_HAVE_AN_X_AND_Y_SCALE) {
            component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
          } else if (flags & $f680320fa07ef53d$var$WE_HAVE_A_TWO_BY_TWO) {
            component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
          }
          glyph.components.push(component);
        }
        if (this._font._variationProcessor) {
          let points = [];
          for (let j = 0; j < glyph.components.length; j++) {
            var component = glyph.components[j];
            points.push(new $f680320fa07ef53d$export$baf26146a414f24a(true, true, component.dx, component.dy));
          }
          points.push(...this._getPhantomPoints(glyph));
          this._font._variationProcessor.transformPoints(this.id, points);
          glyph.phantomPoints = points.splice(-4, 4);
          for (let i2 = 0; i2 < points.length; i2++) {
            let point = points[i2];
            glyph.components[i2].dx = point.x;
            glyph.components[i2].dy = point.y;
          }
        }
        return haveInstructions;
      }
      _getPhantomPoints(glyph) {
        let cbox = this._getCBox(true);
        if (this._metrics == null) this._metrics = (0, $0e4f52d7996e478b$export$2e2bcd8739ae039).prototype._getMetrics.call(this, cbox);
        let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;
        return [
          new $f680320fa07ef53d$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),
          new $f680320fa07ef53d$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),
          new $f680320fa07ef53d$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),
          new $f680320fa07ef53d$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)
        ];
      }
      // Decodes font data, resolves composite glyphs, and returns an array of contours
      _getContours() {
        let glyph = this._decode();
        if (!glyph) return [];
        let points = [];
        if (glyph.numberOfContours < 0)
          for (let component of glyph.components) {
            let contours2 = this._font.getGlyph(component.glyphID)._getContours();
            for (let i2 = 0; i2 < contours2.length; i2++) {
              let contour = contours2[i2];
              for (let j = 0; j < contour.length; j++) {
                let point2 = contour[j];
                let x2 = point2.x * component.scaleX + point2.y * component.scale01 + component.dx;
                let y = point2.y * component.scaleY + point2.x * component.scale10 + component.dy;
                points.push(new $f680320fa07ef53d$export$baf26146a414f24a(point2.onCurve, point2.endContour, x2, y));
              }
            }
          }
        else points = glyph.points || [];
        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
          this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
          this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
          this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
          this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
        }
        let contours = [];
        let cur = [];
        for (let k = 0; k < points.length; k++) {
          var point = points[k];
          cur.push(point);
          if (point.endContour) {
            contours.push(cur);
            cur = [];
          }
        }
        return contours;
      }
      _getMetrics() {
        if (this._metrics) return this._metrics;
        let cbox = this._getCBox(true);
        super._getMetrics(cbox);
        if (this._font._variationProcessor && !this._font.HVAR)
          this.path;
        return this._metrics;
      }
      // Converts contours to a Path object that can be rendered
      _getPath() {
        let contours = this._getContours();
        let path = new (0, $67ee4828d81adb28$export$2e2bcd8739ae039)();
        for (let i2 = 0; i2 < contours.length; i2++) {
          let contour = contours[i2];
          let firstPt = contour[0];
          let lastPt = contour[contour.length - 1];
          let start = 0;
          if (firstPt.onCurve) {
            var curvePt = null;
            start = 1;
          } else {
            if (lastPt.onCurve)
              firstPt = lastPt;
            else
              firstPt = new $f680320fa07ef53d$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
            var curvePt = firstPt;
          }
          path.moveTo(firstPt.x, firstPt.y);
          for (let j = start; j < contour.length; j++) {
            let pt = contour[j];
            let prevPt = j === 0 ? firstPt : contour[j - 1];
            if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);
            else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;
            else if (!prevPt.onCurve && !pt.onCurve) {
              let midX = (prevPt.x + pt.x) / 2;
              let midY = (prevPt.y + pt.y) / 2;
              path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
              var curvePt = pt;
            } else if (!prevPt.onCurve && pt.onCurve) {
              path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
              var curvePt = null;
            } else throw new Error("Unknown TTF path state");
          }
          if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
          path.closePath();
        }
        return path;
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "TTF");
      }
    };
    var $7ee0705195f3b047$export$2e2bcd8739ae039 = class extends (0, $0e4f52d7996e478b$export$2e2bcd8739ae039) {
      _getName() {
        if (this._font.CFF2) return super._getName();
        return this._font["CFF "].getGlyphName(this.id);
      }
      bias(s2) {
        if (s2.length < 1240) return 107;
        else if (s2.length < 33900) return 1131;
        else return 32768;
      }
      _getPath() {
        let cff = this._font.CFF2 || this._font["CFF "];
        let { stream } = cff;
        let str = cff.topDict.CharStrings[this.id];
        let end = str.offset + str.length;
        stream.pos = str.offset;
        let path = new (0, $67ee4828d81adb28$export$2e2bcd8739ae039)();
        let stack = [];
        let trans = [];
        let width = null;
        let nStems = 0;
        let x2 = 0, y = 0;
        let usedGsubrs;
        let usedSubrs;
        let open = false;
        this._usedGsubrs = usedGsubrs = {};
        this._usedSubrs = usedSubrs = {};
        let gsubrs = cff.globalSubrIndex || [];
        let gsubrsBias = this.bias(gsubrs);
        let privateDict = cff.privateDictForGlyph(this.id) || {};
        let subrs = privateDict.Subrs || [];
        let subrsBias = this.bias(subrs);
        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
        let vsindex = privateDict.vsindex;
        let variationProcessor = this._font._variationProcessor;
        function checkWidth() {
          if (width == null) width = stack.shift() + privateDict.nominalWidthX;
        }
        function parseStems() {
          if (stack.length % 2 !== 0) checkWidth();
          nStems += stack.length >> 1;
          return stack.length = 0;
        }
        function moveTo(x3, y2) {
          if (open) path.closePath();
          path.moveTo(x3, y2);
          open = true;
        }
        let parse = function() {
          while (stream.pos < end) {
            let op = stream.readUInt8();
            if (op < 32) {
              let index, subr, phase;
              let c1x, c1y, c2x, c2y, c3x, c3y;
              let c4x, c4y, c5x, c5y, c6x, c6y;
              let pts;
              switch (op) {
                case 1:
                case 3:
                case 18:
                case 23:
                  parseStems();
                  break;
                case 4:
                  if (stack.length > 1) checkWidth();
                  y += stack.shift();
                  moveTo(x2, y);
                  break;
                case 5:
                  while (stack.length >= 2) {
                    x2 += stack.shift();
                    y += stack.shift();
                    path.lineTo(x2, y);
                  }
                  break;
                case 6:
                case 7:
                  phase = op === 6;
                  while (stack.length >= 1) {
                    if (phase) x2 += stack.shift();
                    else y += stack.shift();
                    path.lineTo(x2, y);
                    phase = !phase;
                  }
                  break;
                case 8:
                  while (stack.length > 0) {
                    c1x = x2 + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x2 = c2x + stack.shift();
                    y = c2y + stack.shift();
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x2, y);
                  }
                  break;
                case 10:
                  index = stack.pop() + subrsBias;
                  subr = subrs[index];
                  if (subr) {
                    usedSubrs[index] = true;
                    let p = stream.pos;
                    let e2 = end;
                    stream.pos = subr.offset;
                    end = subr.offset + subr.length;
                    parse();
                    stream.pos = p;
                    end = e2;
                  }
                  break;
                case 11:
                  if (cff.version >= 2) break;
                  return;
                case 14:
                  if (cff.version >= 2) break;
                  if (stack.length > 0) checkWidth();
                  if (open) {
                    path.closePath();
                    open = false;
                  }
                  break;
                case 15:
                  if (cff.version < 2) throw new Error("vsindex operator not supported in CFF v1");
                  vsindex = stack.pop();
                  break;
                case 16: {
                  if (cff.version < 2) throw new Error("blend operator not supported in CFF v1");
                  if (!variationProcessor) throw new Error("blend operator in non-variation font");
                  let blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                  let numBlends = stack.pop();
                  let numOperands = numBlends * blendVector.length;
                  let delta = stack.length - numOperands;
                  let base = delta - numBlends;
                  for (let i2 = 0; i2 < numBlends; i2++) {
                    let sum = stack[base + i2];
                    for (let j = 0; j < blendVector.length; j++) sum += blendVector[j] * stack[delta++];
                    stack[base + i2] = sum;
                  }
                  while (numOperands--) stack.pop();
                  break;
                }
                case 19:
                case 20:
                  parseStems();
                  stream.pos += nStems + 7 >> 3;
                  break;
                case 21:
                  if (stack.length > 2) checkWidth();
                  x2 += stack.shift();
                  y += stack.shift();
                  moveTo(x2, y);
                  break;
                case 22:
                  if (stack.length > 1) checkWidth();
                  x2 += stack.shift();
                  moveTo(x2, y);
                  break;
                case 24:
                  while (stack.length >= 8) {
                    c1x = x2 + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x2 = c2x + stack.shift();
                    y = c2y + stack.shift();
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x2, y);
                  }
                  x2 += stack.shift();
                  y += stack.shift();
                  path.lineTo(x2, y);
                  break;
                case 25:
                  while (stack.length >= 8) {
                    x2 += stack.shift();
                    y += stack.shift();
                    path.lineTo(x2, y);
                  }
                  c1x = x2 + stack.shift();
                  c1y = y + stack.shift();
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  x2 = c2x + stack.shift();
                  y = c2y + stack.shift();
                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x2, y);
                  break;
                case 26:
                  if (stack.length % 2) x2 += stack.shift();
                  while (stack.length >= 4) {
                    c1x = x2;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x2 = c2x;
                    y = c2y + stack.shift();
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x2, y);
                  }
                  break;
                case 27:
                  if (stack.length % 2) y += stack.shift();
                  while (stack.length >= 4) {
                    c1x = x2 + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x2 = c2x + stack.shift();
                    y = c2y;
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x2, y);
                  }
                  break;
                case 28:
                  stack.push(stream.readInt16BE());
                  break;
                case 29:
                  index = stack.pop() + gsubrsBias;
                  subr = gsubrs[index];
                  if (subr) {
                    usedGsubrs[index] = true;
                    let p = stream.pos;
                    let e2 = end;
                    stream.pos = subr.offset;
                    end = subr.offset + subr.length;
                    parse();
                    stream.pos = p;
                    end = e2;
                  }
                  break;
                case 30:
                case 31:
                  phase = op === 31;
                  while (stack.length >= 4) {
                    if (phase) {
                      c1x = x2 + stack.shift();
                      c1y = y;
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      y = c2y + stack.shift();
                      x2 = c2x + (stack.length === 1 ? stack.shift() : 0);
                    } else {
                      c1x = x2;
                      c1y = y + stack.shift();
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      x2 = c2x + stack.shift();
                      y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    }
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x2, y);
                    phase = !phase;
                  }
                  break;
                case 12:
                  op = stream.readUInt8();
                  switch (op) {
                    case 3:
                      let a = stack.pop();
                      let b = stack.pop();
                      stack.push(a && b ? 1 : 0);
                      break;
                    case 4:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a || b ? 1 : 0);
                      break;
                    case 5:
                      a = stack.pop();
                      stack.push(a ? 0 : 1);
                      break;
                    case 9:
                      a = stack.pop();
                      stack.push(Math.abs(a));
                      break;
                    case 10:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a + b);
                      break;
                    case 11:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a - b);
                      break;
                    case 12:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a / b);
                      break;
                    case 14:
                      a = stack.pop();
                      stack.push(-a);
                      break;
                    case 15:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a === b ? 1 : 0);
                      break;
                    case 18:
                      stack.pop();
                      break;
                    case 20:
                      let val = stack.pop();
                      let idx = stack.pop();
                      trans[idx] = val;
                      break;
                    case 21:
                      idx = stack.pop();
                      stack.push(trans[idx] || 0);
                      break;
                    case 22:
                      let s1 = stack.pop();
                      let s2 = stack.pop();
                      let v1 = stack.pop();
                      let v2 = stack.pop();
                      stack.push(v1 <= v2 ? s1 : s2);
                      break;
                    case 23:
                      stack.push(Math.random());
                      break;
                    case 24:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a * b);
                      break;
                    case 26:
                      a = stack.pop();
                      stack.push(Math.sqrt(a));
                      break;
                    case 27:
                      a = stack.pop();
                      stack.push(a, a);
                      break;
                    case 28:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(b, a);
                      break;
                    case 29:
                      idx = stack.pop();
                      if (idx < 0) idx = 0;
                      else if (idx > stack.length - 1) idx = stack.length - 1;
                      stack.push(stack[idx]);
                      break;
                    case 30:
                      let n = stack.pop();
                      let j = stack.pop();
                      if (j >= 0) while (j > 0) {
                        var t2 = stack[n - 1];
                        for (let i2 = n - 2; i2 >= 0; i2--) stack[i2 + 1] = stack[i2];
                        stack[0] = t2;
                        j--;
                      }
                      else while (j < 0) {
                        var t2 = stack[0];
                        for (let i2 = 0; i2 <= n; i2++) stack[i2] = stack[i2 + 1];
                        stack[n - 1] = t2;
                        j++;
                      }
                      break;
                    case 34:
                      c1x = x2 + stack.shift();
                      c1y = y;
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      c3x = c2x + stack.shift();
                      c3y = c2y;
                      c4x = c3x + stack.shift();
                      c4y = c3y;
                      c5x = c4x + stack.shift();
                      c5y = c4y;
                      c6x = c5x + stack.shift();
                      c6y = c5y;
                      x2 = c6x;
                      y = c6y;
                      path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                      path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                      break;
                    case 35:
                      pts = [];
                      for (let i2 = 0; i2 <= 5; i2++) {
                        x2 += stack.shift();
                        y += stack.shift();
                        pts.push(x2, y);
                      }
                      path.bezierCurveTo(...pts.slice(0, 6));
                      path.bezierCurveTo(...pts.slice(6));
                      stack.shift();
                      break;
                    case 36:
                      c1x = x2 + stack.shift();
                      c1y = y + stack.shift();
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      c3x = c2x + stack.shift();
                      c3y = c2y;
                      c4x = c3x + stack.shift();
                      c4y = c3y;
                      c5x = c4x + stack.shift();
                      c5y = c4y + stack.shift();
                      c6x = c5x + stack.shift();
                      c6y = c5y;
                      x2 = c6x;
                      y = c6y;
                      path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                      path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                      break;
                    case 37:
                      let startx = x2;
                      let starty = y;
                      pts = [];
                      for (let i2 = 0; i2 <= 4; i2++) {
                        x2 += stack.shift();
                        y += stack.shift();
                        pts.push(x2, y);
                      }
                      if (Math.abs(x2 - startx) > Math.abs(y - starty)) {
                        x2 += stack.shift();
                        y = starty;
                      } else {
                        x2 = startx;
                        y += stack.shift();
                      }
                      pts.push(x2, y);
                      path.bezierCurveTo(...pts.slice(0, 6));
                      path.bezierCurveTo(...pts.slice(6));
                      break;
                    default:
                      throw new Error(`Unknown op: 12 ${op}`);
                  }
                  break;
                default:
                  throw new Error(`Unknown op: ${op}`);
              }
            } else if (op < 247) stack.push(op - 139);
            else if (op < 251) {
              var b1 = stream.readUInt8();
              stack.push((op - 247) * 256 + b1 + 108);
            } else if (op < 255) {
              var b1 = stream.readUInt8();
              stack.push(-(op - 251) * 256 - b1 - 108);
            } else stack.push(stream.readInt32BE() / 65536);
          }
        };
        parse();
        if (open) path.closePath();
        return path;
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "CFF");
      }
    };
    var $55855d6d316b015e$var$SBIXImage = new $elh9A$restructure.Struct({
      originX: $elh9A$restructure.uint16,
      originY: $elh9A$restructure.uint16,
      type: new $elh9A$restructure.String(4),
      data: new $elh9A$restructure.Buffer((t2) => t2.parent.buflen - t2._currentOffset)
    });
    var $55855d6d316b015e$export$2e2bcd8739ae039 = class extends (0, $f680320fa07ef53d$export$2e2bcd8739ae039) {
      /**
      * Returns an object representing a glyph image at the given point size.
      * The object has a data property with a Buffer containing the actual image data,
      * along with the image type, and origin.
      *
      * @param {number} size
      * @return {object}
      */
      getImageForSize(size) {
        for (let i2 = 0; i2 < this._font.sbix.imageTables.length; i2++) {
          var table = this._font.sbix.imageTables[i2];
          if (table.ppem >= size) break;
        }
        let offsets = table.imageOffsets;
        let start = offsets[this.id];
        let end = offsets[this.id + 1];
        if (start === end) return null;
        this._font.stream.pos = start;
        return $55855d6d316b015e$var$SBIXImage.decode(this._font.stream, {
          buflen: end - start
        });
      }
      render(ctx, size) {
        let img = this.getImageForSize(size);
        if (img != null) {
          let scale = size / this._font.unitsPerEm;
          ctx.image(img.data, {
            height: size,
            x: img.originX,
            y: (this.bbox.minY - img.originY) * scale
          });
        }
        if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "SBIX");
      }
    };
    var $42d9dbd2de9ee2d8$var$COLRLayer = class {
      constructor(glyph, color) {
        this.glyph = glyph;
        this.color = color;
      }
    };
    var $42d9dbd2de9ee2d8$export$2e2bcd8739ae039 = class extends (0, $0e4f52d7996e478b$export$2e2bcd8739ae039) {
      _getBBox() {
        let bbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)();
        for (let i2 = 0; i2 < this.layers.length; i2++) {
          let layer = this.layers[i2];
          let b = layer.glyph.bbox;
          bbox.addPoint(b.minX, b.minY);
          bbox.addPoint(b.maxX, b.maxY);
        }
        return bbox;
      }
      /**
      * Returns an array of objects containing the glyph and color for
      * each layer in the composite color glyph.
      * @type {object[]}
      */
      get layers() {
        let cpal = this._font.CPAL;
        let colr = this._font.COLR;
        let low = 0;
        let high = colr.baseGlyphRecord.length - 1;
        while (low <= high) {
          let mid = low + high >> 1;
          var rec = colr.baseGlyphRecord[mid];
          if (this.id < rec.gid) high = mid - 1;
          else if (this.id > rec.gid) low = mid + 1;
          else {
            var baseLayer = rec;
            break;
          }
        }
        if (baseLayer == null) {
          var g = this._font._getBaseGlyph(this.id);
          var color = {
            red: 0,
            green: 0,
            blue: 0,
            alpha: 255
          };
          return [
            new $42d9dbd2de9ee2d8$var$COLRLayer(g, color)
          ];
        }
        let layers = [];
        for (let i2 = baseLayer.firstLayerIndex; i2 < baseLayer.firstLayerIndex + baseLayer.numLayers; i2++) {
          var rec = colr.layerRecords[i2];
          var color = cpal.colorRecords[rec.paletteIndex];
          var g = this._font._getBaseGlyph(rec.gid);
          layers.push(new $42d9dbd2de9ee2d8$var$COLRLayer(g, color));
        }
        return layers;
      }
      render(ctx, size) {
        for (let { glyph, color } of this.layers) {
          ctx.fillColor([
            color.red,
            color.green,
            color.blue
          ], color.alpha / 255 * 100);
          glyph.render(ctx, size);
        }
        return;
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "COLR");
      }
    };
    var $7586bb9ea67c41d8$var$TUPLES_SHARE_POINT_NUMBERS = 32768;
    var $7586bb9ea67c41d8$var$TUPLE_COUNT_MASK = 4095;
    var $7586bb9ea67c41d8$var$EMBEDDED_TUPLE_COORD = 32768;
    var $7586bb9ea67c41d8$var$INTERMEDIATE_TUPLE = 16384;
    var $7586bb9ea67c41d8$var$PRIVATE_POINT_NUMBERS = 8192;
    var $7586bb9ea67c41d8$var$TUPLE_INDEX_MASK = 4095;
    var $7586bb9ea67c41d8$var$POINTS_ARE_WORDS = 128;
    var $7586bb9ea67c41d8$var$POINT_RUN_COUNT_MASK = 127;
    var $7586bb9ea67c41d8$var$DELTAS_ARE_ZERO = 128;
    var $7586bb9ea67c41d8$var$DELTAS_ARE_WORDS = 64;
    var $7586bb9ea67c41d8$var$DELTA_RUN_COUNT_MASK = 63;
    var $7586bb9ea67c41d8$export$2e2bcd8739ae039 = class {
      normalizeCoords(coords) {
        let normalized = [];
        for (var i2 = 0; i2 < this.font.fvar.axis.length; i2++) {
          let axis = this.font.fvar.axis[i2];
          if (coords[i2] < axis.defaultValue) normalized.push((coords[i2] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
          else normalized.push((coords[i2] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
        }
        if (this.font.avar) for (var i2 = 0; i2 < this.font.avar.segment.length; i2++) {
          let segment = this.font.avar.segment[i2];
          for (let j = 0; j < segment.correspondence.length; j++) {
            let pair = segment.correspondence[j];
            if (j >= 1 && normalized[i2] < pair.fromCoord) {
              let prev = segment.correspondence[j - 1];
              normalized[i2] = ((normalized[i2] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
              break;
            }
          }
        }
        return normalized;
      }
      transformPoints(gid, glyphPoints) {
        if (!this.font.fvar || !this.font.gvar) return;
        let { gvar } = this.font;
        if (gid >= gvar.glyphCount) return;
        let offset = gvar.offsets[gid];
        if (offset === gvar.offsets[gid + 1]) return;
        let { stream } = this.font;
        stream.pos = offset;
        if (stream.pos >= stream.length) return;
        let tupleCount = stream.readUInt16BE();
        let offsetToData = offset + stream.readUInt16BE();
        if (tupleCount & $7586bb9ea67c41d8$var$TUPLES_SHARE_POINT_NUMBERS) {
          var here = stream.pos;
          stream.pos = offsetToData;
          var sharedPoints = this.decodePoints();
          offsetToData = stream.pos;
          stream.pos = here;
        }
        let origPoints = glyphPoints.map((pt) => pt.copy());
        tupleCount &= $7586bb9ea67c41d8$var$TUPLE_COUNT_MASK;
        for (let i2 = 0; i2 < tupleCount; i2++) {
          let tupleDataSize = stream.readUInt16BE();
          let tupleIndex = stream.readUInt16BE();
          if (tupleIndex & $7586bb9ea67c41d8$var$EMBEDDED_TUPLE_COORD) {
            var tupleCoords = [];
            for (let a = 0; a < gvar.axisCount; a++) tupleCoords.push(stream.readInt16BE() / 16384);
          } else {
            if ((tupleIndex & $7586bb9ea67c41d8$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error("Invalid gvar table");
            var tupleCoords = gvar.globalCoords[tupleIndex & $7586bb9ea67c41d8$var$TUPLE_INDEX_MASK];
          }
          if (tupleIndex & $7586bb9ea67c41d8$var$INTERMEDIATE_TUPLE) {
            var startCoords = [];
            for (let a = 0; a < gvar.axisCount; a++) startCoords.push(stream.readInt16BE() / 16384);
            var endCoords = [];
            for (let a = 0; a < gvar.axisCount; a++) endCoords.push(stream.readInt16BE() / 16384);
          }
          let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
          if (factor === 0) {
            offsetToData += tupleDataSize;
            continue;
          }
          var here = stream.pos;
          stream.pos = offsetToData;
          if (tupleIndex & $7586bb9ea67c41d8$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();
          else var points = sharedPoints;
          let nPoints = points.length === 0 ? glyphPoints.length : points.length;
          let xDeltas = this.decodeDeltas(nPoints);
          let yDeltas = this.decodeDeltas(nPoints);
          if (points.length === 0) for (let i3 = 0; i3 < glyphPoints.length; i3++) {
            var point = glyphPoints[i3];
            point.x += Math.round(xDeltas[i3] * factor);
            point.y += Math.round(yDeltas[i3] * factor);
          }
          else {
            let outPoints = origPoints.map((pt) => pt.copy());
            let hasDelta = glyphPoints.map(() => false);
            for (let i3 = 0; i3 < points.length; i3++) {
              let idx = points[i3];
              if (idx < glyphPoints.length) {
                let point2 = outPoints[idx];
                hasDelta[idx] = true;
                point2.x += xDeltas[i3] * factor;
                point2.y += yDeltas[i3] * factor;
              }
            }
            this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);
            for (let i3 = 0; i3 < glyphPoints.length; i3++) {
              let deltaX = outPoints[i3].x - origPoints[i3].x;
              let deltaY = outPoints[i3].y - origPoints[i3].y;
              glyphPoints[i3].x = Math.round(glyphPoints[i3].x + deltaX);
              glyphPoints[i3].y = Math.round(glyphPoints[i3].y + deltaY);
            }
          }
          offsetToData += tupleDataSize;
          stream.pos = here;
        }
      }
      decodePoints() {
        let stream = this.font.stream;
        let count = stream.readUInt8();
        if (count & $7586bb9ea67c41d8$var$POINTS_ARE_WORDS) count = (count & $7586bb9ea67c41d8$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
        let points = new Uint16Array(count);
        let i2 = 0;
        let point = 0;
        while (i2 < count) {
          let run = stream.readUInt8();
          let runCount = (run & $7586bb9ea67c41d8$var$POINT_RUN_COUNT_MASK) + 1;
          let fn = run & $7586bb9ea67c41d8$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;
          for (let j = 0; j < runCount && i2 < count; j++) {
            point += fn.call(stream);
            points[i2++] = point;
          }
        }
        return points;
      }
      decodeDeltas(count) {
        let stream = this.font.stream;
        let i2 = 0;
        let deltas = new Int16Array(count);
        while (i2 < count) {
          let run = stream.readUInt8();
          let runCount = (run & $7586bb9ea67c41d8$var$DELTA_RUN_COUNT_MASK) + 1;
          if (run & $7586bb9ea67c41d8$var$DELTAS_ARE_ZERO) i2 += runCount;
          else {
            let fn = run & $7586bb9ea67c41d8$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
            for (let j = 0; j < runCount && i2 < count; j++) deltas[i2++] = fn.call(stream);
          }
        }
        return deltas;
      }
      tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
        let normalized = this.normalizedCoords;
        let { gvar } = this.font;
        let factor = 1;
        for (let i2 = 0; i2 < gvar.axisCount; i2++) {
          if (tupleCoords[i2] === 0) continue;
          if (normalized[i2] === 0) return 0;
          if ((tupleIndex & $7586bb9ea67c41d8$var$INTERMEDIATE_TUPLE) === 0) {
            if (normalized[i2] < Math.min(0, tupleCoords[i2]) || normalized[i2] > Math.max(0, tupleCoords[i2])) return 0;
            factor = (factor * normalized[i2] + Number.EPSILON) / (tupleCoords[i2] + Number.EPSILON);
          } else {
            if (normalized[i2] < startCoords[i2] || normalized[i2] > endCoords[i2]) return 0;
            else if (normalized[i2] < tupleCoords[i2]) factor = factor * (normalized[i2] - startCoords[i2] + Number.EPSILON) / (tupleCoords[i2] - startCoords[i2] + Number.EPSILON);
            else factor = factor * (endCoords[i2] - normalized[i2] + Number.EPSILON) / (endCoords[i2] - tupleCoords[i2] + Number.EPSILON);
          }
        }
        return factor;
      }
      // Interpolates points without delta values.
      // Needed for the Ø and Q glyphs in Skia.
      // Algorithm from Freetype.
      interpolateMissingDeltas(points, inPoints, hasDelta) {
        if (points.length === 0) return;
        let point = 0;
        while (point < points.length) {
          let firstPoint = point;
          let endPoint = point;
          let pt = points[endPoint];
          while (!pt.endContour) pt = points[++endPoint];
          while (point <= endPoint && !hasDelta[point]) point++;
          if (point > endPoint) continue;
          let firstDelta = point;
          let curDelta = point;
          point++;
          while (point <= endPoint) {
            if (hasDelta[point]) {
              this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
              curDelta = point;
            }
            point++;
          }
          if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
          else {
            this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);
            if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
          }
          point = endPoint + 1;
        }
      }
      deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
        if (p1 > p2) return;
        let iterable = [
          "x",
          "y"
        ];
        for (let i2 = 0; i2 < iterable.length; i2++) {
          let k = iterable[i2];
          if (inPoints[ref1][k] > inPoints[ref2][k]) {
            var p = ref1;
            ref1 = ref2;
            ref2 = p;
          }
          let in1 = inPoints[ref1][k];
          let in2 = inPoints[ref2][k];
          let out1 = outPoints[ref1][k];
          let out2 = outPoints[ref2][k];
          if (in1 !== in2 || out1 === out2) {
            let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);
            for (let p3 = p1; p3 <= p2; p3++) {
              let out = inPoints[p3][k];
              if (out <= in1) out += out1 - in1;
              else if (out >= in2) out += out2 - in2;
              else out = out1 + (out - in1) * scale;
              outPoints[p3][k] = out;
            }
          }
        }
      }
      deltaShift(p1, p2, ref, inPoints, outPoints) {
        let deltaX = outPoints[ref].x - inPoints[ref].x;
        let deltaY = outPoints[ref].y - inPoints[ref].y;
        if (deltaX === 0 && deltaY === 0) return;
        for (let p = p1; p <= p2; p++) if (p !== ref) {
          outPoints[p].x += deltaX;
          outPoints[p].y += deltaY;
        }
      }
      getAdvanceAdjustment(gid, table) {
        let outerIndex, innerIndex;
        if (table.advanceWidthMapping) {
          let idx = gid;
          if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;
          let entryFormat = table.advanceWidthMapping.entryFormat;
          ({ outerIndex, innerIndex } = table.advanceWidthMapping.mapData[idx]);
        } else {
          outerIndex = 0;
          innerIndex = gid;
        }
        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
      }
      // See pseudo code from `Font Variations Overview'
      // in the OpenType specification.
      getDelta(itemStore, outerIndex, innerIndex) {
        if (outerIndex >= itemStore.itemVariationData.length) return 0;
        let varData = itemStore.itemVariationData[outerIndex];
        if (innerIndex >= varData.deltaSets.length) return 0;
        let deltaSet = varData.deltaSets[innerIndex];
        let blendVector = this.getBlendVector(itemStore, outerIndex);
        let netAdjustment = 0;
        for (let master = 0; master < varData.regionIndexCount; master++) netAdjustment += deltaSet.deltas[master] * blendVector[master];
        return netAdjustment;
      }
      getBlendVector(itemStore, outerIndex) {
        let varData = itemStore.itemVariationData[outerIndex];
        if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);
        let normalizedCoords = this.normalizedCoords;
        let blendVector = [];
        for (let master = 0; master < varData.regionIndexCount; master++) {
          let scalar = 1;
          let regionIndex = varData.regionIndexes[master];
          let axes = itemStore.variationRegionList.variationRegions[regionIndex];
          for (let j = 0; j < axes.length; j++) {
            let axis = axes[j];
            let axisScalar;
            if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;
            else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;
            else if (axis.peakCoord === 0) axisScalar = 1;
            else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;
            else {
              if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;
              else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
              else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
            }
            scalar *= axisScalar;
          }
          blendVector[master] = scalar;
        }
        this.blendVectors.set(varData, blendVector);
        return blendVector;
      }
      constructor(font, coords) {
        this.font = font;
        this.normalizedCoords = this.normalizeCoords(coords);
        this.blendVectors = /* @__PURE__ */ new Map();
      }
    };
    var $a8ac370803cb82cf$var$resolved = Promise.resolve();
    var $a8ac370803cb82cf$export$2e2bcd8739ae039 = class {
      includeGlyph(glyph) {
        if (typeof glyph === "object") glyph = glyph.id;
        if (this.mapping[glyph] == null) {
          this.glyphs.push(glyph);
          this.mapping[glyph] = this.glyphs.length - 1;
        }
        return this.mapping[glyph];
      }
      constructor(font) {
        this.font = font;
        this.glyphs = [];
        this.mapping = {};
        this.includeGlyph(0);
      }
    };
    var $2784eedf0b35a048$var$ON_CURVE = 1;
    var $2784eedf0b35a048$var$X_SHORT_VECTOR = 2;
    var $2784eedf0b35a048$var$Y_SHORT_VECTOR = 4;
    var $2784eedf0b35a048$var$REPEAT = 8;
    var $2784eedf0b35a048$var$SAME_X = 16;
    var $2784eedf0b35a048$var$SAME_Y = 32;
    var $2784eedf0b35a048$var$Point = class {
      static size(val) {
        return val >= 0 && val <= 255 ? 1 : 2;
      }
      static encode(stream, value) {
        if (value >= 0 && value <= 255) stream.writeUInt8(value);
        else stream.writeInt16BE(value);
      }
    };
    var $2784eedf0b35a048$var$Glyf = new $elh9A$restructure.Struct({
      numberOfContours: $elh9A$restructure.int16,
      xMin: $elh9A$restructure.int16,
      yMin: $elh9A$restructure.int16,
      xMax: $elh9A$restructure.int16,
      yMax: $elh9A$restructure.int16,
      endPtsOfContours: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numberOfContours"),
      instructions: new $elh9A$restructure.Array($elh9A$restructure.uint8, $elh9A$restructure.uint16),
      flags: new $elh9A$restructure.Array($elh9A$restructure.uint8, 0),
      xPoints: new $elh9A$restructure.Array($2784eedf0b35a048$var$Point, 0),
      yPoints: new $elh9A$restructure.Array($2784eedf0b35a048$var$Point, 0)
    });
    var $2784eedf0b35a048$export$2e2bcd8739ae039 = class {
      encodeSimple(path, instructions = []) {
        let endPtsOfContours = [];
        let xPoints = [];
        let yPoints = [];
        let flags = [];
        let same = 0;
        let lastX = 0, lastY = 0, lastFlag = 0;
        let pointCount = 0;
        for (let i2 = 0; i2 < path.commands.length; i2++) {
          let c = path.commands[i2];
          for (let j = 0; j < c.args.length; j += 2) {
            let x2 = c.args[j];
            let y = c.args[j + 1];
            let flag = 0;
            if (c.command === "quadraticCurveTo" && j === 2) {
              let next = path.commands[i2 + 1];
              if (next && next.command === "quadraticCurveTo") {
                let midX = (lastX + next.args[0]) / 2;
                let midY = (lastY + next.args[1]) / 2;
                if (x2 === midX && y === midY) continue;
              }
            }
            if (!(c.command === "quadraticCurveTo" && j === 0)) flag |= $2784eedf0b35a048$var$ON_CURVE;
            flag = this._encodePoint(x2, lastX, xPoints, flag, $2784eedf0b35a048$var$X_SHORT_VECTOR, $2784eedf0b35a048$var$SAME_X);
            flag = this._encodePoint(y, lastY, yPoints, flag, $2784eedf0b35a048$var$Y_SHORT_VECTOR, $2784eedf0b35a048$var$SAME_Y);
            if (flag === lastFlag && same < 255) {
              flags[flags.length - 1] |= $2784eedf0b35a048$var$REPEAT;
              same++;
            } else {
              if (same > 0) {
                flags.push(same);
                same = 0;
              }
              flags.push(flag);
              lastFlag = flag;
            }
            lastX = x2;
            lastY = y;
            pointCount++;
          }
          if (c.command === "closePath") endPtsOfContours.push(pointCount - 1);
        }
        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== "closePath") endPtsOfContours.push(pointCount - 1);
        let bbox = path.bbox;
        let glyf = {
          numberOfContours: endPtsOfContours.length,
          xMin: bbox.minX,
          yMin: bbox.minY,
          xMax: bbox.maxX,
          yMax: bbox.maxY,
          endPtsOfContours,
          instructions,
          flags,
          xPoints,
          yPoints
        };
        let size = $2784eedf0b35a048$var$Glyf.size(glyf);
        let tail = 4 - size % 4;
        let stream = new $elh9A$restructure.EncodeStream(size + tail);
        $2784eedf0b35a048$var$Glyf.encode(stream, glyf);
        if (tail !== 0) stream.fill(0, tail);
        return stream.buffer;
      }
      _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
        let diff = value - last;
        if (value === last) flag |= sameFlag;
        else {
          if (-255 <= diff && diff <= 255) {
            flag |= shortFlag;
            if (diff < 0) diff = -diff;
            else flag |= sameFlag;
          }
          points.push(diff);
        }
        return flag;
      }
    };
    var $fe042f4b88f46896$export$2e2bcd8739ae039 = class extends (0, $a8ac370803cb82cf$export$2e2bcd8739ae039) {
      _addGlyph(gid) {
        let glyph = this.font.getGlyph(gid);
        let glyf = glyph._decode();
        let curOffset = this.font.loca.offsets[gid];
        let nextOffset = this.font.loca.offsets[gid + 1];
        let stream = this.font._getTableStream("glyf");
        stream.pos += curOffset;
        let buffer = stream.readBuffer(nextOffset - curOffset);
        if (glyf && glyf.numberOfContours < 0) {
          buffer = new Uint8Array(buffer);
          let view = new DataView(buffer.buffer);
          for (let component of glyf.components) {
            gid = this.includeGlyph(component.glyphID);
            view.setUint16(component.pos, gid);
          }
        } else if (glyf && this.font._variationProcessor)
          buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
        this.glyf.push(buffer);
        this.loca.offsets.push(this.offset);
        this.hmtx.metrics.push({
          advance: glyph.advanceWidth,
          bearing: glyph._getMetrics().leftBearing
        });
        this.offset += buffer.length;
        return this.glyf.length - 1;
      }
      encode() {
        this.glyf = [];
        this.offset = 0;
        this.loca = {
          offsets: [],
          version: this.font.loca.version
        };
        this.hmtx = {
          metrics: [],
          bearings: []
        };
        let i2 = 0;
        while (i2 < this.glyphs.length) this._addGlyph(this.glyphs[i2++]);
        let maxp = (0, $parcel$interopDefault($elh9A$clone))(this.font.maxp);
        maxp.numGlyphs = this.glyf.length;
        this.loca.offsets.push(this.offset);
        let head = (0, $parcel$interopDefault($elh9A$clone))(this.font.head);
        head.indexToLocFormat = this.loca.version;
        let hhea = (0, $parcel$interopDefault($elh9A$clone))(this.font.hhea);
        hhea.numberOfMetrics = this.hmtx.metrics.length;
        return (0, $df50e1efe10a1247$export$2e2bcd8739ae039).toBuffer({
          tables: {
            head,
            hhea,
            loca: this.loca,
            maxp,
            "cvt ": this.font["cvt "],
            prep: this.font.prep,
            glyf: this.glyf,
            hmtx: this.hmtx,
            fpgm: this.font.fpgm
          }
        });
      }
      constructor(font) {
        super(font);
        this.glyphEncoder = new (0, $2784eedf0b35a048$export$2e2bcd8739ae039)();
      }
    };
    var $ec40f80c07a4e08a$export$2e2bcd8739ae039 = class extends (0, $a8ac370803cb82cf$export$2e2bcd8739ae039) {
      subsetCharstrings() {
        this.charstrings = [];
        let gsubrs = {};
        for (let gid of this.glyphs) {
          this.charstrings.push(this.cff.getCharString(gid));
          let glyph = this.font.getGlyph(gid);
          let path = glyph.path;
          for (let subr in glyph._usedGsubrs) gsubrs[subr] = true;
        }
        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
      }
      subsetSubrs(subrs, used) {
        let res = [];
        for (let i2 = 0; i2 < subrs.length; i2++) {
          let subr = subrs[i2];
          if (used[i2]) {
            this.cff.stream.pos = subr.offset;
            res.push(this.cff.stream.readBuffer(subr.length));
          } else res.push(new Uint8Array([
            11
          ]));
        }
        return res;
      }
      subsetFontdict(topDict) {
        topDict.FDArray = [];
        topDict.FDSelect = {
          version: 0,
          fds: []
        };
        let used_fds = {};
        let used_subrs = [];
        let fd_select = {};
        for (let gid of this.glyphs) {
          let fd = this.cff.fdForGlyph(gid);
          if (fd == null) continue;
          if (!used_fds[fd]) {
            topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
            used_subrs.push({});
            fd_select[fd] = topDict.FDArray.length - 1;
          }
          used_fds[fd] = true;
          topDict.FDSelect.fds.push(fd_select[fd]);
          let glyph = this.font.getGlyph(gid);
          let path = glyph.path;
          for (let subr in glyph._usedSubrs) used_subrs[fd_select[fd]][subr] = true;
        }
        for (let i2 = 0; i2 < topDict.FDArray.length; i2++) {
          let dict = topDict.FDArray[i2];
          delete dict.FontName;
          if (dict.Private && dict.Private.Subrs) {
            dict.Private = Object.assign({}, dict.Private);
            dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i2]);
          }
        }
        return;
      }
      createCIDFontdict(topDict) {
        let used_subrs = {};
        for (let gid of this.glyphs) {
          let glyph = this.font.getGlyph(gid);
          let path = glyph.path;
          for (let subr in glyph._usedSubrs) used_subrs[subr] = true;
        }
        let privateDict = Object.assign({}, this.cff.topDict.Private);
        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
        topDict.FDArray = [
          {
            Private: privateDict
          }
        ];
        return topDict.FDSelect = {
          version: 3,
          nRanges: 1,
          ranges: [
            {
              first: 0,
              fd: 0
            }
          ],
          sentinel: this.charstrings.length
        };
      }
      addString(string) {
        if (!string) return null;
        if (!this.strings) this.strings = [];
        this.strings.push(string);
        return (0, $860d3574d7fa3a51$export$2e2bcd8739ae039).length + this.strings.length - 1;
      }
      encode() {
        this.subsetCharstrings();
        let charset = {
          version: this.charstrings.length > 255 ? 2 : 1,
          ranges: [
            {
              first: 1,
              nLeft: this.charstrings.length - 2
            }
          ]
        };
        let topDict = Object.assign({}, this.cff.topDict);
        topDict.Private = null;
        topDict.charset = charset;
        topDict.Encoding = null;
        topDict.CharStrings = this.charstrings;
        for (let key of [
          "version",
          "Notice",
          "Copyright",
          "FullName",
          "FamilyName",
          "Weight",
          "PostScript",
          "BaseFontName",
          "FontName"
        ]) topDict[key] = this.addString(this.cff.string(topDict[key]));
        topDict.ROS = [
          this.addString("Adobe"),
          this.addString("Identity"),
          0
        ];
        topDict.CIDCount = this.charstrings.length;
        if (this.cff.isCIDFont) this.subsetFontdict(topDict);
        else this.createCIDFontdict(topDict);
        let top = {
          version: 1,
          hdrSize: this.cff.hdrSize,
          offSize: 4,
          header: this.cff.header,
          nameIndex: [
            this.cff.postscriptName
          ],
          topDictIndex: [
            topDict
          ],
          stringIndex: this.strings,
          globalSubrIndex: this.gsubrs
        };
        return (0, $5b547cf9e5da519b$export$2e2bcd8739ae039).toBuffer(top);
      }
      constructor(font) {
        super(font);
        this.cff = this.font["CFF "];
        if (!this.cff) throw new Error("Not a CFF Font");
      }
    };
    var $0a8ef2660a6ce4b6$export$2e2bcd8739ae039 = class _$0a8ef2660a6ce4b6$export$2e2bcd8739ae039 {
      static probe(buffer) {
        let format = (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4));
        return format === "true" || format === "OTTO" || format === String.fromCharCode(0, 1, 0, 0);
      }
      setDefaultLanguage(lang = null) {
        this.defaultLanguage = lang;
      }
      _getTable(table) {
        if (!(table.tag in this._tables)) try {
          this._tables[table.tag] = this._decodeTable(table);
        } catch (e2) {
          if ($59aa4ed98453e1d4$export$bd5c5d8b8dcafd78) {
            console.error(`Error decoding table ${table.tag}`);
            console.error(e2.stack);
          }
        }
        return this._tables[table.tag];
      }
      _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
          this.stream.pos = table.offset;
          return this.stream;
        }
        return null;
      }
      _decodeDirectory() {
        return this.directory = (0, $df50e1efe10a1247$export$2e2bcd8739ae039).decode(this.stream, {
          _startOffset: 0
        });
      }
      _decodeTable(table) {
        let pos = this.stream.pos;
        let stream = this._getTableStream(table.tag);
        let result = (0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[table.tag].decode(stream, this, table.length);
        this.stream.pos = pos;
        return result;
      }
      /**
      * Gets a string from the font's `name` table
      * `lang` is a BCP-47 language code.
      * @return {string}
      */
      getName(key, lang = this.defaultLanguage || $59aa4ed98453e1d4$export$42940898df819940) {
        let record = this.name && this.name.records[key];
        if (record)
          return record[lang] || record[this.defaultLanguage] || record[$59aa4ed98453e1d4$export$42940898df819940] || record["en"] || record[Object.keys(record)[0]] || null;
        return null;
      }
      /**
      * The unique PostScript name for this font, e.g. "Helvetica-Bold"
      * @type {string}
      */
      get postscriptName() {
        return this.getName("postscriptName");
      }
      /**
      * The font's full name, e.g. "Helvetica Bold"
      * @type {string}
      */
      get fullName() {
        return this.getName("fullName");
      }
      /**
      * The font's family name, e.g. "Helvetica"
      * @type {string}
      */
      get familyName() {
        return this.getName("fontFamily");
      }
      /**
      * The font's sub-family, e.g. "Bold".
      * @type {string}
      */
      get subfamilyName() {
        return this.getName("fontSubfamily");
      }
      /**
      * The font's copyright information
      * @type {string}
      */
      get copyright() {
        return this.getName("copyright");
      }
      /**
      * The font's version number
      * @type {string}
      */
      get version() {
        return this.getName("version");
      }
      /**
      * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
      * @type {number}
      */
      get ascent() {
        return this.hhea.ascent;
      }
      /**
      * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
      * @type {number}
      */
      get descent() {
        return this.hhea.descent;
      }
      /**
      * The amount of space that should be included between lines
      * @type {number}
      */
      get lineGap() {
        return this.hhea.lineGap;
      }
      /**
      * The offset from the normal underline position that should be used
      * @type {number}
      */
      get underlinePosition() {
        return this.post.underlinePosition;
      }
      /**
      * The weight of the underline that should be used
      * @type {number}
      */
      get underlineThickness() {
        return this.post.underlineThickness;
      }
      /**
      * If this is an italic font, the angle the cursor should be drawn at to match the font design
      * @type {number}
      */
      get italicAngle() {
        return this.post.italicAngle;
      }
      /**
      * The height of capital letters above the baseline.
      * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
      * @type {number}
      */
      get capHeight() {
        let os2 = this["OS/2"];
        return os2 ? os2.capHeight : this.ascent;
      }
      /**
      * The height of lower case letters in the font.
      * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
      * @type {number}
      */
      get xHeight() {
        let os2 = this["OS/2"];
        return os2 ? os2.xHeight : 0;
      }
      /**
      * The number of glyphs in the font.
      * @type {number}
      */
      get numGlyphs() {
        return this.maxp.numGlyphs;
      }
      /**
      * The size of the font’s internal coordinate grid
      * @type {number}
      */
      get unitsPerEm() {
        return this.head.unitsPerEm;
      }
      /**
      * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
      * @type {BBox}
      */
      get bbox() {
        return Object.freeze(new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
      }
      get _cmapProcessor() {
        return new (0, $0d6e160064c86e50$export$2e2bcd8739ae039)(this.cmap);
      }
      /**
      * An array of all of the unicode code points supported by the font.
      * @type {number[]}
      */
      get characterSet() {
        return this._cmapProcessor.getCharacterSet();
      }
      /**
      * Returns whether there is glyph in the font for the given unicode code point.
      *
      * @param {number} codePoint
      * @return {boolean}
      */
      hasGlyphForCodePoint(codePoint) {
        return !!this._cmapProcessor.lookup(codePoint);
      }
      /**
      * Maps a single unicode code point to a Glyph object.
      * Does not perform any advanced substitutions (there is no context to do so).
      *
      * @param {number} codePoint
      * @return {Glyph}
      */
      glyphForCodePoint(codePoint) {
        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [
          codePoint
        ]);
      }
      /**
      * Returns an array of Glyph objects for the given string.
      * This is only a one-to-one mapping from characters to glyphs.
      * For most uses, you should use font.layout (described below), which
      * provides a much more advanced mapping supporting AAT and OpenType shaping.
      *
      * @param {string} string
      * @return {Glyph[]}
      */
      glyphsForString(string) {
        let glyphs = [];
        let len = string.length;
        let idx = 0;
        let last = -1;
        let state = -1;
        while (idx <= len) {
          let code = 0;
          let nextState = 0;
          if (idx < len) {
            code = string.charCodeAt(idx++);
            if (55296 <= code && code <= 56319 && idx < len) {
              let next = string.charCodeAt(idx);
              if (56320 <= next && next <= 57343) {
                idx++;
                code = ((code & 1023) << 10) + (next & 1023) + 65536;
              }
            }
            nextState = 65024 <= code && code <= 65039 || 917760 <= code && code <= 917999 ? 1 : 0;
          } else idx++;
          if (state === 0 && nextState === 1)
            glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [
              last,
              code
            ]));
          else if (state === 0 && nextState === 0)
            glyphs.push(this.glyphForCodePoint(last));
          last = code;
          state = nextState;
        }
        return glyphs;
      }
      get _layoutEngine() {
        return new (0, $9d641258c9d7180d$export$2e2bcd8739ae039)(this);
      }
      /**
      * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
      *
      * @param {string} string
      * @param {string[]} [userFeatures]
      * @param {string} [script]
      * @param {string} [language]
      * @param {string} [direction]
      * @return {GlyphRun}
      */
      layout(string, userFeatures, script, language, direction) {
        return this._layoutEngine.layout(string, userFeatures, script, language, direction);
      }
      /**
      * Returns an array of strings that map to the given glyph id.
      * @param {number} gid - glyph id
      */
      stringsForGlyph(gid) {
        return this._layoutEngine.stringsForGlyph(gid);
      }
      /**
      * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
      * (or mapped AAT tags) supported by the font.
      * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
      * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
      *
      * @type {string[]}
      */
      get availableFeatures() {
        return this._layoutEngine.getAvailableFeatures();
      }
      getAvailableFeatures(script, language) {
        return this._layoutEngine.getAvailableFeatures(script, language);
      }
      _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
          if (this.directory.tables.glyf) this._glyphs[glyph] = new (0, $f680320fa07ef53d$export$2e2bcd8739ae039)(glyph, characters, this);
          else if (this.directory.tables["CFF "] || this.directory.tables.CFF2) this._glyphs[glyph] = new (0, $7ee0705195f3b047$export$2e2bcd8739ae039)(glyph, characters, this);
        }
        return this._glyphs[glyph] || null;
      }
      /**
      * Returns a glyph object for the given glyph id.
      * You can pass the array of code points this glyph represents for
      * your use later, and it will be stored in the glyph object.
      *
      * @param {number} glyph
      * @param {number[]} characters
      * @return {Glyph}
      */
      getGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
          if (this.directory.tables.sbix) this._glyphs[glyph] = new (0, $55855d6d316b015e$export$2e2bcd8739ae039)(glyph, characters, this);
          else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new (0, $42d9dbd2de9ee2d8$export$2e2bcd8739ae039)(glyph, characters, this);
          else this._getBaseGlyph(glyph, characters);
        }
        return this._glyphs[glyph] || null;
      }
      /**
      * Returns a Subset for this font.
      * @return {Subset}
      */
      createSubset() {
        if (this.directory.tables["CFF "]) return new (0, $ec40f80c07a4e08a$export$2e2bcd8739ae039)(this);
        return new (0, $fe042f4b88f46896$export$2e2bcd8739ae039)(this);
      }
      /**
      * Returns an object describing the available variation axes
      * that this font supports. Keys are setting tags, and values
      * contain the axis name, range, and default value.
      *
      * @type {object}
      */
      get variationAxes() {
        let res = {};
        if (!this.fvar) return res;
        for (let axis of this.fvar.axis) res[axis.axisTag.trim()] = {
          name: axis.name.en,
          min: axis.minValue,
          default: axis.defaultValue,
          max: axis.maxValue
        };
        return res;
      }
      /**
      * Returns an object describing the named variation instances
      * that the font designer has specified. Keys are variation names
      * and values are the variation settings for this instance.
      *
      * @type {object}
      */
      get namedVariations() {
        let res = {};
        if (!this.fvar) return res;
        for (let instance of this.fvar.instance) {
          let settings = {};
          for (let i2 = 0; i2 < this.fvar.axis.length; i2++) {
            let axis = this.fvar.axis[i2];
            settings[axis.axisTag.trim()] = instance.coord[i2];
          }
          res[instance.name.en] = settings;
        }
        return res;
      }
      /**
      * Returns a new font with the given variation settings applied.
      * Settings can either be an instance name, or an object containing
      * variation tags as specified by the `variationAxes` property.
      *
      * @param {object} settings
      * @return {TTFFont}
      */
      getVariation(settings) {
        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error("Variations require a font with the fvar, gvar and glyf, or CFF2 tables.");
        if (typeof settings === "string") settings = this.namedVariations[settings];
        if (typeof settings !== "object") throw new Error("Variation settings must be either a variation name or settings object.");
        let coords = this.fvar.axis.map((axis, i2) => {
          let axisTag = axis.axisTag.trim();
          if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
          else return axis.defaultValue;
        });
        let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer);
        stream.pos = this._directoryPos;
        let font = new _$0a8ef2660a6ce4b6$export$2e2bcd8739ae039(stream, coords);
        font._tables = this._tables;
        return font;
      }
      get _variationProcessor() {
        if (!this.fvar) return null;
        let variationCoords = this.variationCoords;
        if (!variationCoords && !this.CFF2) return null;
        if (!variationCoords) variationCoords = this.fvar.axis.map((axis) => axis.defaultValue);
        return new (0, $7586bb9ea67c41d8$export$2e2bcd8739ae039)(this, variationCoords);
      }
      // Standardized format plugin API
      getFont(name) {
        return this.getVariation(name);
      }
      constructor(stream, variationCoords = null) {
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "TTF");
        this.defaultLanguage = null;
        this.stream = stream;
        this.variationCoords = variationCoords;
        this._directoryPos = this.stream.pos;
        this._tables = {};
        this._glyphs = {};
        this._decodeDirectory();
        for (let tag in this.directory.tables) {
          let table = this.directory.tables[tag];
          if ((0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[tag] && table.length > 0) Object.defineProperty(this, tag, {
            get: this._getTable.bind(this, table)
          });
        }
      }
    };
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "bbox", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "_cmapProcessor", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "characterSet", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "_layoutEngine", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "variationAxes", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "namedVariations", null);
    (0, $elh9A$swchelperscjs_ts_decoratecjs._)([
      (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
    ], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "_variationProcessor", null);
    var $89f72d2d7c9afc0d$var$WOFFDirectoryEntry = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      offset: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, "void", {
        type: "global"
      }),
      compLength: $elh9A$restructure.uint32,
      length: $elh9A$restructure.uint32,
      origChecksum: $elh9A$restructure.uint32
    });
    var $89f72d2d7c9afc0d$var$WOFFDirectory = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      flavor: $elh9A$restructure.uint32,
      length: $elh9A$restructure.uint32,
      numTables: $elh9A$restructure.uint16,
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
      totalSfntSize: $elh9A$restructure.uint32,
      majorVersion: $elh9A$restructure.uint16,
      minorVersion: $elh9A$restructure.uint16,
      metaOffset: $elh9A$restructure.uint32,
      metaLength: $elh9A$restructure.uint32,
      metaOrigLength: $elh9A$restructure.uint32,
      privOffset: $elh9A$restructure.uint32,
      privLength: $elh9A$restructure.uint32,
      tables: new $elh9A$restructure.Array($89f72d2d7c9afc0d$var$WOFFDirectoryEntry, "numTables")
    });
    $89f72d2d7c9afc0d$var$WOFFDirectory.process = function() {
      let tables = {};
      for (let table of this.tables) tables[table.tag] = table;
      this.tables = tables;
    };
    var $89f72d2d7c9afc0d$export$2e2bcd8739ae039 = $89f72d2d7c9afc0d$var$WOFFDirectory;
    var $8a0a49baaf5d834d$export$2e2bcd8739ae039 = class extends (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039) {
      static probe(buffer) {
        return (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === "wOFF";
      }
      _decodeDirectory() {
        this.directory = (0, $89f72d2d7c9afc0d$export$2e2bcd8739ae039).decode(this.stream, {
          _startOffset: 0
        });
      }
      _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
          this.stream.pos = table.offset;
          if (table.compLength < table.length) {
            this.stream.pos += 2;
            let outBuffer = new Uint8Array(table.length);
            let buf = (0, $parcel$interopDefault($elh9A$tinyinflate))(this.stream.readBuffer(table.compLength - 2), outBuffer);
            return new $elh9A$restructure.DecodeStream(buf);
          } else return this.stream;
        }
        return null;
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "WOFF");
      }
    };
    var $44b9edca0e403d6d$export$2e2bcd8739ae039 = class extends (0, $f680320fa07ef53d$export$2e2bcd8739ae039) {
      _decode() {
        return this._font._transformedGlyphs[this.id];
      }
      _getCBox() {
        return this.path.bbox;
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "WOFF2");
      }
    };
    var $2f0bfd9a5c1d7b58$var$Base128 = {
      decode(stream) {
        let result = 0;
        let iterable = [
          0,
          1,
          2,
          3,
          4
        ];
        for (let j = 0; j < iterable.length; j++) {
          let i2 = iterable[j];
          let code = stream.readUInt8();
          if (result & 3758096384) throw new Error("Overflow");
          result = result << 7 | code & 127;
          if ((code & 128) === 0) return result;
        }
        throw new Error("Bad base 128 number");
      }
    };
    var $2f0bfd9a5c1d7b58$var$knownTags = [
      "cmap",
      "head",
      "hhea",
      "hmtx",
      "maxp",
      "name",
      "OS/2",
      "post",
      "cvt ",
      "fpgm",
      "glyf",
      "loca",
      "prep",
      "CFF ",
      "VORG",
      "EBDT",
      "EBLC",
      "gasp",
      "hdmx",
      "kern",
      "LTSH",
      "PCLT",
      "VDMX",
      "vhea",
      "vmtx",
      "BASE",
      "GDEF",
      "GPOS",
      "GSUB",
      "EBSC",
      "JSTF",
      "MATH",
      "CBDT",
      "CBLC",
      "COLR",
      "CPAL",
      "SVG ",
      "sbix",
      "acnt",
      "avar",
      "bdat",
      "bloc",
      "bsln",
      "cvar",
      "fdsc",
      "feat",
      "fmtx",
      "fvar",
      "gvar",
      "hsty",
      "just",
      "lcar",
      "mort",
      "morx",
      "opbd",
      "prop",
      "trak",
      "Zapf",
      "Silf",
      "Glat",
      "Gloc",
      "Feat",
      "Sill"
    ];
    var $2f0bfd9a5c1d7b58$var$WOFF2DirectoryEntry = new $elh9A$restructure.Struct({
      flags: $elh9A$restructure.uint8,
      customTag: new $elh9A$restructure.Optional(new $elh9A$restructure.String(4), (t2) => (t2.flags & 63) === 63),
      tag: (t2) => t2.customTag || $2f0bfd9a5c1d7b58$var$knownTags[t2.flags & 63],
      length: $2f0bfd9a5c1d7b58$var$Base128,
      transformVersion: (t2) => t2.flags >>> 6 & 3,
      transformed: (t2) => t2.tag === "glyf" || t2.tag === "loca" ? t2.transformVersion === 0 : t2.transformVersion !== 0,
      transformLength: new $elh9A$restructure.Optional($2f0bfd9a5c1d7b58$var$Base128, (t2) => t2.transformed)
    });
    var $2f0bfd9a5c1d7b58$var$WOFF2Directory = new $elh9A$restructure.Struct({
      tag: new $elh9A$restructure.String(4),
      flavor: $elh9A$restructure.uint32,
      length: $elh9A$restructure.uint32,
      numTables: $elh9A$restructure.uint16,
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
      totalSfntSize: $elh9A$restructure.uint32,
      totalCompressedSize: $elh9A$restructure.uint32,
      majorVersion: $elh9A$restructure.uint16,
      minorVersion: $elh9A$restructure.uint16,
      metaOffset: $elh9A$restructure.uint32,
      metaLength: $elh9A$restructure.uint32,
      metaOrigLength: $elh9A$restructure.uint32,
      privOffset: $elh9A$restructure.uint32,
      privLength: $elh9A$restructure.uint32,
      tables: new $elh9A$restructure.Array($2f0bfd9a5c1d7b58$var$WOFF2DirectoryEntry, "numTables")
    });
    $2f0bfd9a5c1d7b58$var$WOFF2Directory.process = function() {
      let tables = {};
      for (let i2 = 0; i2 < this.tables.length; i2++) {
        let table = this.tables[i2];
        tables[table.tag] = table;
      }
      return this.tables = tables;
    };
    var $2f0bfd9a5c1d7b58$export$2e2bcd8739ae039 = $2f0bfd9a5c1d7b58$var$WOFF2Directory;
    var $333fb94547d9fb5c$export$2e2bcd8739ae039 = class extends (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039) {
      static probe(buffer) {
        return (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === "wOF2";
      }
      _decodeDirectory() {
        this.directory = (0, $2f0bfd9a5c1d7b58$export$2e2bcd8739ae039).decode(this.stream);
        this._dataPos = this.stream.pos;
      }
      _decompress() {
        if (!this._decompressed) {
          this.stream.pos = this._dataPos;
          let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
          let decompressedSize = 0;
          for (let tag in this.directory.tables) {
            let entry = this.directory.tables[tag];
            entry.offset = decompressedSize;
            decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
          }
          let decompressed = (0, $parcel$interopDefault($elh9A$brotlidecompressjs))(buffer, decompressedSize);
          if (!decompressed) throw new Error("Error decoding compressed data in WOFF2");
          this.stream = new $elh9A$restructure.DecodeStream(decompressed);
          this._decompressed = true;
        }
      }
      _decodeTable(table) {
        this._decompress();
        return super._decodeTable(table);
      }
      // Override this method to get a glyph and return our
      // custom subclass if there is a glyf table.
      _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
          if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
            if (!this._transformedGlyphs) this._transformGlyfTable();
            return this._glyphs[glyph] = new (0, $44b9edca0e403d6d$export$2e2bcd8739ae039)(glyph, characters, this);
          } else return super._getBaseGlyph(glyph, characters);
        }
      }
      _transformGlyfTable() {
        this._decompress();
        this.stream.pos = this.directory.tables.glyf.offset;
        let table = $333fb94547d9fb5c$var$GlyfTable.decode(this.stream);
        let glyphs = [];
        for (let index = 0; index < table.numGlyphs; index++) {
          let glyph = {};
          let nContours = table.nContours.readInt16BE();
          glyph.numberOfContours = nContours;
          if (nContours > 0) {
            let nPoints = [];
            let totalPoints = 0;
            for (let i2 = 0; i2 < nContours; i2++) {
              let r2 = $333fb94547d9fb5c$var$read255UInt16(table.nPoints);
              totalPoints += r2;
              nPoints.push(totalPoints);
            }
            glyph.points = $333fb94547d9fb5c$var$decodeTriplet(table.flags, table.glyphs, totalPoints);
            for (let i2 = 0; i2 < nContours; i2++) glyph.points[nPoints[i2] - 1].endContour = true;
            var instructionSize = $333fb94547d9fb5c$var$read255UInt16(table.glyphs);
          } else if (nContours < 0) {
            let haveInstructions = (0, $f680320fa07ef53d$export$2e2bcd8739ae039).prototype._decodeComposite.call({
              _font: this
            }, glyph, table.composites);
            if (haveInstructions) var instructionSize = $333fb94547d9fb5c$var$read255UInt16(table.glyphs);
          }
          glyphs.push(glyph);
        }
        this._transformedGlyphs = glyphs;
      }
      constructor(...args) {
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "WOFF2");
      }
    };
    var $333fb94547d9fb5c$var$Substream = class {
      decode(stream, parent) {
        return new $elh9A$restructure.DecodeStream(this._buf.decode(stream, parent));
      }
      constructor(length) {
        this.length = length;
        this._buf = new $elh9A$restructure.Buffer(length);
      }
    };
    var $333fb94547d9fb5c$var$GlyfTable = new $elh9A$restructure.Struct({
      version: $elh9A$restructure.uint32,
      numGlyphs: $elh9A$restructure.uint16,
      indexFormat: $elh9A$restructure.uint16,
      nContourStreamSize: $elh9A$restructure.uint32,
      nPointsStreamSize: $elh9A$restructure.uint32,
      flagStreamSize: $elh9A$restructure.uint32,
      glyphStreamSize: $elh9A$restructure.uint32,
      compositeStreamSize: $elh9A$restructure.uint32,
      bboxStreamSize: $elh9A$restructure.uint32,
      instructionStreamSize: $elh9A$restructure.uint32,
      nContours: new $333fb94547d9fb5c$var$Substream("nContourStreamSize"),
      nPoints: new $333fb94547d9fb5c$var$Substream("nPointsStreamSize"),
      flags: new $333fb94547d9fb5c$var$Substream("flagStreamSize"),
      glyphs: new $333fb94547d9fb5c$var$Substream("glyphStreamSize"),
      composites: new $333fb94547d9fb5c$var$Substream("compositeStreamSize"),
      bboxes: new $333fb94547d9fb5c$var$Substream("bboxStreamSize"),
      instructions: new $333fb94547d9fb5c$var$Substream("instructionStreamSize")
    });
    var $333fb94547d9fb5c$var$WORD_CODE = 253;
    var $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE2 = 254;
    var $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE1 = 255;
    var $333fb94547d9fb5c$var$LOWEST_U_CODE = 253;
    function $333fb94547d9fb5c$var$read255UInt16(stream) {
      let code = stream.readUInt8();
      if (code === $333fb94547d9fb5c$var$WORD_CODE) return stream.readUInt16BE();
      if (code === $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $333fb94547d9fb5c$var$LOWEST_U_CODE;
      if (code === $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $333fb94547d9fb5c$var$LOWEST_U_CODE * 2;
      return code;
    }
    function $333fb94547d9fb5c$var$withSign(flag, baseval) {
      return flag & 1 ? baseval : -baseval;
    }
    function $333fb94547d9fb5c$var$decodeTriplet(flags, glyphs, nPoints) {
      let y;
      let x2 = y = 0;
      let res = [];
      for (let i2 = 0; i2 < nPoints; i2++) {
        let dx = 0, dy = 0;
        let flag = flags.readUInt8();
        let onCurve = !(flag >> 7);
        flag &= 127;
        if (flag < 10) {
          dx = 0;
          dy = $333fb94547d9fb5c$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
        } else if (flag < 20) {
          dx = $333fb94547d9fb5c$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
          dy = 0;
        } else if (flag < 84) {
          var b0 = flag - 20;
          var b1 = glyphs.readUInt8();
          dx = $333fb94547d9fb5c$var$withSign(flag, 1 + (b0 & 48) + (b1 >> 4));
          dy = $333fb94547d9fb5c$var$withSign(flag >> 1, 1 + ((b0 & 12) << 2) + (b1 & 15));
        } else if (flag < 120) {
          var b0 = flag - 84;
          dx = $333fb94547d9fb5c$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
          dy = $333fb94547d9fb5c$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
        } else if (flag < 124) {
          var b1 = glyphs.readUInt8();
          let b2 = glyphs.readUInt8();
          dx = $333fb94547d9fb5c$var$withSign(flag, (b1 << 4) + (b2 >> 4));
          dy = $333fb94547d9fb5c$var$withSign(flag >> 1, ((b2 & 15) << 8) + glyphs.readUInt8());
        } else {
          dx = $333fb94547d9fb5c$var$withSign(flag, glyphs.readUInt16BE());
          dy = $333fb94547d9fb5c$var$withSign(flag >> 1, glyphs.readUInt16BE());
        }
        x2 += dx;
        y += dy;
        res.push(new (0, $f680320fa07ef53d$export$baf26146a414f24a)(onCurve, false, x2, y));
      }
      return res;
    }
    var $e0b2de9958441c02$var$TTCHeader = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
      65536: {
        numFonts: $elh9A$restructure.uint32,
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint32, "numFonts")
      },
      131072: {
        numFonts: $elh9A$restructure.uint32,
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint32, "numFonts"),
        dsigTag: $elh9A$restructure.uint32,
        dsigLength: $elh9A$restructure.uint32,
        dsigOffset: $elh9A$restructure.uint32
      }
    });
    var $e0b2de9958441c02$export$2e2bcd8739ae039 = class {
      static probe(buffer) {
        return (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === "ttcf";
      }
      getFont(name) {
        for (let offset of this.header.offsets) {
          let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer);
          stream.pos = offset;
          let font = new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream);
          if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i2) => name[i2] === v)) return font;
        }
        return null;
      }
      get fonts() {
        let fonts = [];
        for (let offset of this.header.offsets) {
          let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer);
          stream.pos = offset;
          fonts.push(new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream));
        }
        return fonts;
      }
      constructor(stream) {
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "TTC");
        this.stream = stream;
        if (stream.readString(4) !== "ttcf") throw new Error("Not a TrueType collection");
        this.header = $e0b2de9958441c02$var$TTCHeader.decode(stream);
      }
    };
    var $d0fe640dc6c78783$var$DFontName = new $elh9A$restructure.String($elh9A$restructure.uint8);
    var $d0fe640dc6c78783$var$DFontData = new $elh9A$restructure.Struct({
      len: $elh9A$restructure.uint32,
      buf: new $elh9A$restructure.Buffer("len")
    });
    var $d0fe640dc6c78783$var$Ref = new $elh9A$restructure.Struct({
      id: $elh9A$restructure.uint16,
      nameOffset: $elh9A$restructure.int16,
      attr: $elh9A$restructure.uint8,
      dataOffset: $elh9A$restructure.uint24,
      handle: $elh9A$restructure.uint32
    });
    var $d0fe640dc6c78783$var$Type = new $elh9A$restructure.Struct({
      name: new $elh9A$restructure.String(4),
      maxTypeIndex: $elh9A$restructure.uint16,
      refList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.Array($d0fe640dc6c78783$var$Ref, (t2) => t2.maxTypeIndex + 1), {
        type: "parent"
      })
    });
    var $d0fe640dc6c78783$var$TypeList = new $elh9A$restructure.Struct({
      length: $elh9A$restructure.uint16,
      types: new $elh9A$restructure.Array($d0fe640dc6c78783$var$Type, (t2) => t2.length + 1)
    });
    var $d0fe640dc6c78783$var$DFontMap = new $elh9A$restructure.Struct({
      reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, 24),
      typeList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $d0fe640dc6c78783$var$TypeList),
      nameListOffset: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, "void")
    });
    var $d0fe640dc6c78783$var$DFontHeader = new $elh9A$restructure.Struct({
      dataOffset: $elh9A$restructure.uint32,
      map: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $d0fe640dc6c78783$var$DFontMap),
      dataLength: $elh9A$restructure.uint32,
      mapLength: $elh9A$restructure.uint32
    });
    var $d0fe640dc6c78783$export$2e2bcd8739ae039 = class {
      static probe(buffer) {
        let stream = new $elh9A$restructure.DecodeStream(buffer);
        try {
          var header = $d0fe640dc6c78783$var$DFontHeader.decode(stream);
        } catch (e2) {
          return false;
        }
        for (let type of header.map.typeList.types) {
          if (type.name === "sfnt") return true;
        }
        return false;
      }
      getFont(name) {
        if (!this.sfnt) return null;
        for (let ref of this.sfnt.refList) {
          let pos = this.header.dataOffset + ref.dataOffset + 4;
          let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer.slice(pos));
          let font = new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream);
          if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i2) => name[i2] === v)) return font;
        }
        return null;
      }
      get fonts() {
        let fonts = [];
        for (let ref of this.sfnt.refList) {
          let pos = this.header.dataOffset + ref.dataOffset + 4;
          let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer.slice(pos));
          fonts.push(new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream));
        }
        return fonts;
      }
      constructor(stream) {
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "DFont");
        this.stream = stream;
        this.header = $d0fe640dc6c78783$var$DFontHeader.decode(this.stream);
        for (let type of this.header.map.typeList.types) {
          for (let ref of type.refList) if (ref.nameOffset >= 0) {
            this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
            ref.name = $d0fe640dc6c78783$var$DFontName.decode(this.stream);
          } else ref.name = null;
          if (type.name === "sfnt") this.sfnt = type;
        }
      }
    };
    (0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039));
    (0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $8a0a49baaf5d834d$export$2e2bcd8739ae039));
    (0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $333fb94547d9fb5c$export$2e2bcd8739ae039));
    (0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $e0b2de9958441c02$export$2e2bcd8739ae039));
    (0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $d0fe640dc6c78783$export$2e2bcd8739ae039));
    $parcel$exportWildcard(module2.exports, $59aa4ed98453e1d4$exports);
    $parcel$exportWildcard(module2.exports, $f39726ff40304956$exports);
  }
});

// ../backend/node_modules/linebreak/node_modules/base64-js/lib/b64.js
var require_b64 = __commonJS({
  "../backend/node_modules/linebreak/node_modules/base64-js/lib/b64.js"(exports2) {
    var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    (function(exports3) {
      "use strict";
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var PLUS = "+".charCodeAt(0);
      var SLASH = "/".charCodeAt(0);
      var NUMBER = "0".charCodeAt(0);
      var LOWER = "a".charCodeAt(0);
      var UPPER = "A".charCodeAt(0);
      var PLUS_URL_SAFE = "-".charCodeAt(0);
      var SLASH_URL_SAFE = "_".charCodeAt(0);
      function decode(elt) {
        var code = elt.charCodeAt(0);
        if (code === PLUS || code === PLUS_URL_SAFE)
          return 62;
        if (code === SLASH || code === SLASH_URL_SAFE)
          return 63;
        if (code < NUMBER)
          return -1;
        if (code < NUMBER + 10)
          return code - NUMBER + 26 + 26;
        if (code < UPPER + 26)
          return code - UPPER;
        if (code < LOWER + 26)
          return code - LOWER + 26;
      }
      function b64ToByteArray(b64) {
        var i2, j, l, tmp, placeHolders, arr;
        if (b64.length % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var len = b64.length;
        placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;
        arr = new Arr(b64.length * 3 / 4 - placeHolders);
        l = placeHolders > 0 ? b64.length - 4 : b64.length;
        var L = 0;
        function push(v) {
          arr[L++] = v;
        }
        for (i2 = 0, j = 0; i2 < l; i2 += 4, j += 3) {
          tmp = decode(b64.charAt(i2)) << 18 | decode(b64.charAt(i2 + 1)) << 12 | decode(b64.charAt(i2 + 2)) << 6 | decode(b64.charAt(i2 + 3));
          push((tmp & 16711680) >> 16);
          push((tmp & 65280) >> 8);
          push(tmp & 255);
        }
        if (placeHolders === 2) {
          tmp = decode(b64.charAt(i2)) << 2 | decode(b64.charAt(i2 + 1)) >> 4;
          push(tmp & 255);
        } else if (placeHolders === 1) {
          tmp = decode(b64.charAt(i2)) << 10 | decode(b64.charAt(i2 + 1)) << 4 | decode(b64.charAt(i2 + 2)) >> 2;
          push(tmp >> 8 & 255);
          push(tmp & 255);
        }
        return arr;
      }
      function uint8ToBase64(uint8) {
        var i2, extraBytes = uint8.length % 3, output = "", temp, length;
        function encode(num) {
          return lookup.charAt(num);
        }
        function tripletToBase64(num) {
          return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
        }
        for (i2 = 0, length = uint8.length - extraBytes; i2 < length; i2 += 3) {
          temp = (uint8[i2] << 16) + (uint8[i2 + 1] << 8) + uint8[i2 + 2];
          output += tripletToBase64(temp);
        }
        switch (extraBytes) {
          case 1:
            temp = uint8[uint8.length - 1];
            output += encode(temp >> 2);
            output += encode(temp << 4 & 63);
            output += "==";
            break;
          case 2:
            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
            output += encode(temp >> 10);
            output += encode(temp >> 4 & 63);
            output += encode(temp << 2 & 63);
            output += "=";
            break;
        }
        return output;
      }
      exports3.toByteArray = b64ToByteArray;
      exports3.fromByteArray = uint8ToBase64;
    })(typeof exports2 === "undefined" ? exports2.base64js = {} : exports2);
  }
});

// ../backend/node_modules/linebreak/dist/main.cjs
var require_main4 = __commonJS({
  "../backend/node_modules/linebreak/dist/main.cjs"(exports2, module2) {
    var $kQ2hT$unicodetrie = require_unicode_trie();
    var $kQ2hT$base64js = require_b64();
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    var $60ff486a304db230$export$fb4028874a74450 = 5;
    var $60ff486a304db230$export$1bb1140fe1358b00 = 12;
    var $60ff486a304db230$export$f3e416a182673355 = 13;
    var $60ff486a304db230$export$24aa617c849a894a = 16;
    var $60ff486a304db230$export$a73c4d14459b698d = 17;
    var $60ff486a304db230$export$9e5d732f3676a9ba = 22;
    var $60ff486a304db230$export$1dff41d5c0caca01 = 28;
    var $60ff486a304db230$export$30a74a373318dec6 = 31;
    var $60ff486a304db230$export$d710c5f50fc7496a = 33;
    var $60ff486a304db230$export$66498d28055820a9 = 34;
    var $60ff486a304db230$export$eb6c6d0b7c8826f2 = 35;
    var $60ff486a304db230$export$de92be486109a1df = 36;
    var $60ff486a304db230$export$606cfc2a8896c91f = 37;
    var $60ff486a304db230$export$e51d3c675bb0140d = 38;
    var $60ff486a304db230$export$da51c6332ad11d7b = 39;
    var $60ff486a304db230$export$bea437c40441867d = 40;
    var $60ff486a304db230$export$c4c7eecbfed13dc9 = 41;
    var $60ff486a304db230$export$98e1f8a379849661 = 42;
    var $1b6fba3281342923$export$98f50d781a474745 = 0;
    var $1b6fba3281342923$export$12ee1f8f5315ca7e = 1;
    var $1b6fba3281342923$export$e4965ce242860454 = 2;
    var $1b6fba3281342923$export$8f14048969dcd45e = 3;
    var $1b6fba3281342923$export$133eb141bf58aff4 = 4;
    var $1b6fba3281342923$export$5bdb8ccbf5c57afc = [
      //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB
      [
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$8f14048969dcd45e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ]
      // CB
    ];
    var $f898ea50f3b38ab8$var$data = $parcel$interopDefault($kQ2hT$base64js).toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/");
    var $f898ea50f3b38ab8$var$classTrie = new ($parcel$interopDefault($kQ2hT$unicodetrie))($f898ea50f3b38ab8$var$data);
    var $f898ea50f3b38ab8$var$mapClass = function(c) {
      switch (c) {
        case $60ff486a304db230$export$d710c5f50fc7496a:
          return $60ff486a304db230$export$1bb1140fe1358b00;
        case $60ff486a304db230$export$da51c6332ad11d7b:
        case $60ff486a304db230$export$bea437c40441867d:
        case $60ff486a304db230$export$98e1f8a379849661:
          return $60ff486a304db230$export$1bb1140fe1358b00;
        case $60ff486a304db230$export$eb6c6d0b7c8826f2:
          return $60ff486a304db230$export$fb4028874a74450;
        default:
          return c;
      }
    };
    var $f898ea50f3b38ab8$var$mapFirst = function(c) {
      switch (c) {
        case $60ff486a304db230$export$606cfc2a8896c91f:
        case $60ff486a304db230$export$e51d3c675bb0140d:
          return $60ff486a304db230$export$66498d28055820a9;
        case $60ff486a304db230$export$c4c7eecbfed13dc9:
          return $60ff486a304db230$export$9e5d732f3676a9ba;
        default:
          return c;
      }
    };
    var $f898ea50f3b38ab8$var$Break = class {
      constructor(position, required = false) {
        this.position = position;
        this.required = required;
      }
    };
    var $f898ea50f3b38ab8$var$LineBreaker = class {
      nextCodePoint() {
        const code = this.string.charCodeAt(this.pos++);
        const next = this.string.charCodeAt(this.pos);
        if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {
          this.pos++;
          return (code - 55296) * 1024 + (next - 56320) + 65536;
        }
        return code;
      }
      nextCharClass() {
        return $f898ea50f3b38ab8$var$mapClass($f898ea50f3b38ab8$var$classTrie.get(this.nextCodePoint()));
      }
      getSimpleBreak() {
        switch (this.nextClass) {
          case $60ff486a304db230$export$c4c7eecbfed13dc9:
            return false;
          case $60ff486a304db230$export$66498d28055820a9:
          case $60ff486a304db230$export$606cfc2a8896c91f:
          case $60ff486a304db230$export$e51d3c675bb0140d:
            this.curClass = $60ff486a304db230$export$66498d28055820a9;
            return false;
          case $60ff486a304db230$export$de92be486109a1df:
            this.curClass = $60ff486a304db230$export$de92be486109a1df;
            return false;
        }
        return null;
      }
      getPairTableBreak(lastClass) {
        let shouldBreak = false;
        switch ($1b6fba3281342923$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]) {
          case $1b6fba3281342923$export$98f50d781a474745:
            shouldBreak = true;
            break;
          case $1b6fba3281342923$export$12ee1f8f5315ca7e:
            shouldBreak = lastClass === $60ff486a304db230$export$c4c7eecbfed13dc9;
            break;
          case $1b6fba3281342923$export$e4965ce242860454:
            shouldBreak = lastClass === $60ff486a304db230$export$c4c7eecbfed13dc9;
            if (!shouldBreak) {
              shouldBreak = false;
              return shouldBreak;
            }
            break;
          case $1b6fba3281342923$export$8f14048969dcd45e:
            if (lastClass !== $60ff486a304db230$export$c4c7eecbfed13dc9) return shouldBreak;
            break;
          case $1b6fba3281342923$export$133eb141bf58aff4:
            break;
        }
        if (this.LB8a) shouldBreak = false;
        if (this.LB21a && (this.curClass === $60ff486a304db230$export$24aa617c849a894a || this.curClass === $60ff486a304db230$export$a73c4d14459b698d)) {
          shouldBreak = false;
          this.LB21a = false;
        } else this.LB21a = this.curClass === $60ff486a304db230$export$f3e416a182673355;
        if (this.curClass === $60ff486a304db230$export$1dff41d5c0caca01) {
          this.LB30a++;
          if (this.LB30a == 2 && this.nextClass === $60ff486a304db230$export$1dff41d5c0caca01) {
            shouldBreak = true;
            this.LB30a = 0;
          }
        } else this.LB30a = 0;
        this.curClass = this.nextClass;
        return shouldBreak;
      }
      nextBreak() {
        if (this.curClass == null) {
          let firstClass = this.nextCharClass();
          this.curClass = $f898ea50f3b38ab8$var$mapFirst(firstClass);
          this.nextClass = firstClass;
          this.LB8a = firstClass === $60ff486a304db230$export$30a74a373318dec6;
          this.LB30a = 0;
        }
        while (this.pos < this.string.length) {
          this.lastPos = this.pos;
          const lastClass = this.nextClass;
          this.nextClass = this.nextCharClass();
          if (this.curClass === $60ff486a304db230$export$66498d28055820a9 || this.curClass === $60ff486a304db230$export$de92be486109a1df && this.nextClass !== $60ff486a304db230$export$606cfc2a8896c91f) {
            this.curClass = $f898ea50f3b38ab8$var$mapFirst($f898ea50f3b38ab8$var$mapClass(this.nextClass));
            return new $f898ea50f3b38ab8$var$Break(this.lastPos, true);
          }
          let shouldBreak = this.getSimpleBreak();
          if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);
          this.LB8a = this.nextClass === $60ff486a304db230$export$30a74a373318dec6;
          if (shouldBreak) return new $f898ea50f3b38ab8$var$Break(this.lastPos);
        }
        if (this.lastPos < this.string.length) {
          this.lastPos = this.string.length;
          return new $f898ea50f3b38ab8$var$Break(this.string.length);
        }
        return null;
      }
      constructor(string) {
        this.string = string;
        this.pos = 0;
        this.lastPos = 0;
        this.curClass = null;
        this.nextClass = null;
        this.LB8a = false;
        this.LB21a = false;
        this.LB30a = 0;
      }
    };
    module2.exports = $f898ea50f3b38ab8$var$LineBreaker;
  }
});

// ../backend/node_modules/jpeg-exif/lib/tags.json
var require_tags = __commonJS({
  "../backend/node_modules/jpeg-exif/lib/tags.json"(exports2, module2) {
    module2.exports = {
      ifd: {
        "010e": "ImageDescription",
        "010f": "Make",
        "011a": "XResolution",
        "011b": "YResolution",
        "011c": "PlanarConfiguration",
        "012d": "TransferFunction",
        "013b": "Artist",
        "013e": "WhitePoint",
        "013f": "PrimaryChromaticities",
        "0100": "ImageWidth",
        "0101": "ImageHeight",
        "0102": "BitsPerSample",
        "0103": "Compression",
        "0106": "PhotometricInterpretation",
        "0110": "Model",
        "0111": "StripOffsets",
        "0112": "Orientation",
        "0115": "SamplesPerPixel",
        "0116": "RowsPerStrip",
        "0117": "StripByteCounts",
        "0128": "ResolutionUnit",
        "0131": "Software",
        "0132": "DateTime",
        "0201": "JPEGInterchangeFormat",
        "0202": "JPEGInterchangeFormatLength",
        "0211": "YCbCrCoefficients",
        "0212": "YCbCrSubSampling",
        "0213": "YCbCrPositioning",
        "0214": "ReferenceBlackWhite",
        "829a": "ExposureTime",
        "829d": "FNumber",
        "920a": "FocalLength",
        "927c": "MakerNote",
        "8298": "Copyright",
        "8769": "ExifIFDPointer",
        "8822": "ExposureProgram",
        "8824": "SpectralSensitivity",
        "8825": "GPSInfoIFDPointer",
        "8827": "PhotographicSensitivity",
        "8828": "OECF",
        "8830": "SensitivityType",
        "8831": "StandardOutputSensitivity",
        "8832": "RecommendedExposureIndex",
        "8833": "ISOSpeed",
        "8834": "ISOSpeedLatitudeyyy",
        "8835": "ISOSpeedLatitudezzz",
        "9000": "ExifVersion",
        "9003": "DateTimeOriginal",
        "9004": "DateTimeDigitized",
        "9101": "ComponentsConfiguration",
        "9102": "CompressedBitsPerPixel",
        "9201": "ShutterSpeedValue",
        "9202": "ApertureValue",
        "9203": "BrightnessValue",
        "9204": "ExposureBiasValue",
        "9205": "MaxApertureValue",
        "9206": "SubjectDistance",
        "9207": "MeteringMode",
        "9208": "LightSource",
        "9209": "Flash",
        "9214": "SubjectArea",
        "9286": "UserComment",
        "9290": "SubSecTime",
        "9291": "SubSecTimeOriginal",
        "9292": "SubSecTimeDigitized",
        a000: "FlashpixVersion",
        a001: "ColorSpace",
        a002: "PixelXDimension",
        a003: "PixelYDimension",
        a004: "RelatedSoundFile",
        a005: "InteroperabilityIFDPointer",
        a20b: "FlashEnergy",
        a20c: "SpatialFrequencyResponse",
        a20e: "FocalPlaneXResolution",
        a20f: "FocalPlaneYResolution",
        a40a: "Sharpness",
        a40b: "DeviceSettingDescription",
        a40c: "SubjectDistanceRange",
        a210: "FocalPlaneResolutionUnit",
        a214: "SubjectLocation",
        a215: "ExposureIndex",
        a217: "SensingMethod",
        a300: "FileSource",
        a301: "SceneType",
        a302: "CFAPattern",
        a401: "CustomRendered",
        a402: "ExposureMode",
        a403: "WhiteBalance",
        a404: "DigitalZoomRatio",
        a405: "FocalLengthIn35mmFilm",
        a406: "SceneCaptureType",
        a407: "GainControl",
        a408: "Contrast",
        a409: "Saturation",
        a420: "ImageUniqueID",
        a430: "CameraOwnerName",
        a431: "BodySerialNumber",
        a432: "LensSpecification",
        a433: "LensMake",
        a434: "LensModel",
        a435: "LensSerialNumber",
        a500: "Gamma"
      },
      gps: {
        "0000": "GPSVersionID",
        "0001": "GPSLatitudeRef",
        "0002": "GPSLatitude",
        "0003": "GPSLongitudeRef",
        "0004": "GPSLongitude",
        "0005": "GPSAltitudeRef",
        "0006": "GPSAltitude",
        "0007": "GPSTimeStamp",
        "0008": "GPSSatellites",
        "0009": "GPSStatus",
        "000a": "GPSMeasureMode",
        "000b": "GPSDOP",
        "000c": "GPSSpeedRef",
        "000d": "GPSSpeed",
        "000e": "GPSTrackRef",
        "000f": "GPSTrack",
        "0010": "GPSImgDirectionRef",
        "0011": "GPSImgDirection",
        "0012": "GPSMapDatum",
        "0013": "GPSDestLatitudeRef",
        "0014": "GPSDestLatitude",
        "0015": "GPSDestLongitudeRef",
        "0016": "GPSDestLongitude",
        "0017": "GPSDestBearingRef",
        "0018": "GPSDestBearing",
        "0019": "GPSDestDistanceRef",
        "001a": "GPSDestDistance",
        "001b": "GPSProcessingMethod",
        "001c": "GPSAreaInformation",
        "001d": "GPSDateStamp",
        "001e": "GPSDifferential",
        "001f": "GPSHPositioningError"
      }
    };
  }
});

// ../backend/node_modules/jpeg-exif/lib/index.js
var require_lib = __commonJS({
  "../backend/node_modules/jpeg-exif/lib/index.js"(exports2) {
    "use strict";
    var _fs = require("fs");
    var _fs2 = _interopRequireDefault(_fs);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var tags = require_tags();
    var bytes = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];
    var SOIMarkerLength = 2;
    var JPEGSOIMarker = 65496;
    var TIFFINTEL = 18761;
    var TIFFMOTOROLA = 19789;
    var APPMarkerLength = 2;
    var APPMarkerBegin = 65504;
    var APPMarkerEnd = 65519;
    var data = void 0;
    var isValid = function isValid2(buffer) {
      try {
        var SOIMarker = buffer.readUInt16BE(0);
        return SOIMarker === JPEGSOIMarker;
      } catch (e2) {
        throw new Error("Unsupport file format.");
      }
    };
    var isTiff = function isTiff2(buffer) {
      try {
        var SOIMarker = buffer.readUInt16BE(0);
        return SOIMarker === TIFFINTEL || SOIMarker === TIFFMOTOROLA;
      } catch (e2) {
        throw new Error("Unsupport file format.");
      }
    };
    var checkAPPn = function checkAPPn2(buffer) {
      try {
        var APPMarkerTag = buffer.readUInt16BE(0);
        var isInRange = APPMarkerTag >= APPMarkerBegin && APPMarkerTag <= APPMarkerEnd;
        return isInRange ? APPMarkerTag - APPMarkerBegin : false;
      } catch (e2) {
        throw new Error("Invalid APP Tag.");
      }
    };
    var IFDHandler = function IFDHandler2(buffer, tagCollection, order, offset) {
      var entriesNumber = order ? buffer.readUInt16BE(0) : buffer.readUInt16LE(0);
      if (entriesNumber === 0) {
        return {};
      }
      var entriesNumberLength = 2;
      var entries = buffer.slice(entriesNumberLength);
      var entryLength = 12;
      var exif = {};
      var entryCount = 0;
      for (entryCount; entryCount < entriesNumber; entryCount += 1) {
        var entryBegin = entryCount * entryLength;
        var entry = entries.slice(entryBegin, entryBegin + entryLength);
        var tagBegin = 0;
        var tagLength = 2;
        var dataFormatBegin = tagBegin + tagLength;
        var dataFormatLength = 2;
        var componentsBegin = dataFormatBegin + dataFormatLength;
        var componentsNumberLength = 4;
        var dataValueBegin = componentsBegin + componentsNumberLength;
        var dataValueLength = 4;
        var tagAddress = entry.slice(tagBegin, dataFormatBegin);
        var tagNumber = order ? tagAddress.toString("hex") : tagAddress.reverse().toString("hex");
        var tagName = tagCollection[tagNumber];
        var bigDataFormat = entry.readUInt16BE(dataFormatBegin);
        var littleDataFormat = entry.readUInt16LE(dataFormatBegin);
        var dataFormat = order ? bigDataFormat : littleDataFormat;
        var componentsByte = bytes[dataFormat];
        var bigComponentsNumber = entry.readUInt32BE(componentsBegin);
        var littleComponentNumber = entry.readUInt32LE(componentsBegin);
        var componentsNumber = order ? bigComponentsNumber : littleComponentNumber;
        var dataLength = componentsNumber * componentsByte;
        var dataValue = entry.slice(dataValueBegin, dataValueBegin + dataValueLength);
        if (dataLength > 4) {
          var dataOffset = (order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0)) - offset;
          dataValue = buffer.slice(dataOffset, dataOffset + dataLength);
        }
        var tagValue = void 0;
        if (tagName) {
          switch (dataFormat) {
            case 1:
              tagValue = dataValue.readUInt8(0);
              break;
            case 2:
              tagValue = dataValue.toString("ascii").replace(/\0+$/, "");
              break;
            case 3:
              tagValue = order ? dataValue.readUInt16BE(0) : dataValue.readUInt16LE(0);
              break;
            case 4:
              tagValue = order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0);
              break;
            case 5:
              tagValue = [];
              for (var i2 = 0; i2 < dataValue.length; i2 += 8) {
                var bigTagValue = dataValue.readUInt32BE(i2) / dataValue.readUInt32BE(i2 + 4);
                var littleTagValue = dataValue.readUInt32LE(i2) / dataValue.readUInt32LE(i2 + 4);
                tagValue.push(order ? bigTagValue : littleTagValue);
              }
              break;
            case 7:
              switch (tagName) {
                case "ExifVersion":
                  tagValue = dataValue.toString();
                  break;
                case "FlashPixVersion":
                  tagValue = dataValue.toString();
                  break;
                case "SceneType":
                  tagValue = dataValue.readUInt8(0);
                  break;
                default:
                  tagValue = "0x" + dataValue.toString("hex", 0, 15);
                  break;
              }
              break;
            case 10: {
              var bigOrder = dataValue.readInt32BE(0) / dataValue.readInt32BE(4);
              var littleOrder = dataValue.readInt32LE(0) / dataValue.readInt32LE(4);
              tagValue = order ? bigOrder : littleOrder;
              break;
            }
            default:
              tagValue = "0x" + dataValue.toString("hex");
              break;
          }
          exif[tagName] = tagValue;
        }
      }
      return exif;
    };
    var EXIFHandler = function EXIFHandler2(buf) {
      var pad = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var buffer = buf;
      if (pad) {
        buffer = buf.slice(APPMarkerLength);
        var length = buffer.readUInt16BE(0);
        buffer = buffer.slice(0, length);
        var lengthLength = 2;
        buffer = buffer.slice(lengthLength);
        var identifierLength = 5;
        buffer = buffer.slice(identifierLength);
        var padLength = 1;
        buffer = buffer.slice(padLength);
      }
      var byteOrderLength = 2;
      var byteOrder = buffer.toString("ascii", 0, byteOrderLength) === "MM";
      var fortyTwoLength = 2;
      var fortyTwoEnd = byteOrderLength + fortyTwoLength;
      var big42 = buffer.readUInt32BE(fortyTwoEnd);
      var little42 = buffer.readUInt32LE(fortyTwoEnd);
      var offsetOfIFD = byteOrder ? big42 : little42;
      buffer = buffer.slice(offsetOfIFD);
      if (buffer.length > 0) {
        data = IFDHandler(buffer, tags.ifd, byteOrder, offsetOfIFD);
        if (data.ExifIFDPointer) {
          buffer = buffer.slice(data.ExifIFDPointer - offsetOfIFD);
          data.SubExif = IFDHandler(buffer, tags.ifd, byteOrder, data.ExifIFDPointer);
        }
        if (data.GPSInfoIFDPointer) {
          var gps = data.GPSInfoIFDPointer;
          buffer = buffer.slice(data.ExifIFDPointer ? gps - data.ExifIFDPointer : gps - offsetOfIFD);
          data.GPSInfo = IFDHandler(buffer, tags.gps, byteOrder, gps);
        }
      }
    };
    var APPnHandler = function APPnHandler2(buffer) {
      var APPMarkerTag = checkAPPn(buffer);
      if (APPMarkerTag !== false) {
        var length = buffer.readUInt16BE(APPMarkerLength);
        switch (APPMarkerTag) {
          case 1:
            EXIFHandler(buffer);
            break;
          default:
            APPnHandler2(buffer.slice(APPMarkerLength + length));
            break;
        }
      }
    };
    var fromBuffer = function fromBuffer2(buffer) {
      if (!buffer) {
        throw new Error("buffer not found");
      }
      data = void 0;
      if (isValid(buffer)) {
        buffer = buffer.slice(SOIMarkerLength);
        data = {};
        APPnHandler(buffer);
      } else if (isTiff(buffer)) {
        data = {};
        EXIFHandler(buffer, false);
      }
      return data;
    };
    var sync = function sync2(file) {
      if (!file) {
        throw new Error("File not found");
      }
      var buffer = _fs2.default.readFileSync(file);
      return fromBuffer(buffer);
    };
    var async = function async2(file, callback) {
      data = void 0;
      new Promise(function(resolve, reject) {
        if (!file) {
          reject(new Error("\u2753File not found."));
        }
        _fs2.default.readFile(file, function(err, buffer) {
          if (err) {
            reject(err);
          } else {
            try {
              if (isValid(buffer)) {
                var buf = buffer.slice(SOIMarkerLength);
                data = {};
                APPnHandler(buf);
                resolve(data);
              } else if (isTiff(buffer)) {
                data = {};
                EXIFHandler(buffer, false);
                resolve(data);
              } else {
                reject(new Error("\u{1F631}Unsupport file type."));
              }
            } catch (e2) {
              reject(e2);
            }
          }
        });
      }, function(error) {
        callback(error, void 0);
      }).then(function(d) {
        callback(void 0, d);
      }).catch(function(error) {
        callback(error, void 0);
      });
    };
    exports2.fromBuffer = fromBuffer;
    exports2.parse = async;
    exports2.parseSync = sync;
  }
});

// ../backend/node_modules/png-js/png-node.js
var require_png_node = __commonJS({
  "../backend/node_modules/png-js/png-node.js"(exports2, module2) {
    var fs2 = require("fs");
    var zlib2 = require("zlib");
    module2.exports = class PNG {
      static decode(path, fn) {
        return fs2.readFile(path, function(err, file) {
          const png = new PNG(file);
          return png.decode((pixels) => fn(pixels));
        });
      }
      static load(path) {
        const file = fs2.readFileSync(path);
        return new PNG(file);
      }
      constructor(data) {
        let i2;
        this.data = data;
        this.pos = 8;
        this.palette = [];
        this.imgData = [];
        this.transparency = {};
        this.text = {};
        while (true) {
          const chunkSize = this.readUInt32();
          let section = "";
          for (i2 = 0; i2 < 4; i2++) {
            section += String.fromCharCode(this.data[this.pos++]);
          }
          switch (section) {
            case "IHDR":
              this.width = this.readUInt32();
              this.height = this.readUInt32();
              this.bits = this.data[this.pos++];
              this.colorType = this.data[this.pos++];
              this.compressionMethod = this.data[this.pos++];
              this.filterMethod = this.data[this.pos++];
              this.interlaceMethod = this.data[this.pos++];
              break;
            case "PLTE":
              this.palette = this.read(chunkSize);
              break;
            case "IDAT":
              for (i2 = 0; i2 < chunkSize; i2++) {
                this.imgData.push(this.data[this.pos++]);
              }
              break;
            case "tRNS":
              this.transparency = {};
              switch (this.colorType) {
                case 3:
                  this.transparency.indexed = this.read(chunkSize);
                  var short = 255 - this.transparency.indexed.length;
                  if (short > 0) {
                    for (i2 = 0; i2 < short; i2++) {
                      this.transparency.indexed.push(255);
                    }
                  }
                  break;
                case 0:
                  this.transparency.grayscale = this.read(chunkSize)[0];
                  break;
                case 2:
                  this.transparency.rgb = this.read(chunkSize);
                  break;
              }
              break;
            case "tEXt":
              var text = this.read(chunkSize);
              var index = text.indexOf(0);
              var key = String.fromCharCode.apply(String, text.slice(0, index));
              this.text[key] = String.fromCharCode.apply(
                String,
                text.slice(index + 1)
              );
              break;
            case "IEND":
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  this.colors = 1;
                  break;
                case 2:
                case 6:
                  this.colors = 3;
                  break;
              }
              this.hasAlphaChannel = [4, 6].includes(this.colorType);
              var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
              this.pixelBitlength = this.bits * colors;
              switch (this.colors) {
                case 1:
                  this.colorSpace = "DeviceGray";
                  break;
                case 3:
                  this.colorSpace = "DeviceRGB";
                  break;
              }
              this.imgData = new Buffer(this.imgData);
              return;
              break;
            default:
              this.pos += chunkSize;
          }
          this.pos += 4;
          if (this.pos > this.data.length) {
            throw new Error("Incomplete or corrupt PNG file");
          }
        }
      }
      read(bytes) {
        const result = new Array(bytes);
        for (let i2 = 0; i2 < bytes; i2++) {
          result[i2] = this.data[this.pos++];
        }
        return result;
      }
      readUInt32() {
        const b1 = this.data[this.pos++] << 24;
        const b2 = this.data[this.pos++] << 16;
        const b3 = this.data[this.pos++] << 8;
        const b4 = this.data[this.pos++];
        return b1 | b2 | b3 | b4;
      }
      readUInt16() {
        const b1 = this.data[this.pos++] << 8;
        const b2 = this.data[this.pos++];
        return b1 | b2;
      }
      decodePixels(fn) {
        return zlib2.inflate(this.imgData, (err, data) => {
          if (err) {
            throw err;
          }
          const { width, height } = this;
          const pixelBytes = this.pixelBitlength / 8;
          const pixels = new Buffer(width * height * pixelBytes);
          const { length } = data;
          let pos = 0;
          function pass(x0, y0, dx, dy, singlePass = false) {
            const w = Math.ceil((width - x0) / dx);
            const h2 = Math.ceil((height - y0) / dy);
            const scanlineLength = pixelBytes * w;
            const buffer = singlePass ? pixels : new Buffer(scanlineLength * h2);
            let row = 0;
            let c = 0;
            while (row < h2 && pos < length) {
              var byte, col, i2, left, upper;
              switch (data[pos++]) {
                case 0:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    buffer[c++] = data[pos++];
                  }
                  break;
                case 1:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    byte = data[pos++];
                    left = i2 < pixelBytes ? 0 : buffer[c - pixelBytes];
                    buffer[c++] = (byte + left) % 256;
                  }
                  break;
                case 2:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    byte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                    buffer[c++] = (upper + byte) % 256;
                  }
                  break;
                case 3:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    byte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    left = i2 < pixelBytes ? 0 : buffer[c - pixelBytes];
                    upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                    buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
                  }
                  break;
                case 4:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    var paeth, upperLeft;
                    byte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    left = i2 < pixelBytes ? 0 : buffer[c - pixelBytes];
                    if (row === 0) {
                      upper = upperLeft = 0;
                    } else {
                      upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                      upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i2 % pixelBytes];
                    }
                    const p = left + upper - upperLeft;
                    const pa = Math.abs(p - left);
                    const pb = Math.abs(p - upper);
                    const pc = Math.abs(p - upperLeft);
                    if (pa <= pb && pa <= pc) {
                      paeth = left;
                    } else if (pb <= pc) {
                      paeth = upper;
                    } else {
                      paeth = upperLeft;
                    }
                    buffer[c++] = (byte + paeth) % 256;
                  }
                  break;
                default:
                  throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
              }
              if (!singlePass) {
                let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
                let bufferPos = row * scanlineLength;
                for (i2 = 0; i2 < w; i2++) {
                  for (let j = 0; j < pixelBytes; j++)
                    pixels[pixelsPos++] = buffer[bufferPos++];
                  pixelsPos += (dx - 1) * pixelBytes;
                }
              }
              row++;
            }
          }
          if (this.interlaceMethod === 1) {
            pass(0, 0, 8, 8);
            pass(4, 0, 8, 8);
            pass(0, 4, 4, 8);
            pass(2, 0, 4, 4);
            pass(0, 2, 2, 4);
            pass(1, 0, 2, 2);
            pass(0, 1, 1, 2);
          } else {
            pass(0, 0, 1, 1, true);
          }
          return fn(pixels);
        });
      }
      decodePalette() {
        const { palette } = this;
        const { length } = palette;
        const transparency = this.transparency.indexed || [];
        const ret = new Buffer(transparency.length + length);
        let pos = 0;
        let c = 0;
        for (let i2 = 0; i2 < length; i2 += 3) {
          var left;
          ret[pos++] = palette[i2];
          ret[pos++] = palette[i2 + 1];
          ret[pos++] = palette[i2 + 2];
          ret[pos++] = (left = transparency[c++]) != null ? left : 255;
        }
        return ret;
      }
      copyToImageData(imageData, pixels) {
        let j, k;
        let { colors } = this;
        let palette = null;
        let alpha = this.hasAlphaChannel;
        if (this.palette.length) {
          palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
          colors = 4;
          alpha = true;
        }
        const data = imageData.data || imageData;
        const { length } = data;
        const input = palette || pixels;
        let i2 = j = 0;
        if (colors === 1) {
          while (i2 < length) {
            k = palette ? pixels[i2 / 4] * 4 : j;
            const v = input[k++];
            data[i2++] = v;
            data[i2++] = v;
            data[i2++] = v;
            data[i2++] = alpha ? input[k++] : 255;
            j = k;
          }
        } else {
          while (i2 < length) {
            k = palette ? pixels[i2 / 4] * 4 : j;
            data[i2++] = input[k++];
            data[i2++] = input[k++];
            data[i2++] = input[k++];
            data[i2++] = alpha ? input[k++] : 255;
            j = k;
          }
        }
      }
      decode(fn) {
        const ret = new Buffer(this.width * this.height * 4);
        return this.decodePixels((pixels) => {
          this.copyToImageData(ret, pixels);
          return fn(ret);
        });
      }
    };
  }
});

// ../backend/node_modules/pdfkit/js/pdfkit.js
var require_pdfkit = __commonJS({
  "../backend/node_modules/pdfkit/js/pdfkit.js"(exports2, module2) {
    "use strict";
    var stream = require("stream");
    var zlib2 = require("zlib");
    var CryptoJS = require_crypto_js();
    var fs2 = require("fs");
    var fontkit = require_main3();
    var events = require("events");
    var LineBreaker = require_main4();
    var exif = require_lib();
    var PNG = require_png_node();
    var PDFAbstractReference = class {
      toString() {
        throw new Error("Must be implemented by subclasses");
      }
    };
    var PDFTree = class {
      constructor(options = {}) {
        this._items = {};
        this.limits = typeof options.limits === "boolean" ? options.limits : true;
      }
      add(key, val) {
        return this._items[key] = val;
      }
      get(key) {
        return this._items[key];
      }
      toString() {
        const sortedKeys = Object.keys(this._items).sort((a, b) => this._compareKeys(a, b));
        const out = ["<<"];
        if (this.limits && sortedKeys.length > 1) {
          const first2 = sortedKeys[0], last2 = sortedKeys[sortedKeys.length - 1];
          out.push(`  /Limits ${PDFObject.convert([this._dataForKey(first2), this._dataForKey(last2)])}`);
        }
        out.push(`  /${this._keysName()} [`);
        for (let key of sortedKeys) {
          out.push(`    ${PDFObject.convert(this._dataForKey(key))} ${PDFObject.convert(this._items[key])}`);
        }
        out.push("]");
        out.push(">>");
        return out.join("\n");
      }
      _compareKeys() {
        throw new Error("Must be implemented by subclasses");
      }
      _keysName() {
        throw new Error("Must be implemented by subclasses");
      }
      _dataForKey() {
        throw new Error("Must be implemented by subclasses");
      }
    };
    var SpotColor = class {
      constructor(doc, name, C, M, Y, K) {
        this.id = "CS" + Object.keys(doc.spotColors).length;
        this.name = name;
        this.values = [C, M, Y, K];
        this.ref = doc.ref(["Separation", this.name, "DeviceCMYK", {
          Range: [0, 1, 0, 1, 0, 1, 0, 1],
          C0: [0, 0, 0, 0],
          C1: this.values.map((value) => value / 100),
          FunctionType: 2,
          Domain: [0, 1],
          N: 1
        }]);
        this.ref.end();
      }
      toString() {
        return `${this.ref.id} 0 R`;
      }
    };
    var pad = (str, length) => (Array(length + 1).join("0") + str).slice(-length);
    var escapableRe = /[\n\r\t\b\f()\\]/g;
    var escapable = {
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\b": "\\b",
      "\f": "\\f",
      "\\": "\\\\",
      "(": "\\(",
      ")": "\\)"
    };
    var swapBytes = function(buff) {
      const l = buff.length;
      if (l & 1) {
        throw new Error("Buffer length must be even");
      } else {
        for (let i2 = 0, end = l - 1; i2 < end; i2 += 2) {
          const a = buff[i2];
          buff[i2] = buff[i2 + 1];
          buff[i2 + 1] = a;
        }
      }
      return buff;
    };
    var PDFObject = class _PDFObject {
      static convert(object, encryptFn = null) {
        if (typeof object === "string") {
          return `/${object}`;
        } else if (object instanceof String) {
          let string = object;
          let isUnicode = false;
          for (let i2 = 0, end = string.length; i2 < end; i2++) {
            if (string.charCodeAt(i2) > 127) {
              isUnicode = true;
              break;
            }
          }
          let stringBuffer;
          if (isUnicode) {
            stringBuffer = swapBytes(Buffer.from(`\uFEFF${string}`, "utf16le"));
          } else {
            stringBuffer = Buffer.from(string.valueOf(), "ascii");
          }
          if (encryptFn) {
            string = encryptFn(stringBuffer).toString("binary");
          } else {
            string = stringBuffer.toString("binary");
          }
          string = string.replace(escapableRe, (c) => escapable[c]);
          return `(${string})`;
        } else if (Buffer.isBuffer(object)) {
          return `<${object.toString("hex")}>`;
        } else if (object instanceof PDFAbstractReference || object instanceof PDFTree || object instanceof SpotColor) {
          return object.toString();
        } else if (object instanceof Date) {
          let string = `D:${pad(object.getUTCFullYear(), 4)}` + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + "Z";
          if (encryptFn) {
            string = encryptFn(Buffer.from(string, "ascii")).toString("binary");
            string = string.replace(escapableRe, (c) => escapable[c]);
          }
          return `(${string})`;
        } else if (Array.isArray(object)) {
          const items = object.map((e2) => _PDFObject.convert(e2, encryptFn)).join(" ");
          return `[${items}]`;
        } else if ({}.toString.call(object) === "[object Object]") {
          const out = ["<<"];
          for (let key in object) {
            const val = object[key];
            out.push(`/${key} ${_PDFObject.convert(val, encryptFn)}`);
          }
          out.push(">>");
          return out.join("\n");
        } else if (typeof object === "number") {
          return _PDFObject.number(object);
        } else {
          return `${object}`;
        }
      }
      static number(n) {
        if (n > -1e21 && n < 1e21) {
          return Math.round(n * 1e6) / 1e6;
        }
        throw new Error(`unsupported number: ${n}`);
      }
    };
    var PDFReference = class extends PDFAbstractReference {
      constructor(document2, id, data = {}) {
        super();
        this.document = document2;
        this.id = id;
        this.data = data;
        this.gen = 0;
        this.compress = this.document.compress && !this.data.Filter;
        this.uncompressedLength = 0;
        this.buffer = [];
      }
      write(chunk) {
        if (!(chunk instanceof Uint8Array)) {
          chunk = Buffer.from(chunk + "\n", "binary");
        }
        this.uncompressedLength += chunk.length;
        if (this.data.Length == null) {
          this.data.Length = 0;
        }
        this.buffer.push(chunk);
        this.data.Length += chunk.length;
        if (this.compress) {
          this.data.Filter = "FlateDecode";
        }
      }
      end(chunk) {
        if (chunk) {
          this.write(chunk);
        }
        this.finalize();
      }
      finalize() {
        this.offset = this.document._offset;
        const encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;
        if (this.buffer.length) {
          this.buffer = Buffer.concat(this.buffer);
          if (this.compress) {
            this.buffer = zlib2.deflateSync(this.buffer);
          }
          if (encryptFn) {
            this.buffer = encryptFn(this.buffer);
          }
          this.data.Length = this.buffer.length;
        }
        this.document._write(`${this.id} ${this.gen} obj`);
        this.document._write(PDFObject.convert(this.data, encryptFn));
        if (this.buffer.length) {
          this.document._write("stream");
          this.document._write(this.buffer);
          this.buffer = [];
          this.document._write("\nendstream");
        }
        this.document._write("endobj");
        this.document._refEnd(this);
      }
      toString() {
        return `${this.id} ${this.gen} R`;
      }
    };
    var fArray = new Float32Array(1);
    var uArray = new Uint32Array(fArray.buffer);
    function PDFNumber(n) {
      const rounded = Math.fround(n);
      if (rounded <= n) return rounded;
      fArray[0] = n;
      if (n <= 0) {
        uArray[0] += 1;
      } else {
        uArray[0] -= 1;
      }
      return fArray[0];
    }
    function normalizeSides(sides, defaultDefinition = void 0, transformer = (v) => v) {
      if (sides == null || typeof sides === "object" && Object.keys(sides).length === 0) {
        sides = defaultDefinition;
      }
      if (sides == null || typeof sides !== "object") {
        sides = {
          top: sides,
          right: sides,
          bottom: sides,
          left: sides
        };
      } else if (Array.isArray(sides)) {
        if (sides.length === 2) {
          sides = {
            vertical: sides[0],
            horizontal: sides[1]
          };
        } else {
          sides = {
            top: sides[0],
            right: sides[1],
            bottom: sides[2],
            left: sides[3]
          };
        }
      }
      if ("vertical" in sides || "horizontal" in sides) {
        sides = {
          top: sides.vertical,
          right: sides.horizontal,
          bottom: sides.vertical,
          left: sides.horizontal
        };
      }
      return {
        top: transformer(sides.top),
        right: transformer(sides.right),
        bottom: transformer(sides.bottom),
        left: transformer(sides.left)
      };
    }
    var MM_TO_CM = 1 / 10;
    var CM_TO_IN = 1 / 2.54;
    var PX_TO_IN = 1 / 96;
    var IN_TO_PT = 72;
    var PC_TO_PT = 12;
    function cosine(a) {
      if (a === 0) return 1;
      if (a === 90) return 0;
      if (a === 180) return -1;
      if (a === 270) return 0;
      return Math.cos(a * Math.PI / 180);
    }
    function sine(a) {
      if (a === 0) return 0;
      if (a === 90) return 1;
      if (a === 180) return 0;
      if (a === 270) return -1;
      return Math.sin(a * Math.PI / 180);
    }
    var DEFAULT_MARGINS = {
      top: 72,
      left: 72,
      bottom: 72,
      right: 72
    };
    var SIZES = {
      "4A0": [4767.87, 6740.79],
      "2A0": [3370.39, 4767.87],
      A0: [2383.94, 3370.39],
      A1: [1683.78, 2383.94],
      A2: [1190.55, 1683.78],
      A3: [841.89, 1190.55],
      A4: [595.28, 841.89],
      A5: [419.53, 595.28],
      A6: [297.64, 419.53],
      A7: [209.76, 297.64],
      A8: [147.4, 209.76],
      A9: [104.88, 147.4],
      A10: [73.7, 104.88],
      B0: [2834.65, 4008.19],
      B1: [2004.09, 2834.65],
      B2: [1417.32, 2004.09],
      B3: [1000.63, 1417.32],
      B4: [708.66, 1000.63],
      B5: [498.9, 708.66],
      B6: [354.33, 498.9],
      B7: [249.45, 354.33],
      B8: [175.75, 249.45],
      B9: [124.72, 175.75],
      B10: [87.87, 124.72],
      C0: [2599.37, 3676.54],
      C1: [1836.85, 2599.37],
      C2: [1298.27, 1836.85],
      C3: [918.43, 1298.27],
      C4: [649.13, 918.43],
      C5: [459.21, 649.13],
      C6: [323.15, 459.21],
      C7: [229.61, 323.15],
      C8: [161.57, 229.61],
      C9: [113.39, 161.57],
      C10: [79.37, 113.39],
      RA0: [2437.8, 3458.27],
      RA1: [1729.13, 2437.8],
      RA2: [1218.9, 1729.13],
      RA3: [864.57, 1218.9],
      RA4: [609.45, 864.57],
      SRA0: [2551.18, 3628.35],
      SRA1: [1814.17, 2551.18],
      SRA2: [1275.59, 1814.17],
      SRA3: [907.09, 1275.59],
      SRA4: [637.8, 907.09],
      EXECUTIVE: [521.86, 756],
      FOLIO: [612, 936],
      LEGAL: [612, 1008],
      LETTER: [612, 792],
      TABLOID: [792, 1224]
    };
    var PDFPage = class {
      constructor(document2, options = {}) {
        this.document = document2;
        this._options = options;
        this.size = options.size || "letter";
        this.layout = options.layout || "portrait";
        const dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
        this.width = dimensions[this.layout === "portrait" ? 0 : 1];
        this.height = dimensions[this.layout === "portrait" ? 1 : 0];
        this.content = this.document.ref();
        if (options.font) document2.font(options.font, options.fontFamily);
        if (options.fontSize) document2.fontSize(options.fontSize);
        this.margins = normalizeSides(options.margin ?? options.margins, DEFAULT_MARGINS, (x2) => document2.sizeToPoint(x2, 0, this));
        this.resources = this.document.ref({
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"]
        });
        this.dictionary = this.document.ref({
          Type: "Page",
          Parent: this.document._root.data.Pages,
          MediaBox: [0, 0, this.width, this.height],
          Contents: this.content,
          Resources: this.resources
        });
        this.markings = [];
      }
      get fonts() {
        const data = this.resources.data;
        return data.Font != null ? data.Font : data.Font = {};
      }
      get xobjects() {
        const data = this.resources.data;
        return data.XObject != null ? data.XObject : data.XObject = {};
      }
      get ext_gstates() {
        const data = this.resources.data;
        return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
      }
      get patterns() {
        const data = this.resources.data;
        return data.Pattern != null ? data.Pattern : data.Pattern = {};
      }
      get colorSpaces() {
        const data = this.resources.data;
        return data.ColorSpace || (data.ColorSpace = {});
      }
      get annotations() {
        const data = this.dictionary.data;
        return data.Annots != null ? data.Annots : data.Annots = [];
      }
      get structParentTreeKey() {
        const data = this.dictionary.data;
        return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
      }
      get contentWidth() {
        return this.width - this.margins.left - this.margins.right;
      }
      get contentHeight() {
        return this.height - this.margins.top - this.margins.bottom;
      }
      maxY() {
        return this.height - this.margins.bottom;
      }
      write(chunk) {
        return this.content.write(chunk);
      }
      _setTabOrder() {
        if (!this.dictionary.Tabs && this.document.hasMarkInfoDictionary()) {
          this.dictionary.data.Tabs = "S";
        }
      }
      end() {
        this._setTabOrder();
        this.dictionary.end();
        this.resources.data.ColorSpace = this.resources.data.ColorSpace || {};
        for (let color of Object.values(this.document.spotColors)) {
          this.resources.data.ColorSpace[color.id] = color;
        }
        this.resources.end();
        return this.content.end();
      }
    };
    var PDFNameTree = class extends PDFTree {
      _compareKeys(a, b) {
        return a.localeCompare(b);
      }
      _keysName() {
        return "Names";
      }
      _dataForKey(k) {
        return new String(k);
      }
    };
    function inRange(value, rangeGroup) {
      if (value < rangeGroup[0]) return false;
      let startRange = 0;
      let endRange = rangeGroup.length / 2;
      while (startRange <= endRange) {
        const middleRange = Math.floor((startRange + endRange) / 2);
        const arrayIndex = middleRange * 2;
        if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {
          return true;
        }
        if (value > rangeGroup[arrayIndex + 1]) {
          startRange = middleRange + 1;
        } else {
          endRange = middleRange - 1;
        }
      }
      return false;
    }
    var unassigned_code_points = [545, 545, 564, 591, 686, 687, 751, 767, 848, 863, 880, 883, 886, 889, 891, 893, 895, 899, 907, 907, 909, 909, 930, 930, 975, 975, 1015, 1023, 1159, 1159, 1231, 1231, 1270, 1271, 1274, 1279, 1296, 1328, 1367, 1368, 1376, 1376, 1416, 1416, 1419, 1424, 1442, 1442, 1466, 1466, 1477, 1487, 1515, 1519, 1525, 1547, 1549, 1562, 1564, 1566, 1568, 1568, 1595, 1599, 1622, 1631, 1774, 1775, 1791, 1791, 1806, 1806, 1837, 1839, 1867, 1919, 1970, 2304, 2308, 2308, 2362, 2363, 2382, 2383, 2389, 2391, 2417, 2432, 2436, 2436, 2445, 2446, 2449, 2450, 2473, 2473, 2481, 2481, 2483, 2485, 2490, 2491, 2493, 2493, 2501, 2502, 2505, 2506, 2510, 2518, 2520, 2523, 2526, 2526, 2532, 2533, 2555, 2561, 2563, 2564, 2571, 2574, 2577, 2578, 2601, 2601, 2609, 2609, 2612, 2612, 2615, 2615, 2618, 2619, 2621, 2621, 2627, 2630, 2633, 2634, 2638, 2648, 2653, 2653, 2655, 2661, 2677, 2688, 2692, 2692, 2700, 2700, 2702, 2702, 2706, 2706, 2729, 2729, 2737, 2737, 2740, 2740, 2746, 2747, 2758, 2758, 2762, 2762, 2766, 2767, 2769, 2783, 2785, 2789, 2800, 2816, 2820, 2820, 2829, 2830, 2833, 2834, 2857, 2857, 2865, 2865, 2868, 2869, 2874, 2875, 2884, 2886, 2889, 2890, 2894, 2901, 2904, 2907, 2910, 2910, 2914, 2917, 2929, 2945, 2948, 2948, 2955, 2957, 2961, 2961, 2966, 2968, 2971, 2971, 2973, 2973, 2976, 2978, 2981, 2983, 2987, 2989, 2998, 2998, 3002, 3005, 3011, 3013, 3017, 3017, 3022, 3030, 3032, 3046, 3059, 3072, 3076, 3076, 3085, 3085, 3089, 3089, 3113, 3113, 3124, 3124, 3130, 3133, 3141, 3141, 3145, 3145, 3150, 3156, 3159, 3167, 3170, 3173, 3184, 3201, 3204, 3204, 3213, 3213, 3217, 3217, 3241, 3241, 3252, 3252, 3258, 3261, 3269, 3269, 3273, 3273, 3278, 3284, 3287, 3293, 3295, 3295, 3298, 3301, 3312, 3329, 3332, 3332, 3341, 3341, 3345, 3345, 3369, 3369, 3386, 3389, 3396, 3397, 3401, 3401, 3406, 3414, 3416, 3423, 3426, 3429, 3440, 3457, 3460, 3460, 3479, 3481, 3506, 3506, 3516, 3516, 3518, 3519, 3527, 3529, 3531, 3534, 3541, 3541, 3543, 3543, 3552, 3569, 3573, 3584, 3643, 3646, 3676, 3712, 3715, 3715, 3717, 3718, 3721, 3721, 3723, 3724, 3726, 3731, 3736, 3736, 3744, 3744, 3748, 3748, 3750, 3750, 3752, 3753, 3756, 3756, 3770, 3770, 3774, 3775, 3781, 3781, 3783, 3783, 3790, 3791, 3802, 3803, 3806, 3839, 3912, 3912, 3947, 3952, 3980, 3983, 3992, 3992, 4029, 4029, 4045, 4046, 4048, 4095, 4130, 4130, 4136, 4136, 4139, 4139, 4147, 4149, 4154, 4159, 4186, 4255, 4294, 4303, 4345, 4346, 4348, 4351, 4442, 4446, 4515, 4519, 4602, 4607, 4615, 4615, 4679, 4679, 4681, 4681, 4686, 4687, 4695, 4695, 4697, 4697, 4702, 4703, 4743, 4743, 4745, 4745, 4750, 4751, 4783, 4783, 4785, 4785, 4790, 4791, 4799, 4799, 4801, 4801, 4806, 4807, 4815, 4815, 4823, 4823, 4847, 4847, 4879, 4879, 4881, 4881, 4886, 4887, 4895, 4895, 4935, 4935, 4955, 4960, 4989, 5023, 5109, 5120, 5751, 5759, 5789, 5791, 5873, 5887, 5901, 5901, 5909, 5919, 5943, 5951, 5972, 5983, 5997, 5997, 6001, 6001, 6004, 6015, 6109, 6111, 6122, 6143, 6159, 6159, 6170, 6175, 6264, 6271, 6314, 7679, 7836, 7839, 7930, 7935, 7958, 7959, 7966, 7967, 8006, 8007, 8014, 8015, 8024, 8024, 8026, 8026, 8028, 8028, 8030, 8030, 8062, 8063, 8117, 8117, 8133, 8133, 8148, 8149, 8156, 8156, 8176, 8177, 8181, 8181, 8191, 8191, 8275, 8278, 8280, 8286, 8292, 8297, 8306, 8307, 8335, 8351, 8370, 8399, 8427, 8447, 8507, 8508, 8524, 8530, 8580, 8591, 9167, 9215, 9255, 9279, 9291, 9311, 9471, 9471, 9748, 9749, 9752, 9752, 9854, 9855, 9866, 9984, 9989, 9989, 9994, 9995, 10024, 10024, 10060, 10060, 10062, 10062, 10067, 10069, 10071, 10071, 10079, 10080, 10133, 10135, 10160, 10160, 10175, 10191, 10220, 10223, 11008, 11903, 11930, 11930, 12020, 12031, 12246, 12271, 12284, 12287, 12352, 12352, 12439, 12440, 12544, 12548, 12589, 12592, 12687, 12687, 12728, 12783, 12829, 12831, 12868, 12880, 12924, 12926, 13004, 13007, 13055, 13055, 13175, 13178, 13278, 13279, 13311, 13311, 19894, 19967, 40870, 40959, 42125, 42127, 42183, 44031, 55204, 55295, 64046, 64047, 64107, 64255, 64263, 64274, 64280, 64284, 64311, 64311, 64317, 64317, 64319, 64319, 64322, 64322, 64325, 64325, 64434, 64466, 64832, 64847, 64912, 64913, 64968, 64975, 65021, 65023, 65040, 65055, 65060, 65071, 65095, 65096, 65107, 65107, 65127, 65127, 65132, 65135, 65141, 65141, 65277, 65278, 65280, 65280, 65471, 65473, 65480, 65481, 65488, 65489, 65496, 65497, 65501, 65503, 65511, 65511, 65519, 65528, 65536, 66303, 66335, 66335, 66340, 66351, 66379, 66559, 66598, 66599, 66638, 118783, 119030, 119039, 119079, 119081, 119262, 119807, 119893, 119893, 119965, 119965, 119968, 119969, 119971, 119972, 119975, 119976, 119981, 119981, 119994, 119994, 119996, 119996, 120001, 120001, 120004, 120004, 120070, 120070, 120075, 120076, 120085, 120085, 120093, 120093, 120122, 120122, 120127, 120127, 120133, 120133, 120135, 120137, 120145, 120145, 120484, 120487, 120778, 120781, 120832, 131069, 173783, 194559, 195102, 196605, 196608, 262141, 262144, 327677, 327680, 393213, 393216, 458749, 458752, 524285, 524288, 589821, 589824, 655357, 655360, 720893, 720896, 786429, 786432, 851965, 851968, 917501, 917504, 917504, 917506, 917535, 917632, 983037];
    var isUnassignedCodePoint = (character) => inRange(character, unassigned_code_points);
    var commonly_mapped_to_nothing = [173, 173, 847, 847, 6150, 6150, 6155, 6155, 6156, 6156, 6157, 6157, 8203, 8203, 8204, 8204, 8205, 8205, 8288, 8288, 65024, 65024, 65025, 65025, 65026, 65026, 65027, 65027, 65028, 65028, 65029, 65029, 65030, 65030, 65031, 65031, 65032, 65032, 65033, 65033, 65034, 65034, 65035, 65035, 65036, 65036, 65037, 65037, 65038, 65038, 65039, 65039, 65279, 65279];
    var isCommonlyMappedToNothing = (character) => inRange(character, commonly_mapped_to_nothing);
    var non_ASCII_space_characters = [160, 160, 5760, 5760, 8192, 8192, 8193, 8193, 8194, 8194, 8195, 8195, 8196, 8196, 8197, 8197, 8198, 8198, 8199, 8199, 8200, 8200, 8201, 8201, 8202, 8202, 8203, 8203, 8239, 8239, 8287, 8287, 12288, 12288];
    var isNonASCIISpaceCharacter = (character) => inRange(character, non_ASCII_space_characters);
    var non_ASCII_controls_characters = [128, 159, 1757, 1757, 1807, 1807, 6158, 6158, 8204, 8204, 8205, 8205, 8232, 8232, 8233, 8233, 8288, 8288, 8289, 8289, 8290, 8290, 8291, 8291, 8298, 8303, 65279, 65279, 65529, 65532, 119155, 119162];
    var non_character_codepoints = [64976, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1114110, 1114111];
    var prohibited_characters = [0, 31, 127, 127, 832, 832, 833, 833, 8206, 8206, 8207, 8207, 8234, 8234, 8235, 8235, 8236, 8236, 8237, 8237, 8238, 8238, 8298, 8298, 8299, 8299, 8300, 8300, 8301, 8301, 8302, 8302, 8303, 8303, 12272, 12283, 55296, 57343, 57344, 63743, 65529, 65529, 65530, 65530, 65531, 65531, 65532, 65532, 65533, 65533, 917505, 917505, 917536, 917631, 983040, 1048573, 1048576, 1114109];
    var isProhibitedCharacter = (character) => inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
    var bidirectional_r_al = [1470, 1470, 1472, 1472, 1475, 1475, 1488, 1514, 1520, 1524, 1563, 1563, 1567, 1567, 1569, 1594, 1600, 1610, 1645, 1647, 1649, 1749, 1757, 1757, 1765, 1766, 1786, 1790, 1792, 1805, 1808, 1808, 1810, 1836, 1920, 1957, 1969, 1969, 8207, 8207, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65020, 65136, 65140, 65142, 65276];
    var isBidirectionalRAL = (character) => inRange(character, bidirectional_r_al);
    var bidirectional_l = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 544, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 1013, 1024, 1154, 1162, 1230, 1232, 1269, 1272, 1273, 1280, 1295, 1329, 1366, 1369, 1375, 1377, 1415, 1417, 1417, 2307, 2307, 2309, 2361, 2365, 2368, 2377, 2380, 2384, 2384, 2392, 2401, 2404, 2416, 2434, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2494, 2496, 2503, 2504, 2507, 2508, 2519, 2519, 2524, 2525, 2527, 2529, 2534, 2545, 2548, 2554, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2622, 2624, 2649, 2652, 2654, 2654, 2662, 2671, 2674, 2676, 2691, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2752, 2761, 2761, 2763, 2764, 2768, 2768, 2784, 2784, 2790, 2799, 2818, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2878, 2880, 2880, 2887, 2888, 2891, 2892, 2903, 2903, 2908, 2909, 2911, 2913, 2918, 2928, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3007, 3009, 3010, 3014, 3016, 3018, 3020, 3031, 3031, 3047, 3058, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3137, 3140, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3262, 3264, 3268, 3271, 3272, 3274, 3275, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3392, 3398, 3400, 3402, 3404, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3535, 3537, 3544, 3551, 3570, 3572, 3585, 3632, 3634, 3635, 3648, 3654, 3663, 3675, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3792, 3801, 3804, 3805, 3840, 3863, 3866, 3892, 3894, 3894, 3896, 3896, 3902, 3911, 3913, 3946, 3967, 3967, 3973, 3973, 3976, 3979, 4030, 4037, 4039, 4044, 4047, 4047, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4140, 4145, 4145, 4152, 4152, 4160, 4183, 4256, 4293, 4304, 4344, 4347, 4347, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4961, 4988, 5024, 5108, 5121, 5750, 5761, 5786, 5792, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5941, 5942, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6070, 6078, 6085, 6087, 6088, 6100, 6106, 6108, 6108, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8206, 8206, 8305, 8305, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8509, 8511, 8517, 8521, 8544, 8579, 9014, 9082, 9109, 9109, 9372, 9449, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12588, 12593, 12686, 12688, 12727, 12784, 12828, 12832, 12867, 12896, 12923, 12927, 12976, 12992, 13003, 13008, 13054, 13056, 13174, 13179, 13277, 13280, 13310, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 55296, 64045, 64048, 64106, 64256, 64262, 64275, 64279, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 66304, 66334, 66336, 66339, 66352, 66378, 66560, 66597, 66600, 66637, 118784, 119029, 119040, 119078, 119082, 119142, 119146, 119154, 119171, 119172, 119180, 119209, 119214, 119261, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 12e4, 120002, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120483, 120488, 120777, 131072, 173782, 194560, 195101, 983040, 1048573, 1048576, 1114109];
    var isBidirectionalL = (character) => inRange(character, bidirectional_l);
    var mapping2space = isNonASCIISpaceCharacter;
    var mapping2nothing = isCommonlyMappedToNothing;
    var getCodePoint = (character) => character.codePointAt(0);
    var first = (x2) => x2[0];
    var last = (x2) => x2[x2.length - 1];
    function toCodePoints(input) {
      const codepoints = [];
      const size = input.length;
      for (let i2 = 0; i2 < size; i2 += 1) {
        const before = input.charCodeAt(i2);
        if (before >= 55296 && before <= 56319 && size > i2 + 1) {
          const next = input.charCodeAt(i2 + 1);
          if (next >= 56320 && next <= 57343) {
            codepoints.push((before - 55296) * 1024 + next - 56320 + 65536);
            i2 += 1;
            continue;
          }
        }
        codepoints.push(before);
      }
      return codepoints;
    }
    function saslprep(input, opts = {}) {
      if (typeof input !== "string") {
        throw new TypeError("Expected string.");
      }
      if (input.length === 0) {
        return "";
      }
      const mapped_input = toCodePoints(input).map((character) => mapping2space(character) ? 32 : character).filter((character) => !mapping2nothing(character));
      const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize("NFKC");
      const normalized_map = toCodePoints(normalized_input);
      const hasProhibited = normalized_map.some(isProhibitedCharacter);
      if (hasProhibited) {
        throw new Error("Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3");
      }
      if (opts.allowUnassigned !== true) {
        const hasUnassigned = normalized_map.some(isUnassignedCodePoint);
        if (hasUnassigned) {
          throw new Error("Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5");
        }
      }
      const hasBidiRAL = normalized_map.some(isBidirectionalRAL);
      const hasBidiL = normalized_map.some(isBidirectionalL);
      if (hasBidiRAL && hasBidiL) {
        throw new Error("String must not contain RandALCat and LCat at the same time, see https://tools.ietf.org/html/rfc3454#section-6");
      }
      const isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
      const isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));
      if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
        throw new Error("Bidirectional RandALCat character must be the first and the last character of the string, see https://tools.ietf.org/html/rfc3454#section-6");
      }
      return normalized_input;
    }
    var PDFSecurity = class _PDFSecurity {
      static generateFileID(info = {}) {
        let infoStr = `${info.CreationDate.getTime()}
`;
        for (let key in info) {
          if (!info.hasOwnProperty(key)) {
            continue;
          }
          infoStr += `${key}: ${info[key].valueOf()}
`;
        }
        return wordArrayToBuffer(CryptoJS.MD5(infoStr));
      }
      static generateRandomWordArray(bytes) {
        return CryptoJS.lib.WordArray.random(bytes);
      }
      static create(document2, options = {}) {
        if (!options.ownerPassword && !options.userPassword) {
          return null;
        }
        return new _PDFSecurity(document2, options);
      }
      constructor(document2, options = {}) {
        if (!options.ownerPassword && !options.userPassword) {
          throw new Error("None of owner password and user password is defined.");
        }
        this.document = document2;
        this._setupEncryption(options);
      }
      _setupEncryption(options) {
        switch (options.pdfVersion) {
          case "1.4":
          case "1.5":
            this.version = 2;
            break;
          case "1.6":
          case "1.7":
            this.version = 4;
            break;
          case "1.7ext3":
            this.version = 5;
            break;
          default:
            this.version = 1;
            break;
        }
        const encDict = {
          Filter: "Standard"
        };
        switch (this.version) {
          case 1:
          case 2:
          case 4:
            this._setupEncryptionV1V2V4(this.version, encDict, options);
            break;
          case 5:
            this._setupEncryptionV5(encDict, options);
            break;
        }
        this.dictionary = this.document.ref(encDict);
      }
      _setupEncryptionV1V2V4(v, encDict, options) {
        let r2, permissions;
        switch (v) {
          case 1:
            r2 = 2;
            this.keyBits = 40;
            permissions = getPermissionsR2(options.permissions);
            break;
          case 2:
            r2 = 3;
            this.keyBits = 128;
            permissions = getPermissionsR3(options.permissions);
            break;
          case 4:
            r2 = 4;
            this.keyBits = 128;
            permissions = getPermissionsR3(options.permissions);
            break;
        }
        const paddedUserPassword = processPasswordR2R3R4(options.userPassword);
        const paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
        const ownerPasswordEntry = getOwnerPasswordR2R3R4(r2, this.keyBits, paddedUserPassword, paddedOwnerPassword);
        this.encryptionKey = getEncryptionKeyR2R3R4(r2, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
        let userPasswordEntry;
        if (r2 === 2) {
          userPasswordEntry = getUserPasswordR2(this.encryptionKey);
        } else {
          userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
        }
        encDict.V = v;
        if (v >= 2) {
          encDict.Length = this.keyBits;
        }
        if (v === 4) {
          encDict.CF = {
            StdCF: {
              AuthEvent: "DocOpen",
              CFM: "AESV2",
              Length: this.keyBits / 8
            }
          };
          encDict.StmF = "StdCF";
          encDict.StrF = "StdCF";
        }
        encDict.R = r2;
        encDict.O = wordArrayToBuffer(ownerPasswordEntry);
        encDict.U = wordArrayToBuffer(userPasswordEntry);
        encDict.P = permissions;
      }
      _setupEncryptionV5(encDict, options) {
        this.keyBits = 256;
        const permissions = getPermissionsR3(options.permissions);
        const processedUserPassword = processPasswordR5(options.userPassword);
        const processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
        this.encryptionKey = getEncryptionKeyR5(_PDFSecurity.generateRandomWordArray);
        const userPasswordEntry = getUserPasswordR5(processedUserPassword, _PDFSecurity.generateRandomWordArray);
        const userKeySalt = CryptoJS.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);
        const userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
        const ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, _PDFSecurity.generateRandomWordArray);
        const ownerKeySalt = CryptoJS.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);
        const ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
        const permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, _PDFSecurity.generateRandomWordArray);
        encDict.V = 5;
        encDict.Length = this.keyBits;
        encDict.CF = {
          StdCF: {
            AuthEvent: "DocOpen",
            CFM: "AESV3",
            Length: this.keyBits / 8
          }
        };
        encDict.StmF = "StdCF";
        encDict.StrF = "StdCF";
        encDict.R = 5;
        encDict.O = wordArrayToBuffer(ownerPasswordEntry);
        encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
        encDict.U = wordArrayToBuffer(userPasswordEntry);
        encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
        encDict.P = permissions;
        encDict.Perms = wordArrayToBuffer(permsEntry);
      }
      getEncryptFn(obj, gen) {
        let digest;
        if (this.version < 5) {
          digest = this.encryptionKey.clone().concat(CryptoJS.lib.WordArray.create([(obj & 255) << 24 | (obj & 65280) << 8 | obj >> 8 & 65280 | gen & 255, (gen & 65280) << 16], 5));
        }
        if (this.version === 1 || this.version === 2) {
          let key2 = CryptoJS.MD5(digest);
          key2.sigBytes = Math.min(16, this.keyBits / 8 + 5);
          return (buffer) => wordArrayToBuffer(CryptoJS.RC4.encrypt(CryptoJS.lib.WordArray.create(buffer), key2).ciphertext);
        }
        let key;
        if (this.version === 4) {
          key = CryptoJS.MD5(digest.concat(CryptoJS.lib.WordArray.create([1933667412], 4)));
        } else {
          key = this.encryptionKey;
        }
        const iv = _PDFSecurity.generateRandomWordArray(16);
        const options = {
          mode: CryptoJS.mode.CBC,
          padding: CryptoJS.pad.Pkcs7,
          iv
        };
        return (buffer) => wordArrayToBuffer(iv.clone().concat(CryptoJS.AES.encrypt(CryptoJS.lib.WordArray.create(buffer), key, options).ciphertext));
      }
      end() {
        this.dictionary.end();
      }
    };
    function getPermissionsR2(permissionObject = {}) {
      let permissions = 4294967232 >> 0;
      if (permissionObject.printing) {
        permissions |= 4;
      }
      if (permissionObject.modifying) {
        permissions |= 8;
      }
      if (permissionObject.copying) {
        permissions |= 16;
      }
      if (permissionObject.annotating) {
        permissions |= 32;
      }
      return permissions;
    }
    function getPermissionsR3(permissionObject = {}) {
      let permissions = 4294963392 >> 0;
      if (permissionObject.printing === "lowResolution") {
        permissions |= 4;
      }
      if (permissionObject.printing === "highResolution") {
        permissions |= 2052;
      }
      if (permissionObject.modifying) {
        permissions |= 8;
      }
      if (permissionObject.copying) {
        permissions |= 16;
      }
      if (permissionObject.annotating) {
        permissions |= 32;
      }
      if (permissionObject.fillingForms) {
        permissions |= 256;
      }
      if (permissionObject.contentAccessibility) {
        permissions |= 512;
      }
      if (permissionObject.documentAssembly) {
        permissions |= 1024;
      }
      return permissions;
    }
    function getUserPasswordR2(encryptionKey) {
      return CryptoJS.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
    }
    function getUserPasswordR3R4(documentId, encryptionKey) {
      const key = encryptionKey.clone();
      let cipher = CryptoJS.MD5(processPasswordR2R3R4().concat(CryptoJS.lib.WordArray.create(documentId)));
      for (let i2 = 0; i2 < 20; i2++) {
        const xorRound = Math.ceil(key.sigBytes / 4);
        for (let j = 0; j < xorRound; j++) {
          key.words[j] = encryptionKey.words[j] ^ (i2 | i2 << 8 | i2 << 16 | i2 << 24);
        }
        cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
      }
      return cipher.concat(CryptoJS.lib.WordArray.create(null, 16));
    }
    function getOwnerPasswordR2R3R4(r2, keyBits, paddedUserPassword, paddedOwnerPassword) {
      let digest = paddedOwnerPassword;
      let round = r2 >= 3 ? 51 : 1;
      for (let i2 = 0; i2 < round; i2++) {
        digest = CryptoJS.MD5(digest);
      }
      const key = digest.clone();
      key.sigBytes = keyBits / 8;
      let cipher = paddedUserPassword;
      round = r2 >= 3 ? 20 : 1;
      for (let i2 = 0; i2 < round; i2++) {
        const xorRound = Math.ceil(key.sigBytes / 4);
        for (let j = 0; j < xorRound; j++) {
          key.words[j] = digest.words[j] ^ (i2 | i2 << 8 | i2 << 16 | i2 << 24);
        }
        cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
      }
      return cipher;
    }
    function getEncryptionKeyR2R3R4(r2, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
      let key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(CryptoJS.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(CryptoJS.lib.WordArray.create(documentId));
      const round = r2 >= 3 ? 51 : 1;
      for (let i2 = 0; i2 < round; i2++) {
        key = CryptoJS.MD5(key);
        key.sigBytes = keyBits / 8;
      }
      return key;
    }
    function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
      const validationSalt = generateRandomWordArray(8);
      const keySalt = generateRandomWordArray(8);
      return CryptoJS.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
    }
    function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
      const key = CryptoJS.SHA256(processedUserPassword.clone().concat(userKeySalt));
      const options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.NoPadding,
        iv: CryptoJS.lib.WordArray.create(null, 16)
      };
      return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
    }
    function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
      const validationSalt = generateRandomWordArray(8);
      const keySalt = generateRandomWordArray(8);
      return CryptoJS.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
    }
    function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
      const key = CryptoJS.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));
      const options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.NoPadding,
        iv: CryptoJS.lib.WordArray.create(null, 16)
      };
      return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
    }
    function getEncryptionKeyR5(generateRandomWordArray) {
      return generateRandomWordArray(32);
    }
    function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
      const cipher = CryptoJS.lib.WordArray.create([lsbFirstWord(permissions), 4294967295, 1415668834], 12).concat(generateRandomWordArray(4));
      const options = {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.NoPadding
      };
      return CryptoJS.AES.encrypt(cipher, encryptionKey, options).ciphertext;
    }
    function processPasswordR2R3R4(password = "") {
      const out = Buffer.alloc(32);
      const length = password.length;
      let index = 0;
      while (index < length && index < 32) {
        const code = password.charCodeAt(index);
        if (code > 255) {
          throw new Error("Password contains one or more invalid characters.");
        }
        out[index] = code;
        index++;
      }
      while (index < 32) {
        out[index] = PASSWORD_PADDING[index - length];
        index++;
      }
      return CryptoJS.lib.WordArray.create(out);
    }
    function processPasswordR5(password = "") {
      password = unescape(encodeURIComponent(saslprep(password)));
      const length = Math.min(127, password.length);
      const out = Buffer.alloc(length);
      for (let i2 = 0; i2 < length; i2++) {
        out[i2] = password.charCodeAt(i2);
      }
      return CryptoJS.lib.WordArray.create(out);
    }
    function lsbFirstWord(data) {
      return (data & 255) << 24 | (data & 65280) << 8 | data >> 8 & 65280 | data >> 24 & 255;
    }
    function wordArrayToBuffer(wordArray) {
      const byteArray = [];
      for (let i2 = 0; i2 < wordArray.sigBytes; i2++) {
        byteArray.push(wordArray.words[Math.floor(i2 / 4)] >> 8 * (3 - i2 % 4) & 255);
      }
      return Buffer.from(byteArray);
    }
    var PASSWORD_PADDING = [40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122];
    var {
      number: number$2
    } = PDFObject;
    var PDFGradient$1 = class {
      constructor(doc) {
        this.doc = doc;
        this.stops = [];
        this.embedded = false;
        this.transform = [1, 0, 0, 1, 0, 0];
      }
      stop(pos, color, opacity) {
        if (opacity == null) {
          opacity = 1;
        }
        color = this.doc._normalizeColor(color);
        if (this.stops.length === 0) {
          if (color.length === 3) {
            this._colorSpace = "DeviceRGB";
          } else if (color.length === 4) {
            this._colorSpace = "DeviceCMYK";
          } else if (color.length === 1) {
            this._colorSpace = "DeviceGray";
          } else {
            throw new Error("Unknown color space");
          }
        } else if (this._colorSpace === "DeviceRGB" && color.length !== 3 || this._colorSpace === "DeviceCMYK" && color.length !== 4 || this._colorSpace === "DeviceGray" && color.length !== 1) {
          throw new Error("All gradient stops must use the same color space");
        }
        opacity = Math.max(0, Math.min(1, opacity));
        this.stops.push([pos, color, opacity]);
        return this;
      }
      setTransform(m11, m12, m21, m22, dx, dy) {
        this.transform = [m11, m12, m21, m22, dx, dy];
        return this;
      }
      embed(m2) {
        let fn;
        const stopsLength = this.stops.length;
        if (stopsLength === 0) {
          return;
        }
        this.embedded = true;
        this.matrix = m2;
        const last2 = this.stops[stopsLength - 1];
        if (last2[0] < 1) {
          this.stops.push([1, last2[1], last2[2]]);
        }
        const bounds = [];
        const encode = [];
        const stops = [];
        for (let i2 = 0; i2 < stopsLength - 1; i2++) {
          encode.push(0, 1);
          if (i2 + 2 !== stopsLength) {
            bounds.push(this.stops[i2 + 1][0]);
          }
          fn = this.doc.ref({
            FunctionType: 2,
            Domain: [0, 1],
            C0: this.stops[i2 + 0][1],
            C1: this.stops[i2 + 1][1],
            N: 1
          });
          stops.push(fn);
          fn.end();
        }
        if (stopsLength === 1) {
          fn = stops[0];
        } else {
          fn = this.doc.ref({
            FunctionType: 3,
            Domain: [0, 1],
            Functions: stops,
            Bounds: bounds,
            Encode: encode
          });
          fn.end();
        }
        this.id = `Sh${++this.doc._gradCount}`;
        const shader = this.shader(fn);
        shader.end();
        const pattern2 = this.doc.ref({
          Type: "Pattern",
          PatternType: 2,
          Shading: shader,
          Matrix: this.matrix.map(number$2)
        });
        pattern2.end();
        if (this.stops.some((stop) => stop[2] < 1)) {
          let grad = this.opacityGradient();
          grad._colorSpace = "DeviceGray";
          for (let stop of this.stops) {
            grad.stop(stop[0], [stop[2]]);
          }
          grad = grad.embed(this.matrix);
          const pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
          const form = this.doc.ref({
            Type: "XObject",
            Subtype: "Form",
            FormType: 1,
            BBox: pageBBox,
            Group: {
              Type: "Group",
              S: "Transparency",
              CS: "DeviceGray"
            },
            Resources: {
              ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
              Pattern: {
                Sh1: grad
              }
            }
          });
          form.write("/Pattern cs /Sh1 scn");
          form.end(`${pageBBox.join(" ")} re f`);
          const gstate = this.doc.ref({
            Type: "ExtGState",
            SMask: {
              Type: "Mask",
              S: "Luminosity",
              G: form
            }
          });
          gstate.end();
          const opacityPattern = this.doc.ref({
            Type: "Pattern",
            PatternType: 1,
            PaintType: 1,
            TilingType: 2,
            BBox: pageBBox,
            XStep: pageBBox[2],
            YStep: pageBBox[3],
            Resources: {
              ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
              Pattern: {
                Sh1: pattern2
              },
              ExtGState: {
                Gs1: gstate
              }
            }
          });
          opacityPattern.write("/Gs1 gs /Pattern cs /Sh1 scn");
          opacityPattern.end(`${pageBBox.join(" ")} re f`);
          this.doc.page.patterns[this.id] = opacityPattern;
        } else {
          this.doc.page.patterns[this.id] = pattern2;
        }
        return pattern2;
      }
      apply(stroke) {
        const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
        const [m11, m12, m21, m22, dx, dy] = this.transform;
        const m6 = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
        if (!this.embedded || m6.join(" ") !== this.matrix.join(" ")) {
          this.embed(m6);
        }
        this.doc._setColorSpace("Pattern", stroke);
        const op = stroke ? "SCN" : "scn";
        return this.doc.addContent(`/${this.id} ${op}`);
      }
    };
    var PDFLinearGradient$1 = class _PDFLinearGradient$1 extends PDFGradient$1 {
      constructor(doc, x1, y1, x2, y2) {
        super(doc);
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
      }
      shader(fn) {
        return this.doc.ref({
          ShadingType: 2,
          ColorSpace: this._colorSpace,
          Coords: [this.x1, this.y1, this.x2, this.y2],
          Function: fn,
          Extend: [true, true]
        });
      }
      opacityGradient() {
        return new _PDFLinearGradient$1(this.doc, this.x1, this.y1, this.x2, this.y2);
      }
    };
    var PDFRadialGradient$1 = class _PDFRadialGradient$1 extends PDFGradient$1 {
      constructor(doc, x1, y1, r1, x2, y2, r2) {
        super(doc);
        this.doc = doc;
        this.x1 = x1;
        this.y1 = y1;
        this.r1 = r1;
        this.x2 = x2;
        this.y2 = y2;
        this.r2 = r2;
      }
      shader(fn) {
        return this.doc.ref({
          ShadingType: 3,
          ColorSpace: this._colorSpace,
          Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
          Function: fn,
          Extend: [true, true]
        });
      }
      opacityGradient() {
        return new _PDFRadialGradient$1(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
      }
    };
    var Gradient = {
      PDFGradient: PDFGradient$1,
      PDFLinearGradient: PDFLinearGradient$1,
      PDFRadialGradient: PDFRadialGradient$1
    };
    var underlyingColorSpaces = ["DeviceCMYK", "DeviceRGB"];
    var PDFTilingPattern$1 = class {
      constructor(doc, bBox, xStep, yStep, stream2) {
        this.doc = doc;
        this.bBox = bBox;
        this.xStep = xStep;
        this.yStep = yStep;
        this.stream = stream2;
      }
      createPattern() {
        const resources = this.doc.ref();
        resources.end();
        const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
        const [m11, m12, m21, m22, dx, dy] = [1, 0, 0, 1, 0, 0];
        const m6 = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
        const pattern2 = this.doc.ref({
          Type: "Pattern",
          PatternType: 1,
          PaintType: 2,
          TilingType: 2,
          BBox: this.bBox,
          XStep: this.xStep,
          YStep: this.yStep,
          Matrix: m6.map((v) => +v.toFixed(5)),
          Resources: resources
        });
        pattern2.end(this.stream);
        return pattern2;
      }
      embedPatternColorSpaces() {
        underlyingColorSpaces.forEach((csName) => {
          const csId = this.getPatternColorSpaceId(csName);
          if (this.doc.page.colorSpaces[csId]) return;
          const cs = this.doc.ref(["Pattern", csName]);
          cs.end();
          this.doc.page.colorSpaces[csId] = cs;
        });
      }
      getPatternColorSpaceId(underlyingColorspace) {
        return `CsP${underlyingColorspace}`;
      }
      embed() {
        if (!this.id) {
          this.doc._patternCount = this.doc._patternCount + 1;
          this.id = "P" + this.doc._patternCount;
          this.pattern = this.createPattern();
        }
        if (!this.doc.page.patterns[this.id]) {
          this.doc.page.patterns[this.id] = this.pattern;
        }
      }
      apply(stroke, patternColor) {
        this.embedPatternColorSpaces();
        this.embed();
        const normalizedColor = this.doc._normalizeColor(patternColor);
        if (!normalizedColor) throw Error(`invalid pattern color. (value: ${patternColor})`);
        const csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));
        this.doc._setColorSpace(csId, stroke);
        const op = stroke ? "SCN" : "scn";
        return this.doc.addContent(`${normalizedColor.join(" ")} /${this.id} ${op}`);
      }
    };
    var pattern = {
      PDFTilingPattern: PDFTilingPattern$1
    };
    var {
      PDFGradient,
      PDFLinearGradient,
      PDFRadialGradient
    } = Gradient;
    var {
      PDFTilingPattern
    } = pattern;
    var ColorMixin = {
      initColor() {
        this.spotColors = {};
        this._opacityRegistry = {};
        this._opacityCount = 0;
        this._patternCount = 0;
        this._gradCount = 0;
      },
      _normalizeColor(color) {
        if (typeof color === "string") {
          if (color.charAt(0) === "#") {
            if (color.length === 4) {
              color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
            }
            const hex = parseInt(color.slice(1), 16);
            color = [hex >> 16, hex >> 8 & 255, hex & 255];
          } else if (namedColors[color]) {
            color = namedColors[color];
          } else if (this.spotColors[color]) {
            return this.spotColors[color];
          }
        }
        if (Array.isArray(color)) {
          if (color.length === 3) {
            color = color.map((part) => part / 255);
          } else if (color.length === 4) {
            color = color.map((part) => part / 100);
          }
          return color;
        }
        return null;
      },
      _setColor(color, stroke) {
        if (color instanceof PDFGradient) {
          color.apply(stroke);
          return true;
        } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern) {
          color[0].apply(stroke, color[1]);
          return true;
        }
        return this._setColorCore(color, stroke);
      },
      _setColorCore(color, stroke) {
        color = this._normalizeColor(color);
        if (!color) {
          return false;
        }
        const op = stroke ? "SCN" : "scn";
        const space = this._getColorSpace(color);
        this._setColorSpace(space, stroke);
        if (color instanceof SpotColor) {
          this.page.colorSpaces[color.id] = color.ref;
          this.addContent(`1 ${op}`);
        } else {
          this.addContent(`${color.join(" ")} ${op}`);
        }
        return true;
      },
      _setColorSpace(space, stroke) {
        const op = stroke ? "CS" : "cs";
        return this.addContent(`/${space} ${op}`);
      },
      _getColorSpace(color) {
        if (color instanceof SpotColor) {
          return color.id;
        }
        return color.length === 4 ? "DeviceCMYK" : "DeviceRGB";
      },
      fillColor(color, opacity) {
        const set = this._setColor(color, false);
        if (set) {
          this.fillOpacity(opacity);
        }
        this._fillColor = [color, opacity];
        return this;
      },
      strokeColor(color, opacity) {
        const set = this._setColor(color, true);
        if (set) {
          this.strokeOpacity(opacity);
        }
        return this;
      },
      opacity(opacity) {
        this._doOpacity(opacity, opacity);
        return this;
      },
      fillOpacity(opacity) {
        this._doOpacity(opacity, null);
        return this;
      },
      strokeOpacity(opacity) {
        this._doOpacity(null, opacity);
        return this;
      },
      _doOpacity(fillOpacity, strokeOpacity) {
        let dictionary, name;
        if (fillOpacity == null && strokeOpacity == null) {
          return;
        }
        if (fillOpacity != null) {
          fillOpacity = Math.max(0, Math.min(1, fillOpacity));
        }
        if (strokeOpacity != null) {
          strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
        }
        const key = `${fillOpacity}_${strokeOpacity}`;
        if (this._opacityRegistry[key]) {
          [dictionary, name] = this._opacityRegistry[key];
        } else {
          dictionary = {
            Type: "ExtGState"
          };
          if (fillOpacity != null) {
            dictionary.ca = fillOpacity;
          }
          if (strokeOpacity != null) {
            dictionary.CA = strokeOpacity;
          }
          dictionary = this.ref(dictionary);
          dictionary.end();
          const id = ++this._opacityCount;
          name = `Gs${id}`;
          this._opacityRegistry[key] = [dictionary, name];
        }
        this.page.ext_gstates[name] = dictionary;
        return this.addContent(`/${name} gs`);
      },
      linearGradient(x1, y1, x2, y2) {
        return new PDFLinearGradient(this, x1, y1, x2, y2);
      },
      radialGradient(x1, y1, r1, x2, y2, r2) {
        return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);
      },
      pattern(bbox, xStep, yStep, stream2) {
        return new PDFTilingPattern(this, bbox, xStep, yStep, stream2);
      },
      addSpotColor(name, C, M, Y, K) {
        const color = new SpotColor(this, name, C, M, Y, K);
        this.spotColors[name] = color;
        return this;
      }
    };
    var namedColors = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      grey: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };
    var cx;
    var cy;
    var px;
    var py;
    var sx;
    var sy;
    cx = cy = px = py = sx = sy = 0;
    var parameters = {
      A: 7,
      a: 7,
      C: 6,
      c: 6,
      H: 1,
      h: 1,
      L: 2,
      l: 2,
      M: 2,
      m: 2,
      Q: 4,
      q: 4,
      S: 4,
      s: 4,
      T: 2,
      t: 2,
      V: 1,
      v: 1,
      Z: 0,
      z: 0
    };
    var parse = function(path) {
      let cmd;
      const ret = [];
      let args = [];
      let curArg = "";
      let foundDecimal = false;
      let params = 0;
      for (let c of path) {
        if (parameters[c] != null) {
          params = parameters[c];
          if (cmd) {
            if (curArg.length > 0) {
              args[args.length] = +curArg;
            }
            ret[ret.length] = {
              cmd,
              args
            };
            args = [];
            curArg = "";
            foundDecimal = false;
          }
          cmd = c;
        } else if ([" ", ","].includes(c) || c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== "e" || c === "." && foundDecimal) {
          if (curArg.length === 0) {
            continue;
          }
          if (args.length === params) {
            ret[ret.length] = {
              cmd,
              args
            };
            args = [+curArg];
            if (cmd === "M") {
              cmd = "L";
            }
            if (cmd === "m") {
              cmd = "l";
            }
          } else {
            args[args.length] = +curArg;
          }
          foundDecimal = c === ".";
          curArg = ["-", "."].includes(c) ? c : "";
        } else {
          curArg += c;
          if (c === ".") {
            foundDecimal = true;
          }
        }
      }
      if (curArg.length > 0) {
        if (args.length === params) {
          ret[ret.length] = {
            cmd,
            args
          };
          args = [+curArg];
          if (cmd === "M") {
            cmd = "L";
          }
          if (cmd === "m") {
            cmd = "l";
          }
        } else {
          args[args.length] = +curArg;
        }
      }
      ret[ret.length] = {
        cmd,
        args
      };
      return ret;
    };
    var apply = function(commands, doc) {
      cx = cy = px = py = sx = sy = 0;
      for (let i2 = 0; i2 < commands.length; i2++) {
        const c = commands[i2];
        if (typeof runners[c.cmd] === "function") {
          runners[c.cmd](doc, c.args);
        }
      }
    };
    var runners = {
      M(doc, a) {
        cx = a[0];
        cy = a[1];
        px = py = null;
        sx = cx;
        sy = cy;
        return doc.moveTo(cx, cy);
      },
      m(doc, a) {
        cx += a[0];
        cy += a[1];
        px = py = null;
        sx = cx;
        sy = cy;
        return doc.moveTo(cx, cy);
      },
      C(doc, a) {
        cx = a[4];
        cy = a[5];
        px = a[2];
        py = a[3];
        return doc.bezierCurveTo(...a);
      },
      c(doc, a) {
        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
        px = cx + a[2];
        py = cy + a[3];
        cx += a[4];
        return cy += a[5];
      },
      S(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        }
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
        px = a[0];
        py = a[1];
        cx = a[2];
        return cy = a[3];
      },
      s(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        }
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
        px = cx + a[0];
        py = cy + a[1];
        cx += a[2];
        return cy += a[3];
      },
      Q(doc, a) {
        px = a[0];
        py = a[1];
        cx = a[2];
        cy = a[3];
        return doc.quadraticCurveTo(a[0], a[1], cx, cy);
      },
      q(doc, a) {
        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
        px = cx + a[0];
        py = cy + a[1];
        cx += a[2];
        return cy += a[3];
      },
      T(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        } else {
          px = cx - (px - cx);
          py = cy - (py - cy);
        }
        doc.quadraticCurveTo(px, py, a[0], a[1]);
        px = cx - (px - cx);
        py = cy - (py - cy);
        cx = a[0];
        return cy = a[1];
      },
      t(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        } else {
          px = cx - (px - cx);
          py = cy - (py - cy);
        }
        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
        cx += a[0];
        return cy += a[1];
      },
      A(doc, a) {
        solveArc(doc, cx, cy, a);
        cx = a[5];
        return cy = a[6];
      },
      a(doc, a) {
        a[5] += cx;
        a[6] += cy;
        solveArc(doc, cx, cy, a);
        cx = a[5];
        return cy = a[6];
      },
      L(doc, a) {
        cx = a[0];
        cy = a[1];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      l(doc, a) {
        cx += a[0];
        cy += a[1];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      H(doc, a) {
        cx = a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      h(doc, a) {
        cx += a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      V(doc, a) {
        cy = a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      v(doc, a) {
        cy += a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      Z(doc) {
        doc.closePath();
        cx = sx;
        return cy = sy;
      },
      z(doc) {
        doc.closePath();
        cx = sx;
        return cy = sy;
      }
    };
    var solveArc = function(doc, x2, y, coords) {
      const [rx, ry, rot, large, sweep, ex, ey] = coords;
      const segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x2, y);
      for (let seg of segs) {
        const bez = segmentToBezier(...seg);
        doc.bezierCurveTo(...bez);
      }
    };
    var arcToSegments = function(x2, y, rx, ry, large, sweep, rotateX, ox, oy) {
      const th = rotateX * (Math.PI / 180);
      const sin_th = Math.sin(th);
      const cos_th = Math.cos(th);
      rx = Math.abs(rx);
      ry = Math.abs(ry);
      px = cos_th * (ox - x2) * 0.5 + sin_th * (oy - y) * 0.5;
      py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x2) * 0.5;
      let pl = px * px / (rx * rx) + py * py / (ry * ry);
      if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
      }
      const a00 = cos_th / rx;
      const a01 = sin_th / rx;
      const a10 = -sin_th / ry;
      const a11 = cos_th / ry;
      const x0 = a00 * ox + a01 * oy;
      const y0 = a10 * ox + a11 * oy;
      const x1 = a00 * x2 + a01 * y;
      const y1 = a10 * x2 + a11 * y;
      const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
      let sfactor_sq = 1 / d - 0.25;
      if (sfactor_sq < 0) {
        sfactor_sq = 0;
      }
      let sfactor = Math.sqrt(sfactor_sq);
      if (sweep === large) {
        sfactor = -sfactor;
      }
      const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
      const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
      const th0 = Math.atan2(y0 - yc, x0 - xc);
      const th1 = Math.atan2(y1 - yc, x1 - xc);
      let th_arc = th1 - th0;
      if (th_arc < 0 && sweep === 1) {
        th_arc += 2 * Math.PI;
      } else if (th_arc > 0 && sweep === 0) {
        th_arc -= 2 * Math.PI;
      }
      const segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 1e-3)));
      const result = [];
      for (let i2 = 0; i2 < segments; i2++) {
        const th2 = th0 + i2 * th_arc / segments;
        const th3 = th0 + (i2 + 1) * th_arc / segments;
        result[i2] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
      }
      return result;
    };
    var segmentToBezier = function(cx2, cy2, th0, th1, rx, ry, sin_th, cos_th) {
      const a00 = cos_th * rx;
      const a01 = -sin_th * ry;
      const a10 = sin_th * rx;
      const a11 = cos_th * ry;
      const th_half = 0.5 * (th1 - th0);
      const t2 = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
      const x1 = cx2 + Math.cos(th0) - t2 * Math.sin(th0);
      const y1 = cy2 + Math.sin(th0) + t2 * Math.cos(th0);
      const x3 = cx2 + Math.cos(th1);
      const y3 = cy2 + Math.sin(th1);
      const x2 = x3 + t2 * Math.sin(th1);
      const y2 = y3 - t2 * Math.cos(th1);
      return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
    };
    var SVGPath = class {
      static apply(doc, path) {
        const commands = parse(path);
        apply(commands, doc);
      }
    };
    var {
      number: number$1
    } = PDFObject;
    var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
    var VectorMixin = {
      initVector() {
        this._ctm = [1, 0, 0, 1, 0, 0];
        this._ctmStack = [];
      },
      save() {
        this._ctmStack.push(this._ctm.slice());
        return this.addContent("q");
      },
      restore() {
        this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
        return this.addContent("Q");
      },
      closePath() {
        return this.addContent("h");
      },
      lineWidth(w) {
        return this.addContent(`${number$1(w)} w`);
      },
      _CAP_STYLES: {
        BUTT: 0,
        ROUND: 1,
        SQUARE: 2
      },
      lineCap(c) {
        if (typeof c === "string") {
          c = this._CAP_STYLES[c.toUpperCase()];
        }
        return this.addContent(`${c} J`);
      },
      _JOIN_STYLES: {
        MITER: 0,
        ROUND: 1,
        BEVEL: 2
      },
      lineJoin(j) {
        if (typeof j === "string") {
          j = this._JOIN_STYLES[j.toUpperCase()];
        }
        return this.addContent(`${j} j`);
      },
      miterLimit(m2) {
        return this.addContent(`${number$1(m2)} M`);
      },
      dash(length, options = {}) {
        const originalLength = length;
        if (!Array.isArray(length)) {
          length = [length, options.space || length];
        }
        const valid = length.every((x2) => Number.isFinite(x2) && x2 > 0);
        if (!valid) {
          throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than zero`);
        }
        length = length.map(number$1).join(" ");
        return this.addContent(`[${length}] ${number$1(options.phase || 0)} d`);
      },
      undash() {
        return this.addContent("[] 0 d");
      },
      moveTo(x2, y) {
        return this.addContent(`${number$1(x2)} ${number$1(y)} m`);
      },
      lineTo(x2, y) {
        return this.addContent(`${number$1(x2)} ${number$1(y)} l`);
      },
      bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x2, y) {
        return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x2)} ${number$1(y)} c`);
      },
      quadraticCurveTo(cpx, cpy, x2, y) {
        return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x2)} ${number$1(y)} v`);
      },
      rect(x2, y, w, h2) {
        return this.addContent(`${number$1(x2)} ${number$1(y)} ${number$1(w)} ${number$1(h2)} re`);
      },
      roundedRect(x2, y, w, h2, r2) {
        if (r2 == null) {
          r2 = 0;
        }
        r2 = Math.min(r2, 0.5 * w, 0.5 * h2);
        const c = r2 * (1 - KAPPA);
        this.moveTo(x2 + r2, y);
        this.lineTo(x2 + w - r2, y);
        this.bezierCurveTo(x2 + w - c, y, x2 + w, y + c, x2 + w, y + r2);
        this.lineTo(x2 + w, y + h2 - r2);
        this.bezierCurveTo(x2 + w, y + h2 - c, x2 + w - c, y + h2, x2 + w - r2, y + h2);
        this.lineTo(x2 + r2, y + h2);
        this.bezierCurveTo(x2 + c, y + h2, x2, y + h2 - c, x2, y + h2 - r2);
        this.lineTo(x2, y + r2);
        this.bezierCurveTo(x2, y + c, x2 + c, y, x2 + r2, y);
        return this.closePath();
      },
      ellipse(x2, y, r1, r2) {
        if (r2 == null) {
          r2 = r1;
        }
        x2 -= r1;
        y -= r2;
        const ox = r1 * KAPPA;
        const oy = r2 * KAPPA;
        const xe = x2 + r1 * 2;
        const ye = y + r2 * 2;
        const xm = x2 + r1;
        const ym = y + r2;
        this.moveTo(x2, ym);
        this.bezierCurveTo(x2, ym - oy, xm - ox, y, xm, y);
        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
        this.bezierCurveTo(xm - ox, ye, x2, ym + oy, x2, ym);
        return this.closePath();
      },
      circle(x2, y, radius) {
        return this.ellipse(x2, y, radius);
      },
      arc(x2, y, radius, startAngle, endAngle, anticlockwise) {
        if (anticlockwise == null) {
          anticlockwise = false;
        }
        const TWO_PI = 2 * Math.PI;
        const HALF_PI = 0.5 * Math.PI;
        let deltaAng = endAngle - startAngle;
        if (Math.abs(deltaAng) > TWO_PI) {
          deltaAng = TWO_PI;
        } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
          const dir = anticlockwise ? -1 : 1;
          deltaAng = dir * TWO_PI + deltaAng;
        }
        const numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
        const segAng = deltaAng / numSegs;
        const handleLen = segAng / HALF_PI * KAPPA * radius;
        let curAng = startAngle;
        let deltaCx = -Math.sin(curAng) * handleLen;
        let deltaCy = Math.cos(curAng) * handleLen;
        let ax = x2 + Math.cos(curAng) * radius;
        let ay = y + Math.sin(curAng) * radius;
        this.moveTo(ax, ay);
        for (let segIdx = 0; segIdx < numSegs; segIdx++) {
          const cp1x = ax + deltaCx;
          const cp1y = ay + deltaCy;
          curAng += segAng;
          ax = x2 + Math.cos(curAng) * radius;
          ay = y + Math.sin(curAng) * radius;
          deltaCx = -Math.sin(curAng) * handleLen;
          deltaCy = Math.cos(curAng) * handleLen;
          const cp2x = ax - deltaCx;
          const cp2y = ay - deltaCy;
          this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
        }
        return this;
      },
      polygon(...points) {
        this.moveTo(...points.shift() || []);
        for (let point of points) {
          this.lineTo(...point || []);
        }
        return this.closePath();
      },
      path(path) {
        SVGPath.apply(this, path);
        return this;
      },
      _windingRule(rule) {
        if (/even-?odd/.test(rule)) {
          return "*";
        }
        return "";
      },
      fill(color, rule) {
        if (/(even-?odd)|(non-?zero)/.test(color)) {
          rule = color;
          color = null;
        }
        if (color) {
          this.fillColor(color);
        }
        return this.addContent(`f${this._windingRule(rule)}`);
      },
      stroke(color) {
        if (color) {
          this.strokeColor(color);
        }
        return this.addContent("S");
      },
      fillAndStroke(fillColor, strokeColor, rule) {
        if (strokeColor == null) {
          strokeColor = fillColor;
        }
        const isFillRule = /(even-?odd)|(non-?zero)/;
        if (isFillRule.test(fillColor)) {
          rule = fillColor;
          fillColor = null;
        }
        if (isFillRule.test(strokeColor)) {
          rule = strokeColor;
          strokeColor = fillColor;
        }
        if (fillColor) {
          this.fillColor(fillColor);
          this.strokeColor(strokeColor);
        }
        return this.addContent(`B${this._windingRule(rule)}`);
      },
      clip(rule) {
        return this.addContent(`W${this._windingRule(rule)} n`);
      },
      transform(m11, m12, m21, m22, dx, dy) {
        if (m11 === 1 && m12 === 0 && m21 === 0 && m22 === 1 && dx === 0 && dy === 0) {
          return this;
        }
        const m2 = this._ctm;
        const [m0, m1, m23, m3, m4, m5] = m2;
        m2[0] = m0 * m11 + m23 * m12;
        m2[1] = m1 * m11 + m3 * m12;
        m2[2] = m0 * m21 + m23 * m22;
        m2[3] = m1 * m21 + m3 * m22;
        m2[4] = m0 * dx + m23 * dy + m4;
        m2[5] = m1 * dx + m3 * dy + m5;
        const values = [m11, m12, m21, m22, dx, dy].map((v) => number$1(v)).join(" ");
        return this.addContent(`${values} cm`);
      },
      translate(x2, y) {
        return this.transform(1, 0, 0, 1, x2, y);
      },
      rotate(angle, options = {}) {
        let y;
        const rad = angle * Math.PI / 180;
        const cos = Math.cos(rad);
        const sin = Math.sin(rad);
        let x2 = y = 0;
        if (options.origin != null) {
          [x2, y] = options.origin;
          const x1 = x2 * cos - y * sin;
          const y1 = x2 * sin + y * cos;
          x2 -= x1;
          y -= y1;
        }
        return this.transform(cos, sin, -sin, cos, x2, y);
      },
      scale(xFactor, yFactor, options = {}) {
        let y;
        if (yFactor == null) {
          yFactor = xFactor;
        }
        if (typeof yFactor === "object") {
          options = yFactor;
          yFactor = xFactor;
        }
        let x2 = y = 0;
        if (options.origin != null) {
          [x2, y] = options.origin;
          x2 -= xFactor * x2;
          y -= yFactor * y;
        }
        return this.transform(xFactor, 0, 0, yFactor, x2, y);
      }
    };
    var WIN_ANSI_MAP = {
      402: 131,
      8211: 150,
      8212: 151,
      8216: 145,
      8217: 146,
      8218: 130,
      8220: 147,
      8221: 148,
      8222: 132,
      8224: 134,
      8225: 135,
      8226: 149,
      8230: 133,
      8364: 128,
      8240: 137,
      8249: 139,
      8250: 155,
      710: 136,
      8482: 153,
      338: 140,
      339: 156,
      732: 152,
      352: 138,
      353: 154,
      376: 159,
      381: 142,
      382: 158
    };
    var characters = `.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
  
space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question
  
at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore
  
grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef
  
Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis
  
space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown
  
Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls
  
agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis`.split(/\s+/);
    var AFMFont = class {
      constructor(contents) {
        this.attributes = {};
        this.glyphWidths = {};
        this.boundingBoxes = {};
        this.kernPairs = {};
        this.parse(contents);
        this.bbox = this.attributes["FontBBox"].split(/\s+/).map((e2) => +e2);
        this.ascender = +(this.attributes["Ascender"] || 0);
        this.descender = +(this.attributes["Descender"] || 0);
        this.xHeight = +(this.attributes["XHeight"] || 0);
        this.capHeight = +(this.attributes["CapHeight"] || 0);
        this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
      }
      parse(contents) {
        let section = "";
        for (let line of contents.split("\n")) {
          var match;
          var a;
          if (match = line.match(/^Start(\w+)/)) {
            section = match[1];
            continue;
          } else if (match = line.match(/^End(\w+)/)) {
            section = "";
            continue;
          }
          switch (section) {
            case "FontMetrics":
              match = line.match(/(^\w+)\s+(.*)/);
              var key = match[1];
              var value = match[2];
              if (a = this.attributes[key]) {
                if (!Array.isArray(a)) {
                  a = this.attributes[key] = [a];
                }
                a.push(value);
              } else {
                this.attributes[key] = value;
              }
              break;
            case "CharMetrics":
              if (!/^CH?\s/.test(line)) {
                continue;
              }
              var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
              this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
              break;
            case "KernPairs":
              match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
              if (match) {
                this.kernPairs[match[1] + "\0" + match[2]] = parseInt(match[3]);
              }
              break;
          }
        }
      }
      encodeText(text) {
        const res = [];
        for (let i2 = 0, len = text.length; i2 < len; i2++) {
          let char = text.charCodeAt(i2);
          char = WIN_ANSI_MAP[char] || char;
          res.push(char.toString(16));
        }
        return res;
      }
      glyphsForString(string) {
        const glyphs = [];
        for (let i2 = 0, len = string.length; i2 < len; i2++) {
          const charCode = string.charCodeAt(i2);
          glyphs.push(this.characterToGlyph(charCode));
        }
        return glyphs;
      }
      characterToGlyph(character) {
        return characters[WIN_ANSI_MAP[character] || character] || ".notdef";
      }
      widthOfGlyph(glyph) {
        return this.glyphWidths[glyph] || 0;
      }
      getKernPair(left, right) {
        return this.kernPairs[left + "\0" + right] || 0;
      }
      advancesForGlyphs(glyphs) {
        const advances = [];
        for (let index = 0; index < glyphs.length; index++) {
          const left = glyphs[index];
          const right = glyphs[index + 1];
          advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
        }
        return advances;
      }
    };
    var PDFFont = class {
      constructor() {
      }
      encode() {
        throw new Error("Must be implemented by subclasses");
      }
      widthOfString() {
        throw new Error("Must be implemented by subclasses");
      }
      ref() {
        return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
      }
      finalize() {
        if (this.embedded || this.dictionary == null) {
          return;
        }
        this.embed();
        this.embedded = true;
      }
      embed() {
        throw new Error("Must be implemented by subclasses");
      }
      lineHeight(size, includeGap = false) {
        const gap = includeGap ? this.lineGap : 0;
        return (this.ascender + gap - this.descender) / 1e3 * size;
      }
    };
    var STANDARD_FONTS = {
      Courier() {
        return fs2.readFileSync(__dirname + "/data/Courier.afm", "utf8");
      },
      "Courier-Bold"() {
        return fs2.readFileSync(__dirname + "/data/Courier-Bold.afm", "utf8");
      },
      "Courier-Oblique"() {
        return fs2.readFileSync(__dirname + "/data/Courier-Oblique.afm", "utf8");
      },
      "Courier-BoldOblique"() {
        return fs2.readFileSync(__dirname + "/data/Courier-BoldOblique.afm", "utf8");
      },
      Helvetica() {
        return fs2.readFileSync(__dirname + "/data/Helvetica.afm", "utf8");
      },
      "Helvetica-Bold"() {
        return fs2.readFileSync(__dirname + "/data/Helvetica-Bold.afm", "utf8");
      },
      "Helvetica-Oblique"() {
        return fs2.readFileSync(__dirname + "/data/Helvetica-Oblique.afm", "utf8");
      },
      "Helvetica-BoldOblique"() {
        return fs2.readFileSync(__dirname + "/data/Helvetica-BoldOblique.afm", "utf8");
      },
      "Times-Roman"() {
        return fs2.readFileSync(__dirname + "/data/Times-Roman.afm", "utf8");
      },
      "Times-Bold"() {
        return fs2.readFileSync(__dirname + "/data/Times-Bold.afm", "utf8");
      },
      "Times-Italic"() {
        return fs2.readFileSync(__dirname + "/data/Times-Italic.afm", "utf8");
      },
      "Times-BoldItalic"() {
        return fs2.readFileSync(__dirname + "/data/Times-BoldItalic.afm", "utf8");
      },
      Symbol() {
        return fs2.readFileSync(__dirname + "/data/Symbol.afm", "utf8");
      },
      ZapfDingbats() {
        return fs2.readFileSync(__dirname + "/data/ZapfDingbats.afm", "utf8");
      }
    };
    var StandardFont = class extends PDFFont {
      constructor(document2, name, id) {
        super();
        this.document = document2;
        this.name = name;
        this.id = id;
        this.font = new AFMFont(STANDARD_FONTS[this.name]());
        ({
          ascender: this.ascender,
          descender: this.descender,
          bbox: this.bbox,
          lineGap: this.lineGap,
          xHeight: this.xHeight,
          capHeight: this.capHeight
        } = this.font);
      }
      embed() {
        this.dictionary.data = {
          Type: "Font",
          BaseFont: this.name,
          Subtype: "Type1",
          Encoding: "WinAnsiEncoding"
        };
        return this.dictionary.end();
      }
      encode(text) {
        const encoded = this.font.encodeText(text);
        const glyphs = this.font.glyphsForString(`${text}`);
        const advances = this.font.advancesForGlyphs(glyphs);
        const positions = [];
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          const glyph = glyphs[i2];
          positions.push({
            xAdvance: advances[i2],
            yAdvance: 0,
            xOffset: 0,
            yOffset: 0,
            advanceWidth: this.font.widthOfGlyph(glyph)
          });
        }
        return [encoded, positions];
      }
      widthOfString(string, size) {
        const glyphs = this.font.glyphsForString(`${string}`);
        const advances = this.font.advancesForGlyphs(glyphs);
        let width = 0;
        for (let advance of advances) {
          width += advance;
        }
        const scale = size / 1e3;
        return width * scale;
      }
      static isStandardFont(name) {
        return name in STANDARD_FONTS;
      }
    };
    var toHex = function(num) {
      return `0000${num.toString(16)}`.slice(-4);
    };
    var EmbeddedFont = class extends PDFFont {
      constructor(document2, font, id) {
        super();
        this.document = document2;
        this.font = font;
        this.id = id;
        this.subset = this.font.createSubset();
        this.unicode = [[0]];
        this.widths = [this.font.getGlyph(0).advanceWidth];
        this.name = this.font.postscriptName;
        this.scale = 1e3 / this.font.unitsPerEm;
        this.ascender = this.font.ascent * this.scale;
        this.descender = this.font.descent * this.scale;
        this.xHeight = this.font.xHeight * this.scale;
        this.capHeight = this.font.capHeight * this.scale;
        this.lineGap = this.font.lineGap * this.scale;
        this.bbox = this.font.bbox;
        if (document2.options.fontLayoutCache !== false) {
          this.layoutCache = /* @__PURE__ */ Object.create(null);
        }
      }
      layoutRun(text, features) {
        const run = this.font.layout(text, features);
        for (let i2 = 0; i2 < run.positions.length; i2++) {
          const position = run.positions[i2];
          for (let key in position) {
            position[key] *= this.scale;
          }
          position.advanceWidth = run.glyphs[i2].advanceWidth * this.scale;
        }
        return run;
      }
      layoutCached(text) {
        if (!this.layoutCache) {
          return this.layoutRun(text);
        }
        let cached;
        if (cached = this.layoutCache[text]) {
          return cached;
        }
        const run = this.layoutRun(text);
        this.layoutCache[text] = run;
        return run;
      }
      layout(text, features, onlyWidth) {
        if (features) {
          return this.layoutRun(text, features);
        }
        let glyphs = onlyWidth ? null : [];
        let positions = onlyWidth ? null : [];
        let advanceWidth = 0;
        let last2 = 0;
        let index = 0;
        while (index <= text.length) {
          var needle;
          if (index === text.length && last2 < index || (needle = text.charAt(index), [" ", "	"].includes(needle))) {
            const run = this.layoutCached(text.slice(last2, ++index));
            if (!onlyWidth) {
              glyphs = glyphs.concat(run.glyphs);
              positions = positions.concat(run.positions);
            }
            advanceWidth += run.advanceWidth;
            last2 = index;
          } else {
            index++;
          }
        }
        return {
          glyphs,
          positions,
          advanceWidth
        };
      }
      encode(text, features) {
        const {
          glyphs,
          positions
        } = this.layout(text, features);
        const res = [];
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          const glyph = glyphs[i2];
          const gid = this.subset.includeGlyph(glyph.id);
          res.push(`0000${gid.toString(16)}`.slice(-4));
          if (this.widths[gid] == null) {
            this.widths[gid] = glyph.advanceWidth * this.scale;
          }
          if (this.unicode[gid] == null) {
            this.unicode[gid] = glyph.codePoints;
          }
        }
        return [res, positions];
      }
      widthOfString(string, size, features) {
        const width = this.layout(string, features, true).advanceWidth;
        const scale = size / 1e3;
        return width * scale;
      }
      embed() {
        const isCFF = this.subset.cff != null;
        const fontFile = this.document.ref();
        if (isCFF) {
          fontFile.data.Subtype = "CIDFontType0C";
        }
        fontFile.end(this.subset.encode());
        const familyClass = ((this.font["OS/2"] != null ? this.font["OS/2"].sFamilyClass : void 0) || 0) >> 8;
        let flags = 0;
        if (this.font.post.isFixedPitch) {
          flags |= 1 << 0;
        }
        if (1 <= familyClass && familyClass <= 7) {
          flags |= 1 << 1;
        }
        flags |= 1 << 2;
        if (familyClass === 10) {
          flags |= 1 << 3;
        }
        if (this.font.head.macStyle.italic) {
          flags |= 1 << 6;
        }
        const tag = [1, 2, 3, 4, 5, 6].map((i2) => String.fromCharCode((this.id.charCodeAt(i2) || 73) + 17)).join("");
        const name = tag + "+" + this.font.postscriptName?.replaceAll(" ", "_");
        const {
          bbox
        } = this.font;
        const descriptor = this.document.ref({
          Type: "FontDescriptor",
          FontName: name,
          Flags: flags,
          FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
          ItalicAngle: this.font.italicAngle,
          Ascent: this.ascender,
          Descent: this.descender,
          CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
          XHeight: (this.font.xHeight || 0) * this.scale,
          StemV: 0
        });
        if (isCFF) {
          descriptor.data.FontFile3 = fontFile;
        } else {
          descriptor.data.FontFile2 = fontFile;
        }
        if (this.document.subset && this.document.subset === 1) {
          const CIDSet = Buffer.from("FFFFFFFFC0", "hex");
          const CIDSetRef = this.document.ref();
          CIDSetRef.write(CIDSet);
          CIDSetRef.end();
          descriptor.data.CIDSet = CIDSetRef;
        }
        descriptor.end();
        const descendantFontData = {
          Type: "Font",
          Subtype: "CIDFontType0",
          BaseFont: name,
          CIDSystemInfo: {
            Registry: new String("Adobe"),
            Ordering: new String("Identity"),
            Supplement: 0
          },
          FontDescriptor: descriptor,
          W: [0, this.widths]
        };
        if (!isCFF) {
          descendantFontData.Subtype = "CIDFontType2";
          descendantFontData.CIDToGIDMap = "Identity";
        }
        const descendantFont = this.document.ref(descendantFontData);
        descendantFont.end();
        this.dictionary.data = {
          Type: "Font",
          Subtype: "Type0",
          BaseFont: name,
          Encoding: "Identity-H",
          DescendantFonts: [descendantFont],
          ToUnicode: this.toUnicodeCmap()
        };
        return this.dictionary.end();
      }
      toUnicodeCmap() {
        const cmap = this.document.ref();
        const entries = [];
        for (let codePoints of this.unicode) {
          const encoded = [];
          for (let value of codePoints) {
            if (value > 65535) {
              value -= 65536;
              encoded.push(toHex(value >>> 10 & 1023 | 55296));
              value = 56320 | value & 1023;
            }
            encoded.push(toHex(value));
          }
          entries.push(`<${encoded.join(" ")}>`);
        }
        const chunkSize = 256;
        const chunks = Math.ceil(entries.length / chunkSize);
        const ranges = [];
        for (let i2 = 0; i2 < chunks; i2++) {
          const start = i2 * chunkSize;
          const end = Math.min((i2 + 1) * chunkSize, entries.length);
          ranges.push(`<${toHex(start)}> <${toHex(end - 1)}> [${entries.slice(start, end).join(" ")}]`);
        }
        cmap.end(`/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
1 beginbfrange
${ranges.join("\n")}
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end
end`);
        return cmap;
      }
    };
    var PDFFontFactory = class {
      static open(document2, src, family, id) {
        let font;
        if (typeof src === "string") {
          if (StandardFont.isStandardFont(src)) {
            return new StandardFont(document2, src, id);
          }
          src = fs2.readFileSync(src);
        }
        if (src instanceof Uint8Array) {
          font = fontkit.create(src, family);
        } else if (src instanceof ArrayBuffer) {
          font = fontkit.create(new Uint8Array(src), family);
        }
        if (font == null) {
          throw new Error("Not a supported font format or standard PDF font.");
        }
        return new EmbeddedFont(document2, font, id);
      }
    };
    var isEqualFont = (font1, font2) => {
      if (font1.font._tables?.head?.checkSumAdjustment !== font2.font._tables?.head?.checkSumAdjustment) {
        return false;
      }
      if (JSON.stringify(font1.font._tables?.name?.records) !== JSON.stringify(font2.font._tables?.name?.records)) {
        return false;
      }
      return true;
    };
    var FontsMixin = {
      initFonts(defaultFont = "Helvetica", defaultFontFamily = null, defaultFontSize = 12) {
        this._fontFamilies = {};
        this._fontCount = 0;
        this._fontSource = defaultFont;
        this._fontFamily = defaultFontFamily;
        this._fontSize = defaultFontSize;
        this._font = null;
        this._remSize = defaultFontSize;
        this._registeredFonts = {};
        if (defaultFont) {
          this.font(defaultFont, defaultFontFamily);
        }
      },
      font(src, family, size) {
        let cacheKey, font;
        if (typeof family === "number") {
          size = family;
          family = null;
        }
        if (typeof src === "string" && this._registeredFonts[src]) {
          cacheKey = src;
          ({
            src,
            family
          } = this._registeredFonts[src]);
        } else {
          cacheKey = family || src;
          if (typeof cacheKey !== "string") {
            cacheKey = null;
          }
        }
        this._fontSource = src;
        this._fontFamily = family;
        if (size != null) {
          this.fontSize(size);
        }
        if (font = this._fontFamilies[cacheKey]) {
          this._font = font;
          return this;
        }
        const id = `F${++this._fontCount}`;
        this._font = PDFFontFactory.open(this, src, family, id);
        if ((font = this._fontFamilies[this._font.name]) && isEqualFont(this._font, font)) {
          this._font = font;
          return this;
        }
        if (cacheKey) {
          this._fontFamilies[cacheKey] = this._font;
        }
        if (this._font.name) {
          this._fontFamilies[this._font.name] = this._font;
        }
        return this;
      },
      fontSize(_fontSize) {
        this._fontSize = this.sizeToPoint(_fontSize);
        return this;
      },
      currentLineHeight(includeGap) {
        return this._font.lineHeight(this._fontSize, includeGap);
      },
      registerFont(name, src, family) {
        this._registeredFonts[name] = {
          src,
          family
        };
        return this;
      },
      sizeToPoint(size, defaultValue = 0, page = this.page, percentageWidth = void 0) {
        if (!percentageWidth) percentageWidth = this._fontSize;
        if (typeof defaultValue !== "number") defaultValue = this.sizeToPoint(defaultValue);
        if (size === void 0) return defaultValue;
        if (typeof size === "number") return size;
        if (typeof size === "boolean") return Number(size);
        const match = String(size).match(/((\d+)?(\.\d+)?)(em|in|px|cm|mm|pc|ex|ch|rem|vw|vh|vmin|vmax|%|pt)?/);
        if (!match) throw new Error(`Unsupported size '${size}'`);
        let multiplier;
        switch (match[4]) {
          case "em":
            multiplier = this._fontSize;
            break;
          case "in":
            multiplier = IN_TO_PT;
            break;
          case "px":
            multiplier = PX_TO_IN * IN_TO_PT;
            break;
          case "cm":
            multiplier = CM_TO_IN * IN_TO_PT;
            break;
          case "mm":
            multiplier = MM_TO_CM * CM_TO_IN * IN_TO_PT;
            break;
          case "pc":
            multiplier = PC_TO_PT;
            break;
          case "ex":
            multiplier = this.currentLineHeight();
            break;
          case "ch":
            multiplier = this.widthOfString("0");
            break;
          case "rem":
            multiplier = this._remSize;
            break;
          case "vw":
            multiplier = page.width / 100;
            break;
          case "vh":
            multiplier = page.height / 100;
            break;
          case "vmin":
            multiplier = Math.min(page.width, page.height) / 100;
            break;
          case "vmax":
            multiplier = Math.max(page.width, page.height) / 100;
            break;
          case "%":
            multiplier = percentageWidth / 100;
            break;
          case "pt":
          default:
            multiplier = 1;
        }
        return multiplier * Number(match[1]);
      }
    };
    var SOFT_HYPHEN = "\xAD";
    var HYPHEN2 = "-";
    var LineWrapper = class extends events.EventEmitter {
      constructor(document2, options) {
        super();
        this.document = document2;
        this.horizontalScaling = options.horizontalScaling || 100;
        this.indent = (options.indent || 0) * this.horizontalScaling / 100;
        this.characterSpacing = (options.characterSpacing || 0) * this.horizontalScaling / 100;
        this.wordSpacing = (options.wordSpacing === 0) * this.horizontalScaling / 100;
        this.columns = options.columns || 1;
        this.columnGap = (options.columnGap != null ? options.columnGap : 18) * this.horizontalScaling / 100;
        this.lineWidth = (options.width * this.horizontalScaling / 100 - this.columnGap * (this.columns - 1)) / this.columns;
        this.spaceLeft = this.lineWidth;
        this.startX = this.document.x;
        this.startY = this.document.y;
        this.column = 1;
        this.ellipsis = options.ellipsis;
        this.continuedX = 0;
        this.features = options.features;
        if (options.height != null) {
          this.height = options.height;
          this.maxY = PDFNumber(this.startY + options.height);
        } else {
          this.maxY = PDFNumber(this.document.page.maxY());
        }
        this.on("firstLine", (options2) => {
          const indent = this.continuedX || this.indent;
          this.document.x += indent;
          this.lineWidth -= indent;
          if (options2.indentAllLines) {
            return;
          }
          this.once("line", () => {
            this.document.x -= indent;
            this.lineWidth += indent;
            if (options2.continued && !this.continuedX) {
              this.continuedX = this.indent;
            }
            if (!options2.continued) {
              this.continuedX = 0;
            }
          });
        });
        this.on("lastLine", (options2) => {
          const {
            align
          } = options2;
          if (align === "justify") {
            options2.align = "left";
          }
          this.lastLine = true;
          this.once("line", () => {
            this.document.y += options2.paragraphGap || 0;
            options2.align = align;
            return this.lastLine = false;
          });
        });
      }
      wordWidth(word) {
        return PDFNumber(this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing);
      }
      canFit(word, w) {
        if (word[word.length - 1] != SOFT_HYPHEN) {
          return w <= this.spaceLeft;
        }
        return w + this.wordWidth(HYPHEN2) <= this.spaceLeft;
      }
      eachWord(text, fn) {
        let bk;
        const breaker = new LineBreaker(text);
        let last2 = null;
        const wordWidths = /* @__PURE__ */ Object.create(null);
        while (bk = breaker.nextBreak()) {
          var shouldContinue;
          let word = text.slice((last2 != null ? last2.position : void 0) || 0, bk.position);
          let w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
          if (w > this.lineWidth + this.continuedX) {
            let lbk = last2;
            const fbk = {};
            while (word.length) {
              var l, mightGrow;
              if (w > this.spaceLeft) {
                l = Math.ceil(this.spaceLeft / (w / word.length));
                w = this.wordWidth(word.slice(0, l));
                mightGrow = w <= this.spaceLeft && l < word.length;
              } else {
                l = word.length;
              }
              let mustShrink = w > this.spaceLeft && l > 0;
              while (mustShrink || mightGrow) {
                if (mustShrink) {
                  w = this.wordWidth(word.slice(0, --l));
                  mustShrink = w > this.spaceLeft && l > 0;
                } else {
                  w = this.wordWidth(word.slice(0, ++l));
                  mustShrink = w > this.spaceLeft && l > 0;
                  mightGrow = w <= this.spaceLeft && l < word.length;
                }
              }
              if (l === 0 && this.spaceLeft === this.lineWidth) {
                l = 1;
              }
              fbk.required = bk.required || l < word.length;
              shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
              lbk = {
                required: false
              };
              word = word.slice(l);
              w = this.wordWidth(word);
              if (shouldContinue === false) {
                break;
              }
            }
          } else {
            shouldContinue = fn(word, w, bk, last2);
          }
          if (shouldContinue === false) {
            break;
          }
          last2 = bk;
        }
      }
      wrap(text, options) {
        this.horizontalScaling = options.horizontalScaling || 100;
        if (options.indent != null) {
          this.indent = options.indent * this.horizontalScaling / 100;
        }
        if (options.characterSpacing != null) {
          this.characterSpacing = options.characterSpacing * this.horizontalScaling / 100;
        }
        if (options.wordSpacing != null) {
          this.wordSpacing = options.wordSpacing * this.horizontalScaling / 100;
        }
        if (options.ellipsis != null) {
          this.ellipsis = options.ellipsis;
        }
        const nextY = this.document.y + this.document.currentLineHeight(true);
        if (this.document.y > this.maxY || nextY > this.maxY) {
          this.nextSection();
        }
        let buffer = "";
        let textWidth = 0;
        let wc = 0;
        let lc = 0;
        let {
          y
        } = this.document;
        const emitLine = () => {
          options.textWidth = textWidth + this.wordSpacing * (wc - 1);
          options.wordCount = wc;
          options.lineWidth = this.lineWidth;
          ({
            y
          } = this.document);
          this.emit("line", buffer, options, this);
          return lc++;
        };
        this.emit("sectionStart", options, this);
        this.eachWord(text, (word, w, bk, last2) => {
          if (last2 == null || last2.required) {
            this.emit("firstLine", options, this);
            this.spaceLeft = this.lineWidth;
          }
          if (this.canFit(word, w)) {
            buffer += word;
            textWidth += w;
            wc++;
          }
          if (bk.required || !this.canFit(word, w)) {
            const lh = this.document.currentLineHeight(true);
            if (this.height != null && this.ellipsis && PDFNumber(this.document.y + lh * 2) > this.maxY && this.column >= this.columns) {
              if (this.ellipsis === true) {
                this.ellipsis = "\u2026";
              }
              buffer = buffer.replace(/\s+$/, "");
              textWidth = this.wordWidth(buffer + this.ellipsis);
              while (buffer && textWidth > this.lineWidth) {
                buffer = buffer.slice(0, -1).replace(/\s+$/, "");
                textWidth = this.wordWidth(buffer + this.ellipsis);
              }
              if (textWidth <= this.lineWidth) {
                buffer = buffer + this.ellipsis;
              }
              textWidth = this.wordWidth(buffer);
            }
            if (bk.required) {
              if (w > this.spaceLeft) {
                emitLine();
                buffer = word;
                textWidth = w;
                wc = 1;
              }
              this.emit("lastLine", options, this);
            }
            if (buffer[buffer.length - 1] == SOFT_HYPHEN) {
              buffer = buffer.slice(0, -1) + HYPHEN2;
              this.spaceLeft -= this.wordWidth(HYPHEN2);
            }
            emitLine();
            if (PDFNumber(this.document.y + lh) > this.maxY) {
              const shouldContinue = this.nextSection();
              if (!shouldContinue) {
                wc = 0;
                buffer = "";
                return false;
              }
            }
            if (bk.required) {
              this.spaceLeft = this.lineWidth;
              buffer = "";
              textWidth = 0;
              return wc = 0;
            } else {
              this.spaceLeft = this.lineWidth - w;
              buffer = word;
              textWidth = w;
              return wc = 1;
            }
          } else {
            return this.spaceLeft -= w;
          }
        });
        if (wc > 0) {
          this.emit("lastLine", options, this);
          emitLine();
        }
        this.emit("sectionEnd", options, this);
        if (options.continued === true) {
          if (lc > 1) {
            this.continuedX = 0;
          }
          this.continuedX += options.textWidth || 0;
          this.document.y = y;
        } else {
          this.document.x = this.startX;
        }
      }
      nextSection(options) {
        this.emit("sectionEnd", options, this);
        if (++this.column > this.columns) {
          if (this.height != null) {
            return false;
          }
          this.document.continueOnNewPage();
          this.column = 1;
          this.startY = this.document.page.margins.top;
          this.maxY = this.document.page.maxY();
          this.document.x = this.startX;
          if (this.document._fillColor) {
            this.document.fillColor(...this.document._fillColor);
          }
          this.emit("pageBreak", options, this);
        } else {
          this.document.x += this.lineWidth + this.columnGap;
          this.document.y = this.startY;
          this.emit("columnBreak", options, this);
        }
        this.emit("sectionStart", options, this);
        return true;
      }
    };
    var {
      number
    } = PDFObject;
    var TextMixin = {
      initText() {
        this._line = this._line.bind(this);
        this.x = 0;
        this.y = 0;
        this._lineGap = 0;
      },
      lineGap(_lineGap) {
        this._lineGap = _lineGap;
        return this;
      },
      moveDown(lines) {
        if (lines == null) {
          lines = 1;
        }
        this.y += this.currentLineHeight(true) * lines + this._lineGap;
        return this;
      },
      moveUp(lines) {
        if (lines == null) {
          lines = 1;
        }
        this.y -= this.currentLineHeight(true) * lines + this._lineGap;
        return this;
      },
      _text(text, x2, y, options, lineCallback) {
        options = this._initOptions(x2, y, options);
        text = text == null ? "" : `${text}`;
        if (options.wordSpacing) {
          text = text.replace(/\s{2,}/g, " ");
        }
        const addStructure = () => {
          if (options.structParent) {
            options.structParent.add(this.struct(options.structType || "P", [this.markStructureContent(options.structType || "P")]));
          }
        };
        if (options.rotation !== 0) {
          this.save();
          this.rotate(-options.rotation, {
            origin: [this.x, this.y]
          });
        }
        if (options.width) {
          let wrapper = this._wrapper;
          if (!wrapper) {
            wrapper = new LineWrapper(this, options);
            wrapper.on("line", lineCallback);
            wrapper.on("firstLine", addStructure);
          }
          this._wrapper = options.continued ? wrapper : null;
          this._textOptions = options.continued ? options : null;
          wrapper.wrap(text, options);
        } else {
          for (let line of text.split("\n")) {
            addStructure();
            lineCallback(line, options);
          }
        }
        if (options.rotation !== 0) this.restore();
        return this;
      },
      text(text, x2, y, options) {
        return this._text(text, x2, y, options, this._line);
      },
      widthOfString(string, options = {}) {
        const horizontalScaling = options.horizontalScaling || 100;
        return (this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1)) * horizontalScaling / 100;
      },
      boundsOfString(string, x2, y, options) {
        options = this._initOptions(x2, y, options);
        ({
          x: x2,
          y
        } = this);
        const lineGap = options.lineGap ?? this._lineGap ?? 0;
        const lineHeight = this.currentLineHeight(true) + lineGap;
        let contentWidth = 0;
        string = String(string ?? "");
        if (options.wordSpacing) {
          string = string.replace(/\s{2,}/g, " ");
        }
        if (options.width) {
          let wrapper = new LineWrapper(this, options);
          wrapper.on("line", (text, options2) => {
            this.y += lineHeight;
            text = text.replace(/\n/g, "");
            if (text.length) {
              let wordSpacing = options2.wordSpacing ?? 0;
              const characterSpacing = options2.characterSpacing ?? 0;
              if (options2.width && options2.align === "justify") {
                const words = text.trim().split(/\s+/);
                const textWidth = this.widthOfString(text.replace(/\s+/g, ""), options2);
                const spaceWidth = this.widthOfString(" ") + characterSpacing;
                wordSpacing = Math.max(0, (options2.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
              }
              contentWidth = Math.max(contentWidth, options2.textWidth + wordSpacing * (options2.wordCount - 1) + characterSpacing * (text.length - 1));
            }
          });
          wrapper.wrap(string, options);
        } else {
          for (let line of string.split("\n")) {
            const lineWidth = this.widthOfString(line, options);
            this.y += lineHeight;
            contentWidth = Math.max(contentWidth, lineWidth);
          }
        }
        let contentHeight = this.y - y;
        if (options.height) contentHeight = Math.min(contentHeight, options.height);
        this.x = x2;
        this.y = y;
        if (options.rotation === 0) {
          return {
            x: x2,
            y,
            width: contentWidth,
            height: contentHeight
          };
        } else if (options.rotation === 90) {
          return {
            x: x2,
            y: y - contentWidth,
            width: contentHeight,
            height: contentWidth
          };
        } else if (options.rotation === 180) {
          return {
            x: x2 - contentWidth,
            y: y - contentHeight,
            width: contentWidth,
            height: contentHeight
          };
        } else if (options.rotation === 270) {
          return {
            x: x2 - contentHeight,
            y,
            width: contentHeight,
            height: contentWidth
          };
        }
        const cos = cosine(options.rotation);
        const sin = sine(options.rotation);
        const x1 = x2;
        const y1 = y;
        const x22 = x2 + contentWidth * cos;
        const y2 = y - contentWidth * sin;
        const x3 = x2 + contentWidth * cos + contentHeight * sin;
        const y3 = y - contentWidth * sin + contentHeight * cos;
        const x4 = x2 + contentHeight * sin;
        const y4 = y + contentHeight * cos;
        const xMin = Math.min(x1, x22, x3, x4);
        const xMax = Math.max(x1, x22, x3, x4);
        const yMin = Math.min(y1, y2, y3, y4);
        const yMax = Math.max(y1, y2, y3, y4);
        return {
          x: xMin,
          y: yMin,
          width: xMax - xMin,
          height: yMax - yMin
        };
      },
      heightOfString(text, options) {
        const {
          x: x2,
          y
        } = this;
        options = this._initOptions(options);
        options.height = Infinity;
        const lineGap = options.lineGap || this._lineGap || 0;
        this._text(text, this.x, this.y, options, () => {
          this.y += this.currentLineHeight(true) + lineGap;
        });
        const height = this.y - y;
        this.x = x2;
        this.y = y;
        return height;
      },
      list(list, x2, y, options, wrapper) {
        options = this._initOptions(x2, y, options);
        const listType = options.listType || "bullet";
        const unit = Math.round(this._font.ascender / 1e3 * this._fontSize);
        const midLine = unit / 2;
        const r2 = options.bulletRadius || unit / 3;
        const indent = options.textIndent || (listType === "bullet" ? r2 * 5 : unit * 2);
        const itemIndent = options.bulletIndent || (listType === "bullet" ? r2 * 8 : unit * 2);
        let level = 1;
        const items = [];
        const levels = [];
        const numbers = [];
        var flatten = function(list2) {
          let n = 1;
          for (let i2 = 0; i2 < list2.length; i2++) {
            const item = list2[i2];
            if (Array.isArray(item)) {
              level++;
              flatten(item);
              level--;
            } else {
              items.push(item);
              levels.push(level);
              if (listType !== "bullet") {
                numbers.push(n++);
              }
            }
          }
        };
        flatten(list);
        const label = function(n) {
          switch (listType) {
            case "numbered":
              return `${n}.`;
            case "lettered":
              var letter = String.fromCharCode((n - 1) % 26 + 65);
              var times = Math.floor((n - 1) / 26 + 1);
              var text = Array(times + 1).join(letter);
              return `${text}.`;
          }
        };
        const drawListItem = function(listItem, i2) {
          wrapper = new LineWrapper(this, options);
          wrapper.on("line", this._line);
          level = 1;
          wrapper.once("firstLine", () => {
            let item, itemType, labelType, bodyType;
            if (options.structParent) {
              if (options.structTypes) {
                [itemType, labelType, bodyType] = options.structTypes;
              } else {
                [itemType, labelType, bodyType] = ["LI", "Lbl", "LBody"];
              }
            }
            if (itemType) {
              item = this.struct(itemType);
              options.structParent.add(item);
            } else if (options.structParent) {
              item = options.structParent;
            }
            let l;
            if ((l = levels[i2++]) !== level) {
              const diff = itemIndent * (l - level);
              this.x += diff;
              wrapper.lineWidth -= diff;
              level = l;
            }
            if (item && (labelType || bodyType)) {
              item.add(this.struct(labelType || bodyType, [this.markStructureContent(labelType || bodyType)]));
            }
            switch (listType) {
              case "bullet":
                this.circle(this.x - indent + r2, this.y + midLine, r2);
                this.fill();
                break;
              case "numbered":
              case "lettered":
                var text = label(numbers[i2 - 1]);
                this._fragment(text, this.x - indent, this.y, options);
                break;
            }
            if (item && labelType && bodyType) {
              item.add(this.struct(bodyType, [this.markStructureContent(bodyType)]));
            }
            if (item && item !== options.structParent) {
              item.end();
            }
          });
          wrapper.on("sectionStart", () => {
            const pos = indent + itemIndent * (level - 1);
            this.x += pos;
            wrapper.lineWidth -= pos;
          });
          wrapper.on("sectionEnd", () => {
            const pos = indent + itemIndent * (level - 1);
            this.x -= pos;
            wrapper.lineWidth += pos;
          });
          wrapper.wrap(listItem, options);
        };
        for (let i2 = 0; i2 < items.length; i2++) {
          drawListItem.call(this, items[i2], i2);
        }
        return this;
      },
      _initOptions(x2 = {}, y, options = {}) {
        if (typeof x2 === "object") {
          options = x2;
          x2 = null;
        }
        const result = Object.assign({}, options);
        if (this._textOptions) {
          for (let key in this._textOptions) {
            const val = this._textOptions[key];
            if (key !== "continued") {
              if (result[key] === void 0) {
                result[key] = val;
              }
            }
          }
        }
        if (x2 != null) {
          this.x = x2;
        }
        if (y != null) {
          this.y = y;
        }
        if (result.lineBreak !== false) {
          if (result.width == null) {
            result.width = this.page.width - this.x - this.page.margins.right;
          }
          result.width = Math.max(result.width, 0);
        }
        if (!result.columns) {
          result.columns = 0;
        }
        if (result.columnGap == null) {
          result.columnGap = 18;
        }
        result.rotation = Number(options.rotation ?? 0) % 360;
        if (result.rotation < 0) result.rotation += 360;
        return result;
      },
      _line(text, options = {}, wrapper) {
        this._fragment(text, this.x, this.y, options);
        const lineGap = options.lineGap || this._lineGap || 0;
        if (!wrapper) {
          this.x += this.widthOfString(text, options);
        } else {
          this.y += this.currentLineHeight(true) + lineGap;
        }
      },
      _fragment(text, x2, y, options) {
        let dy, encoded, i2, positions, textWidth, words;
        text = `${text}`.replace(/\n/g, "");
        if (text.length === 0) {
          return;
        }
        const align = options.align || "left";
        let wordSpacing = options.wordSpacing || 0;
        const characterSpacing = options.characterSpacing || 0;
        const horizontalScaling = options.horizontalScaling || 100;
        if (options.width) {
          switch (align) {
            case "right":
              textWidth = this.widthOfString(text.replace(/\s+$/, ""), options);
              x2 += options.lineWidth - textWidth;
              break;
            case "center":
              x2 += options.lineWidth / 2 - options.textWidth / 2;
              break;
            case "justify":
              words = text.trim().split(/\s+/);
              textWidth = this.widthOfString(text.replace(/\s+/g, ""), options);
              var spaceWidth = this.widthOfString(" ") + characterSpacing;
              wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
              break;
          }
        }
        if (typeof options.baseline === "number") {
          dy = -options.baseline;
        } else {
          switch (options.baseline) {
            case "svg-middle":
              dy = 0.5 * this._font.xHeight;
              break;
            case "middle":
            case "svg-central":
              dy = 0.5 * (this._font.descender + this._font.ascender);
              break;
            case "bottom":
            case "ideographic":
              dy = this._font.descender;
              break;
            case "alphabetic":
              dy = 0;
              break;
            case "mathematical":
              dy = 0.5 * this._font.ascender;
              break;
            case "hanging":
              dy = 0.8 * this._font.ascender;
              break;
            case "top":
              dy = this._font.ascender;
              break;
            default:
              dy = this._font.ascender;
          }
          dy = dy / 1e3 * this._fontSize;
        }
        const renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);
        if (options.link != null) {
          this.link(x2, y, renderedWidth, this.currentLineHeight(), options.link);
        }
        if (options.goTo != null) {
          this.goTo(x2, y, renderedWidth, this.currentLineHeight(), options.goTo);
        }
        if (options.destination != null) {
          this.addNamedDestination(options.destination, "XYZ", x2, y, null);
        }
        if (options.underline) {
          this.save();
          if (!options.stroke) {
            this.strokeColor(...this._fillColor || []);
          }
          const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
          this.lineWidth(lineWidth);
          let lineY = y + this.currentLineHeight() - lineWidth;
          this.moveTo(x2, lineY);
          this.lineTo(x2 + renderedWidth, lineY);
          this.stroke();
          this.restore();
        }
        if (options.strike) {
          this.save();
          if (!options.stroke) {
            this.strokeColor(...this._fillColor || []);
          }
          const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
          this.lineWidth(lineWidth);
          let lineY = y + this.currentLineHeight() / 2;
          this.moveTo(x2, lineY);
          this.lineTo(x2 + renderedWidth, lineY);
          this.stroke();
          this.restore();
        }
        this.save();
        if (options.oblique) {
          let skew;
          if (typeof options.oblique === "number") {
            skew = -Math.tan(options.oblique * Math.PI / 180);
          } else {
            skew = -0.25;
          }
          this.transform(1, 0, 0, 1, x2, y);
          this.transform(1, 0, skew, 1, -skew * dy, 0);
          this.transform(1, 0, 0, 1, -x2, -y);
        }
        this.transform(1, 0, 0, -1, 0, this.page.height);
        y = this.page.height - y - dy;
        if (this.page.fonts[this._font.id] == null) {
          this.page.fonts[this._font.id] = this._font.ref();
        }
        this.addContent("BT");
        this.addContent(`1 0 0 1 ${number(x2)} ${number(y)} Tm`);
        this.addContent(`/${this._font.id} ${number(this._fontSize)} Tf`);
        const mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
        if (mode) {
          this.addContent(`${mode} Tr`);
        }
        if (characterSpacing) {
          this.addContent(`${number(characterSpacing)} Tc`);
        }
        if (horizontalScaling !== 100) {
          this.addContent(`${horizontalScaling} Tz`);
        }
        if (wordSpacing) {
          words = text.trim().split(/\s+/);
          wordSpacing += this.widthOfString(" ") + characterSpacing;
          wordSpacing *= 1e3 / this._fontSize;
          encoded = [];
          positions = [];
          for (let word of words) {
            const [encodedWord, positionsWord] = this._font.encode(word, options.features);
            encoded = encoded.concat(encodedWord);
            positions = positions.concat(positionsWord);
            const space = {};
            const object = positions[positions.length - 1];
            for (let key in object) {
              const val = object[key];
              space[key] = val;
            }
            space.xAdvance += wordSpacing;
            positions[positions.length - 1] = space;
          }
        } else {
          [encoded, positions] = this._font.encode(text, options.features);
        }
        const scale = this._fontSize / 1e3;
        const commands = [];
        let last2 = 0;
        let hadOffset = false;
        const addSegment = (cur) => {
          if (last2 < cur) {
            const hex = encoded.slice(last2, cur).join("");
            const advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
            commands.push(`<${hex}> ${number(-advance)}`);
          }
          last2 = cur;
        };
        const flush = (i3) => {
          addSegment(i3);
          if (commands.length > 0) {
            this.addContent(`[${commands.join(" ")}] TJ`);
            commands.length = 0;
          }
        };
        for (i2 = 0; i2 < positions.length; i2++) {
          const pos = positions[i2];
          if (pos.xOffset || pos.yOffset) {
            flush(i2);
            this.addContent(`1 0 0 1 ${number(x2 + pos.xOffset * scale)} ${number(y + pos.yOffset * scale)} Tm`);
            flush(i2 + 1);
            hadOffset = true;
          } else {
            if (hadOffset) {
              this.addContent(`1 0 0 1 ${number(x2)} ${number(y)} Tm`);
              hadOffset = false;
            }
            if (pos.xAdvance - pos.advanceWidth !== 0) {
              addSegment(i2 + 1);
            }
          }
          x2 += pos.xAdvance * scale;
        }
        flush(i2);
        this.addContent("ET");
        this.restore();
      }
    };
    var MARKERS = [65472, 65473, 65474, 65475, 65477, 65478, 65479, 65480, 65481, 65482, 65483, 65484, 65485, 65486, 65487];
    var COLOR_SPACE_MAP = {
      1: "DeviceGray",
      3: "DeviceRGB",
      4: "DeviceCMYK"
    };
    var JPEG = class {
      constructor(data, label) {
        let marker;
        this.data = data;
        this.label = label;
        if (this.data.readUInt16BE(0) !== 65496) {
          throw "SOI not found in JPEG";
        }
        this.orientation = exif.fromBuffer(this.data).Orientation || 1;
        let pos = 2;
        while (pos < this.data.length) {
          marker = this.data.readUInt16BE(pos);
          pos += 2;
          if (MARKERS.includes(marker)) {
            break;
          }
          pos += this.data.readUInt16BE(pos);
        }
        if (!MARKERS.includes(marker)) {
          throw "Invalid JPEG.";
        }
        pos += 2;
        this.bits = this.data[pos++];
        this.height = this.data.readUInt16BE(pos);
        pos += 2;
        this.width = this.data.readUInt16BE(pos);
        pos += 2;
        const channels = this.data[pos++];
        this.colorSpace = COLOR_SPACE_MAP[channels];
        this.obj = null;
      }
      embed(document2) {
        if (this.obj) {
          return;
        }
        this.obj = document2.ref({
          Type: "XObject",
          Subtype: "Image",
          BitsPerComponent: this.bits,
          Width: this.width,
          Height: this.height,
          ColorSpace: this.colorSpace,
          Filter: "DCTDecode"
        });
        if (this.colorSpace === "DeviceCMYK") {
          this.obj.data["Decode"] = [1, 0, 1, 0, 1, 0, 1, 0];
        }
        this.obj.end(this.data);
        return this.data = null;
      }
    };
    var PNGImage = class {
      constructor(data, label) {
        this.label = label;
        this.image = new PNG(data);
        this.width = this.image.width;
        this.height = this.image.height;
        this.imgData = this.image.imgData;
        this.obj = null;
      }
      embed(document2) {
        let dataDecoded = false;
        this.document = document2;
        if (this.obj) {
          return;
        }
        const hasAlphaChannel = this.image.hasAlphaChannel;
        const isInterlaced = this.image.interlaceMethod === 1;
        this.obj = this.document.ref({
          Type: "XObject",
          Subtype: "Image",
          BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
          Width: this.width,
          Height: this.height,
          Filter: "FlateDecode"
        });
        if (!hasAlphaChannel) {
          const params = this.document.ref({
            Predictor: isInterlaced ? 1 : 15,
            Colors: this.image.colors,
            BitsPerComponent: this.image.bits,
            Columns: this.width
          });
          this.obj.data["DecodeParms"] = params;
          params.end();
        }
        if (this.image.palette.length === 0) {
          this.obj.data["ColorSpace"] = this.image.colorSpace;
        } else {
          const palette = this.document.ref();
          palette.end(Buffer.from(this.image.palette));
          this.obj.data["ColorSpace"] = ["Indexed", "DeviceRGB", this.image.palette.length / 3 - 1, palette];
        }
        if (this.image.transparency.grayscale != null) {
          const val = this.image.transparency.grayscale;
          this.obj.data["Mask"] = [val, val];
        } else if (this.image.transparency.rgb) {
          const {
            rgb
          } = this.image.transparency;
          const mask = [];
          for (let x2 of rgb) {
            mask.push(x2, x2);
          }
          this.obj.data["Mask"] = mask;
        } else if (this.image.transparency.indexed) {
          dataDecoded = true;
          return this.loadIndexedAlphaChannel();
        } else if (hasAlphaChannel) {
          dataDecoded = true;
          return this.splitAlphaChannel();
        }
        if (isInterlaced && !dataDecoded) {
          return this.decodeData();
        }
        this.finalize();
      }
      finalize() {
        if (this.alphaChannel) {
          const sMask = this.document.ref({
            Type: "XObject",
            Subtype: "Image",
            Height: this.height,
            Width: this.width,
            BitsPerComponent: 8,
            Filter: "FlateDecode",
            ColorSpace: "DeviceGray",
            Decode: [0, 1]
          });
          sMask.end(this.alphaChannel);
          this.obj.data["SMask"] = sMask;
        }
        this.obj.end(this.imgData);
        this.image = null;
        return this.imgData = null;
      }
      splitAlphaChannel() {
        return this.image.decodePixels((pixels) => {
          let a, p;
          const colorCount = this.image.colors;
          const pixelCount = this.width * this.height;
          const imgData = Buffer.alloc(pixelCount * colorCount);
          const alphaChannel = Buffer.alloc(pixelCount);
          let i2 = p = a = 0;
          const len = pixels.length;
          const skipByteCount = this.image.bits === 16 ? 1 : 0;
          while (i2 < len) {
            for (let colorIndex = 0; colorIndex < colorCount; colorIndex++) {
              imgData[p++] = pixels[i2++];
              i2 += skipByteCount;
            }
            alphaChannel[a++] = pixels[i2++];
            i2 += skipByteCount;
          }
          this.imgData = zlib2.deflateSync(imgData);
          this.alphaChannel = zlib2.deflateSync(alphaChannel);
          return this.finalize();
        });
      }
      loadIndexedAlphaChannel() {
        const transparency = this.image.transparency.indexed;
        return this.image.decodePixels((pixels) => {
          const alphaChannel = Buffer.alloc(this.width * this.height);
          let i2 = 0;
          for (let j = 0, end = pixels.length; j < end; j++) {
            alphaChannel[i2++] = transparency[pixels[j]];
          }
          this.alphaChannel = zlib2.deflateSync(alphaChannel);
          return this.finalize();
        });
      }
      decodeData() {
        this.image.decodePixels((pixels) => {
          this.imgData = zlib2.deflateSync(pixels);
          this.finalize();
        });
      }
    };
    var PDFImage = class {
      static open(src, label) {
        let data;
        if (Buffer.isBuffer(src)) {
          data = src;
        } else if (src instanceof ArrayBuffer) {
          data = Buffer.from(new Uint8Array(src));
        } else {
          const match = /^data:.+?;base64,(.*)$/.exec(src);
          if (match) {
            data = Buffer.from(match[1], "base64");
          } else {
            data = fs2.readFileSync(src);
            if (!data) {
              return;
            }
          }
        }
        if (data[0] === 255 && data[1] === 216) {
          return new JPEG(data, label);
        } else if (data[0] === 137 && data.toString("ascii", 1, 4) === "PNG") {
          return new PNGImage(data, label);
        } else {
          throw new Error("Unknown image format.");
        }
      }
    };
    var ImagesMixin = {
      initImages() {
        this._imageRegistry = {};
        this._imageCount = 0;
      },
      image(src, x2, y, options = {}) {
        let bh, bp, bw, image, ip, left, left1, originX, originY;
        if (typeof x2 === "object") {
          options = x2;
          x2 = null;
        }
        const ignoreOrientation = options.ignoreOrientation || options.ignoreOrientation !== false && this.options.ignoreOrientation;
        const inDocumentFlow = typeof y !== "number";
        x2 = (left = x2 != null ? x2 : options.x) != null ? left : this.x;
        y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;
        if (typeof src === "string") {
          image = this._imageRegistry[src];
        }
        if (!image) {
          if (src.width && src.height) {
            image = src;
          } else {
            image = this.openImage(src);
          }
        }
        if (!image.obj) {
          image.embed(this);
        }
        if (this.page.xobjects[image.label] == null) {
          this.page.xobjects[image.label] = image.obj;
        }
        let {
          width,
          height
        } = image;
        if (!ignoreOrientation && image.orientation > 4) {
          [width, height] = [height, width];
        }
        let w = options.width || width;
        let h2 = options.height || height;
        if (options.width && !options.height) {
          const wp = w / width;
          w = width * wp;
          h2 = height * wp;
        } else if (options.height && !options.width) {
          const hp = h2 / height;
          w = width * hp;
          h2 = height * hp;
        } else if (options.scale) {
          w = width * options.scale;
          h2 = height * options.scale;
        } else if (options.fit) {
          [bw, bh] = options.fit;
          bp = bw / bh;
          ip = width / height;
          if (ip > bp) {
            w = bw;
            h2 = bw / ip;
          } else {
            h2 = bh;
            w = bh * ip;
          }
        } else if (options.cover) {
          [bw, bh] = options.cover;
          bp = bw / bh;
          ip = width / height;
          if (ip > bp) {
            h2 = bh;
            w = bh * ip;
          } else {
            w = bw;
            h2 = bw / ip;
          }
        }
        if (options.fit || options.cover) {
          if (options.align === "center") {
            x2 = x2 + bw / 2 - w / 2;
          } else if (options.align === "right") {
            x2 = x2 + bw - w;
          }
          if (options.valign === "center") {
            y = y + bh / 2 - h2 / 2;
          } else if (options.valign === "bottom") {
            y = y + bh - h2;
          }
        }
        let rotateAngle = 0;
        let xTransform = x2;
        let yTransform = y;
        let hTransform = h2;
        let wTransform = w;
        if (!ignoreOrientation) {
          switch (image.orientation) {
            default:
            case 1:
              hTransform = -h2;
              yTransform += h2;
              break;
            case 2:
              wTransform = -w;
              hTransform = -h2;
              xTransform += w;
              yTransform += h2;
              break;
            case 3:
              originX = x2;
              originY = y;
              hTransform = -h2;
              xTransform -= w;
              rotateAngle = 180;
              break;
            case 4:
              break;
            case 5:
              originX = x2;
              originY = y;
              wTransform = h2;
              hTransform = w;
              yTransform -= hTransform;
              rotateAngle = 90;
              break;
            case 6:
              originX = x2;
              originY = y;
              wTransform = h2;
              hTransform = -w;
              rotateAngle = 90;
              break;
            case 7:
              originX = x2;
              originY = y;
              hTransform = -w;
              wTransform = -h2;
              xTransform += h2;
              rotateAngle = 90;
              break;
            case 8:
              originX = x2;
              originY = y;
              wTransform = h2;
              hTransform = -w;
              xTransform -= h2;
              yTransform += w;
              rotateAngle = -90;
              break;
          }
        } else {
          hTransform = -h2;
          yTransform += h2;
        }
        if (options.link != null) {
          this.link(x2, y, w, h2, options.link);
        }
        if (options.goTo != null) {
          this.goTo(x2, y, w, h2, options.goTo);
        }
        if (options.destination != null) {
          this.addNamedDestination(options.destination, "XYZ", x2, y, null);
        }
        if (inDocumentFlow) {
          this.y += h2;
        }
        this.save();
        if (rotateAngle) {
          this.rotate(rotateAngle, {
            origin: [originX, originY]
          });
        }
        this.transform(wTransform, 0, 0, hTransform, xTransform, yTransform);
        this.addContent(`/${image.label} Do`);
        this.restore();
        return this;
      },
      openImage(src) {
        let image;
        if (typeof src === "string") {
          image = this._imageRegistry[src];
        }
        if (!image) {
          image = PDFImage.open(src, `I${++this._imageCount}`);
          if (typeof src === "string") {
            this._imageRegistry[src] = image;
          }
        }
        return image;
      }
    };
    var AnnotationsMixin = {
      annotate(x2, y, w, h2, options) {
        options.Type = "Annot";
        options.Rect = this._convertRect(x2, y, w, h2);
        options.Border = [0, 0, 0];
        if (options.Subtype === "Link" && typeof options.F === "undefined") {
          options.F = 1 << 2;
        }
        if (options.Subtype !== "Link") {
          if (options.C == null) {
            options.C = this._normalizeColor(options.color || [0, 0, 0]);
          }
        }
        delete options.color;
        if (typeof options.Dest === "string") {
          options.Dest = new String(options.Dest);
        }
        for (let key in options) {
          const val = options[key];
          options[key[0].toUpperCase() + key.slice(1)] = val;
        }
        const ref = this.ref(options);
        this.page.annotations.push(ref);
        ref.end();
        return this;
      },
      note(x2, y, w, h2, contents, options = {}) {
        options.Subtype = "Text";
        options.Contents = new String(contents);
        if (options.Name == null) {
          options.Name = "Comment";
        }
        if (options.color == null) {
          options.color = [243, 223, 92];
        }
        return this.annotate(x2, y, w, h2, options);
      },
      goTo(x2, y, w, h2, name, options = {}) {
        options.Subtype = "Link";
        options.A = this.ref({
          S: "GoTo",
          D: new String(name)
        });
        options.A.end();
        return this.annotate(x2, y, w, h2, options);
      },
      link(x2, y, w, h2, url, options = {}) {
        options.Subtype = "Link";
        if (typeof url === "number") {
          const pages = this._root.data.Pages.data;
          if (url >= 0 && url < pages.Kids.length) {
            options.A = this.ref({
              S: "GoTo",
              D: [pages.Kids[url], "XYZ", null, null, null]
            });
            options.A.end();
          } else {
            throw new Error(`The document has no page ${url}`);
          }
        } else {
          options.A = this.ref({
            S: "URI",
            URI: new String(url)
          });
          options.A.end();
        }
        return this.annotate(x2, y, w, h2, options);
      },
      _markup(x2, y, w, h2, options = {}) {
        const [x1, y1, x22, y2] = this._convertRect(x2, y, w, h2);
        options.QuadPoints = [x1, y2, x22, y2, x1, y1, x22, y1];
        options.Contents = new String();
        return this.annotate(x2, y, w, h2, options);
      },
      highlight(x2, y, w, h2, options = {}) {
        options.Subtype = "Highlight";
        if (options.color == null) {
          options.color = [241, 238, 148];
        }
        return this._markup(x2, y, w, h2, options);
      },
      underline(x2, y, w, h2, options = {}) {
        options.Subtype = "Underline";
        return this._markup(x2, y, w, h2, options);
      },
      strike(x2, y, w, h2, options = {}) {
        options.Subtype = "StrikeOut";
        return this._markup(x2, y, w, h2, options);
      },
      lineAnnotation(x1, y1, x2, y2, options = {}) {
        options.Subtype = "Line";
        options.Contents = new String();
        options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
        return this.annotate(x1, y1, x2, y2, options);
      },
      rectAnnotation(x2, y, w, h2, options = {}) {
        options.Subtype = "Square";
        options.Contents = new String();
        return this.annotate(x2, y, w, h2, options);
      },
      ellipseAnnotation(x2, y, w, h2, options = {}) {
        options.Subtype = "Circle";
        options.Contents = new String();
        return this.annotate(x2, y, w, h2, options);
      },
      textAnnotation(x2, y, w, h2, text, options = {}) {
        options.Subtype = "FreeText";
        options.Contents = new String(text);
        options.DA = new String();
        return this.annotate(x2, y, w, h2, options);
      },
      fileAnnotation(x2, y, w, h2, file = {}, options = {}) {
        const filespec = this.file(file.src, Object.assign({
          hidden: true
        }, file));
        options.Subtype = "FileAttachment";
        options.FS = filespec;
        if (options.Contents) {
          options.Contents = new String(options.Contents);
        } else if (filespec.data.Desc) {
          options.Contents = filespec.data.Desc;
        }
        return this.annotate(x2, y, w, h2, options);
      },
      _convertRect(x1, y1, w, h2) {
        let y2 = y1;
        y1 += h2;
        let x2 = x1 + w;
        const [m0, m1, m2, m3, m4, m5] = this._ctm;
        x1 = m0 * x1 + m2 * y1 + m4;
        y1 = m1 * x1 + m3 * y1 + m5;
        x2 = m0 * x2 + m2 * y2 + m4;
        y2 = m1 * x2 + m3 * y2 + m5;
        return [x1, y1, x2, y2];
      }
    };
    var PDFOutline = class _PDFOutline {
      constructor(document2, parent, title, dest, options = {
        expanded: false
      }) {
        this.document = document2;
        this.options = options;
        this.outlineData = {};
        if (dest !== null) {
          this.outlineData["Dest"] = [dest.dictionary, "Fit"];
        }
        if (parent !== null) {
          this.outlineData["Parent"] = parent;
        }
        if (title !== null) {
          this.outlineData["Title"] = new String(title);
        }
        this.dictionary = this.document.ref(this.outlineData);
        this.children = [];
      }
      addItem(title, options = {
        expanded: false
      }) {
        const result = new _PDFOutline(this.document, this.dictionary, title, this.document.page, options);
        this.children.push(result);
        return result;
      }
      endOutline() {
        if (this.children.length > 0) {
          if (this.options.expanded) {
            this.outlineData.Count = this.children.length;
          }
          const first2 = this.children[0], last2 = this.children[this.children.length - 1];
          this.outlineData.First = first2.dictionary;
          this.outlineData.Last = last2.dictionary;
          for (let i2 = 0, len = this.children.length; i2 < len; i2++) {
            const child = this.children[i2];
            if (i2 > 0) {
              child.outlineData.Prev = this.children[i2 - 1].dictionary;
            }
            if (i2 < this.children.length - 1) {
              child.outlineData.Next = this.children[i2 + 1].dictionary;
            }
            child.endOutline();
          }
        }
        return this.dictionary.end();
      }
    };
    var OutlineMixin = {
      initOutline() {
        this.outline = new PDFOutline(this, null, null, null);
      },
      endOutline() {
        this.outline.endOutline();
        if (this.outline.children.length > 0) {
          this._root.data.Outlines = this.outline.dictionary;
          return this._root.data.PageMode = "UseOutlines";
        }
      }
    };
    var PDFStructureContent = class {
      constructor(pageRef, mcid) {
        this.refs = [{
          pageRef,
          mcid
        }];
      }
      push(structContent) {
        structContent.refs.forEach((ref) => this.refs.push(ref));
      }
    };
    var PDFStructureElement = class _PDFStructureElement {
      constructor(document2, type, options = {}, children = null) {
        this.document = document2;
        this._attached = false;
        this._ended = false;
        this._flushed = false;
        this.dictionary = document2.ref({
          S: type
        });
        const data = this.dictionary.data;
        if (Array.isArray(options) || this._isValidChild(options)) {
          children = options;
          options = {};
        }
        if (typeof options.title !== "undefined") {
          data.T = new String(options.title);
        }
        if (typeof options.lang !== "undefined") {
          data.Lang = new String(options.lang);
        }
        if (typeof options.alt !== "undefined") {
          data.Alt = new String(options.alt);
        }
        if (typeof options.expanded !== "undefined") {
          data.E = new String(options.expanded);
        }
        if (typeof options.actual !== "undefined") {
          data.ActualText = new String(options.actual);
        }
        this._children = [];
        if (children) {
          if (!Array.isArray(children)) {
            children = [children];
          }
          children.forEach((child) => this.add(child));
          this.end();
        }
      }
      add(child) {
        if (this._ended) {
          throw new Error(`Cannot add child to already-ended structure element`);
        }
        if (!this._isValidChild(child)) {
          throw new Error(`Invalid structure element child`);
        }
        if (child instanceof _PDFStructureElement) {
          child.setParent(this.dictionary);
          if (this._attached) {
            child.setAttached();
          }
        }
        if (child instanceof PDFStructureContent) {
          this._addContentToParentTree(child);
        }
        if (typeof child === "function" && this._attached) {
          child = this._contentForClosure(child);
        }
        this._children.push(child);
        return this;
      }
      _addContentToParentTree(content) {
        content.refs.forEach(({
          pageRef,
          mcid
        }) => {
          const pageStructParents = this.document.getStructParentTree().get(pageRef.data.StructParents);
          pageStructParents[mcid] = this.dictionary;
        });
      }
      setParent(parentRef) {
        if (this.dictionary.data.P) {
          throw new Error(`Structure element added to more than one parent`);
        }
        this.dictionary.data.P = parentRef;
        this._flush();
      }
      setAttached() {
        if (this._attached) {
          return;
        }
        this._children.forEach((child, index) => {
          if (child instanceof _PDFStructureElement) {
            child.setAttached();
          }
          if (typeof child === "function") {
            this._children[index] = this._contentForClosure(child);
          }
        });
        this._attached = true;
        this._flush();
      }
      end() {
        if (this._ended) {
          return;
        }
        this._children.filter((child) => child instanceof _PDFStructureElement).forEach((child) => child.end());
        this._ended = true;
        this._flush();
      }
      _isValidChild(child) {
        return child instanceof _PDFStructureElement || child instanceof PDFStructureContent || typeof child === "function";
      }
      _contentForClosure(closure) {
        const content = this.document.markStructureContent(this.dictionary.data.S);
        closure();
        this.document.endMarkedContent();
        this._addContentToParentTree(content);
        return content;
      }
      _isFlushable() {
        if (!this.dictionary.data.P || !this._ended) {
          return false;
        }
        return this._children.every((child) => {
          if (typeof child === "function") {
            return false;
          }
          if (child instanceof _PDFStructureElement) {
            return child._isFlushable();
          }
          return true;
        });
      }
      _flush() {
        if (this._flushed || !this._isFlushable()) {
          return;
        }
        this.dictionary.data.K = [];
        this._children.forEach((child) => this._flushChild(child));
        this.dictionary.end();
        this._children = [];
        this.dictionary.data.K = null;
        this._flushed = true;
      }
      _flushChild(child) {
        if (child instanceof _PDFStructureElement) {
          this.dictionary.data.K.push(child.dictionary);
        }
        if (child instanceof PDFStructureContent) {
          child.refs.forEach(({
            pageRef,
            mcid
          }) => {
            if (!this.dictionary.data.Pg) {
              this.dictionary.data.Pg = pageRef;
            }
            if (this.dictionary.data.Pg === pageRef) {
              this.dictionary.data.K.push(mcid);
            } else {
              this.dictionary.data.K.push({
                Type: "MCR",
                Pg: pageRef,
                MCID: mcid
              });
            }
          });
        }
      }
    };
    var PDFNumberTree = class extends PDFTree {
      _compareKeys(a, b) {
        return parseInt(a) - parseInt(b);
      }
      _keysName() {
        return "Nums";
      }
      _dataForKey(k) {
        return parseInt(k);
      }
    };
    var MarkingsMixin = {
      initMarkings(options) {
        this.structChildren = [];
        if (options.tagged) {
          this.getMarkInfoDictionary().data.Marked = true;
          this.getStructTreeRoot();
        }
      },
      markContent(tag, options = null) {
        if (tag === "Artifact" || options && options.mcid) {
          let toClose = 0;
          this.page.markings.forEach((marking) => {
            if (toClose || marking.structContent || marking.tag === "Artifact") {
              toClose++;
            }
          });
          while (toClose--) {
            this.endMarkedContent();
          }
        }
        if (!options) {
          this.page.markings.push({
            tag
          });
          this.addContent(`/${tag} BMC`);
          return this;
        }
        this.page.markings.push({
          tag,
          options
        });
        const dictionary = {};
        if (typeof options.mcid !== "undefined") {
          dictionary.MCID = options.mcid;
        }
        if (tag === "Artifact") {
          if (typeof options.type === "string") {
            dictionary.Type = options.type;
          }
          if (Array.isArray(options.bbox)) {
            dictionary.BBox = [options.bbox[0], this.page.height - options.bbox[3], options.bbox[2], this.page.height - options.bbox[1]];
          }
          if (Array.isArray(options.attached) && options.attached.every((val) => typeof val === "string")) {
            dictionary.Attached = options.attached;
          }
        }
        if (tag === "Span") {
          if (options.lang) {
            dictionary.Lang = new String(options.lang);
          }
          if (options.alt) {
            dictionary.Alt = new String(options.alt);
          }
          if (options.expanded) {
            dictionary.E = new String(options.expanded);
          }
          if (options.actual) {
            dictionary.ActualText = new String(options.actual);
          }
        }
        this.addContent(`/${tag} ${PDFObject.convert(dictionary)} BDC`);
        return this;
      },
      markStructureContent(tag, options = {}) {
        const pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);
        const mcid = pageStructParents.length;
        pageStructParents.push(null);
        this.markContent(tag, {
          ...options,
          mcid
        });
        const structContent = new PDFStructureContent(this.page.dictionary, mcid);
        this.page.markings.slice(-1)[0].structContent = structContent;
        return structContent;
      },
      endMarkedContent() {
        this.page.markings.pop();
        this.addContent("EMC");
        return this;
      },
      struct(type, options = {}, children = null) {
        return new PDFStructureElement(this, type, options, children);
      },
      addStructure(structElem) {
        const structTreeRoot = this.getStructTreeRoot();
        structElem.setParent(structTreeRoot);
        structElem.setAttached();
        this.structChildren.push(structElem);
        if (!structTreeRoot.data.K) {
          structTreeRoot.data.K = [];
        }
        structTreeRoot.data.K.push(structElem.dictionary);
        return this;
      },
      initPageMarkings(pageMarkings) {
        pageMarkings.forEach((marking) => {
          if (marking.structContent) {
            const structContent = marking.structContent;
            const newStructContent = this.markStructureContent(marking.tag, marking.options);
            structContent.push(newStructContent);
            this.page.markings.slice(-1)[0].structContent = structContent;
          } else {
            this.markContent(marking.tag, marking.options);
          }
        });
      },
      endPageMarkings(page) {
        const pageMarkings = page.markings;
        pageMarkings.forEach(() => page.write("EMC"));
        page.markings = [];
        return pageMarkings;
      },
      getMarkInfoDictionary() {
        if (!this._root.data.MarkInfo) {
          this._root.data.MarkInfo = this.ref({});
        }
        return this._root.data.MarkInfo;
      },
      hasMarkInfoDictionary() {
        return !!this._root.data.MarkInfo;
      },
      getStructTreeRoot() {
        if (!this._root.data.StructTreeRoot) {
          this._root.data.StructTreeRoot = this.ref({
            Type: "StructTreeRoot",
            ParentTree: new PDFNumberTree(),
            ParentTreeNextKey: 0
          });
        }
        return this._root.data.StructTreeRoot;
      },
      getStructParentTree() {
        return this.getStructTreeRoot().data.ParentTree;
      },
      createStructParentTreeNextKey() {
        this.getMarkInfoDictionary();
        const structTreeRoot = this.getStructTreeRoot();
        const key = structTreeRoot.data.ParentTreeNextKey++;
        structTreeRoot.data.ParentTree.add(key, []);
        return key;
      },
      endMarkings() {
        const structTreeRoot = this._root.data.StructTreeRoot;
        if (structTreeRoot) {
          structTreeRoot.end();
          this.structChildren.forEach((structElem) => structElem.end());
        }
        if (this._root.data.MarkInfo) {
          this._root.data.MarkInfo.end();
        }
      }
    };
    var FIELD_FLAGS = {
      readOnly: 1,
      required: 2,
      noExport: 4,
      multiline: 4096,
      password: 8192,
      toggleToOffButton: 16384,
      radioButton: 32768,
      pushButton: 65536,
      combo: 131072,
      edit: 262144,
      sort: 524288,
      multiSelect: 2097152,
      noSpell: 4194304
    };
    var FIELD_JUSTIFY = {
      left: 0,
      center: 1,
      right: 2
    };
    var VALUE_MAP = {
      value: "V",
      defaultValue: "DV"
    };
    var FORMAT_SPECIAL = {
      zip: "0",
      zipPlus4: "1",
      zip4: "1",
      phone: "2",
      ssn: "3"
    };
    var FORMAT_DEFAULT = {
      number: {
        nDec: 0,
        sepComma: false,
        negStyle: "MinusBlack",
        currency: "",
        currencyPrepend: true
      },
      percent: {
        nDec: 0,
        sepComma: false
      }
    };
    var AcroFormMixin = {
      initForm() {
        if (!this._font) {
          throw new Error("Must set a font before calling initForm method");
        }
        this._acroform = {
          fonts: {},
          defaultFont: this._font.name
        };
        this._acroform.fonts[this._font.id] = this._font.ref();
        let data = {
          Fields: [],
          NeedAppearances: true,
          DA: new String(`/${this._font.id} 0 Tf 0 g`),
          DR: {
            Font: {}
          }
        };
        data.DR.Font[this._font.id] = this._font.ref();
        const AcroForm = this.ref(data);
        this._root.data.AcroForm = AcroForm;
        return this;
      },
      endAcroForm() {
        if (this._root.data.AcroForm) {
          if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
            throw new Error("No fonts specified for PDF form");
          }
          let fontDict = this._root.data.AcroForm.data.DR.Font;
          Object.keys(this._acroform.fonts).forEach((name) => {
            fontDict[name] = this._acroform.fonts[name];
          });
          this._root.data.AcroForm.data.Fields.forEach((fieldRef) => {
            this._endChild(fieldRef);
          });
          this._root.data.AcroForm.end();
        }
        return this;
      },
      _endChild(ref) {
        if (Array.isArray(ref.data.Kids)) {
          ref.data.Kids.forEach((childRef) => {
            this._endChild(childRef);
          });
          ref.end();
        }
        return this;
      },
      formField(name, options = {}) {
        let fieldDict = this._fieldDict(name, null, options);
        let fieldRef = this.ref(fieldDict);
        this._addToParent(fieldRef);
        return fieldRef;
      },
      formAnnotation(name, type, x2, y, w, h2, options = {}) {
        let fieldDict = this._fieldDict(name, type, options);
        fieldDict.Subtype = "Widget";
        if (fieldDict.F === void 0) {
          fieldDict.F = 4;
        }
        this.annotate(x2, y, w, h2, fieldDict);
        let annotRef = this.page.annotations[this.page.annotations.length - 1];
        return this._addToParent(annotRef);
      },
      formText(name, x2, y, w, h2, options = {}) {
        return this.formAnnotation(name, "text", x2, y, w, h2, options);
      },
      formPushButton(name, x2, y, w, h2, options = {}) {
        return this.formAnnotation(name, "pushButton", x2, y, w, h2, options);
      },
      formCombo(name, x2, y, w, h2, options = {}) {
        return this.formAnnotation(name, "combo", x2, y, w, h2, options);
      },
      formList(name, x2, y, w, h2, options = {}) {
        return this.formAnnotation(name, "list", x2, y, w, h2, options);
      },
      formRadioButton(name, x2, y, w, h2, options = {}) {
        return this.formAnnotation(name, "radioButton", x2, y, w, h2, options);
      },
      formCheckbox(name, x2, y, w, h2, options = {}) {
        return this.formAnnotation(name, "checkbox", x2, y, w, h2, options);
      },
      _addToParent(fieldRef) {
        let parent = fieldRef.data.Parent;
        if (parent) {
          if (!parent.data.Kids) {
            parent.data.Kids = [];
          }
          parent.data.Kids.push(fieldRef);
        } else {
          this._root.data.AcroForm.data.Fields.push(fieldRef);
        }
        return this;
      },
      _fieldDict(name, type, options = {}) {
        if (!this._acroform) {
          throw new Error("Call document.initForm() method before adding form elements to document");
        }
        let opts = Object.assign({}, options);
        if (type !== null) {
          opts = this._resolveType(type, options);
        }
        opts = this._resolveFlags(opts);
        opts = this._resolveJustify(opts);
        opts = this._resolveFont(opts);
        opts = this._resolveStrings(opts);
        opts = this._resolveColors(opts);
        opts = this._resolveFormat(opts);
        opts.T = new String(name);
        if (opts.parent) {
          opts.Parent = opts.parent;
          delete opts.parent;
        }
        return opts;
      },
      _resolveType(type, opts) {
        if (type === "text") {
          opts.FT = "Tx";
        } else if (type === "pushButton") {
          opts.FT = "Btn";
          opts.pushButton = true;
        } else if (type === "radioButton") {
          opts.FT = "Btn";
          opts.radioButton = true;
        } else if (type === "checkbox") {
          opts.FT = "Btn";
        } else if (type === "combo") {
          opts.FT = "Ch";
          opts.combo = true;
        } else if (type === "list") {
          opts.FT = "Ch";
        } else {
          throw new Error(`Invalid form annotation type '${type}'`);
        }
        return opts;
      },
      _resolveFormat(opts) {
        const f3 = opts.format;
        if (f3 && f3.type) {
          let fnKeystroke;
          let fnFormat;
          let params = "";
          if (FORMAT_SPECIAL[f3.type] !== void 0) {
            fnKeystroke = `AFSpecial_Keystroke`;
            fnFormat = `AFSpecial_Format`;
            params = FORMAT_SPECIAL[f3.type];
          } else {
            let format = f3.type.charAt(0).toUpperCase() + f3.type.slice(1);
            fnKeystroke = `AF${format}_Keystroke`;
            fnFormat = `AF${format}_Format`;
            if (f3.type === "date") {
              fnKeystroke += "Ex";
              params = String(f3.param);
            } else if (f3.type === "time") {
              params = String(f3.param);
            } else if (f3.type === "number") {
              let p = Object.assign({}, FORMAT_DEFAULT.number, f3);
              params = String([String(p.nDec), p.sepComma ? "0" : "1", '"' + p.negStyle + '"', "null", '"' + p.currency + '"', String(p.currencyPrepend)].join(","));
            } else if (f3.type === "percent") {
              let p = Object.assign({}, FORMAT_DEFAULT.percent, f3);
              params = String([String(p.nDec), p.sepComma ? "0" : "1"].join(","));
            }
          }
          opts.AA = opts.AA ? opts.AA : {};
          opts.AA.K = {
            S: "JavaScript",
            JS: new String(`${fnKeystroke}(${params});`)
          };
          opts.AA.F = {
            S: "JavaScript",
            JS: new String(`${fnFormat}(${params});`)
          };
        }
        delete opts.format;
        return opts;
      },
      _resolveColors(opts) {
        let color = this._normalizeColor(opts.backgroundColor);
        if (color) {
          if (!opts.MK) {
            opts.MK = {};
          }
          opts.MK.BG = color;
        }
        color = this._normalizeColor(opts.borderColor);
        if (color) {
          if (!opts.MK) {
            opts.MK = {};
          }
          opts.MK.BC = color;
        }
        delete opts.backgroundColor;
        delete opts.borderColor;
        return opts;
      },
      _resolveFlags(options) {
        let result = 0;
        Object.keys(options).forEach((key) => {
          if (FIELD_FLAGS[key]) {
            if (options[key]) {
              result |= FIELD_FLAGS[key];
            }
            delete options[key];
          }
        });
        if (result !== 0) {
          options.Ff = options.Ff ? options.Ff : 0;
          options.Ff |= result;
        }
        return options;
      },
      _resolveJustify(options) {
        let result = 0;
        if (options.align !== void 0) {
          if (typeof FIELD_JUSTIFY[options.align] === "number") {
            result = FIELD_JUSTIFY[options.align];
          }
          delete options.align;
        }
        if (result !== 0) {
          options.Q = result;
        }
        return options;
      },
      _resolveFont(options) {
        if (this._acroform.fonts[this._font.id] == null) {
          this._acroform.fonts[this._font.id] = this._font.ref();
        }
        if (this._acroform.defaultFont !== this._font.name) {
          options.DR = {
            Font: {}
          };
          const fontSize = options.fontSize || 0;
          options.DR.Font[this._font.id] = this._font.ref();
          options.DA = new String(`/${this._font.id} ${fontSize} Tf 0 g`);
        }
        return options;
      },
      _resolveStrings(options) {
        let select = [];
        function appendChoices(a) {
          if (Array.isArray(a)) {
            for (let idx = 0; idx < a.length; idx++) {
              if (typeof a[idx] === "string") {
                select.push(new String(a[idx]));
              } else {
                select.push(a[idx]);
              }
            }
          }
        }
        appendChoices(options.Opt);
        if (options.select) {
          appendChoices(options.select);
          delete options.select;
        }
        if (select.length) {
          options.Opt = select;
        }
        Object.keys(VALUE_MAP).forEach((key) => {
          if (options[key] !== void 0) {
            options[VALUE_MAP[key]] = options[key];
            delete options[key];
          }
        });
        ["V", "DV"].forEach((key) => {
          if (typeof options[key] === "string") {
            options[key] = new String(options[key]);
          }
        });
        if (options.MK && options.MK.CA) {
          options.MK.CA = new String(options.MK.CA);
        }
        if (options.label) {
          options.MK = options.MK ? options.MK : {};
          options.MK.CA = new String(options.label);
          delete options.label;
        }
        return options;
      }
    };
    var AttachmentsMixin = {
      file(src, options = {}) {
        options.name = options.name || src;
        options.relationship = options.relationship || "Unspecified";
        const refBody = {
          Type: "EmbeddedFile",
          Params: {}
        };
        let data;
        if (!src) {
          throw new Error("No src specified");
        }
        if (Buffer.isBuffer(src)) {
          data = src;
        } else if (src instanceof ArrayBuffer) {
          data = Buffer.from(new Uint8Array(src));
        } else {
          const match = /^data:(.*?);base64,(.*)$/.exec(src);
          if (match) {
            if (match[1]) {
              refBody.Subtype = match[1].replace("/", "#2F");
            }
            data = Buffer.from(match[2], "base64");
          } else {
            data = fs2.readFileSync(src);
            if (!data) {
              throw new Error(`Could not read contents of file at filepath ${src}`);
            }
            const {
              birthtime,
              ctime
            } = fs2.statSync(src);
            refBody.Params.CreationDate = birthtime;
            refBody.Params.ModDate = ctime;
          }
        }
        if (options.creationDate instanceof Date) {
          refBody.Params.CreationDate = options.creationDate;
        }
        if (options.modifiedDate instanceof Date) {
          refBody.Params.ModDate = options.modifiedDate;
        }
        if (options.type) {
          refBody.Subtype = options.type.replace("/", "#2F");
        }
        const checksum = CryptoJS.MD5(CryptoJS.lib.WordArray.create(new Uint8Array(data)));
        refBody.Params.CheckSum = new String(checksum);
        refBody.Params.Size = data.byteLength;
        let ref;
        if (!this._fileRegistry) this._fileRegistry = {};
        let file = this._fileRegistry[options.name];
        if (file && isEqual(refBody, file)) {
          ref = file.ref;
        } else {
          ref = this.ref(refBody);
          ref.end(data);
          this._fileRegistry[options.name] = {
            ...refBody,
            ref
          };
        }
        const fileSpecBody = {
          Type: "Filespec",
          AFRelationship: options.relationship,
          F: new String(options.name),
          EF: {
            F: ref
          },
          UF: new String(options.name)
        };
        if (options.description) {
          fileSpecBody.Desc = new String(options.description);
        }
        const filespec = this.ref(fileSpecBody);
        filespec.end();
        if (!options.hidden) {
          this.addNamedEmbeddedFile(options.name, filespec);
        }
        if (this._root.data.AF) {
          this._root.data.AF.push(filespec);
        } else {
          this._root.data.AF = [filespec];
        }
        return filespec;
      }
    };
    function isEqual(a, b) {
      return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate.getTime() === b.Params.CreationDate.getTime() && (a.Params.ModDate === void 0 && b.Params.ModDate === void 0 || a.Params.ModDate.getTime() === b.Params.ModDate.getTime());
    }
    var PDFA = {
      initPDFA(pSubset) {
        if (pSubset.charAt(pSubset.length - 3) === "-") {
          this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();
          this.subset = parseInt(pSubset.charAt(pSubset.length - 2));
        } else {
          this.subset_conformance = "B";
          this.subset = parseInt(pSubset.charAt(pSubset.length - 1));
        }
      },
      endSubset() {
        this._addPdfaMetadata();
        this._addColorOutputIntent();
      },
      _addColorOutputIntent() {
        const iccProfile = fs2.readFileSync(`${__dirname}/data/sRGB_IEC61966_2_1.icc`);
        const colorProfileRef = this.ref({
          Length: iccProfile.length,
          N: 3
        });
        colorProfileRef.write(iccProfile);
        colorProfileRef.end();
        const intentRef = this.ref({
          Type: "OutputIntent",
          S: "GTS_PDFA1",
          Info: new String("sRGB IEC61966-2.1"),
          OutputConditionIdentifier: new String("sRGB IEC61966-2.1"),
          DestOutputProfile: colorProfileRef
        });
        intentRef.end();
        this._root.data.OutputIntents = [intentRef];
      },
      _getPdfaid() {
        return `
        <rdf:Description xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" rdf:about="">
            <pdfaid:part>${this.subset}</pdfaid:part>
            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>
        </rdf:Description>
        `;
      },
      _addPdfaMetadata() {
        this.appendXML(this._getPdfaid());
      }
    };
    var PDFUA = {
      initPDFUA() {
        this.subset = 1;
      },
      endSubset() {
        this._addPdfuaMetadata();
      },
      _addPdfuaMetadata() {
        this.appendXML(this._getPdfuaid());
      },
      _getPdfuaid() {
        return `
        <rdf:Description xmlns:pdfuaid="http://www.aiim.org/pdfua/ns/id/" rdf:about="">
            <pdfuaid:part>${this.subset}</pdfuaid:part>
        </rdf:Description>
        `;
      }
    };
    var SubsetMixin = {
      _importSubset(subset) {
        Object.assign(this, subset);
      },
      initSubset(options) {
        switch (options.subset) {
          case "PDF/A-1":
          case "PDF/A-1a":
          case "PDF/A-1b":
          case "PDF/A-2":
          case "PDF/A-2a":
          case "PDF/A-2b":
          case "PDF/A-3":
          case "PDF/A-3a":
          case "PDF/A-3b":
            this._importSubset(PDFA);
            this.initPDFA(options.subset);
            break;
          case "PDF/UA":
            this._importSubset(PDFUA);
            this.initPDFUA();
            break;
        }
      }
    };
    var ROW_FIELDS = ["height", "minHeight", "maxHeight"];
    var COLUMN_FIELDS = ["width", "minWidth", "maxWidth"];
    function memoize(fn, maxSize) {
      const cache = /* @__PURE__ */ new Map();
      return function(...args) {
        const key = args[0];
        if (!cache.has(key)) {
          cache.set(key, fn(...args));
          if (cache.size > maxSize) cache.delete(cache.keys().next());
        }
        return cache.get(key);
      };
    }
    function isObject(item) {
      return item && typeof item === "object" && !Array.isArray(item);
    }
    function deepMerge(target, ...sources) {
      if (!isObject(target)) return target;
      target = deepClone(target);
      for (const source of sources) {
        if (isObject(source)) {
          for (const key in source) {
            if (isObject(source[key])) {
              if (!(key in target)) target[key] = {};
              target[key] = deepMerge(target[key], source[key]);
            } else if (source[key] !== void 0) {
              target[key] = deepClone(source[key]);
            }
          }
        }
      }
      return target;
    }
    function deepClone(obj) {
      let result = obj;
      if (obj && typeof obj == "object") {
        result = Array.isArray(obj) ? [] : {};
        for (const key in obj) result[key] = deepClone(obj[key]);
      }
      return result;
    }
    function normalizedDefaultStyle(defaultStyleInternal) {
      let defaultStyle = defaultStyleInternal;
      if (typeof defaultStyle !== "object") defaultStyle = {
        text: defaultStyle
      };
      const defaultRowStyle = Object.fromEntries(Object.entries(defaultStyle).filter(([k]) => ROW_FIELDS.includes(k)));
      const defaultColStyle = Object.fromEntries(Object.entries(defaultStyle).filter(([k]) => COLUMN_FIELDS.includes(k)));
      defaultStyle.padding = normalizeSides(defaultStyle.padding);
      defaultStyle.border = normalizeSides(defaultStyle.border);
      defaultStyle.borderColor = normalizeSides(defaultStyle.borderColor);
      defaultStyle.align = normalizeAlignment(defaultStyle.align);
      return {
        defaultStyle,
        defaultRowStyle,
        defaultColStyle
      };
    }
    function normalizedRowStyle(defaultRowStyle, rowStyleInternal, i2) {
      let rowStyle = rowStyleInternal(i2);
      if (rowStyle == null || typeof rowStyle !== "object") {
        rowStyle = {
          height: rowStyle
        };
      }
      rowStyle.padding = normalizeSides(rowStyle.padding);
      rowStyle.border = normalizeSides(rowStyle.border);
      rowStyle.borderColor = normalizeSides(rowStyle.borderColor);
      rowStyle.align = normalizeAlignment(rowStyle.align);
      rowStyle = deepMerge(defaultRowStyle, rowStyle);
      const document2 = this.document;
      const page = document2.page;
      const contentHeight = page.contentHeight;
      if (rowStyle.height == null || rowStyle.height === "auto") {
        rowStyle.height = "auto";
      } else {
        rowStyle.height = document2.sizeToPoint(rowStyle.height, 0, page, contentHeight);
      }
      rowStyle.minHeight = document2.sizeToPoint(rowStyle.minHeight, 0, page, contentHeight);
      rowStyle.maxHeight = document2.sizeToPoint(rowStyle.maxHeight, 0, page, contentHeight);
      return rowStyle;
    }
    function normalizedColumnStyle(defaultColStyle, colStyleInternal, i2) {
      let colStyle = colStyleInternal(i2);
      if (colStyle == null || typeof colStyle !== "object") {
        colStyle = {
          width: colStyle
        };
      }
      colStyle.padding = normalizeSides(colStyle.padding);
      colStyle.border = normalizeSides(colStyle.border);
      colStyle.borderColor = normalizeSides(colStyle.borderColor);
      colStyle.align = normalizeAlignment(colStyle.align);
      colStyle = deepMerge(defaultColStyle, colStyle);
      if (colStyle.width == null || colStyle.width === "*") {
        colStyle.width = "*";
      } else {
        colStyle.width = this.document.sizeToPoint(colStyle.width, 0, this.document.page, this._maxWidth);
      }
      colStyle.minWidth = this.document.sizeToPoint(colStyle.minWidth, 0, this.document.page, this._maxWidth);
      colStyle.maxWidth = this.document.sizeToPoint(colStyle.maxWidth, 0, this.document.page, this._maxWidth);
      return colStyle;
    }
    function normalizeAlignment(align) {
      return align == null || typeof align === "string" ? {
        x: align,
        y: align
      } : align;
    }
    function normalizeTable() {
      const doc = this.document;
      const opts = this.opts;
      let index = doc._tableIndex++;
      this._id = new String(opts.id ?? `table-${index}`);
      this._position = {
        x: doc.sizeToPoint(opts.position?.x, doc.x),
        y: doc.sizeToPoint(opts.position?.y, doc.y)
      };
      this._maxWidth = doc.sizeToPoint(opts.maxWidth, doc.page.width - doc.page.margins.right - this._position.x);
      const {
        defaultStyle,
        defaultColStyle,
        defaultRowStyle
      } = normalizedDefaultStyle(opts.defaultStyle);
      this._defaultStyle = defaultStyle;
      let colStyle;
      if (opts.columnStyles) {
        if (Array.isArray(opts.columnStyles)) {
          colStyle = (i2) => opts.columnStyles[i2];
        } else if (typeof opts.columnStyles === "function") {
          colStyle = memoize((i2) => opts.columnStyles(i2), Infinity);
        } else if (typeof opts.columnStyles === "object") {
          colStyle = () => opts.columnStyles;
        }
      }
      if (!colStyle) colStyle = () => ({});
      this._colStyle = normalizedColumnStyle.bind(this, defaultColStyle, colStyle);
      let rowStyle;
      if (opts.rowStyles) {
        if (Array.isArray(opts.rowStyles)) {
          rowStyle = (i2) => opts.rowStyles[i2];
        } else if (typeof opts.rowStyles === "function") {
          rowStyle = memoize((i2) => opts.rowStyles(i2), 10);
        } else if (typeof opts.rowStyles === "object") {
          rowStyle = () => opts.rowStyles;
        }
      }
      if (!rowStyle) rowStyle = () => ({});
      this._rowStyle = normalizedRowStyle.bind(this, defaultRowStyle, rowStyle);
    }
    function normalizeText(text) {
      if (text != null) text = `${text}`;
      return text;
    }
    function normalizeCell(cell, rowIndex, colIndex) {
      const colStyle = this._colStyle(colIndex);
      let rowStyle = this._rowStyle(rowIndex);
      const font = deepMerge({}, colStyle.font, rowStyle.font, cell.font);
      const customFont = Object.values(font).filter((v) => v != null).length > 0;
      const doc = this.document;
      const rollbackFont = doc._fontSource;
      const rollbackFontSize = doc._fontSize;
      const rollbackFontFamily = doc._fontFamily;
      if (customFont) {
        if (font.src) doc.font(font.src, font.family);
        if (font.size) doc.fontSize(font.size);
        rowStyle = this._rowStyle(rowIndex);
      }
      cell.padding = normalizeSides(cell.padding);
      cell.border = normalizeSides(cell.border);
      cell.borderColor = normalizeSides(cell.borderColor);
      const config = deepMerge(this._defaultStyle, colStyle, rowStyle, cell);
      config.rowIndex = rowIndex;
      config.colIndex = colIndex;
      config.font = font ?? {};
      config.customFont = customFont;
      config.text = normalizeText(config.text);
      config.rowSpan = config.rowSpan ?? 1;
      config.colSpan = config.colSpan ?? 1;
      config.padding = normalizeSides(config.padding, "0.25em", (x2) => doc.sizeToPoint(x2, "0.25em"));
      config.border = normalizeSides(config.border, 1, (x2) => doc.sizeToPoint(x2, 1));
      config.borderColor = normalizeSides(config.borderColor, "black", (x2) => x2 ?? "black");
      config.align = normalizeAlignment(config.align);
      config.align.x = config.align.x ?? "left";
      config.align.y = config.align.y ?? "top";
      config.textStroke = doc.sizeToPoint(config.textStroke, 0);
      config.textStrokeColor = config.textStrokeColor ?? "black";
      config.textColor = config.textColor ?? "black";
      config.textOptions = config.textOptions ?? {};
      config.id = new String(config.id ?? `${this._id}-${rowIndex}-${colIndex}`);
      config.type = config.type?.toUpperCase() === "TH" ? "TH" : "TD";
      if (config.scope) {
        config.scope = config.scope.toLowerCase();
        if (config.scope === "row") config.scope = "Row";
        else if (config.scope === "both") config.scope = "Both";
        else if (config.scope === "column") config.scope = "Column";
      }
      if (typeof this.opts.debug === "boolean") config.debug = this.opts.debug;
      if (customFont) doc.font(rollbackFont, rollbackFontFamily, rollbackFontSize);
      return config;
    }
    function normalizeRow(row, rowIndex) {
      if (!this._cellClaim) this._cellClaim = /* @__PURE__ */ new Set();
      let colIndex = 0;
      return row.map((cell) => {
        if (cell == null || typeof cell !== "object") cell = {
          text: cell
        };
        while (this._cellClaim.has(`${rowIndex},${colIndex}`)) {
          colIndex++;
        }
        cell = normalizeCell.call(this, cell, rowIndex, colIndex);
        for (let i2 = 0; i2 < cell.rowSpan; i2++) {
          for (let j = 0; j < cell.colSpan; j++) {
            this._cellClaim.add(`${rowIndex + i2},${colIndex + j}`);
          }
        }
        colIndex += cell.colSpan;
        return cell;
      });
    }
    function ensure(row) {
      this._columnWidths = [];
      ensureColumnWidths.call(this, row.reduce((a, cell) => a + cell.colSpan, 0));
      this._rowHeights = [];
      this._rowYPos = [this._position.y];
      this._rowBuffer = /* @__PURE__ */ new Set();
    }
    function ensureColumnWidths(numCols) {
      let starColumnIndexes = [];
      let starMinAcc = 0;
      let unclaimedWidth = this._maxWidth;
      for (let i2 = 0; i2 < numCols; i2++) {
        let col = this._colStyle(i2);
        if (col.width === "*") {
          starColumnIndexes[i2] = col;
          starMinAcc += col.minWidth;
        } else {
          unclaimedWidth -= col.width;
          this._columnWidths[i2] = col.width;
        }
      }
      let starColCount = starColumnIndexes.reduce((x2) => x2 + 1, 0);
      if (starMinAcc >= unclaimedWidth) {
        starColumnIndexes.forEach((cell, i2) => {
          this._columnWidths[i2] = cell.minWidth;
        });
      } else if (starColCount > 0) {
        starColumnIndexes.forEach((col, i2) => {
          let starSize = unclaimedWidth / starColCount;
          this._columnWidths[i2] = Math.max(starSize, col.minWidth);
          if (col.maxWidth > 0) {
            this._columnWidths[i2] = Math.min(this._columnWidths[i2], col.maxWidth);
          }
          unclaimedWidth -= this._columnWidths[i2];
          starColCount--;
        });
      }
      let tempX = this._position.x;
      this._columnXPos = Array.from(this._columnWidths, (v) => {
        const t2 = tempX;
        tempX += v;
        return t2;
      });
    }
    function measure(row, rowIndex) {
      row.forEach((cell) => this._rowBuffer.add(cell));
      if (rowIndex > 0) {
        this._rowYPos[rowIndex] = this._rowYPos[rowIndex - 1] + this._rowHeights[rowIndex - 1];
      }
      const rowStyle = this._rowStyle(rowIndex);
      let toRender = [];
      this._rowBuffer.forEach((cell) => {
        if (cell.rowIndex + cell.rowSpan - 1 === rowIndex) {
          toRender.push(measureCell.call(this, cell, rowStyle.height));
          this._rowBuffer.delete(cell);
        }
      });
      let rowHeight = rowStyle.height;
      if (rowHeight === "auto") {
        rowHeight = toRender.reduce((acc, cell) => {
          let minHeight = cell.textBounds.height + cell.padding.top + cell.padding.bottom;
          for (let i2 = 0; i2 < cell.rowSpan - 1; i2++) {
            minHeight -= this._rowHeights[cell.rowIndex + i2];
          }
          return Math.max(acc, minHeight);
        }, 0);
      }
      rowHeight = Math.max(rowHeight, rowStyle.minHeight);
      if (rowStyle.maxHeight > 0) {
        rowHeight = Math.min(rowHeight, rowStyle.maxHeight);
      }
      this._rowHeights[rowIndex] = rowHeight;
      let newPage = false;
      if (rowHeight > this.document.page.contentHeight) {
        console.warn(new Error(`Row ${rowIndex} requested more than the safe page height, row has been clamped`).stack.slice(7));
        this._rowHeights[rowIndex] = this.document.page.maxY() - this._rowYPos[rowIndex];
      } else if (this._rowYPos[rowIndex] + rowHeight >= this.document.page.maxY()) {
        this._rowYPos[rowIndex] = this.document.page.margins.top;
        newPage = true;
      }
      return {
        newPage,
        toRender: toRender.map((cell) => measureCell.call(this, cell, rowHeight))
      };
    }
    function measureCell(cell, rowHeight) {
      let cellWidth = 0;
      for (let i2 = 0; i2 < cell.colSpan; i2++) {
        cellWidth += this._columnWidths[cell.colIndex + i2];
      }
      let cellHeight = rowHeight;
      if (cellHeight === "auto") {
        cellHeight = this.document.page.contentHeight;
      } else {
        for (let i2 = 0; i2 < cell.rowSpan - 1; i2++) {
          cellHeight += this._rowHeights[cell.rowIndex + i2];
        }
      }
      const textAllocatedWidth = cellWidth - cell.padding.left - cell.padding.right;
      const textAllocatedHeight = cellHeight - cell.padding.top - cell.padding.bottom;
      const rotation = cell.textOptions.rotation ?? 0;
      const {
        width: textMaxWidth,
        height: textMaxHeight
      } = computeBounds(rotation, textAllocatedWidth, textAllocatedHeight);
      const textOptions = {
        align: cell.align.x,
        ellipsis: true,
        stroke: cell.textStroke > 0,
        fill: true,
        width: textMaxWidth,
        height: textMaxHeight,
        rotation,
        ...cell.textOptions
      };
      let textBounds = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      if (cell.text) {
        const rollbackFont = this.document._fontSource;
        const rollbackFontSize = this.document._fontSize;
        const rollbackFontFamily = this.document._fontFamily;
        if (cell.font?.src) this.document.font(cell.font.src, cell.font?.family);
        if (cell.font?.size) this.document.fontSize(cell.font.size);
        const unRotatedTextBounds = this.document.boundsOfString(cell.text, 0, 0, {
          ...textOptions,
          rotation: 0
        });
        textOptions.width = unRotatedTextBounds.width;
        textOptions.height = unRotatedTextBounds.height;
        textBounds = this.document.boundsOfString(cell.text, 0, 0, textOptions);
        this.document.font(rollbackFont, rollbackFontFamily, rollbackFontSize);
      }
      return {
        ...cell,
        textOptions,
        x: this._columnXPos[cell.colIndex],
        y: this._rowYPos[cell.rowIndex],
        textX: this._columnXPos[cell.colIndex] + cell.padding.left,
        textY: this._rowYPos[cell.rowIndex] + cell.padding.top,
        width: cellWidth,
        height: cellHeight,
        textAllocatedHeight,
        textAllocatedWidth,
        textBounds
      };
    }
    function computeBounds(rotation, allocWidth, allocHeight) {
      let textMaxWidth, textMaxHeight;
      const cos = cosine(rotation);
      const sin = sine(rotation);
      if (rotation === 0 || rotation === 180) {
        textMaxWidth = allocWidth;
        textMaxHeight = allocHeight;
      } else if (rotation === 90 || rotation === 270) {
        textMaxWidth = allocHeight;
        textMaxHeight = allocWidth;
      } else if (rotation < 90 || rotation > 180 && rotation < 270) {
        textMaxWidth = allocWidth / (2 * cos);
        textMaxHeight = allocWidth / (2 * sin);
      } else {
        textMaxHeight = allocWidth / (2 * cos);
        textMaxWidth = allocWidth / (2 * sin);
      }
      const EF = sin * textMaxWidth;
      const FG = cos * textMaxHeight;
      if (EF + FG > allocHeight) {
        const denominator = cos * cos - sin * sin;
        if (rotation === 0 || rotation === 180) {
          textMaxWidth = allocWidth;
          textMaxHeight = allocHeight;
        } else if (rotation === 90 || rotation === 270) {
          textMaxWidth = allocHeight;
          textMaxHeight = allocWidth;
        } else if (rotation < 90 || rotation > 180 && rotation < 270) {
          textMaxWidth = (allocWidth * cos - allocHeight * sin) / denominator;
          textMaxHeight = (allocHeight * cos - allocWidth * sin) / denominator;
        } else {
          textMaxHeight = (allocWidth * cos - allocHeight * sin) / denominator;
          textMaxWidth = (allocHeight * cos - allocWidth * sin) / denominator;
        }
      }
      return {
        width: Math.abs(textMaxWidth),
        height: Math.abs(textMaxHeight)
      };
    }
    function accommodateTable() {
      const structParent = this.opts.structParent;
      if (structParent) {
        this._tableStruct = this.document.struct("Table");
        this._tableStruct.dictionary.data.ID = this._id;
        if (structParent instanceof PDFStructureElement) {
          structParent.add(this._tableStruct);
        } else if (structParent instanceof PDFDocument2) {
          structParent.addStructure(this._tableStruct);
        }
        this._headerRowLookup = {};
        this._headerColumnLookup = {};
      }
    }
    function accommodateCleanup() {
      if (this._tableStruct) this._tableStruct.end();
    }
    function accessibleRow(row, rowIndex, renderCell2) {
      const rowStruct = this.document.struct("TR");
      rowStruct.dictionary.data.ID = new String(`${this._id}-${rowIndex}`);
      this._tableStruct.add(rowStruct);
      row.forEach((cell) => renderCell2(cell, rowStruct));
      rowStruct.end();
    }
    function accessibleCell(cell, rowStruct, callback) {
      const doc = this.document;
      const cellStruct = doc.struct(cell.type, {
        title: cell.title
      });
      cellStruct.dictionary.data.ID = cell.id;
      rowStruct.add(cellStruct);
      const padding = cell.padding;
      const border = cell.border;
      const attributes = {
        O: "Table",
        Width: cell.width,
        Height: cell.height,
        Padding: [padding.top, padding.bottom, padding.left, padding.right],
        RowSpan: cell.rowSpan > 1 ? cell.rowSpan : void 0,
        ColSpan: cell.colSpan > 1 ? cell.colSpan : void 0,
        BorderThickness: [border.top, border.bottom, border.left, border.right]
      };
      if (cell.type === "TH") {
        if (cell.scope === "Row" || cell.scope === "Both") {
          for (let i2 = 0; i2 < cell.rowSpan; i2++) {
            if (!this._headerRowLookup[cell.rowIndex + i2]) {
              this._headerRowLookup[cell.rowIndex + i2] = [];
            }
            this._headerRowLookup[cell.rowIndex + i2].push(cell.id);
          }
          attributes.Scope = cell.scope;
        }
        if (cell.scope === "Column" || cell.scope === "Both") {
          for (let i2 = 0; i2 < cell.colSpan; i2++) {
            if (!this._headerColumnLookup[cell.colIndex + i2]) {
              this._headerColumnLookup[cell.colIndex + i2] = [];
            }
            this._headerColumnLookup[cell.colIndex + i2].push(cell.id);
          }
          attributes.Scope = cell.scope;
        }
      }
      const Headers3 = new Set([...Array.from({
        length: cell.colSpan
      }, (_, i2) => this._headerColumnLookup[cell.colIndex + i2]).flat(), ...Array.from({
        length: cell.rowSpan
      }, (_, i2) => this._headerRowLookup[cell.rowIndex + i2]).flat()].filter(Boolean));
      if (Headers3.size) attributes.Headers = Array.from(Headers3);
      const normalizeColor = doc._normalizeColor;
      if (cell.backgroundColor != null) {
        attributes.BackgroundColor = normalizeColor(cell.backgroundColor);
      }
      const hasBorder = [border.top, border.bottom, border.left, border.right];
      if (hasBorder.some((x2) => x2)) {
        const borderColor = cell.borderColor;
        attributes.BorderColor = [hasBorder[0] ? normalizeColor(borderColor.top) : null, hasBorder[1] ? normalizeColor(borderColor.bottom) : null, hasBorder[2] ? normalizeColor(borderColor.left) : null, hasBorder[3] ? normalizeColor(borderColor.right) : null];
      }
      Object.keys(attributes).forEach((key) => attributes[key] === void 0 && delete attributes[key]);
      cellStruct.dictionary.data.A = doc.ref(attributes);
      cellStruct.add(callback);
      cellStruct.end();
      cellStruct.dictionary.data.A.end();
    }
    function renderRow(row, rowIndex) {
      if (this._tableStruct) {
        accessibleRow.call(this, row, rowIndex, renderCell.bind(this));
      } else {
        row.forEach((cell) => renderCell.call(this, cell));
      }
      return this._rowYPos[rowIndex] + this._rowHeights[rowIndex];
    }
    function renderCell(cell, rowStruct) {
      const cellRenderer = () => {
        if (cell.backgroundColor != null) {
          this.document.save().rect(cell.x, cell.y, cell.width, cell.height).fill(cell.backgroundColor).restore();
        }
        renderBorder.call(this, cell.border, cell.borderColor, cell.x, cell.y, cell.width, cell.height);
        if (cell.debug) {
          this.document.save();
          this.document.dash(1, {
            space: 1
          }).lineWidth(1).strokeOpacity(0.3);
          this.document.rect(cell.x, cell.y, cell.width, cell.height).stroke("green");
          this.document.restore();
        }
        if (cell.text) renderCellText.call(this, cell);
      };
      if (rowStruct) accessibleCell.call(this, cell, rowStruct, cellRenderer);
      else cellRenderer();
    }
    function renderCellText(cell) {
      const doc = this.document;
      const rollbackFont = doc._fontSource;
      const rollbackFontSize = doc._fontSize;
      const rollbackFontFamily = doc._fontFamily;
      if (cell.customFont) {
        if (cell.font.src) doc.font(cell.font.src, cell.font.family);
        if (cell.font.size) doc.fontSize(cell.font.size);
      }
      const x2 = cell.textX;
      const y = cell.textY;
      const Ah = cell.textAllocatedHeight;
      const Aw = cell.textAllocatedWidth;
      const Cw = cell.textBounds.width;
      const Ch = cell.textBounds.height;
      const Ox = -cell.textBounds.x;
      const Oy = -cell.textBounds.y;
      const PxScale = cell.align.x === "right" ? 1 : cell.align.x === "center" ? 0.5 : 0;
      const Px = (Aw - Cw) * PxScale;
      const PyScale = cell.align.y === "bottom" ? 1 : cell.align.y === "center" ? 0.5 : 0;
      const Py = (Ah - Ch) * PyScale;
      const dx = Px + Ox;
      const dy = Py + Oy;
      if (cell.debug) {
        doc.save();
        doc.dash(1, {
          space: 1
        }).lineWidth(1).strokeOpacity(0.3);
        if (cell.text) {
          doc.moveTo(x2 + Px, y).lineTo(x2 + Px, y + Ah).moveTo(x2 + Px + Cw, y).lineTo(x2 + Px + Cw, y + Ah).stroke("blue").moveTo(x2, y + Py).lineTo(x2 + Aw, y + Py).moveTo(x2, y + Py + Ch).lineTo(x2 + Aw, y + Py + Ch).stroke("green");
        }
        doc.rect(x2, y, Aw, Ah).stroke("orange");
        doc.restore();
      }
      doc.save().rect(x2, y, Aw, Ah).clip();
      doc.fillColor(cell.textColor).strokeColor(cell.textStrokeColor);
      if (cell.textStroke > 0) doc.lineWidth(cell.textStroke);
      doc.text(cell.text, x2 + dx, y + dy, cell.textOptions);
      doc.restore();
      if (cell.font) doc.font(rollbackFont, rollbackFontFamily, rollbackFontSize);
    }
    function renderBorder(border, borderColor, x2, y, width, height, mask) {
      border = Object.fromEntries(Object.entries(border).map(([k, v]) => [k, mask && !mask[k] ? 0 : v]));
      const doc = this.document;
      if ([border.right, border.bottom, border.left].every((val) => val === border.top)) {
        if (border.top > 0) {
          doc.save().lineWidth(border.top).rect(x2, y, width, height).stroke(borderColor.top).restore();
        }
      } else {
        if (border.top > 0) {
          doc.save().lineWidth(border.top).moveTo(x2, y).lineTo(x2 + width, y).stroke(borderColor.top).restore();
        }
        if (border.right > 0) {
          doc.save().lineWidth(border.right).moveTo(x2 + width, y).lineTo(x2 + width, y + height).stroke(borderColor.right).restore();
        }
        if (border.bottom > 0) {
          doc.save().lineWidth(border.bottom).moveTo(x2 + width, y + height).lineTo(x2, y + height).stroke(borderColor.bottom).restore();
        }
        if (border.left > 0) {
          doc.save().lineWidth(border.left).moveTo(x2, y + height).lineTo(x2, y).stroke(borderColor.left).restore();
        }
      }
    }
    var PDFTable = class {
      constructor(document2, opts = {}) {
        this.document = document2;
        this.opts = Object.freeze(opts);
        normalizeTable.call(this);
        accommodateTable.call(this);
        this._currRowIndex = 0;
        this._ended = false;
        if (opts.data) {
          for (const row of opts.data) this.row(row);
          return this.end();
        }
      }
      row(row, lastRow = false) {
        if (this._ended) {
          throw new Error(`Table was marked as ended on row ${this._currRowIndex}`);
        }
        row = Array.from(row);
        row = normalizeRow.call(this, row, this._currRowIndex);
        if (this._currRowIndex === 0) ensure.call(this, row);
        const {
          newPage,
          toRender
        } = measure.call(this, row, this._currRowIndex);
        if (newPage) this.document.continueOnNewPage();
        const yPos = renderRow.call(this, toRender, this._currRowIndex);
        this.document.x = this._position.x;
        this.document.y = yPos;
        if (lastRow) return this.end();
        this._currRowIndex++;
        return this;
      }
      end() {
        while (this._rowBuffer?.size) this.row([]);
        this._ended = true;
        accommodateCleanup.call(this);
        return this.document;
      }
    };
    var TableMixin = {
      initTables() {
        this._tableIndex = 0;
      },
      table(opts) {
        return new PDFTable(this, opts);
      }
    };
    var PDFMetadata = class {
      constructor() {
        this._metadata = `
        <?xpacket begin="\uFEFF" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;
      }
      _closeTags() {
        this._metadata = this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);
      }
      append(xml, newline = true) {
        this._metadata = this._metadata.concat(xml);
        if (newline) this._metadata = this._metadata.concat("\n");
      }
      getXML() {
        return this._metadata;
      }
      getLength() {
        return this._metadata.length;
      }
      end() {
        this._closeTags();
        this._metadata = this._metadata.trim();
      }
    };
    var MetadataMixin = {
      initMetadata() {
        this.metadata = new PDFMetadata();
      },
      appendXML(xml, newline = true) {
        this.metadata.append(xml, newline);
      },
      _addInfo() {
        this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split(".")[0] + "Z"}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `);
        if (this.info.Title || this.info.Author || this.info.Subject) {
          this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `);
          if (this.info.Title) {
            this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `);
          }
          if (this.info.Author) {
            this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `);
          }
          if (this.info.Subject) {
            this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `);
          }
          this.appendXML(`
            </rdf:Description>
            `);
        }
        this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, false);
        if (this.info.Keywords) {
          this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, false);
        }
        this.appendXML(`
        </rdf:Description>
        `);
      },
      endMetadata() {
        this._addInfo();
        this.metadata.end();
        if (this.version != 1.3) {
          this.metadataRef = this.ref({
            length: this.metadata.getLength(),
            Type: "Metadata",
            Subtype: "XML"
          });
          this.metadataRef.compress = false;
          this.metadataRef.write(Buffer.from(this.metadata.getXML(), "utf-8"));
          this.metadataRef.end();
          this._root.data.Metadata = this.metadataRef;
        }
      }
    };
    var PDFDocument2 = class extends stream.Readable {
      constructor(options = {}) {
        super(options);
        this.options = options;
        switch (options.pdfVersion) {
          case "1.4":
            this.version = 1.4;
            break;
          case "1.5":
            this.version = 1.5;
            break;
          case "1.6":
            this.version = 1.6;
            break;
          case "1.7":
          case "1.7ext3":
            this.version = 1.7;
            break;
          default:
            this.version = 1.3;
            break;
        }
        this.compress = this.options.compress != null ? this.options.compress : true;
        this._pageBuffer = [];
        this._pageBufferStart = 0;
        this._offsets = [];
        this._waiting = 0;
        this._ended = false;
        this._offset = 0;
        const Pages = this.ref({
          Type: "Pages",
          Count: 0,
          Kids: []
        });
        const Names = this.ref({
          Dests: new PDFNameTree()
        });
        this._root = this.ref({
          Type: "Catalog",
          Pages,
          Names
        });
        if (this.options.lang) {
          this._root.data.Lang = new String(this.options.lang);
        }
        this.page = null;
        this.initMetadata();
        this.initColor();
        this.initVector();
        this.initFonts(options.font);
        this.initText();
        this.initImages();
        this.initOutline();
        this.initMarkings(options);
        this.initTables();
        this.initSubset(options);
        this.info = {
          Producer: "PDFKit",
          Creator: "PDFKit",
          CreationDate: /* @__PURE__ */ new Date()
        };
        if (this.options.info) {
          for (let key in this.options.info) {
            const val = this.options.info[key];
            this.info[key] = val;
          }
        }
        if (this.options.displayTitle) {
          this._root.data.ViewerPreferences = this.ref({
            DisplayDocTitle: true
          });
        }
        this._id = PDFSecurity.generateFileID(this.info);
        this._security = PDFSecurity.create(this, options);
        this._write(`%PDF-${this.version}`);
        this._write("%\xFF\xFF\xFF\xFF");
        if (this.options.autoFirstPage !== false) {
          this.addPage();
        }
      }
      addPage(options) {
        if (options == null) {
          ({
            options
          } = this);
        }
        if (!this.options.bufferPages) {
          this.flushPages();
        }
        this.page = new PDFPage(this, options);
        this._pageBuffer.push(this.page);
        const pages = this._root.data.Pages.data;
        pages.Kids.push(this.page.dictionary);
        pages.Count++;
        this.x = this.page.margins.left;
        this.y = this.page.margins.top;
        this._ctm = [1, 0, 0, 1, 0, 0];
        this.transform(1, 0, 0, -1, 0, this.page.height);
        this.emit("pageAdded");
        return this;
      }
      continueOnNewPage(options) {
        const pageMarkings = this.endPageMarkings(this.page);
        this.addPage(options ?? this.page._options);
        this.initPageMarkings(pageMarkings);
        return this;
      }
      bufferedPageRange() {
        return {
          start: this._pageBufferStart,
          count: this._pageBuffer.length
        };
      }
      switchToPage(n) {
        let page;
        if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
          throw new Error(`switchToPage(${n}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);
        }
        return this.page = page;
      }
      flushPages() {
        const pages = this._pageBuffer;
        this._pageBuffer = [];
        this._pageBufferStart += pages.length;
        for (let page of pages) {
          this.endPageMarkings(page);
          page.end();
        }
      }
      addNamedDestination(name, ...args) {
        if (args.length === 0) {
          args = ["XYZ", null, null, null];
        }
        if (args[0] === "XYZ" && args[2] !== null) {
          args[2] = this.page.height - args[2];
        }
        args.unshift(this.page.dictionary);
        this._root.data.Names.data.Dests.add(name, args);
      }
      addNamedEmbeddedFile(name, ref) {
        if (!this._root.data.Names.data.EmbeddedFiles) {
          this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
            limits: false
          });
        }
        this._root.data.Names.data.EmbeddedFiles.add(name, ref);
      }
      addNamedJavaScript(name, js) {
        if (!this._root.data.Names.data.JavaScript) {
          this._root.data.Names.data.JavaScript = new PDFNameTree();
        }
        let data = {
          JS: new String(js),
          S: "JavaScript"
        };
        this._root.data.Names.data.JavaScript.add(name, data);
      }
      ref(data) {
        const ref = new PDFReference(this, this._offsets.length + 1, data);
        this._offsets.push(null);
        this._waiting++;
        return ref;
      }
      _read() {
      }
      _write(data) {
        if (!Buffer.isBuffer(data)) {
          data = Buffer.from(data + "\n", "binary");
        }
        this.push(data);
        this._offset += data.length;
      }
      addContent(data) {
        this.page.write(data);
        return this;
      }
      _refEnd(ref) {
        this._offsets[ref.id - 1] = ref.offset;
        if (--this._waiting === 0 && this._ended) {
          this._finalize();
          this._ended = false;
        }
      }
      end() {
        this.flushPages();
        this._info = this.ref();
        for (let key in this.info) {
          let val = this.info[key];
          if (typeof val === "string") {
            val = new String(val);
          }
          let entry = this.ref(val);
          entry.end();
          this._info.data[key] = entry;
        }
        this._info.end();
        for (let name in this._fontFamilies) {
          const font = this._fontFamilies[name];
          font.finalize();
        }
        this.endOutline();
        this.endMarkings();
        if (this.subset) {
          this.endSubset();
        }
        this.endMetadata();
        this._root.end();
        this._root.data.Pages.end();
        this._root.data.Names.end();
        this.endAcroForm();
        if (this._root.data.ViewerPreferences) {
          this._root.data.ViewerPreferences.end();
        }
        if (this._security) {
          this._security.end();
        }
        if (this._waiting === 0) {
          this._finalize();
        } else {
          this._ended = true;
        }
      }
      _finalize() {
        const xRefOffset = this._offset;
        this._write("xref");
        this._write(`0 ${this._offsets.length + 1}`);
        this._write("0000000000 65535 f ");
        for (let offset of this._offsets) {
          offset = `0000000000${offset}`.slice(-10);
          this._write(offset + " 00000 n ");
        }
        const trailer = {
          Size: this._offsets.length + 1,
          Root: this._root,
          Info: this._info,
          ID: [this._id, this._id]
        };
        if (this._security) {
          trailer.Encrypt = this._security.dictionary;
        }
        this._write("trailer");
        this._write(PDFObject.convert(trailer));
        this._write("startxref");
        this._write(`${xRefOffset}`);
        this._write("%%EOF");
        this.push(null);
      }
      toString() {
        return "[object PDFDocument]";
      }
    };
    var mixin = (methods) => {
      Object.assign(PDFDocument2.prototype, methods);
    };
    mixin(MetadataMixin);
    mixin(ColorMixin);
    mixin(VectorMixin);
    mixin(FontsMixin);
    mixin(TextMixin);
    mixin(ImagesMixin);
    mixin(AnnotationsMixin);
    mixin(OutlineMixin);
    mixin(MarkingsMixin);
    mixin(AcroFormMixin);
    mixin(AttachmentsMixin);
    mixin(SubsetMixin);
    mixin(TableMixin);
    PDFDocument2.LineWrapper = LineWrapper;
    module2.exports = PDFDocument2;
  }
});

// ../backend/routes/admin/generateReceipt.js
var generateReceipt_exports = {};
__export(generateReceipt_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(generateReceipt_exports);

// ../backend/models/User.js
var import_client_dynamodb = require("@aws-sdk/client-dynamodb");
var import_lib_dynamodb = require("@aws-sdk/lib-dynamodb");
var import_bcryptjs = __toESM(require_bcryptjs(), 1);
var import_jsonwebtoken = __toESM(require_jsonwebtoken(), 1);
var import_google_auth_library = __toESM(require_src6(), 1);
var REGION = process.env.AWS_REGION || "us-east-1";
var TABLE = process.env.USER_TABLE_NAME || "User";
if (!TABLE) {
  throw new Error("USER_TABLE_NAME env var is required");
}
var client = new import_client_dynamodb.DynamoDBClient({ region: REGION });
var ddb = import_lib_dynamodb.DynamoDBDocumentClient.from(client);
var JWT_SECRET = process.env.JWT_SECRET || "secretKey";
var GOOGLE_CLIENT_ID = "322821846367-514od8575kmib97gji4q88ntskndmo9b.apps.googleusercontent.com";
var googleClient = new import_google_auth_library.OAuth2Client(GOOGLE_CLIENT_ID);
var getUserById = async (userId) => {
  const res = await ddb.send(
    new import_lib_dynamodb.GetCommand({ TableName: TABLE, Key: { id: userId } })
  );
  return res.Item || null;
};

// ../backend/utils/pdfReceipt.js
var import_pdfkit = __toESM(require_pdfkit(), 1);
async function generateAndUploadReceipt(receiptData) {
  const pdf = await createPdfReceipt(receiptData);
  const s3 = new S3Client();
  await s3.send(new PutObjectCommand({
    Bucket: process.env.RECEIPTS_BUCKET,
    Key: `receipts/${receiptData.id}.pdf`,
    Body: pdf,
    ContentType: "application/pdf"
  }));
  return `s3://${process.env.RECEIPTS_BUCKET}/receipts/${receiptData.id}.pdf`;
}

// ../backend/routes/admin/generateReceipt.js
var handler = async (event) => {
  try {
    const userId = event.pathParameters?.id;
    if (!userId) return { statusCode: 400, body: JSON.stringify({ error: "user id required" }) };
    const user = await getUserById(userId);
    if (!user) return { statusCode: 404, body: JSON.stringify({ message: "User not found" }) };
    if (typeof generateAndUploadReceipt === "function") {
      const url = await generateAndUploadReceipt(userId);
      return { statusCode: 200, body: JSON.stringify({ url }) };
    }
    const buffer = await generateReceiptBuffer(user);
    const b64 = buffer.toString("base64");
    return {
      statusCode: 200,
      isBase64Encoded: true,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="receipt_${userId}.pdf"`
      },
      body: b64
    };
  } catch (err) {
    console.error("generateReceipt error:", err);
    return { statusCode: 500, body: JSON.stringify({ message: "Failed to generate receipt", details: err.message }) };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
/*! Bundled license information:

bcryptjs/dist/bcrypt.js:
  (**
   * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/bcrypt.js for details
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

web-streams-polyfill/dist/ponyfill.es2018.js:
  (**
   * @license
   * web-streams-polyfill v3.3.3
   * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
   * This code is released under the MIT license.
   * SPDX-License-Identifier: MIT
   *)

fetch-blob/index.js:
  (*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

formdata-polyfill/esm.min.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

node-domexception/index.js:
  (*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

gtoken/build/cjs/src/index.cjs:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/
